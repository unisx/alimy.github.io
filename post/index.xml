<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 北 野</title>
    <link>http://alimy.me/post/</link>
    <description>Recent content in Posts on 北 野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Sat, 21 Sep 2019 16:30:00 +0800</lastBuildDate>
    
	<atom:link href="http://alimy.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cap&#39;n Proto Encoding Spec</title>
      <link>http://alimy.me/post/dev_201909211630/</link>
      <pubDate>Sat, 21 Sep 2019 16:30:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211630/</guid>
      <description>&lt;h3 id=&#34;sect-organization&#34;&gt;&amp;sect;Organization&lt;/h3&gt;

&lt;h4 id=&#34;64-bit-words&#34;&gt;64-bit Words&lt;/h4&gt;

&lt;p&gt;For the purpose of Cap’n Proto, a “word” is defined as 8 bytes, or 64 bits. Since alignment of data is important, all objects (structs, lists, and blobs) are aligned to word boundaries, and sizes are usually expressed in terms of words. (Primitive values are aligned to a multiple of their size within a struct or list.)&lt;/p&gt;

&lt;h4 id=&#34;messages&#34;&gt;Messages&lt;/h4&gt;

&lt;p&gt;The unit of communication in Cap’n Proto is a “message”. A message is a tree of objects, with the root always being a struct.&lt;/p&gt;

&lt;p&gt;Physically, messages may be split into several “segments”, each of which is a flat blob of bytes. Typically, a segment must be loaded into a contiguous block of memory before it can be accessed, so that the relative pointers within the segment can be followed quickly. However, when a message has multiple segments, it does not matter where those segments are located in memory relative to each other; inter-segment pointers are encoded differently, as we’ll see later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tars语言与协议</title>
      <link>http://alimy.me/post/dev_201909211556/</link>
      <pubDate>Sat, 21 Sep 2019 15:56:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211556/</guid>
      <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#main-chapter-1&#34;&gt;Tars语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#main-chapter-2&#34;&gt;Tars协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-tars语言-a-id-main-chapter-1-a&#34;&gt;1. Tars语言 &lt;a id=&#34;main-chapter-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-接口文件&#34;&gt;1.1. 接口文件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tars语言是一种类c++标识符的语言，用于生成具体的服务接口文件&lt;/li&gt;
&lt;li&gt;Tars文件是Tars框架中客户端和服务端的通信接口，通过Tars的映射实现远程对象调用&lt;/li&gt;
&lt;li&gt;Tars文件的扩展名必须以.tars为扩展名&lt;/li&gt;
&lt;li&gt;对于结构定义，可以支持扩展字段，即可以增加字段而不影响原有结构的解析，可以在存储/协议等地方单独使用&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffers Version 3 Language Specification</title>
      <link>http://alimy.me/post/dev_201909211536/</link>
      <pubDate>Sat, 21 Sep 2019 15:36:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211536/</guid>
      <description>&lt;p&gt;This is a language specification reference for version 3 of the Protocol Buffers language (proto3). The syntax is specified using Extended &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form&#34; title=&#34;EBNF in WIKI&#34;&gt;Backus-Naur Form (EBNF)&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (zero or one time)
{}  repetition (any number of times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using proto3, see the language guide.&lt;/p&gt;

&lt;h3 id=&#34;lexical-elements&#34;&gt;Lexical elements&lt;/h3&gt;

&lt;h4 id=&#34;letters-and-digits&#34;&gt;Letters and digits&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;letter = &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;z&amp;quot;
decimalDigit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot;
octalDigit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot;
hexDigit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffers Version 2 Language Specification</title>
      <link>http://alimy.me/post/dev_201909211516/</link>
      <pubDate>Sat, 21 Sep 2019 15:16:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211516/</guid>
      <description>&lt;p&gt;This is a language specification reference for version 2 of the Protocol Buffers language (proto2). The syntax is specified using Extended &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form&#34; title=&#34;EBNF in WIKI&#34;&gt;Backus-Naur Form (EBNF)&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (zero or one time)
{}  repetition (any number of times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using proto2, see the language guide.&lt;/p&gt;

&lt;h3 id=&#34;lexical-elements&#34;&gt;Lexical elements&lt;/h3&gt;

&lt;h4 id=&#34;letters-and-digits&#34;&gt;Letters and digits&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;letter = &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;z&amp;quot;
capitalLetter =  &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot;
decimalDigit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot;
octalDigit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot;
hexDigit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Cap&#39;n Proto Schema Language</title>
      <link>http://alimy.me/post/dev_201909211159/</link>
      <pubDate>Sat, 21 Sep 2019 11:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211159/</guid>
      <description>&lt;h2 id=&#34;schema-language&#34;&gt;Schema Language&lt;/h2&gt;

&lt;p&gt;Like Protocol Buffers and Thrift (but unlike JSON or MessagePack), Cap’n Proto messages are strongly-typed and not self-describing. You must define your message structure in a special language, then invoke the Cap’n Proto compiler (&lt;code&gt;capnp compile&lt;/code&gt;) to generate source code to manipulate that message type in your desired language.&lt;/p&gt;

&lt;h4 id=&#34;for-example&#34;&gt;For example:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@0xdbb9ad1f14bf0b36;  # unique file ID, generated by `capnp id`

struct Person {
  name @0 :Text;
  birthdate @3 :Date;

  email @1 :Text;
  phones @2 :List(PhoneNumber);

  struct PhoneNumber {
    number @0 :Text;
    type @1 :Type;

    enum Type {
      mobile @0;
      home @1;
      work @2;
    }
  }
}

struct Date {
  year @0 :Int16;
  month @1 :UInt8;
  day @2 :UInt8;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tus Resumable Upload Protocol</title>
      <link>http://alimy.me/post/dev_201904141055/</link>
      <pubDate>Sun, 14 Apr 2019 10:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201904141055/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt; 1.0.0 (&lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;)&lt;br&gt;
&lt;strong&gt;Date:&lt;/strong&gt; 2016-03-25&lt;br&gt;
&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/felixge&#34;&gt;Felix Geisendörfer&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/kvz&#34;&gt;Kevin van
Zonneveld&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/tim_kos&#34;&gt;Tim Koschützki&lt;/a&gt;,
&lt;a href=&#34;https://github.com/vayam&#34;&gt;Naren Venkataraman&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Acconut_&#34;&gt;Marius
Kleidl&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Collaborators&lt;/strong&gt;:
&lt;a href=&#34;https://github.com/biasedbit&#34;&gt;Bruno de Carvalho&lt;/a&gt;,
&lt;a href=&#34;https://github.com/sandfox&#34;&gt;James Butler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/cybic&#34;&gt;Øystein Steimler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/srijs&#34;&gt;Sam Rijs&lt;/a&gt;,
&lt;a href=&#34;https://github.com/khangtoh&#34;&gt;Khang Toh&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Amodio&#34;&gt;Jacques Boscq&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jerefrer&#34;&gt;Jérémy FRERE&lt;/a&gt;,
&lt;a href=&#34;https://github.com/hintjens&#34;&gt;Pieter Hintjens&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ehd&#34;&gt;Stephan Seidt&lt;/a&gt;,
&lt;a href=&#34;https://github.com/aranw&#34;&gt;Aran Wilkinson&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Baughn&#34;&gt;Svein Ove Aas&lt;/a&gt;,
&lt;a href=&#34;https://github.com/noptic&#34;&gt;Oliver Anan&lt;/a&gt;,
&lt;a href=&#34;https://github.com/schmerg&#34;&gt;Tim&lt;/a&gt;,
&lt;a href=&#34;https://github.com/j4james&#34;&gt;j4james&lt;/a&gt;,
&lt;a href=&#34;https://github.com/reschke&#34;&gt;Julian Reschke&lt;/a&gt;,
&lt;a href=&#34;https://github.com/evert&#34;&gt;Evert Pot&lt;/a&gt;,
&lt;a href=&#34;https://github.com/homeworkprod&#34;&gt;Jochen Kupperschmidt&lt;/a&gt;,
&lt;a href=&#34;https://github.com/andrewfenn&#34;&gt;Andrew Fenn&lt;/a&gt;,
&lt;a href=&#34;https://github.com/kevinswiber&#34;&gt;Kevin Swiber&lt;/a&gt;,
&lt;a href=&#34;https://github.com/0x20h&#34;&gt;Jan Kohlhof&lt;/a&gt;,
&lt;a href=&#34;https://github.com/radiospiel&#34;&gt;eno&lt;/a&gt;,
&lt;a href=&#34;https://github.com/luk-&#34;&gt;Luke Arduini&lt;/a&gt;,
&lt;a href=&#34;https://github.com/sheeep&#34;&gt;Jim Schmid&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jf&#34;&gt;Jeffrey &amp;lsquo;jf&amp;rsquo; Lim&lt;/a&gt;,
&lt;a href=&#34;https://github.com/timemachine3030&#34;&gt;Daniel Lopretto&lt;/a&gt;,
&lt;a href=&#34;https://github.com/MarkMurphy&#34;&gt;Mark Murphy&lt;/a&gt;,
&lt;a href=&#34;https://github.com/pmdarrow&#34;&gt;Peter Darrow&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Gargaj&#34;&gt;Gargaj&lt;/a&gt;,
&lt;a href=&#34;https://github.com/qsorix&#34;&gt;Tomasz Rydzyński&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tino&#34;&gt;Tino de Bruijn&lt;/a&gt;,
&lt;a href=&#34;https://github.com/kless&#34;&gt;Jonas mg&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ChristianUlbrich&#34;&gt;Christian Ulbrich&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jonhoo&#34;&gt;Jon Gjengset&lt;/a&gt;,
&lt;a href=&#34;https://github.com/wronglink&#34;&gt;Michael Elovskikh&lt;/a&gt;,
&lt;a href=&#34;https://github.com/technoweenie&#34;&gt;Rick Olson&lt;/a&gt;,
&lt;a href=&#34;https://convolv.es&#34;&gt;J. Ryan Stinnett&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ifedapoolarewaju&#34;&gt;Ifedapo Olarewaju&lt;/a&gt;
&lt;a href=&#34;https://github.com/ronag&#34;&gt;Robert Nagy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;,
&amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be
interpreted as described in &lt;a href=&#34;http://www.ietf.org/rfc/rfc2119.txt&#34;&gt;RFC 2119&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;

&lt;p&gt;Following &lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;, as of 1.0.0 tus is ready for general
adoption. We don&amp;rsquo;t expect to make breaking changes, but if we do, those will
have to be in a 2.0.0. Introducing a new extension or any backwards-compatible
change adding new functionality will result in a bumped MINOR version.&lt;/p&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;This protocol is authored and owned by the tus community. We welcome patches
and feedback via
&lt;a href=&#34;https://github.com/tus/tus-resumable-upload-protocol&#34;&gt;GitHub&lt;/a&gt;. All authors and
collaborators will be listed as such in the protocol header.&lt;/p&gt;

&lt;p&gt;Please also &lt;a href=&#34;https://github.com/tus/tus.io/issues/new&#34;&gt;let us know&lt;/a&gt; about any
implementations (open source or commercial) if you&amp;rsquo;d like to be listed on the
&lt;a href=&#34;https://www.tus.io/implementations.html&#34;&gt;implementations&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;The protocol provides a mechanism for resumable file uploads via HTTP/1.1 (&lt;a href=&#34;https://tools.ietf.org/html/rfc7230&#34;&gt;RFC
7230&lt;/a&gt;) and HTTP/2 (&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;RFC
7540&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>熊猫人</title>
      <link>http://alimy.me/post/art_201903151200/</link>
      <pubDate>Fri, 15 Mar 2019 12:00:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/art_201903151200/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20190315120000.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20190315120000.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Toyota GT86</title>
      <link>http://alimy.me/post/art_201903101706/</link>
      <pubDate>Sun, 10 Mar 2019 17:06:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/art_201903101706/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20190310170600.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20190310170600.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>http://alimy.me/post/dev_201901101804/</link>
      <pubDate>Thu, 10 Jan 2019 18:04:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201901101804/</guid>
      <description>&lt;h4 id=&#34;version-3-0-2&#34;&gt;Version 3.0.2&lt;/h4&gt;

&lt;p&gt;The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;NOT RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be interpreted as described in &lt;a href=&#34;https://tools.ietf.org/html/bcp14&#34;&gt;BCP 14&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc2119&#34;&gt;RFC2119&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc8174&#34;&gt;RFC8174&lt;/a&gt; when, and only when, they appear in all capitals, as shown here.&lt;/p&gt;

&lt;p&gt;This document is licensed under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;The Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.&lt;/p&gt;

&lt;p&gt;An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAML 简明参考</title>
      <link>http://alimy.me/post/dev_201901091450/</link>
      <pubDate>Wed, 09 Jan 2019 14:50:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201901091450/</guid>
      <description>&lt;h3 id=&#34;sect-语法说明&#34;&gt;&amp;sect;语法说明&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&#34;https://yaml.org&#34;&gt;yaml.org（英文）&lt;/a&gt;可以找到轻巧而好用的&lt;a href=&#34;https://yaml.org/refcard.html&#34;&gt;小抄（亦是用YAML表示）&lt;/a&gt;及&lt;a href=&#34;https://yaml.org/spec/&#34;&gt;格式说明&lt;/a&gt;。下面的内容，是关于基本组件的摘要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YAML使用可打印的Unicode字符，可使用UTF-8或UTF-16。&lt;/li&gt;
&lt;li&gt;使用空白字符为文件缩进来表示结构；不过不能使用跳格字符(TAB)。&lt;/li&gt;
&lt;li&gt;注解由井字号（ # ）开始，可以出现在一行中的任何位置，而且范围只有一行（也就是一般所谓的单行注解）&lt;/li&gt;
&lt;li&gt;每个清单成员以单行表示，并用短杠+空白（ -   ）起始。或使用方括号（ [ ] ），并用逗号+空白（ ,   ）分开成员。&lt;/li&gt;
&lt;li&gt;每个散列表的成员用冒号+空白（ :   ）分开键值和内容。或使用大括号（ {   } ），并用逗号+空白（ ,   ）分开。

&lt;ul&gt;
&lt;li&gt;散列表的键值可以用问号 ( ? )起始，用来明确的表示多个词汇组成的键值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符串平常并不使用引号，但必要的时候可以用双引号 ( &amp;ldquo; )或单引号 ( &amp;lsquo; )框住。

&lt;ul&gt;
&lt;li&gt;使用双引号表示字符串时，可用倒斜线（ \ ）开始的转义字符（这跟C语言类似）表示特殊字符。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;区块的字符串用缩进和修饰符（非必要）来和其他数据分隔，有新行保留（preserve）（使用符号 | ）或新行折叠（flod）（使用符号 &amp;gt; ）两种方式。&lt;/li&gt;
&lt;li&gt;在单一文件中，可用连续三个连字号（&amp;mdash;）区分多个文件。

&lt;ul&gt;
&lt;li&gt;另外，还有选择性的连续三个点号（ &amp;hellip; ）用来表示文件结尾。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重复的内容可使从参考标记星号 ( * )复制到锚点标记（ &amp;amp; ）。&lt;/li&gt;
&lt;li&gt;指定格式可以使用两个惊叹号 ( !! )，后面接上名称。&lt;/li&gt;
&lt;li&gt;文件中的单一文件可以使用指导指令，使用方法是百分比符号( % )。有两个指导指令在YAML1.1版中被定义：

&lt;ul&gt;
&lt;li&gt;%YAML 指导指令，用来识别文件的YAML版本。&lt;/li&gt;
&lt;li&gt;%TAG 指导指令，被用在URI的前缀标记。这个方法在标记节点的类型时相当有用。
YAML在使用逗号及冒号时，后面都必须接一个空白字符，所以可以在字符串或数值中自由加入分隔符号( 例如：5,280 或 &lt;a href=&#34;http://www.wikipedia.org&#34;&gt;http://www.wikipedia.org&lt;/a&gt; ) 而不需要使用引号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有两个特殊符号在YAML中被保留，有可能在未来的版本被使用&amp;ndash;（ @ ）和（ ` ）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FAQs: ssh</title>
      <link>http://alimy.me/post/dev_201811252059/</link>
      <pubDate>Sun, 25 Nov 2018 20:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201811252059/</guid>
      <description>&lt;h4 id=&#34;sect-解决ssh登录后闲置时间过长而断开连接&#34;&gt;&amp;sect;解决ssh登录后闲置时间过长而断开连接&lt;/h4&gt;

&lt;p&gt;通过终端连接服务器时，当鼠标和键盘长时间不操作，服务器就会自动断开连接，解决此问题的方法如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一、
修改/etc/ssh/sshd_config配置文件，找到ClientAliveCountMax（单位为分钟）修改你想要的值，
执行service sshd reload&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法二、
找到所在用户的.ssh目录,如root用户该目录在：/root/.ssh/
在该目录创建config文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /root/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加入下面一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerAliveInterval 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，重新开启root用户的shell，则ssh远程服务器的时候，
不会因为长时间操作断开。应该是加入这句之后，ssh客户端会每隔一
段时间自动与ssh服务器通信一次，所以长时间操作不会断开。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法三、
修改/etc/profile配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增加：TMOUT=1800
这样30分钟没操作就自动LOGOUT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sshuttle：不需配置的 VPN</title>
      <link>http://alimy.me/post/dev_201811250757/</link>
      <pubDate>Sun, 25 Nov 2018 07:57:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201811250757/</guid>
      <description>&lt;p&gt;sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle，按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。&lt;/p&gt;

&lt;p&gt;sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sshuttle/sshuttle
$ cd sshuttle
$ sudo ./setup.py install
$ sshuttle -r username@sshserver 0.0.0.0/0 -vv
Starting sshuttle proxy.
[local sudo] Password: 
firewall manager: Starting firewall with Python version 2.7.15
firewall manager: ready method name nat.
IPv6 enabled: False
UDP enabled: False
DNS enabled: False
User enabled: False
Binding redirector: 12300 12299
TCP redirector listening on (&#39;127.0.0.1&#39;, 12299).
TCP redirector listening with &amp;lt;socket._socketobject object at 0x7f5eb68b1c90&amp;gt;.
Starting client with Python version 2.7.15
c : connecting to server...
...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AppArmor的前世今生和基本使用</title>
      <link>http://alimy.me/post/dev_201811171435/</link>
      <pubDate>Sat, 17 Nov 2018 14:35:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201811171435/</guid>
      <description>&lt;h4 id=&#34;一-mac和dac-一些前置知识&#34;&gt;一：MAC和DAC (一些前置知识)&lt;/h4&gt;

&lt;p&gt;DAC(Discretionary Access Control)，自主访问控制，是最常用的一类访问控制机制，意思为主体（文件所有者）可以自主指定系统中其它用户对其文件的所有权，最典型的就是Linux的&amp;rdquo;拥有者/同组用户/其他&amp;rdquo;。这种方式虽然为用户提供了很大的灵活性，但是缺乏必要的安全性&lt;/p&gt;

&lt;p&gt;MAC(Mandatory Access Control)，强制访问控制,在这种机制下，系统中的每一个进程，每一个文件，每一个IPC主体都被管理员按照严格的规则设置了相应的安全属性，不能被用户和其它直接或间接的修改。&lt;/p&gt;

&lt;h4 id=&#34;二-apparmor-https-gitlab-com-apparmor-apparmor-apparmor-in-gitlab&#34;&gt;二：&lt;a href=&#34;https://gitlab.com/apparmor/apparmor&#34; title=&#34;AppArmor in GitLab&#34;&gt;AppArmor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由于SELinux使用复杂，适用于对安全要求特别高的企业或者组织，为了简化操作，就推出了AppArmor，所以可以说AppArmor脱胎于SELinux，但与SELinux基于角色的MAC不同的是，AppArmor是与程序绑定的基于路径的MAC，也就是说如果路径发生改变，策略就会失效。一般的Linux的系统，都会内置以上两种MAC其中的一种，这也意味着，你需要对文件（其它）进行操作，你需要同时通过DAC和 MAC的检测。&lt;/p&gt;

&lt;p&gt;AppArmor有两种工作模式：enforcement、complain/learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enforcement – 在这种模式下，配置文件里列出的限制条件都会得到执行，并且对于违反这些限制条件的程序会进行日志记录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Complain – 在这种模式下，配置文件里的限制条件不会得到执行，AppArmor只是对程序的行为进行记录。例如程序可以写一个在配置文件里注明只读的文件，但AppArmor不会对程序的行为进行限制，只是进行记录。这种模式也叫学习模式，如果某个程序的行为不符合其配置文件的限制，可以将其行为记录到系统日志，并且可以根据程序的行为，将日志转换成配置文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AppArmor可以对程序进行多方面的限制，详细可以看官方文档，这里只提供几个基本的例子：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文件系统的访问控制   例：  /home/Desktop/a.c rw 表示程序可以对/home/Desktop/a.c 进行读和写。&lt;/li&gt;
&lt;li&gt;资源限制   例： set rlimit as&amp;lt;=1M ，表示该程序可以使用的虚拟内存小于等于1M&lt;/li&gt;
&lt;li&gt;访问网络   例： network inet tcp ,表示该程序可以在IPV4的情况下使用TCP协议 　&lt;/li&gt;
&lt;li&gt;capability条目 例：capability setgid，表示程序进行setgid操作。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Athens:香港服务器Docker部署</title>
      <link>http://alimy.me/post/dev_201811111946/</link>
      <pubDate>Sun, 11 Nov 2018 19:46:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201811111946/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;go1.11开始加入module功能支持GOPROXY，解决go依赖包下载问题(你懂的！),Athens应运而生。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gomods.io/&#34; title=&#34;Athens&#34;&gt;官网介绍&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Athens is a project building on top of vgo (or go1.11+) trying to bring dependencies closer to you so you can count on repeatable builds even at a time when VCS is down.&lt;/p&gt;

&lt;p&gt;The big goal of Athens is to provide a new place where dependencies — not code — live. Dependencies are immutable blobs of code and associated metadata that come from Github. They live in storage that Athens controls.&lt;/p&gt;

&lt;h4 id=&#34;docker部署&#34;&gt;Docker部署&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像&lt;a href=&#34;https://hub.docker.com/r/gomods/proxy/&#34; title=&#34;Athens&#39;s docker image&#34;&gt;gomods/proxy:latest&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker volume create data-athens
$ docker run -d --name athens-proxy --restart always -p 3000:3000 \
    -v data-athens:/var/lib/athens \
    -e ATHENS_DISK_STORAGE_ROOT=/var/lib/athens \ 
    -e ATHENS_STORAGE_TYPE=disk \
    gomods/proxy:latest
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Hello, Rustacean</title>
      <link>http://alimy.me/post/day_2018090119142/</link>
      <pubDate>Sat, 01 Sep 2018 19:42:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/day_2018090119142/</guid>
      <description>&lt;pre&gt;&lt;code&gt;fn main() {
    let greetings = [&amp;quot;Hello&amp;quot;, &amp;quot;Hola&amp;quot;, &amp;quot;Bonjour&amp;quot;,
                     &amp;quot;Ciao&amp;quot;, &amp;quot;こんにちは&amp;quot;, &amp;quot;안녕하세요&amp;quot;,
                     &amp;quot;Cześć&amp;quot;, &amp;quot;Olá&amp;quot;, &amp;quot;Здравствуйте&amp;quot;,
                     &amp;quot;Chào bạn&amp;quot;, &amp;quot;您好&amp;quot;, &amp;quot;Hallo&amp;quot;,
                     &amp;quot;Hej&amp;quot;, &amp;quot;Ahoj&amp;quot;, &amp;quot;سلام&amp;quot;,&amp;quot;สวัสดี&amp;quot;];

    for (num, greeting) in greetings.iter().enumerate() {
        print!(&amp;quot;{} : &amp;quot;, greeting);
        match num {
            0 =&amp;gt;  println!(&amp;quot;This code is editable and runnable!&amp;quot;),
            1 =&amp;gt;  println!(&amp;quot;¡Este código es editable y ejecutable!&amp;quot;),
            2 =&amp;gt;  println!(&amp;quot;Ce code est modifiable et exécutable !&amp;quot;),
            3 =&amp;gt;  println!(&amp;quot;Questo codice è modificabile ed eseguibile!&amp;quot;),
            4 =&amp;gt;  println!(&amp;quot;このコードは編集して実行出来ます！&amp;quot;),
            5 =&amp;gt;  println!(&amp;quot;여기에서 코드를 수정하고 실행할 수 있습니다!&amp;quot;),
            6 =&amp;gt;  println!(&amp;quot;Ten kod można edytować oraz uruchomić!&amp;quot;),
            7 =&amp;gt;  println!(&amp;quot;Este código é editável e executável!&amp;quot;),
            8 =&amp;gt;  println!(&amp;quot;Этот код можно отредактировать и запустить!&amp;quot;),
            9 =&amp;gt;  println!(&amp;quot;Bạn có thể edit và run code trực tiếp!&amp;quot;),
            10 =&amp;gt; println!(&amp;quot;这段代码是可以编辑并且能够运行的！&amp;quot;),
            11 =&amp;gt; println!(&amp;quot;Dieser Code kann bearbeitet und ausgeführt werden!&amp;quot;),
            12 =&amp;gt; println!(&amp;quot;Den här koden kan redigeras och köras!&amp;quot;),
            13 =&amp;gt; println!(&amp;quot;Tento kód můžete upravit a spustit&amp;quot;),
            14 =&amp;gt; println!(&amp;quot;این کد قابلیت ویرایش و اجرا دارد!&amp;quot;),
            15 =&amp;gt; println!(&amp;quot;โค้ดนี้สามารถแก้ไขได้และรันได้&amp;quot;),
            _ =&amp;gt;  {},
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错，今天开始，正式入坑&lt;a href=&#34;https://www.rust-lang.org&#34; title=&#34;Rust official site&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;，我要成为&lt;a href=&#34;http://www.rustacean.net/&#34; title=&#34;Hello, crustaceans&#34;&gt;&lt;strong&gt;Rustacean&lt;/strong&gt;&lt;/a&gt;（Rust社区的成员被称为 Rustacean）的一员！我已经是一名Gopher（Golang程序猿的昵称），日常就是使用Go写写bug，研究一下大佬们的代码，然后继续写自个儿的bug，标准的Gopher节奏，WTF～&lt;/p&gt;

&lt;p&gt;话说，&lt;a href=&#34;https://golang.org&#34; title=&#34;Go official site&#34;&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/a&gt;的吉祥物是Gopher（囊地鼠），陆上跑地欢；Rust的吉祥物是Crab（螃蟹），海里游地慌；巧合吗，很有意思！既如此，已经入坑了陆上跑地欢的&lt;code&gt;Go&lt;/code&gt;，再入手个海里游地慌的&lt;code&gt;Rust&lt;/code&gt;，又有何妨，乐哉!似乎还有一个&lt;code&gt;Swift&lt;/code&gt;，吉祥物是天上飞的雨燕， 也是计划入手的一门语言，但不是现在（项目暂时没用上,不急）， 到时候就海陆空全齐了， 哈哈哈～&lt;/p&gt;

&lt;p&gt;欲攻其事，必先善其器，各门语言有他们擅长的使用场景，都有他们各自溜的舞台，项目需要或适合什么语言去构建，自然就要入手去使用，达到最好运行效果！ 学过很多语言，但日常编程用的最多的还是Go和Java， 嗯哼， 之所以还入手Rust语言，除了项目用的上，更简单的原因就是：看上了&lt;a href=&#34;https://github.com/tikv/tikv&#34; title=&#34;TikV in GitHub&#34;&gt;&lt;strong&gt;TiKV&lt;/strong&gt;&lt;/a&gt; ~&lt;em&gt;So Easy To Nice&lt;/em&gt;~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SRE:3节点部署TiKV用于测试功能</title>
      <link>http://alimy.me/post/dev_201808191316/</link>
      <pubDate>Sun, 19 Aug 2018 13:16:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201808191316/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;闲置几台屌丝版腾讯云服务器（2 core &lt;code&gt;CPU&lt;/code&gt; 4GB &lt;code&gt;Memory&lt;/code&gt; 40GB &lt;code&gt;Disk&lt;/code&gt;)，难得清闲，用其中的3台部署一套TiKV用于测试功能和代码研究。&lt;/p&gt;

&lt;h4 id=&#34;节点分布&#34;&gt;节点分布&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像pingcap/pd:v2.0.6、pingcap/tikv:v2.0.6&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|    Name   |   Host IP   |  Services  |  Docker Volume  |  Data Path  |
| Node1(TB) | 172.22.0.6  |    PD1     |     pd-data     |    /data    |
| Node2(TD) | 172.22.0.10 |    PD2     |     pd-data     |    /data    |
| Node3(TE) | 172.22.0.15 |    PD3     |     pd-data     |    /data    |
| Node1(TB) | 172.22.0.6  |   TiKV1    |     tikv-data   |    /data    |
| Node2(TD) | 172.22.0.10 |   TiKV2    |     tikv-data   |    /data    |
| Node3(TE) | 172.22.0.15 |   TiKV3    |     tikv-data   |    /data    |
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go modules</title>
      <link>http://alimy.me/post/dev_201807232147/</link>
      <pubDate>Mon, 23 Jul 2018 21:47:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201807232147/</guid>
      <description>&lt;h4 id=&#34;sect-definition&#34;&gt;&amp;sect;Definition&lt;/h4&gt;

&lt;p&gt;A module is a collection of related go packages. Modules are the unit of
source code interchange and versionning.&lt;/p&gt;

&lt;h4 id=&#34;sect-quick-history&#34;&gt;&amp;sect;Quick history&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go before 1.5: populating &lt;em&gt;GOPATH&lt;/em&gt; with &lt;code&gt;go get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go 1.5 and after: dependency vendoring is introduced.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/vgo&#34;&gt;vgo&lt;/a&gt; is proposed as a prototype for Go modules support.&lt;/li&gt;
&lt;li&gt;Go 1.11 (beta): &lt;code&gt;vgo&lt;/code&gt; is being merged and refined as &lt;code&gt;go mod&lt;/code&gt; (experimental).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-terminology&#34;&gt;&amp;sect;Terminology&lt;/h4&gt;

&lt;p&gt;This article refers to recurrent expressions. Let&amp;rsquo;s clarify them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module root&amp;rdquo;&lt;/em&gt;: the directory containing the file named &lt;code&gt;go.mod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module path&amp;rdquo;&lt;/em&gt;: the import path prefix corresponding to the module root.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Main module&amp;rdquo;&lt;/em&gt;: the module containing the directory where the &lt;code&gt;go&lt;/code&gt; command
is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-module-structure&#34;&gt;&amp;sect;Module structure&lt;/h4&gt;

&lt;p&gt;A module is a tree of Go source files to which is added a file named &lt;em&gt;go.mod&lt;/em&gt;.
It contains the module import name, and the declaration of dependency
requirements, exclusions and replacements. Its content would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;module my/thing
  
require (
        one/thing v1.3.2
        other/thing v2.5.0 // indirect
        ...
)

exclude (
        bad/thing v0.7.3
)

replace (
        src/thing 1.0.2 =&amp;gt; dst/thing v1.1.0
)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Guide: gorilla/mux</title>
      <link>http://alimy.me/post/dev_201807151843/</link>
      <pubDate>Sun, 15 Jul 2018 18:43:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201807151843/</guid>
      <description>&lt;p&gt;The name mux stands for &amp;ldquo;HTTP request multiplexer&amp;rdquo;. Like the standard
&lt;code&gt;http.ServeMux&lt;/code&gt;, &lt;code&gt;mux.Router&lt;/code&gt; matches incoming requests against a list of
registered routes and calls a handler for the route that matches the URL
or other conditions. The main features are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Requests can be matched based on URL host, path, path prefix, schemes,
  header and query values, HTTP methods or using custom matchers.
* URL hosts, paths and query values can have variables with an optional
  regular expression.
* Registered URLs can be built, or &amp;quot;reversed&amp;quot;, which helps maintaining
  references to resources.
* Routes can be used as subrouters: nested routes are only tested if the
  parent route matches. This is useful to define groups of routes that
  share common conditions like a host, a path prefix or other repeated
  attributes. As a bonus, this optimizes request matching.
* It implements the http.Handler interface so it is compatible with the
  standard http.ServeMux.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start registering a couple of URL paths and handlers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  r := mux.NewRouter()
  r.HandleFunc(&amp;quot;/&amp;quot;, HomeHandler)
  r.HandleFunc(&amp;quot;/products&amp;quot;, ProductsHandler)
  r.HandleFunc(&amp;quot;/articles&amp;quot;, ArticlesHandler)
  http.Handle(&amp;quot;/&amp;quot;, r)
  log.Fatal(http.ListenAndServe(&amp;quot;:12345&amp;quot;, nil))
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Docker: 对Docker Remote API进行认证</title>
      <link>http://alimy.me/post/dev_201807012219/</link>
      <pubDate>Sun, 01 Jul 2018 22:19:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201807012219/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;建立证书授权中心&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/docker
$ cd /etc/docker
$ echo 01 | sudo tee ca.csl
$ sudo openssl genrsa -des3 -out ca-key.pem
$ sudo openssl req -new -x509 -days 365 -key ca-key.pem -out ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建服务器的证书签名请求和密钥&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl genrsa -des3 -out server-key.pem
$ sudo openssl req -new -key server-key.pem -out server.csr
$ sudo openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem
$ sudo openssl rsa -in server-key.pem -out server-key.pem
$ sudo chmod 0600 /etc/docker/server-key.pem /etc/docker/server-cert.pem /etc/docker/ca-key.pem /etc/docker/ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置Docker守护进程 (/etc/docker/daemon.json on Linux systems, or C:\ProgramData\docker\config\daemon.json on Windows.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;debug&amp;quot;: true,
  &amp;quot;tls&amp;quot;: true,
  &amp;quot;tlscacert&amp;quot;: &amp;quot;/etc/docker/ca.pem&amp;quot;,
  &amp;quot;tlscert&amp;quot;: &amp;quot;/etc/docker/server-cert.pem&amp;quot;,
  &amp;quot;tlskey&amp;quot;: &amp;quot;/etc/docker/server-key.pem&amp;quot;,
  &amp;quot;hosts&amp;quot;: [&amp;quot;tcp://&amp;lt;config of CN&amp;gt;:2376&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>存储系统: 札记</title>
      <link>http://alimy.me/post/dev_201807011459/</link>
      <pubDate>Sun, 01 Jul 2018 14:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201807011459/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/3292.html&#34; title=&#34;Finding a needle in Haystack: Facebook’s photo storage&#34;&gt;经典论文翻译导读之《Finding a needle in Haystack: Facebook’s photo storage》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;amp;mid=2247483679&amp;amp;idx=1&amp;amp;sn=584dbd80aa08fa1188627ad725680928&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1208L9z4yXKLW60rPph2ZmMn#rd&#34; title=&#34;微信序列号生成器架构设计及演变&#34;&gt;万亿级调用系统：微信序列号生成器架构设计及演变&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5322</title>
      <link>http://alimy.me/post/dev_201806301842/</link>
      <pubDate>Sat, 30 Jun 2018 18:42:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201806301842/</guid>
      <description>&lt;h3 id=&#34;add-new-dockerfile-docker-ce-for-docker-ce-v17-06-to-build-gogs-s-docker-image&#34;&gt;Add new Dockerfile.docker-ce for docker-ce(&amp;gt;=v17.06) to build Gogs&amp;rsquo;s docker image&lt;/h3&gt;

&lt;p&gt;Docker-CE can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the&lt;code&gt;FROM&lt;/code&gt; instruction sine release version of v17.06. The Dockerfile&amp;rsquo;s &lt;code&gt;FROM&lt;/code&gt; instruction like below:&lt;/p&gt;

&lt;h4 id=&#34;from&#34;&gt;FROM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt; [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[@&amp;lt;digest&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Optionally a name can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the &lt;code&gt;FROM&lt;/code&gt; instruction. The name can be used in subsequent &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;COPY --from=&amp;lt;name|index&amp;gt;&lt;/code&gt; instructions to refer to the image built in this stage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find Docker-ce official document &lt;a href=&#34;https://docs.docker.com/v17.06/engine/reference/builder/#from&#34; title=&#34;Docker official Document&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5262</title>
      <link>http://alimy.me/post/dev_201806040842/</link>
      <pubDate>Mon, 04 Jun 2018 08:42:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201806040842/</guid>
      <description>&lt;h3 id=&#34;fix-make-build-failure-when-enviroment-of-gopath-have-multiple-items&#34;&gt;Fix make build failure when enviroment of &lt;code&gt;GOPATH&lt;/code&gt; have multiple items&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ make
go install &amp;quot;-v&amp;quot; -ldflags &#39;-X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildTime=2018-06-04 06:17:19 UTC&amp;quot; -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildGitHash=c08aab90ec696b7fcc56b8da0a468e74d266b89e&amp;quot;&#39; -tags &#39;&amp;quot;&amp;quot;&#39;
cp &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39; .
cp: cannot stat &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39;: No such file or directory
Makefile:36: recipe for target &#39;build&#39; failed
make: *** [build] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scene &lt;code&gt;GOPATH&lt;/code&gt; have two item (/home/alimy/art/ago and /home/alimy/art/arg) and gogs source is not in first &lt;code&gt;GOPATH&lt;/code&gt; items, when excecute &lt;code&gt;go install ...&lt;/code&gt; will install to path that contain the source of gogs&amp;rsquo;s &lt;code&gt;GOPATH&lt;/code&gt; items. when cp gogs file back will occur error like above.
this patch fixed this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo ${PWD%%src*}
/home/alimy/art/arg/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>收藏: 技术相关网站</title>
      <link>http://alimy.me/post/info_201805210818/</link>
      <pubDate>Mon, 21 May 2018 08:19:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/info_201805210818/</guid>
      <description>&lt;h3 id=&#34;kubernetes-https-kubernetes-io-kubernetes官网&#34;&gt;&lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes官网&#34;&gt;Kubernetes&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/cn/docs/&#34; title=&#34;官方中文文档&#34;&gt;官方中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.feisky.xyz/zh/&#34; title=&#34;feisky版 Kubernetes指南&#34;&gt;Kubernetes指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/&#34; title=&#34;Jimmy版 Kubernetes指南&#34;&gt;Kubernetes指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://feisky.gitbooks.io/sdn/&#34; title=&#34;SDN指南&#34;&gt;SDN指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>NewSQL: 分布式数据库TiDB、CockroachDB</title>
      <link>http://alimy.me/post/dev_201805021940/</link>
      <pubDate>Wed, 02 May 2018 19:40:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201805021940/</guid>
      <description>&lt;h3 id=&#34;tidb-https-pingcap-com-pingcap官网&#34;&gt;&lt;a href=&#34;https://pingcap.com/&#34; title=&#34;PingCap官网&#34;&gt;TiDB&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;TiDB 开源分布式 NewSQL 关系型数据库
TiDB 是新一代开源分布式 NewSQL 数据库，模型受 Google Spanner / F1 论文的启发，实现了自动的水平伸缩，强一致性的分布式事务，基于 Raft 算法的多副本复制等重要 NewSQL 特性。TiDB 结合了 RDBMS 和 NoSQL 的优点，部署简单，在线弹性扩容和异步表结构变更不影响业务， 真正的异地多活及自动故障恢复保障数据安全，同时兼容 &lt;a href=&#34;https://mariadb.com/kb/en/library/documentation/&#34; title=&#34;MariaDB Documentation&#34;&gt;MySQL&lt;/a&gt; 协议，使迁移使用成本降到极低。&lt;/p&gt;

&lt;h3 id=&#34;cockroachdb-https-www-cockroachlabs-com-cockroach-labs-蟑螂db-小强db&#34;&gt;&lt;a href=&#34;https://www.cockroachlabs.com/&#34; title=&#34;Cockroach LABS&#34;&gt;CockroachDB&lt;/a&gt; (蟑螂DB/小强DB)&lt;/h3&gt;

&lt;p&gt;CockroachDB（中文名蟑螂DB，所以又可以称为小强DB），是构建于事务处理及强一致性KV存储上的分布式SQL数据库，支持水平扩展、自动容错处理、强一致性事务，并且提供SQL接口用于数据处理，是Google Spanner/F1的开源实现。
   CockroachDB适用于应用对数据要求精确、可靠、完全正确的场景，支持自动复制、均匀分布、基于极小配置的数据恢复，可用于分布式的、可复制的联机事务处理（OLTP），多数据中心的部署，私有云的基础构建，它不适用于读少写多的场景，可以用内存数据库来代替，也不适用于复杂的join查询，重量级的数据分析及联机分析处理（OLAP）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logus:另一种简单、优雅、高效打Log的方式</title>
      <link>http://alimy.me/post/dev_201804192316/</link>
      <pubDate>Thu, 19 Apr 2018 23:16:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201804192316/</guid>
      <description>&lt;h3 id=&#34;起源&#34;&gt;起源：&lt;/h3&gt;

&lt;p&gt;最近项目中有使用Uber的&lt;a href=&#34;https://github.com/uber-go/zap&#34; title=&#34;zap in GitHub&#34;&gt;zap&lt;/a&gt;（Go语言生态中一种高效打印Log的实用库，久经考验）打印log，用的顺手，于是借鉴其中的设计思想，在Android环境下封装Log类提供相似功能。&lt;/p&gt;

&lt;h3 id=&#34;设计思想&#34;&gt;设计思想：&lt;/h3&gt;

&lt;p&gt;分离消息与数据域，避免字符串拼接和效率低的字符串格式化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;把log信息分两段：消息和数据域；消息是必须的， 数据域是个数可变的键-值对&lt;/li&gt;
&lt;li&gt;消息仅仅是String，不带任何格式化或字符串拼接&lt;/li&gt;
&lt;li&gt;数据域是以key-value的形式成对作为参数传给打印函数，忽略最后一个不成对参数&lt;/li&gt;
&lt;li&gt;内部实现是使用StringBuilder组合最终要打印的信息，避免过多的字符串拼接导致log打印频繁时给gc过多压力&lt;/li&gt;
&lt;li&gt;StackTrace信息是可以设置打印或不打印&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用例&#34;&gt;用例：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// file: MainActivity.java
@Override
protected void onResume() {
    super.onResume();
    Logus.d(&amp;quot;just a message&amp;quot;);
    Logus.e(&amp;quot;a field message&amp;quot;, &amp;quot;a&amp;quot;, 1);
    Logus.w(&amp;quot;3 fields but see 2&amp;quot;, &amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;, true, &amp;quot;c&amp;quot;);
    Logus.V(&amp;quot;Main&amp;quot;, &amp;quot;with prefix just a message&amp;quot;);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;with prefix 2 fields&amp;quot;, &amp;quot;a&amp;quot;, 10, &amp;quot;b&amp;quot;, false);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;with prefix 3 fields but log 2&amp;quot;, &amp;quot;a&amp;quot;, 10, &amp;quot;b&amp;quot;, true, &amp;quot;c&amp;quot;);
    Logus.setStackTrace(false);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;no stack trace with prefix&amp;quot;);
}

// 输出：
04-19 22:12:56.209 3256-3256/net.gility.note  D/Logus: MainActivity.java(425)#onResume &amp;gt; just a message
04-19 22:12:56.210 3256-3256/net.gility.note  E/Logus: MainActivity.java(426)#onResume &amp;gt; a field message { a=1; }
04-19 22:12:56.210 3256-3256/net.gility.note  W/Logus: MainActivity.java(427)#onResume &amp;gt; 3 fields but see 2 { a=1; b=true; }
04-19 22:12:56.211 3256-3256/net.gility.note  V/Logus: MainActivity.java(428)#onResume Main&amp;gt; with prefix just a message
04-19 22:12:56.212 3256-3256/net.gility.note  E/Logus: MainActivity.java(429)#onResume Main&amp;gt; with prefix 2 fields { a=10; b=false; }
04-19 22:12:56.213 3256-3256/net.gility.note  E/Logus: MainActivity.java(430)#onResume Main&amp;gt; with prefix 3 fields but log 2 { a=10; b=true; }
04-19 22:12:56.213 3256-3256/net.gility.note  D/Logus: &amp;gt; no stack trace no prefix
04-19 22:12:56.213 3256-3256/net.gility.note  E/Logus: Main&amp;gt; no stack trace with prefix
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>rsync: 基本命令和用法</title>
      <link>http://alimy.me/post/dev_201803241218/</link>
      <pubDate>Sat, 24 Mar 2018 12:18:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803241218/</guid>
      <description>&lt;h3 id=&#34;1-说在前面的话&#34;&gt;1 说在前面的话&lt;/h3&gt;

&lt;p&gt;rsync官方网站: &lt;a href=&#34;https://www.samba.org/ftp/rsync/rsync.html,&#34; title=&#34;rsync官方网站&#34;&gt;https://www.samba.org/ftp/rsync/rsync.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;rsync是可以实现增量备份的工具。配合任务计划，rsync能实现定时或间隔同步，配合inotify或sersync，可以实现触发式的实时同步。&lt;/p&gt;

&lt;p&gt;rsync可以实现scp的远程拷贝(rsync不支持远程到远程的拷贝，但scp支持)、cp的本地拷贝、rm删除和&amp;rdquo;ls -l&amp;rdquo;显示文件列表等功能。但需要注意的是，rsync的最终目的或者说其原始目的是实现两端主机的文件同步，因此实现的scp/cp/rm等功能仅仅只是同步的辅助手段，且rsync实现这些功能的方式和这些命令是不一样的。事实上，rsync有一套自己的算法，其算法原理以及rsync对算法实现的机制可能比想象中要复杂一些。平时使用rsync实现简单的备份、同步等功能足以，没有多大必要去深究这些原理性的内容。但是想要看懂rsync命令的man文档、使用&amp;rdquo;-vvvv&amp;rdquo;分析rsync执行过程，以及实现rsync更强大更完整的功能，没有这些理论知识的支持是绝对不可能实现的。本篇文章将简单介绍rsync的使用方法和它常用的功能。在本篇文章之后的下几篇文章中，将介绍inotify+rsync和sersync，再之后将详细解释rsync相关的原理，其中包括官方技术报告的翻译(即算法原理)、rsync同步的整个过程(也是官方推荐文章的翻译)，然后专门使用一篇文章通过示例来详细解释rsync算法原理，最后给出rsync的man文档翻译。希望各位朋友能藉此深入rsync。&lt;/p&gt;

&lt;p&gt;回归正题，以下是rsync相关基础内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rsync: 中文手册</title>
      <link>http://alimy.me/post/dev_201803241012/</link>
      <pubDate>Sat, 24 Mar 2018 10:12:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803241012/</guid>
      <description>&lt;p&gt;rsync(1)&lt;/p&gt;

&lt;p&gt;名称&lt;br /&gt;
       rsync - 一个快速、多功能的远程(和本地)文件拷贝工具&lt;/p&gt;

&lt;p&gt;摘要&lt;br /&gt;
       Local:  rsync [OPTION&amp;hellip;] SRC&amp;hellip; [DEST]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Access via remote shell:
     Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
     Push: rsync [OPTION...] SRC... [USER@]HOST:DEST

   Access via rsync daemon:
     Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]
           rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
     Push: rsync [OPTION...] SRC... [USER@]HOST::DEST
           rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST


   当仅有一个SRC或DEST参数时将列出源文件列表而不是复制文件。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;描述&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: DNS</title>
      <link>http://alimy.me/post/dev_201803181751/</link>
      <pubDate>Sun, 18 Mar 2018 17:51:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803181751/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1034&#34; title=&#34;DOMAIN NAMES - CONCEPTS AND FACILITIES&#34;&gt;&lt;strong&gt;DNS - CONCEPTS AND FACILITIES&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1034.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1035&#34; title=&#34;DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION&#34;&gt;&lt;strong&gt;DNS - IMPLEMENTATION AND SPECIFICATION&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1035.txt&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: SMTP/POP3/IMAP</title>
      <link>http://alimy.me/post/dev_201803181718/</link>
      <pubDate>Sun, 18 Mar 2018 17:18:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803181718/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5321&#34; title=&#34;Simple Mail Transfer Protocol&#34;&gt;&lt;strong&gt;SMTP&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc5321.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1939&#34; title=&#34;Post Office Protocol - Version 3&#34;&gt;&lt;strong&gt;POP3&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1939.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3501&#34; title=&#34; INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1&#34;&gt;&lt;strong&gt;IMAP&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc3501.txt&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AMP: Accelerated Mobile Pages</title>
      <link>http://alimy.me/post/dev_201803130721/</link>
      <pubDate>Tue, 13 Mar 2018 07:21:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803130721/</guid>
      <description>&lt;p&gt;The AMP Project is an open-source initiative aiming to make the web better for all. The project enables the creation of websites and ads that are consistently fast, beautiful and high-performing across devices and distribution platforms.&lt;/p&gt;

&lt;p&gt;AMP pages are built with 3 core components:&lt;/p&gt;

&lt;h3 id=&#34;amp-html&#34;&gt;AMP HTML ⚡&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ampproject.org/docs/get_started/about-amp.html&#34;&gt;AMP HTML&lt;/a&gt; is a way to build web pages that render with reliable and fast performance. It is our attempt at fixing what many perceive as painfully slow page load times – especially when reading content on the mobile web.  AMP HTML is built on existing web technologies; an AMP page will load (quickly) in any modern browser.&lt;/p&gt;

&lt;p&gt;You can learn more at &lt;a href=&#34;https://www.ampproject.org/&#34;&gt;ampproject.org&lt;/a&gt; including &lt;a href=&#34;https://www.ampproject.org/learn/about-amp/&#34;&gt;what AMP is&lt;/a&gt;, &lt;a href=&#34;https://www.ampproject.org/learn/how-amp-works/&#34;&gt;how it works&lt;/a&gt; and the importance of &lt;a href=&#34;https://www.ampproject.org/docs/guides/validate&#34;&gt;validation in AMP&lt;/a&gt;.  You can also walk through &lt;a href=&#34;https://www.ampproject.org/docs/get_started/create&#34;&gt;creating an AMP page&lt;/a&gt; and read through the &lt;a href=&#34;https://www.ampproject.org/docs/reference/components&#34;&gt;reference docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: HTTP 0.9/1.0/1.1/2.0</title>
      <link>http://alimy.me/post/dev_201803122215/</link>
      <pubDate>Mon, 12 Mar 2018 22:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803122215/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.w3.org/Protocols/HTTP/AsImplemented.html&#34; title=&#34;The Original HTTP as defined in 1991&#34;&gt;&lt;strong&gt;HTTP 0.9&lt;/strong&gt; https://www.w3.org/Protocols/HTTP/AsImplemented.html &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1945&#34; title=&#34;Hypertext Transfer Protocol -- HTTP/1.0&#34;&gt;&lt;strong&gt;HTTP 1.0&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1945.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2616&#34; title=&#34;Hypertext Transfer Protocol -- HTTP/1.1&#34;&gt;&lt;strong&gt;HTTP 1.1&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc2616.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34; title=&#34;Hypertext Transfer Protocol Version 2 -- HTTP/2&#34;&gt;&lt;strong&gt;HTTP 2.0&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc7540.txt &lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: TLS 1.0/1.1/1.2/1.3</title>
      <link>http://alimy.me/post/dev_201803122145/</link>
      <pubDate>Mon, 12 Mar 2018 21:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803122145/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2246&#34; title=&#34;TLS 1.0&#34;&gt;&lt;strong&gt;TLS 1.0&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc2246.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4346&#34; title=&#34;TLS 1.1&#34;&gt;&lt;strong&gt;TLS 1.1&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc4346.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5246&#34; title=&#34;TLS 1.2&#34;&gt;&lt;strong&gt;TLS 1.2&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc5246.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc8446&#34; title=&#34;TLS 1.3&#34;&gt;&lt;strong&gt;TLS 1.3&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc8446.txt &lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Tutorial: What&#39;s DefaultServeMux in net/http</title>
      <link>http://alimy.me/post/dev_201803031932/</link>
      <pubDate>Sat, 03 Mar 2018 19:34:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803031932/</guid>
      <description>&lt;p&gt;craete a HTTPS Server use net/http and route handle function by DefaultServeMux, see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net/http&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

func hello(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;[%s]: hello!&amp;quot;, r.Host)
}

func world(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;[%s]: world!&amp;quot;, r.Host)
}

func main() {
	server := http.Server{
		Addr: &amp;quot;127.0.0.1:8080&amp;quot;,
	}
	http.HandleFunc(&amp;quot;/hello&amp;quot;, hello)
	http.HandleFunc(&amp;quot;/world&amp;quot;, world)

	log.Fatal(server.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Golang Tutorial: Create HTTPS Server use net/http</title>
      <link>http://alimy.me/post/dev_201803030946/</link>
      <pubDate>Sat, 03 Mar 2018 09:46:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201803030946/</guid>
      <description>&lt;p&gt;It is simple to craete a HTTPS Server use net/http, see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net/http&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type SimpleHandler struct {
	Name string
}

func (h *SimpleHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;%s: Hello World!&amp;quot;, h.Name)
}

func main() {
	server := http.Server{
		Addr:    &amp;quot;127.0.0.1:8080&amp;quot;,
		Handler: &amp;amp;SimpleHandler{Name: &amp;quot;SimpleServer&amp;quot;},
	}
	server.ListenAndServeTLS(&amp;quot;cert.pem&amp;quot;, &amp;quot;key.pem&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>拯救者</title>
      <link>http://alimy.me/post/art_201803030843/</link>
      <pubDate>Sat, 03 Mar 2018 08:43:01 +0800</pubDate>
      
      <guid>http://alimy.me/post/art_201803030843/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20180303084300.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20180303084300.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>陶渊明 -「桃花源记」</title>
      <link>http://alimy.me/post/arc_201604151010/</link>
      <pubDate>Fri, 15 Apr 2016 10:10:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/arc_201604151010/</guid>
      <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;晋太元中，武陵人捕鱼为业。缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷，渔人甚异之。复前行，欲穷其林。&lt;/p&gt;

&lt;p&gt;　　林尽水源，便得一山，山有小口，仿佛若有光。便舍船，从口入。初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。&lt;/p&gt;

&lt;p&gt;　　见渔人，乃大惊，问所从来。具答之。便要还家，设酒杀鸡作食。村中闻有此人，咸来问讯。自云先世避秦时乱，率妻子邑人来此绝境，不复出焉，遂与外人间隔。问今是何世，乃不知有汉，无论魏晋。此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食。停数日，辞去。此中人语云：“不足为外人道也。”&lt;/p&gt;

&lt;p&gt;　　既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷，不复得路。&lt;/p&gt;

&lt;p&gt;　　南阳刘子骥，高尚士也，闻之，欣然规往。未果，寻病终，后遂无问津者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老子 - 「道 德 經」</title>
      <link>http://alimy.me/post/arc_201604150952/</link>
      <pubDate>Fri, 15 Apr 2016 09:52:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/arc_201604150952/</guid>
      <description>&lt;h4 id=&#34;第-一-章&#34;&gt;第 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。  
无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。  
故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。  
此 两 者 ， 同 出 而 异 名 ， 同 谓 之 玄 。  
玄 之 又 玄 ， 众 妙 之 门 。  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-章&#34;&gt;第 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 皆 知 美 之 为 美 ， 斯 恶 已 。  
皆 知 善 之 为 善 ， 斯 不 善 已 。  
有 无 相 生 ， 难 易 相 成 ， 长 短 相 形 ，  
高 下 相 盈 ， 音 声 相 和 ， 前 后 相 随 。  
恒 也 。 是 以 圣 人 处 无 为 之 事 ，  
行 不 言 之 教 ﹔ 万 物 作 而 弗 始 ，  
生 而 弗 有 ， 为 而 弗 恃 ， 功 成 而 不 居 。   
夫 唯 弗 居 ， 是 以 不 去 。   
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go - See what packages my app imports</title>
      <link>http://alimy.me/post/dev_201604101827/</link>
      <pubDate>Sun, 10 Apr 2016 18:27:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201604101827/</guid>
      <description>&lt;p&gt;It’s often practical to see what packages your app is importing. Unfortunately there isn’t a simple way to do that, however it is doable via the go list tool and using templates.&lt;/p&gt;

&lt;p&gt;Go to your app and run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example with the clirescue refactoring example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoBootcamp/clirescue
$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; | xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
github.com/GoBootcamp/clirescue/cmdutil
github.com/GoBootcamp/clirescue/trackerapi
github.com/GoBootcamp/clirescue/user
github.com/codegangsta/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want the list to also contain standard packages, edit the template and use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{.ImportPath}}&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>爱</title>
      <link>http://alimy.me/post/art_201604091521/</link>
      <pubDate>Sat, 09 Apr 2016 15:21:01 +0800</pubDate>
      
      <guid>http://alimy.me/post/art_201604091521/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160409152101.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160409152100.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go - EBNF</title>
      <link>http://alimy.me/post/dev_201604021445/</link>
      <pubDate>Sat, 02 Apr 2016 14:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201604021445/</guid>
      <description>&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;

&lt;p&gt;The syntax is specified using Extended Backus-Naur Form (EBNF):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Production  = production_name &amp;quot;=&amp;quot; [ Expression ] &amp;quot;.&amp;quot; .
Expression  = Alternative { &amp;quot;|&amp;quot; Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ &amp;quot;…&amp;quot; token ] | Group | Option | Repetition .
Group       = &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Option      = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Repetition  = &amp;quot;{&amp;quot; Expression &amp;quot;}&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Productions are expressions constructed from terms and the following operators, in increasing precedence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lower-case production names are used to identify lexical tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes &amp;ldquo;&amp;rdquo; or back quotes ``.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile:简介</title>
      <link>http://alimy.me/post/dev_201603242255/</link>
      <pubDate>Thu, 24 Mar 2016 22:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603242255/</guid>
      <description>&lt;p&gt;Make 可以简化编译过程，如果有一个近百个源文件的项目，如果有个文件更改后工程需要重新编译，那么一直用gcc -c a.c这些个命令敲来敲去会屎人的。运行make时候，他会寻找指定目录下（默认是 .）的 Makefile 文件并且分析依赖关系进行必要的编译。&lt;/p&gt;

&lt;h3 id=&#34;makefile文件的基本格式很简单&#34;&gt;Makefile文件的基本格式很简单：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;目标文件： 依赖文件1 依赖文件2 依赖文件3 。。。。
[tab]编译命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的意思是目标文件是依赖于冒号后面几个文件的，如果这些依赖文件有更新的，那么其目标文件也需要更新。&lt;/p&gt;

&lt;p&gt;Makefile 中可能有很多以上条目，他们共同组成了一个有向无回路图（DAG图），这样可以传递依赖。make 命令会把 Makefile 文件的第一个目标文件作为默认目标，当执行 make 命令时，make 会考察这个目标文件的依赖关系，进行编译。也可以指定，比如这个 Makefile：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main: a.o b.o
[tab]gcc -o main a.o b.o
a.o : a.c c.h
[tab]gcc -c a.c -o a.o
b.o: b.c c.h
[tab]gcc -c b.c -o b.o
// [tab]的意思是这里用tab字符代替，不能有其他的什么字符
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在命令行里执行make，分析关系并生成main，如果是make a.o那么他只会编译到 a.o 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Valve</title>
      <link>http://alimy.me/post/ark_201603242135/</link>
      <pubDate>Thu, 24 Mar 2016 21:35:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242135/</guid>
      <description>&lt;p&gt;Valve 虽然从来是『有再一再二，没有再三再四』，但是不得不承认，无论是半条命还是 steam，都称得上『划时代』。&lt;/p&gt;

&lt;h3 id=&#34;名不见经传的英雄-unlikely-heroes&#34;&gt;名不见经传的英雄 Unlikely Heroes&lt;/h3&gt;

&lt;p&gt;1996年，微软已经从一个小作坊成长为世界上最富有的公司之一，最早的一批员工都已经成为了百万富翁。其中两名老员工一直爱玩游戏，现在有了足够的资金做自己想做的事情，他们决定成立自己的公司。&lt;/p&gt;

&lt;p&gt;不幸的是，他们对游戏开发毫无经验，只参与过操作系统以及功能性产品的编写，后来一个好友将他们介绍给了著名的id软件创始人——约翰·卡马克，卡马克说服他们应该拿到Quake引擎的许可并做一个游戏。他们同意了，并认为追寻梦想的时机已到。&lt;/p&gt;

&lt;p&gt;加布·纽维尔和麦克·哈灵顿为新公司想了几个名字，包括果蝇、全息盒子以及犀牛疤痕(Rhino Scar)，但最后他们选定了一个很简单的名字阀门(VALVE)。&lt;/p&gt;

&lt;p&gt;和卡马克见面后，纽维尔和哈灵顿创建了他们的公司，并在纽维尔的婚礼遮天正式注册成立。&lt;/p&gt;

&lt;p&gt;【G胖 加布·纽维尔 Valve创始人】：我最初建立一家游戏公司的动机带有一定社会性，我很享受与一帮聪明人一起工作，创造能影响不同群体的游戏。1996年，我在想有哪些选择，在这个问题上我又很大的自由，环游世界，度个假什么的。我最喜欢Valve的一点就是这种特定的工作环境。&lt;/p&gt;

&lt;p&gt;不同于Bungie仅靠一人慢慢白手起家，Valve想立马就开始制作高预算游戏，两个人是远远不够的，尤其这两人还从来没做过游戏。于是Valve便开始物色人才，他们的做法不同于当时业界的标准，不仅招募专业人士，还有MOD作者。他们意识到某些mod作者可能比专业人士更有天赋。伺候Valve便开始开辟新的疆土。&lt;/p&gt;

&lt;p&gt;公司完全依靠两位创始人的资金运作，这样一来公司便承担得起一般小工作室承受不了的风险。然而仅有两个想追梦的人还远远不够，没有人看好他们，找到一个愿意发行他们作品的发行商几乎不可能。尤其当纽维尔和哈灵顿宣称游戏采用了极其复杂的技术时，发行商们不相信他们能兑现诺言，最后他们找上了“雪乐山在线”(SIERRA Online)，雪乐山刚好打算发行一款3D动作游戏，最好使用Quake引擎制作。Valve团队令他们印象深刻，有了足够的信心与其展开合作，即使失败了，仅仅一款游戏的合约也让雪乐山有退路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Bioware</title>
      <link>http://alimy.me/post/ark_201603242125/</link>
      <pubDate>Thu, 24 Mar 2016 21:25:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242125/</guid>
      <description>&lt;p&gt;一个公司能够成为欧美 RPG 玩家心目中『经典』的代言，不得不说是有两把刷子的。&lt;/p&gt;

&lt;h3 id=&#34;启程-setting-out&#34;&gt;启程 Setting Out&lt;/h3&gt;

&lt;p&gt;1995年，电子游戏已经不再只是孩子的玩具，即使是医生也可能成为玩家。就在这一年，三名医学院毕业生决定在投身医药行业之前做出自己的游戏。就是这样， Ray Muzyka, Greg Zeschuk和Augustine Yip在Zeschuk的地下室创建了自己的公司。谁能想到这样一个组合最后能成为RPG巨匠？他们的名字代表着精品——Bioware.&lt;/p&gt;

&lt;p&gt;公司制作的第一款游戏叫做《超钢战神》，这是1996年的一款为MS-DOS平台执着的第一人称载具射击游戏。Bioware尝试提升游戏画面表现，将可变形地表作为一大卖点。游戏还有着复杂的背景故事，在那个年代多数射击游戏内容都只是枪枪枪，这种级别的游戏内涵着实不平常，这也成为了公司以后的立足之本。&lt;/p&gt;

&lt;p&gt;《超钢战神》之后Muzyka和Zeschuk想要继续制作游戏，但作为创业伙伴的Augustine Yip决定投身医药行业，离开了公司。尽管如此Bioware还是继续制作了他们的下一款游戏《战场：无垠》并且开始寻找发行商。当interplay旗下的黑岛工作室看过游戏之后，他们并不想仅仅发行游戏，而是想将其打造为公司的标志品牌，并授权Bioware将《战场》做成一款官方D&amp;amp;D规则游戏，结果就是1998年的《博德之门》。&lt;/p&gt;

&lt;p&gt;故事发生在AD&amp;amp;D第二版规则设定的“遗忘之地”，游戏保有一切RPG的特性，从移动、攻击到施法，一切结果都是通过计算获得的。Bioware明智地决定让这一过程对玩家不可见，如此一来，即便是从未看过AD&amp;amp;D规则书的玩家也能很快上手，投身进“遗忘之地”之中。游戏是实时进行的，这在D&amp;amp;D电子游戏里尚属首例，玩家可以在战斗开始前按下“暂停”，选择每个队友的进攻路线，再继续游戏观看战略实施。游戏还拥有当时的顶尖画质，充分利用了PC业界的新技术——专用独立显卡。不同于《暗黑破坏神》的杀杀杀&amp;amp;刷刷刷，《博德之门》将重心放在了剧情上，引人入胜的史诗般任务至少花费数十小时，一个法师学徒为其师父报仇的故事都能谋杀玩家的大量时间。支线任务大多也和主线一样有趣，D&amp;amp;D饭也能遇到很多设定中的著名角色并与之互动，对很多玩家来说是梦想成真。虽然画面在今天看来已经过时，但时至今日博德之门依旧是游戏史上剧情最佳的游戏之一。这还没完，游戏提供了多人模式，允许好友组队一起完成任务。这是首款能这么做的PC RPG，这使得游戏大受欢迎，因为核心玩家能在游戏中一路帮助他缺乏经验的朋友。所有这一切成就了1998年最卖座的游戏之一，成为一代RPG名作。&lt;/p&gt;

&lt;p&gt;仅仅成立3年并推出两部作品，Bioware从医生的爱好成为了业界领导者，这一切都来得太快，没人知道他们能否将这股劲头保持下去。幸运的是，Bioware的成功之路才刚刚开始。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Interplay</title>
      <link>http://alimy.me/post/ark_201603242105/</link>
      <pubDate>Thu, 24 Mar 2016 21:05:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242105/</guid>
      <description>&lt;p&gt;Interplay 对于新玩家而言已经过于陌生了，虽然早已不复往昔，但是给游戏业界留下的财富，仍旧不可估量。&lt;/p&gt;

&lt;p&gt;新星崛起 Meteoric Rise&lt;/p&gt;

&lt;p&gt;布莱恩·法戈的高中生涯都在 Apple II 游戏的陪伴下度过，毕业后他想到，如果自己去设计游戏，做出来的作品搞不好比手头这些都好玩。于是1992年他以Saber 软件公司的名义制作了《恶魔熔炉》，当时孤立一人的他，花费了整整一半的预算，在电脑杂志《Softtalk》上刊登了一则广告。之后为了吸引零售商进货，他又冒充普通玩家打电话给商店，询问能否买到杂志上宣传的这款酷毙了的新游戏。&lt;/p&gt;

&lt;p&gt;计谋奏效了，零售商们也开始从 Saber 软件公司订购这款游戏，他们完全没有想到的是：所谓 Saber 实际上是一人企业，而他就是冒名电话背后的始作俑者。凭着这款游戏，法戈得到了 Boom 集团的关注，后一年他被吸收到该集团为他们工作，然而，当 Boom 的一次董事会以大打出手作结时，法戈意识到是该另立门户了。于是他召集死党，在1983年城里了自己的公司。&lt;/p&gt;

&lt;p&gt;当时的他们对未来毫无头绪，然而他们没有料想到，公司将要经历的一系列大起大落是如此充满戏剧性，在整个游戏史上也属罕见。这家公司从小工作室起家，发展成为一流发行商，最后却不幸破产。当年也全亏他们慧眼识英雄，才扶持了暴雪、Bioware 和 Treyarch 这些如今行业的巨头。且听我以吟游诗人的曲调，将 Interplay 娱乐公司的这段兴衰史娓娓道来。&lt;/p&gt;

&lt;p&gt;起初的 Interplay 并没有什么大作为，仅仅从事一些现有游戏的跨平台移植工作，甚至还从一家军事分包商处接活。最后他们终于同Activision达成协议，从事原创游戏开发。1984年他们的首部作品，冒险游戏《Mindshadow》问世，该作一定程度上基于罗伯特·卢德伦的小说《谍影重重》。在游戏中失忆的主角必须收集线索，找回自己不为人知的过去。游戏获得了一定的成功，Interplay 在原创游戏开发方面也借此迈出了一步。仅一年后，Interplay 出品了第一款真正意义上的大作《遗忘故事第一张：吟游诗人传奇》（冰城传奇），这款角色扮演游戏大量借鉴了《巫术》系列，而后者在病危获得官方授权的情况下，完美地运用了龙与地下城（DND）的规则体系。相比之下《吟游诗人传奇》要精致的多：多色彩，游戏音效和背景音乐的加入，使得 DND 式的冒险历程更为引人入胜。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史：Blizzard</title>
      <link>http://alimy.me/post/ark_201603242059/</link>
      <pubDate>Thu, 24 Mar 2016 20:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242059/</guid>
      <description>&lt;p&gt;暴雪的大名已如雷贯耳，虽然现在也面临着一些困难，但是回顾往昔，光芒依旧耀眼。&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;就读于加州大学洛杉矶分校的迈克·默汉曾经对同学这样恶作剧：当艾伦·艾德涵暂时离开电脑时，默汉迅速把艾伦的电脑密码改成了 JOE，毫不知情的艾伦回来输入密码，竟然成功登陆了。这时轮到默汉大吃一惊，艾德涵究竟是怎么做到的？于是他招认了自己的恶作剧，然后请教艾德涵是如何破解的，然而，后者的惊讶程度丝毫不亚于默汉，他不过是输入了自己的密码而已。默汉终于明白了其中关键：由于机缘巧合，艾德涵自己的密码也刚好是 JOE。此后两人成为挚友，他们关系之好，最终又成为商业上的合作伙伴，之后20年中他们的工作室制作了数十款精品游戏，不仅成为游戏史上最伟大的传奇之一，更晋升为行业巨头，屹立于整个娱乐产业。他们的公司如此受欢迎，甚至拥有自己的年度大会。且不论两人是否还把 JOE 作为密码，在产品制作的完美程度和持续的卓越方面，世界上几乎少有同行能够同暴雪娱乐并驾齐驱，这是毋庸置疑的。&lt;/p&gt;

&lt;p&gt;毕业之际，艾伦·艾德涵觉得这是实现理想的最佳时机，他热衷玩游戏，为何不以制作游戏为业呢？但是他不甘心在大公司当低级程序员，而是想自己当老板，自己决定工作计划。艾德涵决定创立自己的公司，于是他联系迈克·默汉，邀请他入伙，同时还联系了另外一名同学弗兰克·皮尔斯。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】我与艾伦通过熟人认识，当时很凑巧，因为我确实很想制作游戏，觉得是一项很酷的事业，却苦于不知道如何着手，而艾伦对于自己想做的事情有着明确计划和确切的愿景，他想做的事刚好也是我感兴趣的，因为我少走了很多弯路，我们能够相遇是很幸运的。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】公司成立的第一天我才和弗兰克首次见面，当时我正在说话，一个陌生人出现了，于是我闭住了嘴，然后就这么结识了。&lt;/p&gt;

&lt;p&gt;1991年2月8日，三人在加州科斯塔梅萨建立了他们的工作室『硅与神经键Silicon&amp;amp;Synapse』，艾德涵担任总裁，默汉担任副总裁，皮尔斯则是程序员。他们决心不紧要制作出伟大的游戏，更要在其过程中享受到乐趣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊斋：白狐</title>
      <link>http://alimy.me/post/arc_201603192259/</link>
      <pubDate>Sat, 19 Mar 2016 22:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192259/</guid>
      <description>&lt;p&gt;很多年前，一个昭阳四射的清晨，书生坐在树桩上苦读四书五经。书生一贫如洗三餐不饱，家里唯一值钱的就是那两担沉甸甸的书。&lt;/p&gt;

&lt;p&gt;书生每天都坐在这片林子里，随便寻个坐处，读到天黑，日子一天天的就这样在圣贤书中流逝。&lt;/p&gt;

&lt;p&gt;这日黄昏，书生正在读书，读到夕阳遍地时高呼：“书中自有黄金屋，书中自有颜如玉”，突地“吱吱”而鸣声随风而来，书生抬起头来，只见一团白影扑面而至，那是一只晶莹通白的小狐狸，雪白得一尘不染，两只眼珠溜溜而动，口里哀声连连。&lt;/p&gt;

&lt;p&gt;说也来怪，小狐狸奔到书生面前时，竟兀自停住脚步，气喘吁吁。&lt;/p&gt;

&lt;p&gt;书生一把抓住小狐狸，只见小狐狸雪白的后腿上，斜斜地插着一支箭，鲜血顺着箭头沽沽而下，染红了一片。小狐哀鸣几声，双目对着书生，写满了哀怜与乞求。&lt;/p&gt;

&lt;p&gt;书生叹一口气：“小狐狸啊小狐狸，是谁忍心伤你这么深……”&lt;/p&gt;

&lt;p&gt;语音未落，远处蹄声如雷阵阵踏来，小狐狸白溜的身子不停的颤抖，仿佛要从书生手里挣扎逃走，书生急忙捧紧小狐，一咬牙将箭拔出，撕下一片烂衣袍，将小狐狸的伤口包好，轻轻放入宽大的衣袖里，说也来怪，小狐狸竟忍住疼痛，一动不动的躺在书生的袖怀之中。&lt;/p&gt;

&lt;p&gt;书生刚刚端起书，只听得马蹄声轰轰而至，数十匹高大骏马踏青飞来，为头的是一个虬髯大汉，满身华贵地叫道：“兀那书生，可曾见过一只受伤的狐狸逃过？”&lt;/p&gt;

&lt;p&gt;书生抬起头来：“兄台说的可是一只满身雪白的狐狸？”&lt;/p&gt;

&lt;p&gt;虬髯客身旁闪出一团绿影，娇喝道：“正是，正是我射中的那只狐狸，那小畜生呢？”&lt;/p&gt;

&lt;p&gt;书生只闻香风扑面，迎面是一张如花笑脸，书生猛然间惊慌失措，意迷情乱，好半天才回过神来，指着身后结结巴巴的说：“刚刚从这边跑过。”&lt;/p&gt;

&lt;p&gt;少女娇声说道：“多谢书生！我们追！”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>http://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;

&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;

&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;

&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Volley&#43;OkHttp with https</title>
      <link>http://alimy.me/post/dev_201603192245/</link>
      <pubDate>Sat, 19 Mar 2016 22:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192245/</guid>
      <description>&lt;h3 id=&#34;android-network-simple&#34;&gt;Android Network Simple&lt;/h3&gt;

&lt;p&gt;This article shows how to use volley with OkHttp and security your api with https.
本文可以在&lt;a href=&#34;http://www.jianshu.com/p/e58161cbc3a4&#34; title=&#34;Android 网络--我是怎么做的: Volley+OkHttp+Https&#34;&gt;简书&lt;/a&gt;浏览。&lt;/p&gt;

&lt;h3 id=&#34;使用-okhttp-作为传输层的实现&#34;&gt;使用 OkHttp 作为传输层的实现.&lt;/h3&gt;

&lt;p&gt;Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现. 3.0 以上使用HttpUrlConnection, 2.3 以下使用 ApacheHttpStack, 参考&lt;a href=&#34;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&#34;&gt;Android Http Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OkHttp 相较于其它的实现有以下的优点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;http://zh.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;，允许连接同一主机的所有请求分享一个socket。&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，会使用连接池减少请求延迟。&lt;/li&gt;
&lt;li&gt;使用GZIP压缩下载内容，且压缩操作对用户是透明的。&lt;/li&gt;
&lt;li&gt;利用响应缓存来避免重复的网络请求。&lt;/li&gt;
&lt;li&gt;当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。&lt;/li&gt;
&lt;li&gt;如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>庆余年: 又一叶</title>
      <link>http://alimy.me/post/arc_201603192212/</link>
      <pubDate>Sat, 19 Mar 2016 22:12:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192212/</guid>
      <description>&lt;p&gt;当年的废话&lt;/p&gt;

&lt;p&gt;至于是如何和小眉认识的，已经有些记不清楚了，只记得那天太阳当空照，花儿对我笑，小鸟说操操操，喔，不对，那天好象国际上又出了件什么事儿，于是我们几个兄弟以此为由撮了一顿，中午我喝了太多的酒，头有些昏，腿有些沉，舌自然也有些笨了，一个人到街上的书铺借了本小说便直奔大南门外的烂草地，准备刮刮江风，冒充一下孤独；抽抽小烟，模仿一下绝望。&lt;/p&gt;

&lt;p&gt;只是有太久没有出门了，所以没想到七月的太阳竟然会这么毒。&lt;/p&gt;

&lt;p&gt;当然，这是一个常识，但现在我的问题就是缺乏常识。于是在石凳上坐了五分钟后，我便决定脱下满身汗臭的格子短袖，做个脱衣的俗人，脱俗之人。&lt;/p&gt;

&lt;p&gt;当我的手指伸向短袖的第三个扣子时，不期有一道很清凉，很清凉的声音从我的正前方响了起来：&lt;/p&gt;

&lt;p&gt;“天气还真是热呀！”&lt;/p&gt;

&lt;p&gt;甜甜的、酸酸的、有营养……我自顾自地笑了笑，第一个反应是，这绝对是一个雌性动物才能拥有的声音，而且一定是个小雌。&lt;/p&gt;

&lt;p&gt;我的第二个反应是，赶忙把第二个扣子给扣了起来。&lt;/p&gt;

&lt;p&gt;我的第三个反应是，脑袋嗡地一声……世界果然大不同，居然有女子主动找我搭讪。&lt;/p&gt;

&lt;p&gt;我把头深深地埋在怀里，用了半分钟的时间，猜度了种种可能，唯一把美女相约的可能排除掉后，勇敢地抬起头来，面对这个脸上可能涂了八层防晒霜的恐龙。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杂谈:指纹歌里的人生百态</title>
      <link>http://alimy.me/post/etc_201603192115/</link>
      <pubDate>Sat, 19 Mar 2016 21:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/etc_201603192115/</guid>
      <description>&lt;p&gt;“一螺穷，二螺富，三螺四螺开当铺……”童年时代，您可曾唱过指纹歌？童谣未必预示了命运，但却包含了人生百态。&lt;/p&gt;

&lt;p&gt;指纹，是在每个人出生第六个月就形成，并跟随人一生一世的身体纹线，每个人的指纹都是独一无二的，世界上绝不会有指纹完全相同的两个人。所以，我国在一千多年前的唐代，就实行了指纹画押。古代的借据就是借户用中指和食指在借据上并列印上指纹叫作“花押”。直到现代，立据签约还仍然使用这种当事人在契约上按手印的方法作为凭信。刑事侦探还把鉴别手纹作为破案的重要手段。&lt;/p&gt;

&lt;p&gt;两种最基本的指纹：纹如水流中的漩涡形，或中间的纹成封口的环状，叫涡纹，又叫螺纹；指纹呈流线形脱开，不封口，叫流纹，又叫箕纹。&lt;/p&gt;

&lt;p&gt;螺是指螺旋状的环形纹，箕是指簸箕状的开口纹。张爱玲在《谈看书》中提到：十只手指上，螺越多越好，聚得住钱；男人簸箕也好，会赚钱，能够把钱铲回家；女人则是螺好，会积钱，手上没螺，拿东西不牢。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的地图-盛行于东南沿海&#34;&gt;指纹歌的地图：盛行于东南沿海&lt;/h3&gt;

&lt;p&gt;在一些童谣集中载录了大量的指纹歌，如商务印书馆《各省童谣集》第一集（1923年）就收录了三首，分别采自安徽休宁、浙江杭县、浙江新昌；上海世界书局《绘图童谣大观》（1924年）也收录了三首，分别采自江苏的吴县、无锡和江都。&lt;/p&gt;

&lt;p&gt;《各省童谣集》的编者说：“看螺纹定一生贫富贵贱，各省都有这种事，但所说各不相同，可见这事不足深信。”这话听起来，好像如果各地所说一致，就可以深信似的。这首曾经被打入“封建迷信”另册的趣味童谣，正因为异文众多，不足为信，才会给我们的童年生活带来许多相互打趣的快乐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>50 Shades of Go</title>
      <link>http://alimy.me/post/dev_201603182045/</link>
      <pubDate>Fri, 18 Mar 2016 20:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603182045/</guid>
      <description>&lt;p&gt;Go is a simple and fun language, but, like any other language, it has a few gotchas&amp;hellip; Many of those gotchas are not entirely Go&amp;rsquo;s fault. Some of these mistakes are natural traps if you are coming from another language. Others are due to faulty assumptions and missing details.&lt;/p&gt;

&lt;p&gt;A lot of these gotchas may seem obvious if you took the time to learn the language reading the official spec, wiki, mailing list discussions, many great posts and presentations by Rob Pike, and the source code. Not everybody starts the same way though and that&amp;rsquo;s OK. If you are new to Go the information here will save you hours debugging your code.&lt;/p&gt;

&lt;p&gt;This post covers Go 1.5 and below.&lt;/p&gt;

&lt;h3 id=&#34;total-beginner&#34;&gt;Total Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;Unused Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;Unused Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;Redeclaring Variables Using Short Variable Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;Accidental Variable Shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8&#34;&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#10&#34;&gt;Map Capacity&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>诚意十足的招聘页面</title>
      <link>http://alimy.me/post/etc_201603152115/</link>
      <pubDate>Tue, 15 Mar 2016 21:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/etc_201603152115/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160315210501.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210501.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to TOML</title>
      <link>http://alimy.me/post/dev_201603132045/</link>
      <pubDate>Sun, 13 Mar 2016 20:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132045/</guid>
      <description>&lt;h3 id=&#34;overview-of-date-and-calendar-classes&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;TOML stands for Tom’s Own Minimal Language. It is a configuration language vaguely similar to YAML or property lists, but far, far better. But before we get into it in detail, let’s look back at what came before.&lt;/p&gt;

&lt;h3 id=&#34;long-ago-in-a-galaxy-far-far-away&#34;&gt;Long Ago, In A Galaxy Far, Far Away&lt;/h3&gt;

&lt;p&gt;Since the beginning of computing, people have needed a way to configure their software. On Linux, this generally is done in text files. For simple configurations, good old foo = bar works pretty well. One setting per line, name on the left, value on the right, separated by an equals. Great. But when your configuration gets more complicated, this quickly breaks down. What if you need a value that is more than one line? How do you indicate a value should be parsed as a number instead of a string? How do you namespace related configuration values so you don’t need ridiculously long names to prevent collisions?&lt;/p&gt;

&lt;h3 id=&#34;the-dark-ages&#34;&gt;The Dark Ages&lt;/h3&gt;

&lt;p&gt;In the 90’s, we used XML. And it sucked. XML is verbose, it’s hard for humans to read and write, and it still doesn’t solve a lot of the problems above (like how to specify the type of a value). In addition, the XML spec is huge, processing is very complicated, and all the extra features invite abuse and overcomplication.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java: Date And Calendar</title>
      <link>http://alimy.me/post/dev_201603132030/</link>
      <pubDate>Sun, 13 Mar 2016 20:30:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132030/</guid>
      <description>&lt;h3 id=&#34;overview-of-date-and-calendar-classes&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;In this tutorial we look at the classes in java that are helpful in manipulating dates. Manipulating dates in java can be challenging, especially if you are building applications that cater to multiple timezones. Parsing dates, printing a date in UTC, printing a date in a different timezone, comparing dates, adding time to date&amp;hellip; we will be looking at all of these in this tutorial. We first begin with the introduction to the classes and then follow up with examples. You may want to directly jump to the examples, however, we strongly recommend that you understand the classes first, since that will make the examples very easy to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java.util.Date - This class is used to represent a specific time with a precision of millisecond. If you create a new Date object, it obtains the current system time using System.currentTimeMillis(). This is the number of milliseconds since epoch time (midnight, January 1, 1970 UTC). Here&amp;rsquo;s the tricky part, date stores time as number of seconds since epoch, it is a UTC time. However, when you print the date, you get the string representation of the date in the local timezone. Also note that the Date class is not designed to manipulate hour, month, year etc or retrieve them. Use this class only to create data or compare two dates. For all other uses, see the Calendar or GregorianCalendar class.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.Calendar - Calendar class allows manipulating data using its various fields such as minute, hour, day etc. As in the java.util.Date object, time is represented as number of milliseconds since epoch time. To get an instance of the Calendar use the Calendar.getInstance() method which returns a locale sensitive Calendar instance. Various set and get methods can be used to set and get time values. The current time is represented in two ways - 1. as number of milliseconds since epoch and 2. as local fields such as YEAR, MONTH, DAY, HOUR, MINUTE etc. The conversion between the two types is achieved by using the timezone offset (getOffset()) and the daylight savings fields.&lt;br /&gt;
the MONTH fields starts from 0 (JANUARY).&lt;br /&gt;
The DAY_OF_MONTH starts from 1&lt;br /&gt;
the DAY_OF_WEEK starts from SUNDAY with a value of 1.&lt;br /&gt;
HOUR starts from 0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.GregorialCalendar - A GregorianCalendar is the default implementation of the Abstract Calendar class. Next let us look at examples&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java: org.json</title>
      <link>http://alimy.me/post/dev_201603132025/</link>
      <pubDate>Sun, 13 Mar 2016 20:25:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132025/</guid>
      <description>&lt;h3 id=&#34;overview-of-the-api-classes&#34;&gt;Overview of The API Classes&lt;/h3&gt;

&lt;p&gt;org.json has classes to parse and write json string. It also converts between json and xml, HTTP header, Cookies, and CDF. The main classes are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;org.json.JSONObject - This class stores unordered key value pairs. The value can be Boolean, JSONArray, Number, String or JSONObject.NULL. It has constructors to take in a json string and store it as key value pairs. It also has constructors that take in a Map, a bean or a String&lt;/li&gt;
&lt;li&gt;org.json.JSONTokener - This class parses a JSON string and is also used internally by the JSONObject and JSONArray classes to parse JSON Strings&lt;/li&gt;
&lt;li&gt;org.json.JSONArray - This class stores an ordered sequence of values. Externally it represents a JSON Array&lt;/li&gt;
&lt;li&gt;org.json.JSONWriter - This class represents method to produce json text. It has an append(String) method to append a string to a json text, key(String) and value(String) method to add key and values to json string. It can also write an array.&lt;/li&gt;
&lt;li&gt;org.json.CDL- This class has methods to convert comma delimited text to JSONArray and a JSONArray to a comma delimited text. The array contains rows of comma separed strings, with rows separated by newline. The first row contains names.&lt;/li&gt;
&lt;li&gt;org.json.Cookie - This class has method to convert a web browser cookie to a JSONObject and back.&lt;/li&gt;
&lt;li&gt;org.json.CookieList - This class has method to convert a list of cookies to JSONObject and back.
Lets see some examples&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;parse-json&#34;&gt;Parse JSON&lt;/h3&gt;

&lt;p&gt;This examples shows how to parse a JSON string. The JSON string in this example is a list of genres (limited to 2) from freemusicarchive.org&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java: Json Simple</title>
      <link>http://alimy.me/post/dev_201603132015/</link>
      <pubDate>Sun, 13 Mar 2016 20:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132015/</guid>
      <description>&lt;p&gt;Json Simple is, as the name suggest, a very simple API. The API itself is made up of around 13 classes. The main classes are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSONParser - This parses Json text. It takes in a java.io.Reader or a String Object. It is also possible to pass a ContentHandler or ContainerHandler to the parser.&lt;/li&gt;
&lt;li&gt;JSONObject - This is a java representation of JSON string. It stores key value pairs. JsonObject extends HashMap. It has method to encode a map to a JSON text (writeJSONString(Map map, Writer out))&lt;/li&gt;
&lt;li&gt;JSONArray - Represents a collection. It extends an ArrayList. It implements the JSONAware and JSONStreamAware interface&lt;/li&gt;
&lt;li&gt;JSONValue - This class has methods to parse JSON string into Java objects. It uses the JSONParser to do so. It has methods to write JSON string from many java types (writeJSONString(Object value, Writer out)). It also has methods to escapte special characters using the escape(String s) method. This method escapes quotes, \, /, \r, \n, \b, \f, \t and other control characters (U+0000 through U+001F)&lt;/li&gt;
&lt;li&gt;JSONAware - Beans that support output to JSON form should implement this interface.
Lets see some examples&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;parse-json&#34;&gt;Parse JSON&lt;/h3&gt;

&lt;p&gt;This examples shows how to parse a JSON string. The JSON string in this example is a list of genres (limited to 2) from freemusicarchive.org&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gson: User Guide</title>
      <link>http://alimy.me/post/dev_201603122045/</link>
      <pubDate>Sat, 12 Mar 2016 20:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122045/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Goals-for-Gson&#34;&gt;Goals for Gson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-Performance-and-Scalability&#34;&gt;Gson Performance and Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-Users&#34;&gt;Gson Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Using-Gson&#34;&gt;Using Gson&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-With-Maven&#34;&gt;Using Gson with Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Primitives-Examples&#34;&gt;Primitives Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Object-Examples&#34;&gt;Object Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Finer-Points-with-Objects&#34;&gt;Finer Points with Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Nested-Classes-including-Inner-Classes-&#34;&gt;Nested Classes (including Inner Classes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Array-Examples&#34;&gt;Array Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Collections-Examples&#34;&gt;Collections Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Collections-Limitations&#34;&gt;Collections Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Serializing-and-Deserializing-Generic-Types&#34;&gt;Serializing and Deserializing Generic Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types&#34;&gt;Serializing and Deserializing Collection with Objects of Arbitrary Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Built-in-Serializers-and-Deserializers&#34;&gt;Built-in Serializers and Deserializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Custom-Serialization-and-Deserialization&#34;&gt;Custom Serialization and Deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Writing-a-Serializer&#34;&gt;Writing a Serializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Writing-a-Deserializer&#34;&gt;Writing a Deserializer&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Gson: Exclusion Strategy</title>
      <link>http://alimy.me/post/dev_201603122040/</link>
      <pubDate>Sat, 12 Mar 2016 20:40:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122040/</guid>
      <description>&lt;p&gt;In this tutorial we look at how to selectively include fields from a java object to a json string. By default, Gson tries to map all fields in the java object to the corresponding property in json. However, in certain cases we may want to control that. There are a few ways to do this. It is also possible to excluse fields from third party packages where we have no access to the source code. The different ways to exclude fields are :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By defining a custom annotation and ignoring fields that are annotated with that.&lt;/li&gt;
&lt;li&gt;By Defining a custom exclusion class by extending the ExclusionStrategy interface and implementing the public boolean shouldSkipField(FieldAttributes f); and public boolean shouldSkipClass(Class clazz); methods&lt;/li&gt;
&lt;li&gt;By using the @Expose annotations and then using the excludeFieldsWithoutExposeAnnotation() method on the GsonBuilder. This will ignore all fields except the ones that have been exposed using the @Expose annotation.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Gson: Custom Serializer</title>
      <link>http://alimy.me/post/dev_201603122035/</link>
      <pubDate>Sat, 12 Mar 2016 20:35:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122035/</guid>
      <description>&lt;p&gt;Just as we saw in the &lt;a href=&#34;http://alimy.me/post/dev_201603122030&#34;&gt;previous&lt;/a&gt; tutorial, Gson provides way to specify custom serializers and deserializers. Register a custom serializer with the GsonBuilder if you need you own way to convert a java object to json and you a custom deserializer if you dont like Gson&amp;rsquo;s way of converting json to the java object. The first example below shows a custom serializer and the second example shows a custom deserializer.&lt;/p&gt;

&lt;h3 id=&#34;custom-serializer&#34;&gt;Custom Serializer&lt;/h3&gt;

&lt;p&gt;Create a custom serializer by implementing a com.studytrails.json.gson.JsonSerializer and implementing the public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context); method. src is the source object and Type is the type of the source object. The example below demonstrates a custom Serializer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gson: Custom Type Adapter</title>
      <link>http://alimy.me/post/dev_201603122030/</link>
      <pubDate>Sat, 12 Mar 2016 20:30:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122030/</guid>
      <description>&lt;p&gt;In the earlier tutorials we have seen how gson can serialize and deserialize java classes with or without hierarchies. By default, it introspects the classes and comes with with a strategy for serializing and deserializing it. However, in some cases, you want to specify your own conversion strategy. That is, you want to control how the java object is converted to json string and the other way round. Gson provides a capability to specify a custom type adapter. You tell Gson that for a particular class, use the conversion strategy specified by your custom adapter. Lets look at how to write the type adapter :
To write a custom adapter extend the com.google.gson.TypeAdapter abstract class. Implement the public abstract T read(JsonReader in) throws IOException; and public abstract void write(JsonWriter out, T value) throws IOException; methods. The adapter should also handle nulls. Create the Type adapter instance and then register it with the GsonBuilder. Create the Gson object from the GsonBuilder and then use that to serialize and deserialize. Lets look at an example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.io.IOUtils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class DatasetTypeAdapterExample8 {

	public static void main(String[] args) throws MalformedURLException, IOException {
		String url = &amp;quot;http://freemusicarchive.org/api/get/albums.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=5&amp;quot;;
		String json = IOUtils.toString(new URL(url));
		// Create the custom type adapter and register it with the GsonBuilder
		// class.
		Gson gson = new GsonBuilder().registerTypeAdapter(Dataset.class, new DatasetTypeAdapter()).create();
		// deserialize the json to Albums class. The Dataset objects are part of
		// the Albums class. Whenever Gson encounters an object of type DataSet
		// it calls the DatasetTypeAdapter to read and write json.
		Albums albums = gson.fromJson(json, Albums.class);
		System.out.println(albums.getDataset()[1].getAlbum_title());
		// prints
		// http://freemusicarchive.org/music/The_Yes_Sirs/Through_The_Cracks_Mix_Vol_1/
	}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Gson: Serializing Inner Classes</title>
      <link>http://alimy.me/post/dev_201603122028/</link>
      <pubDate>Sat, 12 Mar 2016 20:28:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122028/</guid>
      <description>&lt;h3 id=&#34;serializing-inner-classes&#34;&gt;Serializing inner classes&lt;/h3&gt;

&lt;p&gt;Gson can serialize inner classes and static nested classes. The detailed example below demonstrates the following things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Serializing class containing static nested class&lt;/li&gt;
&lt;li&gt;Serializing class containing non static nested class (Inner class)&lt;/li&gt;
&lt;li&gt;De-serializing json to a class containing static and non static inner class&lt;/li&gt;
&lt;li&gt;Serializing static nested class (without the enclosing type)&lt;/li&gt;
&lt;li&gt;Serializing non static nested class (without the enclosing type)&lt;/li&gt;
&lt;li&gt;De-serializing json to a static nested class (without the enclosing type)&lt;/li&gt;
&lt;li&gt;De-serializing json to a non static nested class (without the enclosing type)&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Gson: Serializing and deserializing Java Generic Classes</title>
      <link>http://alimy.me/post/dev_201603122025/</link>
      <pubDate>Sat, 12 Mar 2016 20:25:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122025/</guid>
      <description>&lt;h3 id=&#34;serializing-list&#34;&gt;Serializing list&lt;/h3&gt;

&lt;p&gt;As we saw in the previous tutorial serializing and deserializing classes with generic types is non trivial since generic type information is lost while serializing. Gson provides a class called com.google.gson.reflect.TypeToken to store generic types. The example below shows how to use the TypeToken class to serialize and deserialize Classes with generic types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.lang.reflect.Type;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class GenericTypesExample8 {
	public static void main(String[] args) {
		// create an animal class that is of type dog.
		Animal animal = new Animal&amp;lt;Dog&amp;gt;();
		// Create a Dog instance
		Dog dog = new Dog(&amp;quot;I am a dog&amp;quot;);

		animal.setAnimal(dog);
		Gson gson = new Gson();
		// Define a Type that is an Animal of type dog.
		Type animalType = new TypeToken&amp;lt;Animal&amp;lt;Dog&amp;gt;&amp;gt;() {
		}.getType();

		// we first convert the animal object to a json and then read the json
		// back. However we define the json to be of Animal type
		Animal animal1 = gson.fromJson(gson.toJson(animal, animalType), Animal.class);
		System.out.println(animal1.get().getClass()); // prints class

    // com.google.gson.internal.LinkedTreeMap
		// In contrast to above where we read the json back using the Animal
		// type, here we read the json back as the custom animalType Type. This
		// gives Gson an idea of what
		// the generic type should be.
		Animal animal2 = gson.fromJson(gson.toJson(animal), animalType);
		System.out.println(animal2.get().getClass());
		// prints class com.studytrails.json.gson.Dog

	}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Gson: Serializing Collections</title>
      <link>http://alimy.me/post/dev_201603122022/</link>
      <pubDate>Sat, 12 Mar 2016 20:22:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122022/</guid>
      <description>&lt;h3 id=&#34;serializing-list&#34;&gt;Serializing list&lt;/h3&gt;

&lt;p&gt;Serializing Collections should have been similar to serializing other objects. However, the problem is that Collections are generic and the generic type information is not maintained in the json. We therefore pass the type while deserializing list. Note that if the Collection has different types of objects then there is no way to serialize it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.lang.reflect.Type;
import java.util.Collection;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class DeSerializeListExample5 {
	public static void main(String[] args) {
		String json = &amp;quot;[{album_id:1,album_title:&#39;album1&#39;},{album_id:2,album_title:&#39;album2&#39;}]&amp;quot;;

		Gson gson = new Gson();
		// create the type for the collection. In this case define that the collection is of type Dataset
		Type datasetListType = new TypeToken&amp;lt;Collection&amp;lt;Dataset&amp;gt;&amp;gt;() {}.getType();
		List&amp;lt;Dataset&amp;gt; datasets = gson.fromJson(json, datasetListType);
		for (Dataset dataset : datasets) {
			System.out.println(dataset.getAlbum_title());
			System.out.println(dataset.getAlbum_id());
		}
		// Prints
		//album1
		//1
		//album2
		//2

	}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Gson: Convert json to a java object tree</title>
      <link>http://alimy.me/post/dev_201603122020/</link>
      <pubDate>Sat, 12 Mar 2016 20:20:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122020/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://alimy.me/post/dev_201603122010&#34; title=&#34;Convert json to a java object&#34;&gt;Earlier&lt;/a&gt; tutorial we saw how to convert json to a java object. In this tutorial, we build a tree of com.google.gson.JsonElement from the json string. The tree can then be traversed to build java objects. JsonElement has methods such as isJsonObject(), isJsonNull(), etc that can be used to figure out the type of JsonElement. Then to get the actual object use the getAsJsonObject(), getAsJsonPrimitive() etc methods. We parse the response from the free music archive json API. Here&amp;rsquo;s the class&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gson: parsing json to java token by token</title>
      <link>http://alimy.me/post/dev_201603122015/</link>
      <pubDate>Sat, 12 Mar 2016 20:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122015/</guid>
      <description>&lt;p&gt;In the earlier tutorials we saw how to &lt;a href=&#34;http://alimy.me/post/dev_201603122010&#34; title=&#34;Convert json to a java object&#34;&gt;convert json to a java object&lt;/a&gt;. In This tutorial we see how to parse json and obtain individual tokens. Although this may seem like a cumbersome way to build java object from json, however it is extremely powerful and may be a good choice if you need a very high level of control over the parsing. We use the JsonReader class to read the json as a stream of tokens. The beginning of an object or an array is also a token. Here&amp;rsquo;s a detailed example.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gson: Convert json to a java object</title>
      <link>http://alimy.me/post/dev_201603122010/</link>
      <pubDate>Sat, 12 Mar 2016 20:10:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122010/</guid>
      <description>&lt;p&gt;Google json provides methods to convert the json string to java objects. The Java object may be hierarchical. For this example we consider java objects of non generic type only. Gson uses the name to match the json property to the java field. There are two ways to convert json to java.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the com.google.gson.Gson class. Create a new instance of this class and use the method public &lt;T&gt; T fromJson(String json, Class&lt;T&gt; classOfT). classOfT is the java object to which the json is to be converted to.&lt;/li&gt;
&lt;li&gt;The other way is to use the com.google.gson.GsonBuilder class. This class allows setting up certain features, such as - allowing null serialization or setting up custom serializing policies. Create a GsonBuilder, apply the features and then obtain the Gson class from the builder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial we look at the Gson class to de-serialize json from &lt;a href=&#34;http://freemusicarchive.org/api/get/albums.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=5&#34; title=&#34;free music archive&#34;&gt;free music archive&lt;/a&gt;. The main class is the Albums class and it contains the list of Datasets. Each Dataset is one album. The way to approach the problem of deserialization is to build a java class such that the when Gson converts the Java class to JSON, the resultant JSON resembles the one we are trying to parse. Lets see this in action. If you look at the JSON, it starts with a root object that has properties such as title, message, errors, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
title: &amp;quot;Free Music Archive - Albums&amp;quot;,
message: &amp;quot;&amp;quot;,
errors: [ ],
total: &amp;quot;11259&amp;quot;,
total_pages: 2252,
page: 1,
limit: &amp;quot;5&amp;quot;,
dataset: [
{
......
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Gson: Introduction</title>
      <link>http://alimy.me/post/dev_201603122005/</link>
      <pubDate>Sat, 12 Mar 2016 20:05:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122005/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/google/gson&#34; title=&#34;Gson@github&#34;&gt;google json&lt;/a&gt; - gson is an open source java api for parsing and building json. It has extensive support for java generics. It also provides support for converting third party classes to json. It can be used to serialize and deserialize complex objects with deep hierarchies that may contain generic classes. In these tutorials we demonstrate, with examples, the following functionalities of gson.&lt;/p&gt;

&lt;p&gt;Gson 2.3: Look at &lt;a href=&#34;http://www.studytrails.com/java/json/java-google-json-new-2.3.jsp&#34; title=&#34;gson tutorial&#34;&gt;this tutorial&lt;/a&gt; to see the
latest additions in Gson 2.3 (TypeAdapter Annotation, JsonPath support and new methods in JsonArray)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://alimy.me/post/dev_201603122010&#34; title=&#34;Java to JSON and Back - Data Binding&#34;&gt;Java to JSON and Back - Data Binding&lt;/a&gt; - In this example we look at how to bind a Json to a java object. Gson is quite powerful when it comes to binding a json to Java since it has a lot of built in serializers and deserializers. A serializer has code that helps in converting a Json string to corresponding java type. For example if you have an array in JSON (elements enclosed in &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;) and you want to convert that to a Java array then Gson would internally use an ArrayTypeAdapter to convert the Json Array to Java Array and back. If you are looking at Gson primarily to parse JSON then we would suggest that you start with a simple Java class, convert that to JSON and make sure it looks like the JSON that you want to parse. You can then gradually start adding complexities to the java class and at each step convert it to a JSON and ensure that the JSON is similar to the one that you are trying to parse. It is good to think of parsing a JSON as creating a java class that can give you the JSON that you want to parse. Also note that you have certain flexibility while creating the java object. You could represent a Json Array as a Java array or a Java List. The choice may be driven more by how you want to use the class. If you map a Json property to a java array Gson would use an Array adapter but if you map it to a List it would use the collection adapter and you, the user, does not have to worry about that. Gson also handles null gracefully&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://alimy.me/post/dev_201603122015&#34; title=&#34;Java to JSON and Back - Streaming&#34;&gt;Java to JSON and Back - Streaming&lt;/a&gt; - At certain times you want more control on the way the parsing is done. Also there may be times when Gson automated conversion does not give you the result that you are looking for. For example, if you have a List that contains multiple kinds of Object then Gson may not be able to deserialize or parse the Json for you. In such cases Gson provides a streaming API. You can use the Streaming API and handle a token at a time. The token may be start and end of Json Object, start and end of json array, the key of a property and the String or Number value of a property.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Json Polymorphism</title>
      <link>http://alimy.me/post/dev_201603112105/</link>
      <pubDate>Fri, 11 Mar 2016 21:05:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112105/</guid>
      <description>&lt;p&gt;Jackson provides a way to maintain sub type information while serializing java objects. It is possible to recreate the exact sub type. The type information can be embedded into the json as a property. In the example below we create a zoo, that has a list of animals. The animal may be an elephant or a lion, and they both extend the Animal abstract class. While deserializing we want to create the exact animal type. We also demonstrate the use of @JsonTypeInfo and @JsonSubTypes annotations.&lt;/p&gt;

&lt;h3 id=&#34;data-serialization-and-polymorphism-example&#34;&gt;Data Serialization and Polymorphism Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.jackson;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class SerializeExample1 {
    private static String outputFile = &amp;quot;zoo.json&amp;quot;;

    public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {
        // let start creating the zoo
        Zoo zoo = new Zoo(&amp;quot;Samba Wild Park&amp;quot;, &amp;quot;Paz&amp;quot;);
        Lion lion = new Lion(&amp;quot;Simba&amp;quot;);
        Elephant elephant = new Elephant(&amp;quot;Manny&amp;quot;);
        List&amp;lt;Animal&amp;gt; animals = new ArrayList&amp;lt;&amp;gt;();
        animals.add(lion);
        animals.add(elephant);
        zoo.setAnimals(animals);

        ObjectMapper mapper = new ObjectMapper();
        mapper.writerWithDefaultPrettyPrinter().writeValue(new FileWriter(new File(outputFile)), zoo);
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jackson: jackson Mix- In Annotations</title>
      <link>http://alimy.me/post/dev_201603112100/</link>
      <pubDate>Fri, 11 Mar 2016 21:00:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112100/</guid>
      <description>&lt;p&gt;Annotations are a great way to manage serialization and deserialization in Jackson. However, what do you do if you want to annotate a third party class, or if you dont want to tightly couple your POJOs to jackson annotations. This is where Mix-in comes into play. You define a mix-in abstract class that is kind of a proxy to the actual class. Annotations are then definied over this proxy class&lt;/p&gt;

&lt;h3 id=&#34;jackson-mix-in-example&#34;&gt;Jackson Mix-In Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.jackson;

import java.io.File;
import java.io.IOException;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class SerializeExample3 {
    public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.addMixInAnnotations(Bird.class, BirdMixIn.class);
        Bird bird = new Bird(&amp;quot;scarlet Ibis&amp;quot;);
        bird.setSound(&amp;quot;eee&amp;quot;);
        bird.setHabitat(&amp;quot;water&amp;quot;);

        mapper.writerWithDefaultPrettyPrinter().writeValue(new File(&amp;quot;bird.json&amp;quot;), bird);
    }

}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Json data binding filters</title>
      <link>http://alimy.me/post/dev_201603112055/</link>
      <pubDate>Fri, 11 Mar 2016 20:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112055/</guid>
      <description>&lt;p&gt;Jackson provides an effective an efficient way to bind json to POJOs. However, at times, certain properties may need to be ignored while converting a json to java ojbect and a java object to json string. Jackson provides three ways to filter properties.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;@JsonIgnoreProperties- This annotation can be used at the type level to ignore json properties. In the example below we ignore the &amp;lsquo;tags&amp;rsquo; property from the albums dataset.&lt;/li&gt;
&lt;li&gt;@JsonIgnore - This annotation can be set at property level to ignore certain properties.&lt;/li&gt;
&lt;li&gt;Using Custom filters&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The example below shows method 1 and 2. Also note the use of the @JsonAutoDetect annotation.&lt;/p&gt;

&lt;h3 id=&#34;data-binding-filters-example&#34;&gt;Data Binding Filters Example&lt;/h3&gt;

&lt;h4 id=&#34;databinding&#34;&gt;Databinding&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.jackson;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;

// Do not use fields to autodetect. use the public getter methods to autodetect properties
@JsonAutoDetect(fieldVisibility = Visibility.NONE, getterVisibility = Visibility.PUBLIC_ONLY)
public class AlbumsFilter {

    private String title;
    private DatasetFilter[] datasetFilter;
    public String total_pages;

    protected String getTotal_pages() {
        return total_pages;
    }

    public String getTitle() {
        return title;
    }

    // this getter method is for the &#39;dataset&#39; property
    @JsonProperty(&amp;quot;dataset&amp;quot;)
    public DatasetFilter[] getDatasetFilter() {
        return datasetFilter;
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Json annotations and dyna beans</title>
      <link>http://alimy.me/post/dev_201603112050/</link>
      <pubDate>Fri, 11 Mar 2016 20:50:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112050/</guid>
      <description>&lt;p&gt;The json string at times have a lot of properties. It seems a waste creating a POJO with all those properties. Wouldnt it be great if there was a catch&amp;rsquo;all that could read all properties in a map? Jackson provides annotations to do just that. In the example below we have set two properties in the bean and the other properties are read into a map. These example also introduces some common annotations using in Jackson. Lets look at them briefly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;@JsonProperty-This annotation is used to mark a method as a getter or setter for a property. In other words, it associates a json field with a java property. If a name is specified (@JsonProperty(&amp;ldquo;age&amp;rdquo;)) then the java property that is annotated with this annotation is mapped to the &amp;lsquo;age&amp;rsquo; field of the json, If no name is specified the java property name is used.&lt;/li&gt;
&lt;li&gt;@JsonCreator-This annotation is used the define constructors that are used to create java objects from json string. It is used during data binding and specifies properties that will be used to create java objects during deserialization.&lt;/li&gt;
&lt;li&gt;@JsonAnyGetter and @JsonAnySetter - This annotations are used to mark methods that set or read fields that are not handled by any other java property. These act like catch-all and handle all fields that are not handled by any other java property. The fields are stored in a map as key value pairs.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Jackson: List serialization</title>
      <link>http://alimy.me/post/dev_201603112045/</link>
      <pubDate>Fri, 11 Mar 2016 20:45:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112045/</guid>
      <description>&lt;p&gt;In this tutorial we will see how to convert a java List to JSON. Serializing list is a little tricky since by default the type info is not stored while serializing and deserializing lists. In this tutorial we look at two examples. In the first example we serialize an Object that has a java List as one of its properties. In the second example we try and serialize the List directly. In both examples we use special configuration to preserve type info.&lt;/p&gt;

&lt;h3 id=&#34;example-1-serializing-object-containing-a-list&#34;&gt;Example 1 : Serializing Object containing a list&lt;/h3&gt;

&lt;p&gt;The example converts a Zoo class to json. the zoo class contains the name of zoo, its city and a list of animals. The list is of type &amp;lsquo;Animal&amp;rsquo;, i.e. the list contains elements that are subclass of the Abstract class Animal. Lets see what happens when we try to serialize zoo. First we create the Zoo class. Notice how the constructor looks. When we try to get the Zoo Object back from the JSON, Jackson has to know that it should create the Zoo Object using the constructor that takes in the name and city properties.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Zoo {
    public String name;
    public String city;


    @JsonCreator
    public Zoo(@JsonProperty(&amp;quot;name&amp;quot;) String name,@JsonProperty(&amp;quot;city&amp;quot;) String city) {
        this.name = name;
        this.city = city;
    }

    public List&amp;lt;Animal&amp;gt; animals = new ArrayList&amp;lt;Animal&amp;gt;();

    public List&amp;lt;Animal&amp;gt; addAnimal(Animal animal) {
        animals.add(animal);
        return animals;
    }

}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Json Data Binding</title>
      <link>http://alimy.me/post/dev_201603112040/</link>
      <pubDate>Fri, 11 Mar 2016 20:40:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112040/</guid>
      <description>&lt;p&gt;A thing that most java developers love to deal with is &amp;hellip;. Java POJO. Wouldn&amp;rsquo;t you love a black box where you can see JSON string entering from one side and POJOs coming out from the other. That&amp;rsquo;s what Jackson data binding does. This can be best explained by an example. We use the json from free music archive. It has an API to get latest albums in the form of JSON. we would read that json string (Click on this link to see the json) into Albums object. The Albums object contains an array of Dataset.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how The JSON to Java conversion works&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first step is to create the Java class that would hold the JSON data. Look at the json. we create an Albums object to hold the entire json. The json contains an array of &amp;lsquo;dataset&amp;rsquo; elements. We create a Java Object of type DataSet and in the Albums object we create a dataset property that is an array of type DataSet.&lt;/li&gt;
&lt;li&gt;Create an instance of the com.fasterxml.jackson.databind.ObjectMapper class. This is the class that maps a JSON to a Java Object.&lt;code&gt;ObjectMapper mapper = new ObjectMapper();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We use the &lt;em&gt;readValue&lt;/em&gt; method of the ObjectMapper to read. There are multiple versions of this method and we use the method that takes in a URL. However, there are method that read from a file, inputstream, String or a ByteArray.&lt;/li&gt;
&lt;li&gt;The ObjectMapper caches serializers and deserializers so it would be a good idea to reuse an ObjectMapper instance for multiple conversions&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Jackson: build java tree model from json</title>
      <link>http://alimy.me/post/dev_201603112035/</link>
      <pubDate>Fri, 11 Mar 2016 20:35:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112035/</guid>
      <description>&lt;p&gt;Jackson provides a tree node called com.fasterxml.jackson.databind.JsonNode. The ObjectMapper provides a method to read the json into a tree with the root being a JsonNode. This can be thought of as being similar to DOM nodes in XML DOM trees. The example below demonstrates building a tree from the json string&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jackson: json and java - Streaming</title>
      <link>http://alimy.me/post/dev_201603112030/</link>
      <pubDate>Fri, 11 Mar 2016 20:30:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112030/</guid>
      <description>&lt;h3 id=&#34;streaming-parser-and-generator&#34;&gt;Streaming Parser and Generator&lt;/h3&gt;

&lt;p&gt;Jackson provides a low level API to parse json string. The API provides token for each json object. For example, the start of json &amp;lsquo;{&amp;rsquo; is the first object that the parser provides. The key value pair is another single object. The client code can use the tokens and get the json properties or build a java object out of it if required. This low level API is extremely powerful but needs a lot of coding. For most cases, Jackson&amp;rsquo;s tree traversing and data binding capability should be explored instead. We provide two examples below. The first example demonstrates json parsing and the second demonstrated json generation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Java to JSON and back</title>
      <link>http://alimy.me/post/dev_201603112025/</link>
      <pubDate>Fri, 11 Mar 2016 20:25:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112025/</guid>
      <description>&lt;h3 id=&#34;creating-json-from-java&#34;&gt;Creating JSON from Java&lt;/h3&gt;

&lt;p&gt;Jackson provides classes that can be used to convert a Java Object to JSON and back. In this example we look at how to build a JSON construct from a Java Object. We will start with a simple class and gradually start adding complexities to it. Lets say that we are a music company and we want to publish an api where users can query for Album. We first build an Album class with a single property title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Album {
    private String title;

    public Album(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jackson: Introduction</title>
      <link>http://alimy.me/post/dev_201603112020/</link>
      <pubDate>Fri, 11 Mar 2016 20:20:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603112020/</guid>
      <description>&lt;h3 id=&#34;overview-of-the-jackson-api&#34;&gt;Overview of The Jackson API&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.fasterxml.com/JacksonHome&#34; title=&#34;Jackson Api&#34;&gt;Jackson Api&lt;/a&gt; contains a lot of functionalities to read and build json using java. It has very powerful data binding capabilities and provides a framework to serialize custom java objects to json string and deserialize json string back to java objects. Json written with jackson can contain embedded class information that helps in creating the complete object tree during deserialization.&lt;/p&gt;

&lt;h3 id=&#34;creating-json-from-java&#34;&gt;Creating JSON from JAVA&lt;/h3&gt;

&lt;p&gt;There are three ways to create JSON from JAVA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From a Java Object (The Same object can also be then used to read the JSON)&lt;/li&gt;
&lt;li&gt;From a JsonNode Tree&lt;/li&gt;
&lt;li&gt;Building a Json Stream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;a href=&#34;http://alimy.me/post/dev_201603112025&#34; title=&#34;Java to JSON and back&#34;&gt;first tutorial&lt;/a&gt; we look at all the three ways of creating JSON. Note that if you are new to Jackson this is probably the best place to begin even if you are looking at a way to parse JSON.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XStream: XML Transformation</title>
      <link>http://alimy.me/post/dev_201603092120/</link>
      <pubDate>Wed, 09 Mar 2016 21:20:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092120/</guid>
      <description>&lt;p&gt;XStream provides a TraxSource (extends SAXSource) that can be used as an input to XSLT transformation. The TraxSource uses a java Object and the corresponding XStream Object. The java object can then be directly converted to XSLT target without actually converting to XML. Lets look at an example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.xml.xstream;

import java.util.ArrayList;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.TraxSource;

public class XStreamTransformationExample {
	public static void main(String[] args) throws TransformerFactoryConfigurationError, TransformerException {
		XStreamTransformationExample transformationExample = new XStreamTransformationExample();
		transformationExample.runTransformation();
	}

	private void runTransformation() throws TransformerFactoryConfigurationError, TransformerException {
		XStream xstream = new XStream();
		xstream.alias(&amp;quot;rss&amp;quot;, Rss2.class);
		xstream.alias(&amp;quot;item&amp;quot;, Item2.class);
		Rss2 rss = new Rss2();
		Channel2 channel = new Channel2();
		rss.channel = channel;
		channel.title = &amp;quot;Title&amp;quot;;
		channel.link = &amp;quot;link&amp;quot;;
		channel.image = new Image2();
		channel.image.link = &amp;quot;image link&amp;quot;;
		Item2 item1 = new Item2();
		item1.link = &amp;quot;item link&amp;quot;;
		item1.title = &amp;quot;Item Title&amp;quot;;
		channel.items = new ArrayList&amp;lt;Item2&amp;gt;();
		channel.items.add(item1);
		System.out.println(xstream.toXML(rss));

		Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(&amp;quot;bbc.xsl&amp;quot;));
		TraxSource traxSource = new TraxSource(rss, xstream);
		StreamResult result = new StreamResult(System.out);
		transformer.transform(traxSource, result);

		// prints the html on console

	}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>XStream: Json to Java</title>
      <link>http://alimy.me/post/dev_201603092115/</link>
      <pubDate>Wed, 09 Mar 2016 21:15:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092115/</guid>
      <description>&lt;p&gt;XStream can also be used with JSON. XStream provides two drivers : a JsonHierarchicalStreamDriver and a JettisonMappedXmlDriver. The JsonHierarchicalStreamDriver can be used to write a JSON string but cannot deserialize a JSON. JettisonMappedXmlDriver can be used to deserialize a JSON but it introduces an additional dependency. In this example we deserialize a json string into a java object.&lt;/p&gt;

&lt;p&gt;Note: The mapping from Java to JSON (and back) is limited, since not anything can be expressed in JSON as with XML. It works quite well for simple objects, but one should not expect wonders. Additionally XStream supports only Jettison 1.0.1. Any other version will not work correctly (even newer ones).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XStream: Collection Converters</title>
      <link>http://alimy.me/post/dev_201603092105/</link>
      <pubDate>Wed, 09 Mar 2016 21:05:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092105/</guid>
      <description>&lt;p&gt;In the earlier tutorials we saw how to convert a &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34; title=&#34;parsing an xml&#34;&gt;Java object to XML and back&lt;/a&gt;, &lt;a href=&#34;http://alimy.me/post/dev_201603092055&#34; title=&#34;custom converter&#34;&gt;custom converter&lt;/a&gt; and &lt;a href=&#34;http://alimy.me/post/dev_201603092100&#34; title=&#34;basic converters&#34;&gt;basic converters&lt;/a&gt;. In this tutorial we look at how XStream converts array and collections from java to xml and vice versa. We will convert the following types :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;String[]&lt;/li&gt;
&lt;li&gt;char[]&lt;/li&gt;
&lt;li&gt;List&lt;String&gt;&lt;/li&gt;
&lt;li&gt;java.util.Properties&lt;/li&gt;
&lt;li&gt;List&lt;String&gt;&lt;/li&gt;
&lt;li&gt;Map&lt;String, String&gt;&lt;/li&gt;
&lt;li&gt;TreeMap&lt;String, String&gt; treeMap&lt;/li&gt;
&lt;li&gt;TreeSet&lt;String&gt; treeSet&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;EnumMap&lt;testEnum, String&gt; testEnum is an enum&lt;/li&gt;
&lt;li&gt;EnumSet&lt;testEnum&gt; testEnum is an enum&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>XStream: Basic Built-in Converters</title>
      <link>http://alimy.me/post/dev_201603092100/</link>
      <pubDate>Wed, 09 Mar 2016 21:00:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092100/</guid>
      <description>In the previous tutorials we saw an example of how to convert java object to XML and back. That tutorial also explained the concept of aliases and implicit collection.In the last tutorial we show how to write a custom converter. In this tutorial, lets see some of the basic built in converters of XStream and how the resultant XML from those converters look like. We will look at how the following types are converted.</description>
    </item>
    
    <item>
      <title>XStream: Custom Converter for BufferedImage</title>
      <link>http://alimy.me/post/dev_201603092055/</link>
      <pubDate>Wed, 09 Mar 2016 20:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092055/</guid>
      <description>&lt;p&gt;In the previous tutorials we saw an example of how to convert a &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34; title=&#34;parsing an xml&#34;&gt;java object to XML and back&lt;/a&gt;. That tutorial also explained the concept of aliases and implicit collection. While serializing a Java object to XML XStream uses custom converters. These converters specify how to create XML from a Java Object or how to create a Java Object from XML elements. In most cases the provided converters should suffice, however, in certain cases you may want to create your own converters. To do so create a class that implements com.thoughtworks.xstream.converters.Converter and implement the void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context); and Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context); The example below demonstrates a CustomConverter. To make the example more interesting we will write a converter to serialize a BufferedImage. The image for the example can be downloaded from here&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XStream: Referencing Objects</title>
      <link>http://alimy.me/post/dev_201603092051/</link>
      <pubDate>Wed, 09 Mar 2016 20:51:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092051/</guid>
      <description>&lt;p&gt;XStream allows you to store references while converting a java object to XML. Consider a case where you have an Artist Object. The object contains albums that the artist has released, but you also want to store a reference to a &amp;lsquo;similar artist&amp;rsquo;. People listening to an artist might be interested in listening to a similar artist. When you convert this object to XML, XStream preserves the reference to the similar artist. It also manages circular references, so if there are no similar artist then the &amp;lsquo;similar artist&amp;rsquo; field could store a reference to the Owner Artist.&lt;/p&gt;

&lt;p&gt;XStream has multiple ways to store references. you need to use the setMode(int mode) method to set the mode. XStream allows following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NO_REFERENCES&lt;/li&gt;
&lt;li&gt;ID_REFERENCES&lt;/li&gt;
&lt;li&gt;XPATH_RELATIVE_REFERENCES&lt;/li&gt;
&lt;li&gt;XPATH_ABSOLUTE_REFERENCES&lt;/li&gt;
&lt;li&gt;SINGLE_NODE_XPATH_RELATIVE_REFERENCES&lt;/li&gt;
&lt;li&gt;SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>XStream: Handling Attributes in XML</title>
      <link>http://alimy.me/post/dev_201603092041/</link>
      <pubDate>Wed, 09 Mar 2016 20:41:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603092041/</guid>
      <description>&lt;p&gt;In the previous tutorial we saw &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34; title=&#34;Parsing An XML&#34;&gt;how to convert Java to XML and back&lt;/a&gt;. In this tutorial we look at different ways to handle XML attributes using XStream. However note that the attributes are only safe if you know that the written String values are not affected by the XML parser&amp;rsquo;s white space normalization. The XML specification requires that a parser does this and it means that an attribute value of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;element attr=&amp;quot;  foo\t\n   bar    &amp;quot;&amp;gt;
&amp;lt;/element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will always be normalized and passed this assertion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assertEquals(&amp;quot;foo bar&amp;quot;, element.getAttr());
XStream has no influence about this behavior.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>XStream: Java to XML Using Annotation</title>
      <link>http://alimy.me/post/dev_201603081441/</link>
      <pubDate>Tue, 08 Mar 2016 14:41:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081441/</guid>
      <description>&lt;p&gt;In the previous tutorials we saw an example of how to &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34;&gt;create a java object from XML&lt;/a&gt;. That tutorial also explained the concept of aliases and implicit collection. In this tutorial we continue with that but use annotation on the java class. The advantage with annotation is that it is faster to code and develop. the disadvantage is that you bind the java class to XStream.&lt;/p&gt;

&lt;p&gt;In the example below we convert an object of type JazzArtist to XML. JazzArtist contains fields name, isAlive, a url and a list of albums. This example uses the following annotations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@XStreamAlias - Used on the type, field or attribute. To understand &amp;lsquo;aliases&amp;rsquo; look at this tutorial&lt;/li&gt;
&lt;li&gt;@XStreamImplicit - Used on Collections or array. To understand &amp;lsquo;Implicit Collections/Arrays&amp;rsquo; look at the this tutorial.&lt;/li&gt;
&lt;li&gt;@XStreamAsAttribute - Used to mark a field as an attribute.&lt;/li&gt;
&lt;li&gt;@XStreamConverter - Use a specific converter for this field. We will look at Converters in detail in a later tutorial. In this example we use a Boolean converter for &amp;lsquo;isAlive&amp;rsquo; field, we want the XML to have values yes or no instead of true or false.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>XStream: Java to XML</title>
      <link>http://alimy.me/post/dev_201603081433/</link>
      <pubDate>Tue, 08 Mar 2016 14:33:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081433/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34;&gt;previous&lt;/a&gt; example we saw how to convert a Java Object to XML and back. In this example we look at another example of Java Object to XML Conversion. The example uses an object called a &amp;lsquo;JazzArtist&amp;rsquo;. This object has a list of &amp;lsquo;Album&amp;rsquo; objects besides some other properties. We see here another example of Alias and implicit collection. (To understand alias and implicit collections look at this tutorial) We divide the example in three parts. In the first part we do not use aliases or implicit collections. In the second part we use aliases and in the third part we use an implicit Collection. Note the output from the three parts and observe how aliases and implicit collection change the way the output xml looks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.xml.xstream;

import java.util.ArrayList;
import java.util.List;

import com.thoughtworks.xstream.XStream;

public class CreateXMLFromMusicArtistObject {

    public static void main(String[] args) {
        CreateXMLFromMusicArtistObject marshaller = new CreateXMLFromMusicArtistObject();
        marshaller.createXMlFromObject();
        marshaller.createXMLFromObjectUsingAlias();
        marshaller.createXMLFromObjectUsingAliasAndImplicitCollection();
    }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>XStream: XML To Java</title>
      <link>http://alimy.me/post/dev_201603081427/</link>
      <pubDate>Tue, 08 Mar 2016 14:27:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081427/</guid>
      <description>&lt;p&gt;In the earlier tutorial we looked at a way to &lt;a href=&#34;http://alimy.me/post/dev_201603081411&#34; title=&#34;Parsing an XML&#34;&gt;convert Java to XML and back&lt;/a&gt;. In this tutorial we look at some more examples of XML To Java Conversion. XStream can convert XML elements to multiple types depending on the type specified in the Java class. For example a series for similarly named elements can be converted to an array of String, a List of String or an enum. XStream uses an appropriate Converter based on type specified in the java class. Lets look at some examples.&lt;/p&gt;

&lt;p&gt;In this first example we have an XML that has a parent element called &amp;lsquo;Music&amp;rsquo;. It has a child element called type. We populate a Music object that has a &amp;lsquo;type&amp;rsquo; field which is an enum.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.xml.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;

public class ConverterExample3 {
    static String xml1 = &amp;quot;&amp;lt;Music&amp;gt;&amp;lt;type&amp;gt;rock&amp;lt;/type&amp;gt;&amp;lt;/Music&amp;gt;&amp;quot;;

    public static void main(String[] args) {
        XStream xStream = new XStream();
        xStream.processAnnotations(Music.class);
        Music musicObject = (Music) xStream.fromXML(xml1);
        System.out.println(musicObject);
        // prints Music [type=ROCK]
    }

}

@XStreamAlias(&amp;quot;Music&amp;quot;)
class Music {
    public enum genre {
        ROCK, JAZZ
    };

    genre type;

    @Override
    public String toString() {
        return &amp;quot;Music [type=&amp;quot; + type + &amp;quot;]&amp;quot;;
    }

}     
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>XStream: Java to XML and Back</title>
      <link>http://alimy.me/post/dev_201603081411/</link>
      <pubDate>Tue, 08 Mar 2016 14:11:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081411/</guid>
      <description>&lt;h3 id=&#34;the-problem-statement&#34;&gt;The Problem Statement&lt;/h3&gt;

&lt;p&gt;XStream can be used to convert a Java Object to XML and back. This tutorial aims to create a java representation of the BBC RSS. We will start with a Simple java class and gradually start adding complexity to it so that it can be converted to the BBC RSS. Note that if you are looking at a way to parse an XML, it would be a good idea to first build a java class that XStream can convert to the required XML. XStream can then use the same class to deserialize the XML. First, have a look at the &lt;a href=&#34;http://feeds.bbci.co.uk/news/technology/rss.xml?edition=int&#34; title=&#34;BBC RSS&#34;&gt;BBC RSS&lt;/a&gt;. Your browser would have formatted it to html so look at the source to see the XML. The parent element is &amp;lsquo;rss&amp;rsquo;. It has a child element called &amp;lsquo;channel&amp;rsquo;. The &amp;lsquo;channel&amp;rsquo; has some properties (title, link, image etc) and a list of news &amp;lsquo;item&amp;rsquo;(s). Each &amp;lsquo;item&amp;rsquo; has properties set on it (title, description etc). The aim is to create a Java class that XStream can convert to the BBC RSS.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-xstream-instance&#34;&gt;Creating an XStream Instance&lt;/h3&gt;

&lt;p&gt;The first step is to create an instance of com.thoughtworks.xstream.XStream. This class is a facade to the XStream API and provides all major functionalities. If this class does not solve your problem then you could directly call the API methods. After obtaining the instance of XStream use the fromXML method to convert the XML to a java object. Note that creating an XStream instance is an expensive operation. It is therefore advisable to create a proper instance once and then reuse it for multiple calls (even in parallel). The setup is not threadsafe but any subsequent marshalling/unmarshalling is threadsafe.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Xstream: Introduction</title>
      <link>http://alimy.me/post/dev_201603081355/</link>
      <pubDate>Tue, 08 Mar 2016 13:58:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081355/</guid>
      <description>&lt;p&gt;What is XStream&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codehaus.org/&#34; title=&#34;codehaus&#34;&gt;XStream&lt;/a&gt; is a java library to convert Java Object into XML and back. You can take nearly every arbitrary deeply nested object turn it to XML and read it back without further configuration. You&amp;rsquo;re done if all you want to have is a persisted object in XML. XStream&amp;rsquo;s power lies in its extensive list of &amp;lsquo;Converters&amp;rsquo; that help convert a wide variety of Java Objects to XML and vice versa. A Converter is a class that specifies how a Java Object should be serialized to XML. XStream comes bundled with a lot of Converters and you can also customize your own.&lt;/p&gt;

&lt;p&gt;XStream allows converting a class to XML without modifying the class. It can serialize private and final fields and also inner classes. It can serialize references to objects. XStream has also added security measures that allows you to selectively de-serialize and serialize based on type.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SimpleXML: Example</title>
      <link>http://alimy.me/post/dev_201603081313/</link>
      <pubDate>Tue, 08 Mar 2016 13:13:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603081313/</guid>
      <description>&lt;p&gt;This page provides a series of examples illustrating how a class can be annotated. It acts as a quick and dirty overview of how the framework can be used and also acts as a reference page. All examples can be downloaded for convenience. For further information take a look at the &lt;a href=&#34;http://alimy.me/post/dev_201603032011&#34; title=&#34;SimpleXML Tutorial&#34;&gt;Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sect-creating-nested-path-elements&#34;&gt;&amp;sect;Creating nested path elements&lt;/h3&gt;

&lt;p&gt;Here an example of how to use the &lt;a href=&#34;http://simple.sourceforge.net/download/stream/doc/javadoc/org/simpleframework/xml/Path.html&#34;&gt;Path&lt;/a&gt; annotation to create nested elements and attributes using a single annotated class. Below is an example showing two elements nested within a XPath expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Root
public class Example {

   @Path(&amp;quot;a/b[1]&amp;quot;)
   @Element
   private String x;

   @Path(&amp;quot;a/b[2]&amp;quot;)
   @Element
   private String y;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>吻</title>
      <link>http://alimy.me/post/art_201603071419/</link>
      <pubDate>Mon, 07 Mar 2016 14:19:01 +0800</pubDate>
      
      <guid>http://alimy.me/post/art_201603071419/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160307141301.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160307141300.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SimpleXML: Tutorial</title>
      <link>http://alimy.me/post/dev_201603032011/</link>
      <pubDate>Thu, 03 Mar 2016 20:11:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201603032011/</guid>
      <description>&lt;p&gt;This page provides a tutorial that will prepare users for using XML serialization. Before this tutorial is attempted it is advisable to have a look at the &lt;a href=&#34;http://simple.sourceforge.net/download/stream/doc/javadoc/&#34;&gt;Javadoc&lt;/a&gt; documentation for the framework. Although there are only several annotations and objects involved in the serialization process the framework itself has many powerful features which this tutorial attempts to describe.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeScript Language Specification</title>
      <link>http://alimy.me/post/dev_201602021955/</link>
      <pubDate>Tue, 02 Feb 2016 19:55:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201602021955/</guid>
      <description>&lt;p&gt;&lt;br/&gt;
Version 1.8 &lt;a href=&#34;https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md&#34; title=&#34;Microsoft/TypeScript@GitHub&#34;&gt;[GitHub]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;January, 2016&lt;/p&gt;

&lt;p&gt;Microsoft is making this Specification available under the Open Web Foundation Final Specification Agreement Version 1.0 (&amp;ldquo;OWF 1.0&amp;rdquo;) as of October 1, 2012. The OWF 1.0 is available at &lt;a href=&#34;http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0&#34; title=&#34;http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript is a trademark of Microsoft Corporation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>客家习俗</title>
      <link>http://alimy.me/post/etc_201602011221/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/etc_201602011221/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.baidu.com/s?ie=utf-8&amp;amp;f=8&amp;amp;rsv_bp=1&amp;amp;tn=baidu&amp;amp;wd=%E5%AE%A2%E5%AE%B6%E4%BA%BA&amp;amp;oq=%E5%AE%A2%E5%AE%B6%E4%BA%BA&amp;amp;rsv_pq=e920500800005141&amp;amp;rsv_t=e610oAaNKPlSpi7L3iFEog5KaXPzJwzEq5qS3j8RegQpcQvdRL2A20h6b7w&amp;amp;rsv_enter=0&amp;amp;rsv_sug7=000&#34; title=&#34;百度：客家人&#34;&gt;客家人&lt;/a&gt; 的习俗大致上包括全国性的传统岁序节俗，地方性崇拜、礼节等。&lt;/p&gt;

&lt;h4 id=&#34;主要节日&#34;&gt;主要节日&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;春节&lt;/strong&gt;：有拜年，游乐活动等，是最隆重的节日。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;立春&lt;/strong&gt;：即交春。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元宵节&lt;/strong&gt;：正月十五是中国民间传统的元宵节。元宵节吃元宵，玩灯，赏灯，猜灯谜。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二月二&lt;/strong&gt;：开正节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清明&lt;/strong&gt;：客家扫墓习俗多从春分开始，清明达到高潮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端午&lt;/strong&gt;：客家普遍称为五月节。节日主要内容是吃粽子，雄黄酒，龙舟赛。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;七月节&lt;/strong&gt;：也即鬼节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中秋&lt;/strong&gt;：民间通称八月节。吃月饼，赏月等风俗大体各地相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重阳节&lt;/strong&gt;：客家人叫“九月节”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冬至&lt;/strong&gt;：客家人有“冬大过年”之说。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>无题</title>
      <link>http://alimy.me/post/day_201601292229/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201601292229/</guid>
      <description>&lt;p&gt;&lt;em&gt;漫漫人生路，花开无尽天。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;莲步意随行，风清心亦欢。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>电脑配置单</title>
      <link>http://alimy.me/post/day_201601261406/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201601261406/</guid>
      <description>&lt;h4 id=&#34;配置清单&#34;&gt;配置清单&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;CPU : AMD APU系列 A6-7400K 双核 R5核显 FM2+接口 盒装CPU处理器 &lt;a href=&#34;http://item.jd.com/1239472.html&#34; title=&#34;AMD APU系列 A6-7400K 双核 R5核显 FM2+接口 盒装CPU处理器 ￥399&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主板 : 微星（MSI)A88XM-E45 V2 &lt;a href=&#34;http://item.jd.com/1029497.html&#34; title=&#34;微星（MSI)A88XM-E45 V2 ￥449&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;内存 : 金士顿(Kingston)DDR3 1600 4GB 台式机内存 &lt;a href=&#34;http://item.jd.com/652351.html&#34; title=&#34;金士顿(Kingston)DDR3 1600 4GB 台式机内存 ￥139&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;硬盘 : 希捷(ST1000DM003) 1TB 7200转64M SATA3 台式机硬盘&lt;a href=&#34;http://item.jd.com/544026.html&#34; title=&#34;希捷（Seagate）1TB 7200转64M SATA3 台式机硬盘(ST1000DM003) ￥359&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;机箱 : 爱国者 魔武者D1 中塔机箱电源套装（标配250W电源/USB3.0）&lt;a href=&#34;http://item.jd.com/878583.html&#34; title=&#34;爱国者（aigo）魔武者D1 中塔机箱电源套装 黑色（标配250W电源/USB3.0）￥149&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;显示器 : AOC I2260SWD 21.5英寸IPS广视角炫彩硬屏LED背光显示器 &lt;a href=&#34;http://item.jd.com/1255209.html&#34; title=&#34;AOC I2260SWD 21.5英寸IPS广视角炫彩硬屏LED背光显示器（黑色）￥639&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;键鼠套装 : 罗技（Logitech）MK120 键鼠套装 黑色 &lt;a href=&#34;http://item.jd.com/584300.html&#34; title=&#34;罗技（Logitech）MK120 键鼠套装 黑色 ￥79&#34;&gt;【京东】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>梦里水乡</title>
      <link>http://alimy.me/post/art_201601141212/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601141212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160125165500.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160125165500.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Make:Makefile</title>
      <link>http://alimy.me/post/dev_201601241856/</link>
      <pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601241856/</guid>
      <description>&lt;h3 id=&#34;sect-概述&#34;&gt;&amp;sect;概述&lt;/h3&gt;

&lt;p&gt;什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>History of IRC</title>
      <link>http://alimy.me/post/dev_201601222145/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601222145/</guid>
      <description>&lt;h3 id=&#34;sect-about&#34;&gt;&amp;sect;About&lt;/h3&gt;

&lt;p&gt;IRC(Internet Relay Chat) is an application layer protocol that facilitates communication in the form of text.&lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Relay_Chat&#34; title=&#34;Internet Relay Chat&#34;&gt;[wikipedia]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sect-the-beginning&#34;&gt;&amp;sect;The Beginning&lt;/h3&gt;

&lt;p&gt;IRC was born during summer 1988 when Jarkko &amp;ldquo;WiZ&amp;rdquo; Oikarinen wrote the first IRC client and server at the University of Oulu, Finland (where he was working at the Department of Information Processing Science).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我今年，二十七八岁</title>
      <link>http://alimy.me/post/day_201601201649/</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201601201649/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160120170100.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，每天起床的时间从中午12点变成了早上7点，睡觉的时间从凌晨变成了晚上11点。&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，工作中开始接触形形色色的人，见到亲戚朋友，他们不再问你考试考了多少分，而
是问你工资多少，结婚没有&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DogeOS,SmartOS,illumos</title>
      <link>http://alimy.me/post/dev_201601161712/</link>
      <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601161712/</guid>
      <description>&lt;h3 id=&#34;sect-这些都是什么&#34;&gt;&amp;sect;这些都是什么？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;都是操作系统&lt;/li&gt;
&lt;li&gt;都是云计算操作系统&lt;/li&gt;
&lt;li&gt;都是先进的云计算操作系统&lt;/li&gt;
&lt;li&gt;都是小众的先进的云计算操作系统&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;讲完收工&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;当然不是这么简单 :)&lt;/p&gt;

&lt;p&gt;但是也不希望写的太长。以下就尽量言简意垓的把来龙去脉，历史纠纷，以及革命先进性都说清楚。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://alimy.me/post/dev_201601131558/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601131558/</guid>
      <description>&lt;h3 id=&#34;sect-what-is-markdown&#34;&gt;&amp;sect; What is Markdown?&lt;/h3&gt;

&lt;p&gt;Markdown is a way to style text on the web. You control the display of the
document; formatting words as bold or italic, adding images, and creating lists
are just a few of the things we can do with Markdown. Mostly, Markdown is just
regular text with a few non-alphabetic characters thrown in, like # or *.&lt;br /&gt;
&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34; title=&#34;Daring FireBall: Home&#34;&gt;[Markdown Reference]&lt;/a&gt; &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34; title=&#34;GitHub&#39;s Mastering Markdown&#34;&gt;[Mastering Markdown]&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Too many open files 的解决方法</title>
      <link>http://alimy.me/post/dev_201601121531/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601121531/</guid>
      <description>&lt;h2 id=&#34;由来&#34;&gt;&amp;gt;由来&lt;/h2&gt;

&lt;p&gt;gogs 打开一个android app库的资源文件夹(/coding/Coding-Android/src/master/app/src/main/res/drawable-xxhdpi)
返回 500&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>诱惑</title>
      <link>http://alimy.me/post/art_201601111212/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601111212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160111121200.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160111121200.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>咏春</title>
      <link>http://alimy.me/post/art_201601100836/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601100836/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160110095600.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160110095600.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>陌陌</title>
      <link>http://alimy.me/post/art_201601090836/</link>
      <pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601090836/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160109084900.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160109084900.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>冰月</title>
      <link>http://alimy.me/post/art_201601080836/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601080836/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160108084900.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160108084900.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>少女</title>
      <link>http://alimy.me/post/art_201601071212/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601071212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160107161300.png&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160107165800.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>猎人</title>
      <link>http://alimy.me/post/art_201601061212/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601061212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160106161600.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160106165800.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>朝阳</title>
      <link>http://alimy.me/post/art_201601051212/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601051212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160105091801.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160105091800.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迷雾</title>
      <link>http://alimy.me/post/art_201601041212/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201601041212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160104122100.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160104122100.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于TOML</title>
      <link>http://alimy.me/post/dev_201601031221/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601031221/</guid>
      <description>&lt;h2 id=&#34;toml的由来&#34;&gt;TOML的由来&lt;/h2&gt;

&lt;p&gt;TOML的全称是　Tom&amp;rsquo;s Obvious, Minimal Language，因为它是GitHub　前CEO,联合创始人
Tom Preston-Werner 于2013年创建的语言。&lt;/p&gt;

&lt;p&gt;配置文件的使用由来已久，从.ini、XML、JSON、YAML再到TOML，语言的表达能力越来越强，同时书
写便捷性也在不断提升。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TOML v0.4.0</title>
      <link>http://alimy.me/post/dev_201601021221/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/dev_201601021221/</guid>
      <description>&lt;p&gt;Tom&amp;rsquo;s Obvious, Minimal Language.&lt;/p&gt;

&lt;p&gt;By Tom Preston-Werner.&lt;/p&gt;

&lt;p&gt;Be warned, this spec is still changing a lot. Until it&amp;rsquo;s marked as 1.0, you
should assume that it is unstable and act accordingly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年的第一天</title>
      <link>http://alimy.me/post/day_201601010000/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201601010000/</guid>
      <description>&lt;p&gt;2016年，很好。&lt;br /&gt;
&lt;img src=&#34;http://alimy.me/images/post/20160101121200.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2015年的最后一天</title>
      <link>http://alimy.me/post/day_201512312359/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201512312359/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20151231235900.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今天是2015年的最后一天，天气晴，我决定去 &lt;em&gt;逛一逛&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>童话</title>
      <link>http://alimy.me/post/art_201512301212/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/art_201512301212/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20151230121200.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20151230121201.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World:博客开张</title>
      <link>http://alimy.me/post/day_201512292359/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://alimy.me/post/day_201512292359/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20151229235900.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;亲-博客正式开张啦-哈哈哈&#34;&gt;～亲～博客正式开张啦～～哈哈哈～～&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20151229235901.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;hello-world&#34;&gt;～Hello World～&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20151229235902.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;欢迎光临-请随便吐糟-呵呵呵&#34;&gt;～欢迎光临～请随便吐糟～～呵呵呵～～&lt;/h3&gt;</description>
    </item>
    
  </channel>
</rss>