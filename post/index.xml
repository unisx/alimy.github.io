<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/post/</link>
    
    
    <copyright>&amp;copy;2016, Alimy; all rights reserved.</copyright>
    <updated>Sat, 09 Apr 2016 15:21:01 CST</updated>
    
    <item>
      <title>爱</title>
      <link>http://alimy.me/post/art_201604091521/</link>
      <pubDate>Sat, 09 Apr 2016 15:21:01 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201604091521/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160409152101.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160409152100.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;繁星点点（&lt;a href=&#34;http://alimy.me/images/post/20160409152101.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go - EBNF</title>
      <link>http://alimy.me/post/dev_201604021445/</link>
      <pubDate>Sat, 02 Apr 2016 14:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201604021445/</guid>
      <description>

&lt;h3 id=&#34;notation:363df3e80a0a36e21d4481f199b5995a&#34;&gt;Notation&lt;/h3&gt;

&lt;p&gt;The syntax is specified using Extended Backus-Naur Form (EBNF):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Production  = production_name &amp;quot;=&amp;quot; [ Expression ] &amp;quot;.&amp;quot; .
Expression  = Alternative { &amp;quot;|&amp;quot; Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ &amp;quot;…&amp;quot; token ] | Group | Option | Repetition .
Group       = &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Option      = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Repetition  = &amp;quot;{&amp;quot; Expression &amp;quot;}&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Productions are expressions constructed from terms and the following operators, in increasing precedence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lower-case production names are used to identify lexical tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes &amp;ldquo;&amp;rdquo; or back quotes ``.&lt;/p&gt;

&lt;p&gt;The form a … b represents the set of characters from a through b as alternatives. The horizontal ellipsis … is also used elsewhere in the spec to informally denote various enumerations or code snippets that are not further specified. The character … (as opposed to the three characters &amp;hellip;) is not a token of the Go language.&lt;/p&gt;

&lt;h3 id=&#34;go-ebnf:363df3e80a0a36e21d4481f199b5995a&#34;&gt;Go EBNF&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newline        = /* the Unicode code point U+000A */ .
unicode_char   = /* an arbitrary Unicode code point except newline */ .
unicode_letter = /* a Unicode code point classified as &amp;quot;Letter&amp;quot; */ .
unicode_digit  = /* a Unicode code point classified as &amp;quot;Number, decimal digit&amp;quot; */ .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Letters and digits&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;letter        = unicode_letter | &amp;quot;_&amp;quot; .
decimal_digit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; .
octal_digit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot; .
hex_digit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;identifier = letter { letter | unicode_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keywords&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators and Delimiters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;     +=    &amp;amp;=     &amp;amp;&amp;amp;    ==    !=    (    )    +
|     -=    |=     ||    &amp;lt;     &amp;lt;=    [    ]    -
^     *=    ^=     &amp;lt;-    &amp;gt;     &amp;gt;=    {    }    *
/    &amp;lt;&amp;lt;    /=    &amp;lt;&amp;lt;=    ++    =     :=    ,    ;
%    &amp;gt;&amp;gt;    %=    &amp;gt;&amp;gt;=    --    !     ...   .    :
     &amp;amp;^          &amp;amp;^=
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integer literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( &amp;quot;1&amp;quot; … &amp;quot;9&amp;quot; ) { decimal_digit } .
octal_lit   = &amp;quot;0&amp;quot; { octal_digit } .
hex_lit     = &amp;quot;0&amp;quot; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hex_digit { hex_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Floating-point literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float_lit = decimals &amp;quot;.&amp;quot; [ decimals ] [ exponent ] |
            decimals exponent |
            &amp;quot;.&amp;quot; decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( &amp;quot;e&amp;quot; | &amp;quot;E&amp;quot; ) [ &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; ] decimals .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imaginary literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imaginary_lit = (decimals | float_lit) &amp;quot;i&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rune literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\a   U+0007 alert or bell
\b   U+0008 backspace
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 horizontal tab
\v   U+000b vertical tab
\\   U+005c backslash
\&#39;   U+0027 single quote  (valid escape only within rune literals)
\&amp;quot;   U+0022 double quote  (valid escape only within string literals)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;rune_lit         = &amp;quot;&#39;&amp;quot; ( unicode_value | byte_value ) &amp;quot;&#39;&amp;quot; .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` &amp;quot;x&amp;quot; hex_digit hex_digit .
little_u_value   = `\` &amp;quot;u&amp;quot; hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` &amp;quot;U&amp;quot; hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; | &amp;quot;f&amp;quot; | &amp;quot;n&amp;quot; | &amp;quot;r&amp;quot; | &amp;quot;t&amp;quot; | &amp;quot;v&amp;quot; | `\` | &amp;quot;&#39;&amp;quot; | `&amp;quot;` ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = &amp;quot;`&amp;quot; { unicode_char | newline } &amp;quot;`&amp;quot; .
interpreted_string_lit = `&amp;quot;` { unicode_value | byte_value } `&amp;quot;` .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type      = TypeName | TypeLit | &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
            SliceType | MapType | ChannelType .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Numeric types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uint8       the set of all unsigned  8-bit integers (0 to 255)
uint16      the set of all unsigned 16-bit integers (0 to 65535)
uint32      the set of all unsigned 32-bit integers (0 to 4294967295)
uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)


int8        the set of all signed  8-bit integers (-128 to 127)
int16       the set of all signed 16-bit integers (-32768 to 32767)
int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)
int64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)


float32     the set of all IEEE-754 32-bit floating-point numbers
float64     the set of all IEEE-754 64-bit floating-point numbers


complex64   the set of all complex numbers with float32 real and imaginary parts
complex128  the set of all complex numbers with float64 real and imaginary parts


byte        alias for uint8
rune        alias for int32


uint     either 32 or 64 bits
int      same size as uint
uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Array types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ArrayType   = &amp;quot;[&amp;quot; ArrayLength &amp;quot;]&amp;quot; ElementType .
ArrayLength = Expression .
ElementType = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SliceType = &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;make([]T, length, capacity)
make([]int, 50, 100)
new([100]int)[0:50]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Struct types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StructType     = &amp;quot;struct&amp;quot; &amp;quot;{&amp;quot; { FieldDecl &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
AnonymousField = [ &amp;quot;*&amp;quot; ] TypeName .
Tag            = string_lit .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pointer types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PointerType = &amp;quot;*&amp;quot; BaseType .
BaseType    = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionType   = &amp;quot;func&amp;quot; Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = &amp;quot;(&amp;quot; [ ParameterList [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
ParameterList  = ParameterDecl { &amp;quot;,&amp;quot; ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ &amp;quot;...&amp;quot; ] Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interface types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InterfaceType      = &amp;quot;interface&amp;quot; &amp;quot;{&amp;quot; { MethodSpec &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MapType     = &amp;quot;map&amp;quot; &amp;quot;[&amp;quot; KeyType &amp;quot;]&amp;quot; ElementType .
KeyType     = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Channel types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ChannelType = ( &amp;quot;chan&amp;quot; | &amp;quot;chan&amp;quot; &amp;quot;&amp;lt;-&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; &amp;quot;chan&amp;quot; ) ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;chan T          // can be used to send and receive values of type T
chan&amp;lt;- float64  // can only be used to send float64s
&amp;lt;-chan int      // can only be used to receive ints


chan&amp;lt;- chan int    // same as chan&amp;lt;- (chan int)
chan&amp;lt;- &amp;lt;-chan int  // same as chan&amp;lt;- (&amp;lt;-chan int)
&amp;lt;-chan &amp;lt;-chan int  // same as &amp;lt;-chan (&amp;lt;-chan int)
chan (&amp;lt;-chan int)


make(chan int, 100)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type identity&lt;/p&gt;

&lt;p&gt;Two types are either identical or different.&lt;/p&gt;

&lt;p&gt;Two named types are identical if their type names originate in the same TypeSpec. A named and an unnamed type are always different. Two unnamed types are identical if the corresponding type literals are identical, that is, if they have the same literal structure and corresponding components have identical types. In detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Two &lt;strong&gt;array&lt;/strong&gt; types are identical if they have identical element types and the same array length.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;slice&lt;/strong&gt; types are identical if they have identical element types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;struct&lt;/strong&gt; types are identical if they have the same sequence of fields, and if corresponding fields have the same names, and identical types, and identical tags. Two anonymous fields are considered to have the same name. Lower-case field names from different packages are always different.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;pointer&lt;/strong&gt; types are identical if they have identical base types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;function&lt;/strong&gt; types are identical if they have the same &lt;em&gt;number of parameters and result values, corresponding parameter and result types&lt;/em&gt; are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;interface&lt;/strong&gt; types are identical if they have the same set of methods with the same names and identical function types. Lower-case method names from different packages are always different. The order of the methods is irrelevant.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;map&lt;/strong&gt; types are identical if they have identical key and value types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;channel&lt;/strong&gt; types are identical if they have identical value types and the same direction.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignability&lt;/p&gt;

&lt;p&gt;A value x is assignable to a variable of type T (&amp;ldquo;x is assignable to T&amp;rdquo;) in any of these cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;x&amp;rsquo;s type is identical to T.&lt;/li&gt;
&lt;li&gt;x&amp;rsquo;s type V and T have identical underlying types and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;T is an interface type and x implements T.&lt;/li&gt;
&lt;li&gt;x is a bidirectional channel value, T is a channel type, x&amp;rsquo;s type V and T have identical element types, and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;x is the predeclared identifier nil and T is a pointer, function, slice, map, channel, or interface type.&lt;/li&gt;
&lt;li&gt;x is an untyped constant representable by a value of type T.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blocks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Block = &amp;quot;{&amp;quot; StatementList &amp;quot;}&amp;quot; .
StatementList = { Statement &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Declarations and scope&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Predeclared identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Types:
    bool byte complex64 complex128 error float32 float64
    int int8 int16 int32 int64 rune string
    uint uint8 uint16 uint32 uint64 uintptr


Constants:
    true false iota


Zero value:
    nil


Functions:
    append cap close complex copy delete imag len
    make new panic print println real recover
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exported identifiers&lt;/p&gt;

&lt;p&gt;An identifier may be exported to permit access to it from another package. An identifier is exported if both:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the first character of the identifier&amp;rsquo;s name is a Unicode upper case letter (Unicode class &amp;ldquo;Lu&amp;rdquo;); and&lt;/li&gt;
&lt;li&gt;the identifier is declared in the package block or it is a field name or method name.
All other identifiers are not exported.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uniqueness of identifiers&lt;/p&gt;

&lt;p&gt;Given a set of identifiers, an identifier is called unique if it is different from every other in the set. Two identifiers are different if they are spelled differently, or if they appear in different packages and are not exported. Otherwise, they are the same.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Constant declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ConstDecl      = &amp;quot;const&amp;quot; ( ConstSpec | &amp;quot;(&amp;quot; { ConstSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ConstSpec      = IdentifierList [ [ Type ] &amp;quot;=&amp;quot; ExpressionList ] .


IdentifierList = identifier { &amp;quot;,&amp;quot; identifier } .
ExpressionList = Expression { &amp;quot;,&amp;quot; Expression } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iota
Within a constant declaration, the predeclared identifier iota represents successive untyped integer constants. It is reset to 0 whenever the reserved word const appears in the source and increments after each ConstSpec. It can be used to construct a set of related constants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ( // iota is reset to 0
    c0 = iota  // c0 == 0
    c1 = iota  // c1 == 1
    c2 = iota  // c2 == 2
)


const ( // iota is reset to 0
    a = 1 &amp;lt;&amp;lt; iota  // a == 1
    b = 1 &amp;lt;&amp;lt; iota  // b == 2
    c = 3          // c == 3  (iota is not used but still incremented)
    d = 1 &amp;lt;&amp;lt; iota  // d == 8
)


const ( // iota is reset to 0
    u         = iota * 42  // u == 0     (untyped integer constant)
    v float64 = iota * 42  // v == 42.0  (float64 constant)
    w         = iota * 42  // w == 84    (untyped integer constant)
)


const x = iota  // x == 0  (iota has been reset)
const y = iota  // y == 0  (iota has been reset)


const (
    bit0, mask0 = 1 &amp;lt;&amp;lt; iota, 1&amp;lt;&amp;lt;iota - 1  // bit0 == 1, mask0 == 0
    bit1, mask1                           // bit1 == 2, mask1 == 1
    _, _                                  // skips iota == 2
    bit3, mask3                           // bit3 == 8, mask3 == 7
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypeDecl     = &amp;quot;type&amp;quot; ( TypeSpec | &amp;quot;(&amp;quot; { TypeSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
TypeSpec     = identifier Type .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;type IntArray [16]int


type (
    Point struct{ x, y float64 }
    Polar Point
)


type TreeNode struct {
    left, right *TreeNode
    value *Comparable
}


type Block interface {
    BlockSize() int
    Encrypt(src, dst []byte)
    Decrypt(src, dst []byte)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The declared type does not inherit any methods bound to the existing type, but the method set of an interface type or of elements of a composite type remains unchanged:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A Mutex is a data type with two methods, Lock and Unlock.
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }


// NewMutex has the same composition as Mutex but its method set is empty.
type NewMutex Mutex


// The method set of the base type of PtrMutex remains unchanged,
// but the method set of PtrMutex is empty.
type PtrMutex *Mutex


// The method set of *PrintableMutex contains the methods
// Lock and Unlock bound to its anonymous field Mutex.
type PrintableMutex struct {
    Mutex
}


// MyBlock is an interface type that has the same method set as Block.
type MyBlock Block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A type declaration may be used to define a different boolean, numeric, or string type and attach methods to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type TimeZone int


const (
    EST TimeZone = -(5 + iota)
    CST
    MST
    PST
)


func (tz TimeZone) String() string {
    return fmt.Sprintf(&amp;quot;GMT%+dh&amp;quot;, tz)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VarDecl     = &amp;quot;var&amp;quot; ( VarSpec | &amp;quot;(&amp;quot; { VarSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
VarSpec     = IdentifierList ( Type [ &amp;quot;=&amp;quot; ExpressionList ] | &amp;quot;=&amp;quot; ExpressionList ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Short variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ShortVarDecl = IdentifierList &amp;quot;:=&amp;quot; ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is shorthand for a regular variable declaration with initializer expressions but no types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;var&amp;quot; IdentifierList = ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() returns two values
_, y, _ := coord(p)  // coord() returns three values; only interested in y coordinate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike regular variable declarations, a short variable declaration may redeclare variables provided they were originally declared earlier in the same block (or the parameter lists if the block is the function body) with the same type, and at least one of the non-blank variables is new. As a consequence, redeclaration can only appear in a multi-variable short declaration. Redeclaration does not introduce a new variable; it just assigns a new value to the original.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // redeclares offset
a, a := 1, 2       // illegal: double declaration of a or no new variable if a was declared elsewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Short variable declarations may appear only inside functions. In some contexts such as the initializers for &amp;ldquo;if&amp;rdquo;, &amp;ldquo;for&amp;rdquo;, or &amp;ldquo;switch&amp;rdquo; statements, they can be used to declare local temporary variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionDecl = &amp;quot;func&amp;quot; FunctionName ( Function | Signature ) .
FunctionName = identifier .
Function     = Signature FunctionBody .
FunctionBody = Block .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodDecl   = &amp;quot;func&amp;quot; Receiver MethodName ( Function | Signature ) .
Receiver     = Parameters .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Operand     = Literal | OperandName | MethodExpr | &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Qualified identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QualifiedIdent = PackageName &amp;quot;.&amp;quot; identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Composite literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | &amp;quot;[&amp;quot; &amp;quot;...&amp;quot; &amp;quot;]&amp;quot; ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = &amp;quot;{&amp;quot; [ ElementList [ &amp;quot;,&amp;quot; ] ] &amp;quot;}&amp;quot; .
ElementList   = KeyedElement { &amp;quot;,&amp;quot; KeyedElement } .
KeyedElement  = [ Key &amp;quot;:&amp;quot; ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionLit = &amp;quot;func&amp;quot; Function .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Primary expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PrimaryExpr =
    Operand |
    Conversion |
    PrimaryExpr Selector |
    PrimaryExpr Index |
    PrimaryExpr Slice |
    PrimaryExpr TypeAssertion |
    PrimaryExpr Arguments .


Selector       = &amp;quot;.&amp;quot; identifier .
Index          = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Slice          = &amp;quot;[&amp;quot; ( [ Expression ] &amp;quot;:&amp;quot; [ Expression ] ) |
                  ( [ Expression ] &amp;quot;:&amp;quot; Expression &amp;quot;:&amp;quot; Expression )
                 &amp;quot;]&amp;quot; .
TypeAssertion  = &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
Arguments      = &amp;quot;(&amp;quot; [ ( ExpressionList | Type [ &amp;quot;,&amp;quot; ExpressionList ] ) [ &amp;quot;...&amp;quot; ] [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Selectors&lt;/p&gt;

&lt;p&gt;For a primary expression x that is not a package name, the selector expression&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;denotes the field or method f of the value x (or sometimes *x; see below). The identifier f is called the (field or method) selector; it must not be the blank identifier. The type of the selector expression is the type of f. If x is a package name, see the section on qualified identifiers.&lt;/p&gt;

&lt;p&gt;A selector f may denote a field or method f of a type T, or it may refer to a field or method f of a nested anonymous field of T. The number of anonymous fields traversed to reach f is called its depth in T. The depth of a field or method f declared in T is zero. The depth of a field or method f declared in an anonymous field A in T is the depth of f in A plus one.&lt;/p&gt;

&lt;p&gt;The following rules apply to selectors:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For a value x of type T or *T where T is not a pointer or interface type, x.f denotes the field or method at the shallowest depth in T where there is such an f. If there is not exactly one f with shallowest depth, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;For a value x of type I where I is an interface type, x.f denotes the actual method with name f of the dynamic value of x. If there is no method with name f in the method set of I, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;As an exception, if the type of x is a named pointer type and (*x).f is a valid selector expression denoting a field (but not a method), x.f is shorthand for (*x).f.&lt;/li&gt;
&lt;li&gt;In all other cases, x.f is illegal.&lt;/li&gt;
&lt;li&gt;If x is of pointer type and has the value nil and x.f denotes a struct field, assigning to or evaluating x.f causes a run-time panic.&lt;/li&gt;
&lt;li&gt;If x is of interface type and has the value nil, calling or evaluating the method x.f causes a run-time panic.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodExpr    = ReceiverType &amp;quot;.&amp;quot; MethodName .
ReceiverType  = TypeName | &amp;quot;(&amp;quot; &amp;quot;*&amp;quot; TypeName &amp;quot;)&amp;quot; | &amp;quot;(&amp;quot; ReceiverType &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Index expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[x]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[low : high]


a[low : high : max]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type assertions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.(T)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f(a1, a2, … an)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Passing arguments to &amp;hellip; parameters&lt;/p&gt;

&lt;p&gt;Given the function and calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Greeting(prefix string, who ...string)
Greeting(&amp;quot;nobody&amp;quot;)
Greeting(&amp;quot;hello:&amp;quot;, &amp;quot;Joe&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Eileen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the slice s and call&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s := []string{&amp;quot;James&amp;quot;, &amp;quot;Jasmine&amp;quot;}
Greeting(&amp;quot;goodbye:&amp;quot;, s...)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .


binary_op  = &amp;quot;||&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | rel_op | add_op | mul_op .
rel_op     = &amp;quot;==&amp;quot; | &amp;quot;!=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; | &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; .
add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .


unary_op   = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;^&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operator precedence&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Precedence    Operator
5             *  /  %  &amp;lt;&amp;lt;  &amp;gt;&amp;gt;  &amp;amp;  &amp;amp;^
4             +  -  |  ^
3             ==  !=  &amp;lt;  &amp;lt;=  &amp;gt;  &amp;gt;=
2             &amp;amp;&amp;amp;
1             ||
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arithmetic operators&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sum                    integers, floats, complex values, strings&lt;/li&gt;
&lt;li&gt;difference             integers, floats, complex values&lt;/li&gt;
&lt;li&gt;product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp;    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&amp;amp;^   bit clear (AND NOT)    integers&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;   left shift             integer &amp;lt;&amp;lt; unsigned integer
&amp;gt;&amp;gt;   right shift            integer &amp;gt;&amp;gt; unsigned integer
```&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comparison operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==    equal
!=    not equal
&amp;lt;     less
&amp;lt;=    less or equal
&amp;gt;     greater
&amp;gt;=    greater or equal
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;&amp;amp;    conditional AND    p &amp;amp;&amp;amp; q  is  &amp;quot;if p then q else false&amp;quot;
||    conditional OR     p || q  is  &amp;quot;if p then true else q&amp;quot;
!     NOT                !p      is  &amp;quot;not p&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Address operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;x
&amp;amp;a[f(2)]
&amp;amp;Point{2, 3}
*p
*pf(x)


var x *int = nil
*x   // causes a run-time panic
&amp;amp;*x  // causes a run-time panic
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Receive operator&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v1 := &amp;lt;-ch
v2 = &amp;lt;-ch
f(&amp;lt;-ch)
&amp;lt;-strobe  // wait until clock pulse and discard received value


x, ok = &amp;lt;-ch
x, ok := &amp;lt;-ch
var x, ok = &amp;lt;-ch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Conversion = Type &amp;quot;(&amp;quot; Expression [ &amp;quot;,&amp;quot; ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Statement =
    Declaration | LabeledStmt | SimpleStmt |
    GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
    FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
    DeferStmt .


SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Empty statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EmptyStmt = .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Labeled statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LabeledStmt = Label &amp;quot;:&amp;quot; Statement .
Label       = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExpressionStmt = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following built-in functions are not permitted in statement context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SendStmt = Channel &amp;quot;&amp;lt;-&amp;quot; Expression .
Channel  = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IncDec statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IncDecStmt = Expression ( &amp;quot;++&amp;quot; | &amp;quot;--&amp;quot; ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignments&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Assignment = ExpressionList assign_op ExpressionList .


assign_op = [ add_op | mul_op ] &amp;quot;=&amp;quot; .


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IfStmt = &amp;quot;if&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] Expression Block [ &amp;quot;else&amp;quot; ( IfStmt | Block ) ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExprSwitchStmt = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] [ Expression ] &amp;quot;{&amp;quot; { ExprCaseClause } &amp;quot;}&amp;quot; .
ExprCaseClause = ExprSwitchCase &amp;quot;:&amp;quot; StatementList .
ExprSwitchCase = &amp;quot;case&amp;quot; ExpressionList | &amp;quot;default&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch x.(type) {
// cases
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;TypeSwitchStmt  = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] TypeSwitchGuard &amp;quot;{&amp;quot; { TypeCaseClause } &amp;quot;}&amp;quot; .
TypeSwitchGuard = [ identifier &amp;quot;:=&amp;quot; ] PrimaryExpr &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; &amp;quot;type&amp;quot; &amp;quot;)&amp;quot; .
TypeCaseClause  = TypeSwitchCase &amp;quot;:&amp;quot; StatementList .
TypeSwitchCase  = &amp;quot;case&amp;quot; TypeList | &amp;quot;default&amp;quot; .
TypeList        = Type { &amp;quot;,&amp;quot; Type } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ForStmt = &amp;quot;for&amp;quot; [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ForClause = [ InitStmt ] &amp;quot;;&amp;quot; [ Condition ] &amp;quot;;&amp;quot; [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RangeClause = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] &amp;quot;range&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Range expression                          1st value          2nd value


array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, &amp;lt;-chan E       element  e  E
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GoStmt = &amp;quot;go&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelectStmt = &amp;quot;select&amp;quot; &amp;quot;{&amp;quot; { CommClause } &amp;quot;}&amp;quot; .
CommClause = CommCase &amp;quot;:&amp;quot; StatementList .
CommCase   = &amp;quot;case&amp;quot; ( SendStmt | RecvStmt ) | &amp;quot;default&amp;quot; .
RecvStmt   = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] RecvExpr .
RecvExpr   = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Return statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReturnStmt = &amp;quot;return&amp;quot; [ ExpressionList ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Break statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BreakStmt = &amp;quot;break&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Continue statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ContinueStmt = &amp;quot;continue&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goto statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GotoStmt = &amp;quot;goto&amp;quot; Label .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fallthrough statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FallthroughStmt = &amp;quot;fallthrough&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defer statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DeferStmt = &amp;quot;defer&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Source file organization&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SourceFile       = PackageClause &amp;quot;;&amp;quot; { ImportDecl &amp;quot;;&amp;quot; } { TopLevelDecl &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Package clause&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PackageClause  = &amp;quot;package&amp;quot; PackageName .
PackageName    = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Import declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ImportDecl       = &amp;quot;import&amp;quot; ( ImportSpec | &amp;quot;(&amp;quot; { ImportSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ImportSpec       = [ &amp;quot;.&amp;quot; | PackageName ] ImportPath .
ImportPath       = string_lit .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Import declaration          Local name of Sin


import   &amp;quot;lib/math&amp;quot;         math.Sin
import m &amp;quot;lib/math&amp;quot;         m.Sin
import . &amp;quot;lib/math&amp;quot;         Sin


import _ &amp;quot;lib/math&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Size and alignment guarantees&lt;/p&gt;

&lt;p&gt;For the numeric types, the following sizes are guaranteed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type                                 size in bytes


byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following minimal alignment properties are guaranteed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a variable x of any type: unsafe.Alignof(x) is at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of array type: unsafe.Alignof(x) is the same as unsafe.Alignof(x[0]), but at least 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A struct or array type has size zero if it contains no fields (or elements, respectively) that have a size greater than zero. Two distinct zero-size variables may have the same address in memory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: The Go Programming Language Specification is &lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Makefile:简介</title>
      <link>http://alimy.me/post/dev_201603242255/</link>
      <pubDate>Thu, 24 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603242255/</guid>
      <description>

&lt;p&gt;Make 可以简化编译过程，如果有一个近百个源文件的项目，如果有个文件更改后工程需要重新编译，那么一直用gcc -c a.c这些个命令敲来敲去会屎人的。运行make时候，他会寻找指定目录下（默认是 .）的 Makefile 文件并且分析依赖关系进行必要的编译。&lt;/p&gt;

&lt;h3 id=&#34;makefile文件的基本格式很简单:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;Makefile文件的基本格式很简单：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;目标文件： 依赖文件1 依赖文件2 依赖文件3 。。。。
[tab]编译命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的意思是目标文件是依赖于冒号后面几个文件的，如果这些依赖文件有更新的，那么其目标文件也需要更新。&lt;/p&gt;

&lt;p&gt;Makefile 中可能有很多以上条目，他们共同组成了一个有向无回路图（DAG图），这样可以传递依赖。make 命令会把 Makefile 文件的第一个目标文件作为默认目标，当执行 make 命令时，make 会考察这个目标文件的依赖关系，进行编译。也可以指定，比如这个 Makefile：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main: a.o b.o
[tab]gcc -o main a.o b.o
a.o : a.c c.h
[tab]gcc -c a.c -o a.o
b.o: b.c c.h
[tab]gcc -c b.c -o b.o
// [tab]的意思是这里用tab字符代替，不能有其他的什么字符
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在命令行里执行make，分析关系并生成main，如果是make a.o那么他只会编译到 a.o 。&lt;/p&gt;

&lt;p&gt;当然我们还可以设定伪目标，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clean：
[tab]rm a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样执行make clean的时候就把.o文件清除了,这里不会生成什么文件,只进行一些操作,更清楚的做法是在前面加上以下语句:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY : clean install dest [其他伪目标]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面来说下变量，Makefile 里的变量按惯例是大写，包括数字字母下划线。当我们需要一个变量的值的时候，通常用 ${NAME} 或者 $(NAME)。他有好几种变量定义的方法。&lt;/p&gt;

&lt;p&gt;首先是常规法，就是&lt;code&gt;A=content&lt;/code&gt;，等号两边可以有空格，和shell不一样。&lt;/p&gt;

&lt;p&gt;其次是递归法，比如&lt;code&gt;A=$(B)，B=$(C)，C=haha&lt;/code&gt;，那么当寻找A的定义的时候就会去找B，然后再找C，变量展开的时候就是当他被引用的时候，这种方法效率比较低，因为如果他引用了函数，那么每次展开都要调用函数，而且可能会出现无限递归&lt;code&gt;（A=$(B),B=$(A)）&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后是直接展开法。这个很容易理解，就像是c语言是按照顺序执行的，当变量定义的时候这个变量就已经展开了（如果他引用了变量A，引用的是他定义时候A的值），当被引用的时候就直接用他代表的字符串替代。但是他用的不是等号 是 := ,比如 &lt;code&gt;A:=hello，A:=$(B)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;还有嵌套定义： &lt;code&gt;A=B,B=haha,V=$($(A))&lt;/code&gt;类似于这种的V的值是haha&lt;/p&gt;

&lt;p&gt;最后是替换引用定义，他会替换后缀，有个例子很好 &lt;code&gt;foo := a.o b.o c.o ,bar := $(foo:.o=.c)&lt;/code&gt;,我们可以知道bar的值就是&lt;code&gt;a.c b.c c.c&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;变量还有分类:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;变量还有分类：&lt;/h3&gt;

&lt;p&gt;1.预定义变量，当使用隐式规则的时候他会派上用场，常用的有以下几个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC   c编译器的名称（默认gcc？）
CPP    c预编译器名称（默认$(CC) -E）
CXX c++编译器的名称(默认g++)
CFLAGS c编译器选项,无默认值
CXXFLAGS c++编译器选项,无默认值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.自动变量,常用有以下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$@:表示当前规则中的完整目标文件名
$*:不包含扩展名的目标文件名
$&amp;lt;:当前规则中第一个依赖文件名
$^:当前规则所有文件列表
$%:当目标为库文件时,表示库文件名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.环境变量,Makefile对环境变量是可见的,可以引用.&lt;/p&gt;

&lt;p&gt;Makefile还有个常用的东东就是隐式规则,make会自己推导.比如说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c：a.o b.o
[tab]gcc -o c a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时我们可以省略下面的命令，直接用第一行就行。make自动分析生成a，此时预定义变量就有用了，CC，CFLAGS等也派上了用场。&lt;/p&gt;

&lt;p&gt;由于把握不了隐式规则的底线和能力，我还是觉得隐式规则应用的不要太多太复杂影响阅读为好。。&lt;/p&gt;

&lt;h3 id=&#34;make的工作过程大概是以下几步:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;make的工作过程大概是以下几步&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;读取Makefile，根据make的选项查找Makefile
初始化Makefile，将Makefile中的变量进行替换，如果Makefile中包含其他文件，则加载他&lt;/li&gt;
&lt;li&gt;解释规则，对其中的执行规则进行解析，推导隐藏规则，为目标建立关系链&lt;/li&gt;
&lt;li&gt;分析变更，根据依赖关系和时间戳，判断有木有变化。&lt;/li&gt;
&lt;li&gt;执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;编译的基本流程:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;编译的基本流程&lt;/h3&gt;

&lt;p&gt;基本过程是以下四步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;c(.c) 和 c++(.cc, .cpp, .cxx) 的源文件&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;gcc -E a.c -o a.i   // 如果不加-o参数，gcc会把处理过的源文件放到标准输出中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.预处理后的源文件。c源文件预处理后后缀为 .i , c++为 .ii 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -S a.i  //会在当前文件夹下生成a.s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.编译后生成的汇编源代码。后缀为 .s , .S 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -c a.s
//只进行汇编生成目标文件,.o结尾的目标文件可以用
//(ar crv libabc.a a.o b.o c.o )打包成形如lib×××.a的静态库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.目标文件与库文件进行链接，生成可执行文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc a.o //在当前文件夹下生成a.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中任何一种状态，用 gcc 如果不加 -c ， -E ， -S 选项都会直接生成可执行文件，如果加上了选项，可以由之前任一状态生成所需要的文件（如 gcc -S a.c 可以直接生成 a.s，gcc -c a.i 可以直接生成 a.o ）。如果是c++直接换用g++命令就行。&lt;/p&gt;

&lt;p&gt;另外 &lt;code&gt;gcc -v&lt;/code&gt;可以输出编译过程的配置和版本信息。&lt;/p&gt;

&lt;h3 id=&#34;gcc-警告提示:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;gcc 警告提示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-fsyntax-only   检查程序中的语法错误，不产生输出信息
-w 禁止所有警告信息
-Wunused 声明了木有用
-Wmain main函数定义不常规
-Wall 提供所有警告
-pedantic-errors 允许ansi c标准列出的全部信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他常用选项:020297256cb0e92ce87a72a6b65d7dcd&#34;&gt;其他常用选项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-g 加入调试信息，gdb调试的时候要用。&lt;/li&gt;
&lt;li&gt;-On 优化选项。这里的n可以用0-3来替代。数字越大优化效果越好，-O0表示不进行优化。优化可能针对硬件进行优化，也可能针对代码优化（删除公共表达式，循环优化，删除无用信息）。优化可能大大增加编译时间和内存，他通常会将循环或函数展开，使他们以内联的方式进行，不是通过函数调用，这样可以显著提高性能，不过调试最好不要用优化选项。&lt;/li&gt;
&lt;li&gt;-l 指定要用到的库，注意这里之后要加的是库的名字，如果是多线程，可能要用到pthread库，那么此时就要加上 -lpthread ，这样gcc就会到库目录中找名为libpthread.so（lib×××.so）的文件，如果是静态库的话是libpthread.a( lib×××.a)（貌似gcc先找动态库，再找静态库？）。&lt;/li&gt;
&lt;li&gt;-L 指定所需要的库所在的文件夹。系统先寻找标准位置，再寻找指定位置（标准库一般在/lib或/usr/lib）。&lt;/li&gt;
&lt;li&gt;-I 指定头文件的寻找路径。先找标准的，后找指定的（标准的一般在/usr/include）。&lt;/li&gt;
&lt;li&gt;-static 只用静态库,再拿上面那个例子，如果加上-static，系统就会只寻找libpthread.a文件。&lt;/li&gt;
&lt;li&gt;-shared 生成动态库（共享库）文件，形如 libxxx.so （gcc -shared dang.o -o libdang.so）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/make-gcc-guide/&#34; title=&#34;GCC Makefile&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>游戏发展史:Valve</title>
      <link>http://alimy.me/post/ark_201603242135/</link>
      <pubDate>Thu, 24 Mar 2016 21:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242135/</guid>
      <description>

&lt;p&gt;Valve 虽然从来是『有再一再二，没有再三再四』，但是不得不承认，无论是半条命还是 steam，都称得上『划时代』。&lt;/p&gt;

&lt;h3 id=&#34;名不见经传的英雄-unlikely-heroes:6fe8b0e882bd23476ae23431505c361b&#34;&gt;名不见经传的英雄 Unlikely Heroes&lt;/h3&gt;

&lt;p&gt;1996年，微软已经从一个小作坊成长为世界上最富有的公司之一，最早的一批员工都已经成为了百万富翁。其中两名老员工一直爱玩游戏，现在有了足够的资金做自己想做的事情，他们决定成立自己的公司。&lt;/p&gt;

&lt;p&gt;不幸的是，他们对游戏开发毫无经验，只参与过操作系统以及功能性产品的编写，后来一个好友将他们介绍给了著名的id软件创始人——约翰·卡马克，卡马克说服他们应该拿到Quake引擎的许可并做一个游戏。他们同意了，并认为追寻梦想的时机已到。&lt;/p&gt;

&lt;p&gt;加布·纽维尔和麦克·哈灵顿为新公司想了几个名字，包括果蝇、全息盒子以及犀牛疤痕(Rhino Scar)，但最后他们选定了一个很简单的名字阀门(VALVE)。&lt;/p&gt;

&lt;p&gt;和卡马克见面后，纽维尔和哈灵顿创建了他们的公司，并在纽维尔的婚礼遮天正式注册成立。&lt;/p&gt;

&lt;p&gt;【G胖 加布·纽维尔 Valve创始人】：我最初建立一家游戏公司的动机带有一定社会性，我很享受与一帮聪明人一起工作，创造能影响不同群体的游戏。1996年，我在想有哪些选择，在这个问题上我又很大的自由，环游世界，度个假什么的。我最喜欢Valve的一点就是这种特定的工作环境。&lt;/p&gt;

&lt;p&gt;不同于Bungie仅靠一人慢慢白手起家，Valve想立马就开始制作高预算游戏，两个人是远远不够的，尤其这两人还从来没做过游戏。于是Valve便开始物色人才，他们的做法不同于当时业界的标准，不仅招募专业人士，还有MOD作者。他们意识到某些mod作者可能比专业人士更有天赋。伺候Valve便开始开辟新的疆土。&lt;/p&gt;

&lt;p&gt;公司完全依靠两位创始人的资金运作，这样一来公司便承担得起一般小工作室承受不了的风险。然而仅有两个想追梦的人还远远不够，没有人看好他们，找到一个愿意发行他们作品的发行商几乎不可能。尤其当纽维尔和哈灵顿宣称游戏采用了极其复杂的技术时，发行商们不相信他们能兑现诺言，最后他们找上了“雪乐山在线”(SIERRA Online)，雪乐山刚好打算发行一款3D动作游戏，最好使用Quake引擎制作。Valve团队令他们印象深刻，有了足够的信心与其展开合作，即使失败了，仅仅一款游戏的合约也让雪乐山有退路。&lt;/p&gt;

&lt;p&gt;年轻的Valve在1997年E3展上公开了他们的游戏——《半条命(Half Life)》。游戏展现出来的技术和氛围，使其很快成为了展会上的热点。他们做到了，
似乎这款游戏注定要大卖。但到了《半条命》本应发售的假日季时，Valve团队意识到产品还未完成，发售日不得不延期。但问题是，他们的发行商雪乐山已经开始广告攻势并视其为年度大作。当Valve宣布延期时，合作关系差点因此破裂。除此之外，他们决定重新审视游戏，在一年的研发时间里，团队摸索出很多尚未加入游戏中的新点子。于是Valve迈出了冒险的一步，推翻多数内容并回炉重做，以加入很多新点子。多数开发商都不会愿意推翻重做，但纽维尔和哈灵顿愿意不惜代价这么做。&lt;/p&gt;

&lt;p&gt;【G胖】：每一个Valve迷都知道，Valve的游戏总延期，不是吗？在资源、质量和发售日这几个要素中，我们总是会优先选择延期发售来提高质量。我们的想法是延期总比遗臭万年要好。&lt;/p&gt;

&lt;p&gt;随着回炉重做，游戏继续延期，从98年春延期到了98年夏，继续延期到了98年秋，又延期到了98年感恩节。11月时一个游戏Demo泄露到了网上引起轰动，《半条命》成为了年度热点游戏，此时游戏甚至未发售。&lt;/p&gt;

&lt;p&gt;万众期待下《半条命》终于在1998年11月上市，市场反响良好。与传统利用过场动画的叙事方式（如毁灭公爵3D, Duke Nukem 3D）和压根不讲剧情（DOOM）不同，《半条命》始终以主角戈登·弗里曼的视点进行，另外故事都是实时呈现的，让玩家代入感倍增，而不只是一个旁观者。&lt;/p&gt;

&lt;p&gt;通过脚本，有很多有趣的事件在玩家周围发生，从同事被怪物吃掉，到场景破坏。尤其是游戏的开场部分，大段对话后伴随着实验事故，给人感觉如同互动电影一般。另外游戏的画面与人物动作史无前例。所有者一切都超出了人们的预期。由两个无游戏开发经验的人组成的新公司做出了年度最佳游戏。《半条命》最终成为一个颇具传奇性的游戏系列，时至今日仍旧是销量最高的游戏之一，更何况1998年时的游戏市场规模远不能与今天相比。&lt;/p&gt;

&lt;p&gt;随着游戏的成功，大家都想知道何时会有续作。他们会发现《半条命》的未来不仅由Valve创造，玩家自己也参与其中。&lt;/p&gt;

&lt;h3 id=&#34;半条命的第二春-half-life-s-afterlife:6fe8b0e882bd23476ae23431505c361b&#34;&gt;半条命的第二春 Half-Life’s Afterlife&lt;/h3&gt;

&lt;p&gt;《半条命》的空前成功中可以得出以下结论：&lt;/p&gt;

&lt;p&gt;Valve赢得了豪赌并由此发达
世界需要更多的《半条命》
【G胖】：我和麦克都有操作系统及相关产品编程的背景，我们当时很确定失败不可避免，根本就没有理由相信我们会成功。总的来说从商业角度出发我们有些焦虑，问题不是之前的工作完成的如何，而是接下来该干什么。&lt;/p&gt;

&lt;p&gt;Valve明白下一个项目需要花“一点”时间，在这段时期gearbox被给予开发资料片的任务——《针锋相对(Opposing Force)》。资料片足够成功，第二个资料片《蓝色沸点(Blue Shift)》【TODO 这里翻译可能有误】的制作也顺理成章。游戏发生的时间地点与原版完全一样，但以不同角色的角度讲述整个故事。《针锋相对》里扮演的是与戈登·弗里曼为敌的海军陆战队员，《蓝色沸点》则扮演的是基地保安巴尼，和原版一样都是以科学定律命名。《针锋相对》指的是牛顿第三定律，《蓝色沸点》值的是多普勒效应。尽管销量不错，但留给人们的印象并不深。制作MOD，即允许玩家深度挖掘游戏代码并改写成新游戏，这一做法被某些工作室接受，比如id软件，而其他多数开发商则不允许。Valve决定向mod社区打开阀门，因为本身公司的很多雇员也来自那里。&lt;/p&gt;

&lt;p&gt;【G胖】：《半条命》的特征之一就是被mod社区广泛接受。麦克和我都有操作系统编程经验，在我们研发操作系统时总是在想我们所编写的程序间接创造的价值。你所编写的工具被用来从其他消费者那创造价值。一个好的工具对于一个大公司的价值与在澳大利亚开发《军团要塞》的两个孩子来说其实差别不大。&lt;/p&gt;

&lt;p&gt;随着《半条命》大量源代码的开放，很快网上便充斥着各种MOD，其中少数几个素质几乎与原版比肩。《胜利之日(Day of Defeat)》是一款二战射击游戏；《团队要塞(Team Fortress)》是一款很受欢迎的Quake mod，应玩家要求制作了《半条命》版。&lt;/p&gt;

&lt;p&gt;但《半条命》最受欢迎也是世上最成功的MOD是——《反恐精英(Counter-Strike)》。作为一款团队回合制多人射击游戏，几乎完全重写了原作。原作的多人模式就是全员无差别大乱斗，当时的FPS多人游戏基本都是如此。《反恐精英》于1996年6月进行了首次Beta测试，不到一年，mod团队就因为游戏太受欢迎被Valve收编。&lt;/p&gt;

&lt;p&gt;Valve之后买下了之前提到了所有3个MOD，这3个MOD之后都成为了商业化品牌。开发商一般都不愿放出自己的源代码，担心会对自己的品牌构成威胁。Valve证明了与mode社区的开放关系其实能增加销量，毕竟想要玩DOD或者CS还得先购买《半条命》。&lt;/p&gt;

&lt;p&gt;【G胖】：多多沟通、信任并与玩家社区合作，就能获得更好的娱乐体验，从长远来说你的生意也能因此获得更多利润。&lt;/p&gt;

&lt;p&gt;与多数游戏刚发售时销量很高，随后便一路走低不同，《半条命》一直保持着稳定的销量，玩家也有越来越多的理由继续玩下去。不过除去这些项目，大多数人都更像知道Valve下一步打算做什么。这么多年Valve没有放出一点消息，于是流言四起。&lt;/p&gt;

&lt;p&gt;直到2003年E3展《半条命》发售5年后，Valve终于再次出手，向世界展示了没人能像他们一样做出《半条命》&lt;/p&gt;

&lt;h3 id=&#34;续作风波-the-trouble-with-sequels:6fe8b0e882bd23476ae23431505c361b&#34;&gt;续作风波 The Trouble with Sequels&lt;/h3&gt;

&lt;p&gt;2003年E3展上《半条命2》的公布，在玩家群里引起轰动。依靠第一部建立起来的声望，所有人的翘首以盼2003年9月发售日的到来。就在游戏即将发售的时候，意想不到的事发生了。Valve的服务器被黑了，游戏源代码、地图、皮肤被匿名黑客窃取，这是游戏史上最严重的黑客事件之一。失窃的代码足以构建数个可玩的场景，这个泄露版充满了BUG，而且多数时候都很无聊，总之不具备可玩性。更糟的是Valve一次宣布游戏不能在03年内发售。&lt;/p&gt;

&lt;p&gt;【G胖】：我们已经花费数年开发《半条命2》，我们的压力很大，不仅是长时间的工作，还担心产品设计和技术上的风险。有的员工十分不安，我们制作数年的心血以一种完成度极低的形态在网上大量传播，这事令我十分痛苦。就像是一大帮人用女性角色与一个科学家XXOO的场面做新品推荐一样。有人走进我的办公室问我，公司是不是要停业了，我们是不是应该忘掉《半条命2》去做点别的，因为这个产品已经被泄露事件毁了。&lt;/p&gt;

&lt;p&gt;Valve立即联系了FBI，对黑客是谁展开调查。但Valve与玩家社区也一直保持着良好的关系，决定利用这一条件帮助调查。加布·纽维尔在论坛公开确认了泄露事件，并请求在线社区帮忙找出黑客。G胖得到了压倒性的支持，在玩家回复中也逐渐弄清楚了泄露的代码是如何在网上传播开的。尽管FBI和玩家们都作出了努力，黑客的身份一直是个谜。直到黑客自己现身说法，解释了他如何黑进服务器，并向Valve索取一个职位。Axel Gembe描述了黑客行为的细节，他利用了微软Outlook的发件箱安全漏洞。并声称自己并不是一个坏人而且真心实意愿意为Valve工作。Valve欣然答应，并通知了联邦调查局为其设下圈套。不幸的是Gembe觉察到了圈套，决定不离开德国，最终他被德国警察逮捕。&lt;/p&gt;

&lt;p&gt;可能是还觉得不够有戏剧性，Valve与发行商陷入了合同纠纷。在亚洲，人们更多的在网吧玩PC游戏，而非在家用电脑上，这就使得网吧成为了主要市场。发行商“威望迪环球(VIVEND UNIVERSAL)”宣称他们买断了网吧销售权，而Valve则坚持他们有权通过数字发行在网吧销售游戏。&lt;/p&gt;

&lt;p&gt;卡发着意识到自己处于一个尴尬境地，那就是和帮他们卖游戏的人打官司。这个纠纷在游戏发售后依旧持续数月，最终庭外和解。经过一系列跳票，《半条命2》终于在2004年11月16日上市，历经6年制作，负面新闻不断，玩家们担心是否能达到前作的高度。&lt;/p&gt;

&lt;p&gt;幸运的是，玩家的超高期待是值得的。&lt;/p&gt;

&lt;h3 id=&#34;半条命的二次方-half-times-two:6fe8b0e882bd23476ae23431505c361b&#34;&gt;半条命的二次方 Half Times Two&lt;/h3&gt;

&lt;p&gt;《半条命2》于2004年11月16日上市，巧合的是，此时距离另一款备受期待的科幻射击游戏上市不过一周。这部作品的名字开头也是“HAL”——《光环2(HALO 2)》。尽管《光环2》属于年度大作之一，但即便是士官长也难掩戈登·弗里曼的光环。&lt;/p&gt;

&lt;p&gt;《半条命2》在发售前就已经开辟了新的疆土，超强的source图像引擎已经被用于更新CS，在《半条命2》发售前便可以开玩。这一切由Steam带来，Steam由Valve研发并包含：数字版权管理、软件商店，之后还添加了玩家社区。Steam允许玩家在线购买游戏，并直接通过Valve服务器进行下载，服务器会检测游戏是否合法。&lt;/p&gt;

&lt;p&gt;【G胖】：我们认为这对游戏开发商来说是个好机会，我们改变了游戏的发行和更新方式。我们开始寻找眼光独到的开发商帮助我们编写这个系统，让像我们这样的游戏开发商和软件开发者登陆这个平台，之前没人这么做过着实令人惊讶。一个本地的开发团队有意接手此项目，我们便开始了合作，让他们主导steam团队，最后这波人在两年内相继离职，所这可能并不是最明智的做法。&lt;/p&gt;

&lt;p&gt;Seam甚至允许用户在游戏发售前预先下载游戏，当然在发售日之前你还是进不了游戏，但时间一到就能立刻开玩，不需要再进行额外的下载，这标志着游戏业向数字发行方向迈出的一大步。如此一来Valve便不用付钱给发行商，利润自然也大大提高。这一新的发行方式正逐渐改变游戏业界的面貌，Valve是这一变革的先行者。&lt;/p&gt;

&lt;p&gt;《半条命2》的游戏本身也是一款杰作，在这款氛围独特的游戏里，双眼所及之处都充满了故事。Valve构建了一个活生生的世界，NPC有着很高的AI，从凶恶的敌人到惊恐的平民，NPC都有生动的面部表情和嘴唇同步，精彩的台词和专业的配音。&lt;/p&gt;

&lt;p&gt;玩家将再次扮演戈登·弗里曼，这次弗里曼将在一个已经被外星人占领的世界中作战。除了著名的source图像引擎，《半条命2》还使用了当时最为先进和精确的物理引擎。这就使得HL2里能够设置几个物理谜题，作为激烈战斗之后的调剂，这也使重力枪有了用武之地。这把枪能够举起并投掷游戏中的任何物体，玩起来各种欢乐。Valve在游戏发售后添加了更多内容，购买《半条命2》的人已经免费获得了CS:S，之后还添加了《半条命2：死亡竞赛》以及一个技术演示《消失的海岸线》，V社果然很良心。《消失的海岸线》甚至还包含了开发者评论内容，这在业界是前无古人的。&lt;/p&gt;

&lt;p&gt;和前作一样，《半条命2》易于制作MOD，在steam上既可以运行官方产品也能运行mod，多年后依然有大量MOD推出。其中最受欢迎的是Garry’smod，与其说是游戏，不如说是个物理沙盒。mod允许玩家利用游戏的物理系统建造出能想象出的任何东西，极大的提高了玩家的创造力。&lt;/p&gt;

&lt;p&gt;所有这一切造就了HL2的巨大成功。游戏评论者们爱它，玩家们膜拜它，总之深受广大消费者的欢迎，Valve再次完成了不可能的任务。随后HL2还登陆了Xbox、Xbox360和PS3，PC游戏界的杰作终于登陆了游戏主机。和前作一样HL2也成为了史上最具影响力和销量最高的游戏之一。但是Valve不打算再等6年才发售下一部作品，公司再次突破桎梏，改变了他们制作游戏的方式。&lt;/p&gt;

&lt;h3 id=&#34;游戏革新者-game-changer:6fe8b0e882bd23476ae23431505c361b&#34;&gt;游戏革新者 Game Changer&lt;/h3&gt;

&lt;p&gt;Valve并没有直接开始制作《半条命3》，而是为《半条命2》做几个资料片，这一点并没有什么稀奇的，但是在制作的过程中，Valve意识到可以借此机会实验改变游戏开发和消费者的游戏体验方式。一般来说一个小组制作流程数十小时的作品，售价一般为50-60美元，这些游戏制作非常花费时间，通常为2-3年或者像HL2这样花了6年。&lt;/p&gt;

&lt;p&gt;但Valve就想为什么不直接用HL2的source引擎，只做小小的升级，在短时间内制作一个流程相对短的游戏，仅售20美元。最后的结果就是独立资料片，按Valve的说法叫章节化，巧妙地命名为《半条命2：第一章》（不需要本体即可独立运行）&lt;/p&gt;

&lt;p&gt;【G胖】：总的来说我们不认为定价属于某种策略，你得给人们一些选择，在产品之间有比较。价格因素能吸引大量不同的消费者，从而提高收入。我们在《半条命2》上运用的章节化做法本身对游戏内容的主干没什么影响。&lt;/p&gt;

&lt;p&gt;第一章紧接着原作的结局，可以看到结局之后发生了什么。采用和HL2相同的图像和物理引擎，游戏本身依旧发生在17号城市。研发团队能很快从概念设计进入到实施阶段，因为一切都是现成的。&lt;/p&gt;

&lt;p&gt;在原作发售后仅仅一年半，《第一章》以20美元的超低价开卖，提供了一个6小时的单人战役，让戈登·弗里曼重返被在原作中被他毁坏的城市。游戏本身对故事进程的推进不大，敌人也和原作基本相同，与其说是独立作品，不如说是对原作的拓展。尽管如此，销量依然不错，毕竟玩家们未曾想到这么快就能开始新的冒险。&lt;/p&gt;

&lt;p&gt;在《第一章》获得商业成功后，所有人都翘首等待《第二章》，但他们等到的却是《橙盒版(The Orange Box)》。《橙盒版》是五款游戏的合集，却仅售一款游戏的价格，包含已发售的《半条命2》和《第一章》，以及新游戏《第二章》《军团要塞2》，以及解密游戏《传送门(Portal)》。距离《第一章》发售过去近一年，这是谁都没有预料到的。Valve的这种行为是一场豪赌：捆绑销售的销量会比拆开单卖的销量更多吗？&lt;/p&gt;

&lt;p&gt;【G胖】：我们有一款全新的游戏《传送门》，我们想试探一下市场，《橙盒版》提供了媒介。我们有《第二章》和《军团要塞2》这样备受期待的作品，给《传送门》一个推广的机会，与其他游戏捆绑让尽可能多的人玩到这款游戏。即使《传送门》失败了也没什么，这毕竟是一款解谜游戏，本身就是一个很小众的游戏类型。&lt;/p&gt;

&lt;p&gt;捆绑销售大获成功，每人都能各取所需。这次也证明Valve可以发售多平台游戏，因为PC版与XBOX360版同步上市。不幸的是，V社发现PS3的开发环境很糟，所以PS3版是依靠第三方帮忙移植的。&lt;/p&gt;

&lt;p&gt;《第二章》把玩家和忠实的伙伴Alyx带到了17号城市之外，探索新地点，遭遇新敌人。本作同样包含6个小时的战役，但内容和故事比第一章丰富许多。&lt;/p&gt;

&lt;p&gt;《军团要塞2》走的是风格化欢乐向路线，成为一款卡通化，有多兵种选择的射击游戏。&lt;/p&gt;

&lt;p&gt;《传送门》是10年间最具创新性的大作，第一人称射击解谜游戏，彻底改变你的空间思考方式。尽管游戏流程只有3小时，但引人入胜的玩法和谜题以及别出心裁的结尾曲已经使这款作品成为了圈内的传奇。&lt;/p&gt;

&lt;p&gt;随着意料之中的《第二章》以及意料之外的《军团要塞2》和《传送门》的发售，每个人都在想《第三章》会和什么游戏捆绑。但Valve再次出人意料，将视线远离《半条命》，转向了一个全新的游戏，于2008年公开。一款让猎头蟹都显得如同乖狗狗一般的恐怖游戏。&lt;/p&gt;

&lt;h3 id=&#34;治疗感染-一次一颗子弹-beyond-the-crowbar-and-beyond:6fe8b0e882bd23476ae23431505c361b&#34;&gt;治疗感染，一次一颗子弹 Beyond the Crowbar… And Beyond&lt;/h3&gt;

&lt;p&gt;《求生之路》是一款僵尸射击游戏，但又与其他同类游戏有着明显的差异。游戏注重玩家间的团队合作，玩家将操控由4人组成的幸存者团队，单人游戏时其他队友由电脑操控。和《半条命》一样，游戏通过一段段突然发生的战斗营造出一种紧张氛围，令人毛骨悚然。为了达到这种效果，Valve创造了“导演”系统，一个会根据玩家行为i不端改变的系统。&lt;/p&gt;

&lt;p&gt;举个例子，加入四个高玩一路碾压，“导演”会产生更少的弹药和医疗包，并产生更多的僵尸群，顺便把路上的灯也给关了。假如是一个菜鸟与三名电脑同伴，游戏会减少僵尸数量并提供更多的医疗包。如此一来，每次的游戏体验都不会完全一样，大大增极爱了重复可玩性。&lt;/p&gt;

&lt;p&gt;考虑到僵尸在娱乐文化中的再次流行以及Valve的良好形象，游戏大卖完全在意料之中，V社还承诺会在DLC中添加更多内容。但Valve从不按常理出牌，Valve震惊了业界，他们宣布立即开始了《求生之路2》的开发，尽在1代一年后便发售。如此短的时间便推出续作是前所未有的，人们担心Valve会赶工发售游戏。&lt;/p&gt;

&lt;p&gt;【G胖】：《求生之路1》发售之后，我们想开始做《求生之路2》并且快速完成，也许我们是太过在意这个。这样不是很酷吗？《半条命1》延期一年，《半条命2》也延期一年，《半条命2：第三章》影子都没有。我们长期因为延期饱受批评，认为我们的进度管理很糟糕。我们就想“其实我们可以在一年的时间里做出L4D2”。本以为人们的反应会是“Valve终于不延期了，实在太酷了”。而事实上有些人觉得这很不科学，他们不认为这是Valve的一大进步，而把这当做是V社“变了”的信号，觉得我们会砸了牌子。&lt;/p&gt;

&lt;p&gt;更糟的是，《求生之路》粉丝和《半条命》粉丝都觉得遭到了背叛。《求生之路》玩家担心续作会挤掉1代DLC制作并且分化两代的玩家。一些不满的玩家开始建立群组号召抵制续作，不到一个月就有成千上万的玩家加入。与此同时，苦等《第三章》的玩家希望破灭，因为比起猎头蟹僵尸，V社似乎对病毒感染僵尸更有兴趣。&lt;/p&gt;

&lt;p&gt;V社一向很关注玩家群体，G胖本人公开回应了玩家们的顾虑，声明1代还会继续推出DLC和升级补丁。事实上V社也已经发布了两个DLC，包含新的多人模式和一个新的剧情。&lt;/p&gt;

&lt;p&gt;【G胖】：做完《求生之路2》后团队里没人说“好吧，我们在一年内做出L4D3吧”&lt;/p&gt;

&lt;p&gt;尽管发生了抵制活动，L4D2的预定量依旧超过1代。然而作为一个以亲近玩家为荣的公司，《求生之路2》引发的论战可能是自HL2泄露事件以来最大的一次倒退。&lt;/p&gt;

&lt;p&gt;【G胖】：我们并为预料到玩家会如此反应，我们完全理解玩家为何会有这些顾虑，我们应该解释一下，作为《求生之路2》发售前准备工作的一部分，不幸的是我们没有这么做，结果就是一帮人发起了抵制活动，我们的责任就是打消这些人的顾虑，我们得和他们对话，确保他们明白我们怎么想的，决策是如何做出的，安抚他们。这是Valve一直以来的传统哲学，让玩家们能继续支持《求生之路1》并创造价值。最后我们邀请两位抵制活动的发起人来到公司总部，问题是所有人都说他们并无恶意，我们提供机会让他们坐下来试玩，这招似乎很管用，让玩家社区觉得他们的想法得到了重视。通过Steam平台，我们可以看到抵制小组内拥有L4D1的玩家购买L4D2的比例其实比全球范围内的L4D1小组要高。也就是说我们很好的打消了顾虑，向他们表明了我们的计划，发售时玩家的情绪比刚公布时平静许多。&lt;/p&gt;

&lt;p&gt;有件事多年以来一直没变，那就是V社不按常理出牌。从游戏研发到发布数字平台，V社一直在小心翼翼地审视自己和整个业界以寻找新的路子推陈出新。和其他行业一样，多数游戏小组一直做固定的系列或游戏类型，只做很小的创新以保证销量，但Valve总是不走寻常路，偶尔也会遇到一些麻烦，但每次都能将危机化解，游戏大卖，叫好又叫座，
这一切都归功于之前从未制作过游戏，但清楚的知道自己想要什么的两个人。&lt;/p&gt;

&lt;p&gt;（正义之子面对有悖于常理的世界，会使其天翻地覆）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-valve/&#34; title=&#34;游戏发展史 - Valve&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>游戏发展史:Bioware</title>
      <link>http://alimy.me/post/ark_201603242125/</link>
      <pubDate>Thu, 24 Mar 2016 21:25:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242125/</guid>
      <description>

&lt;p&gt;一个公司能够成为欧美 RPG 玩家心目中『经典』的代言，不得不说是有两把刷子的。&lt;/p&gt;

&lt;h3 id=&#34;启程-setting-out:fc5fc58ecd9212b85ea27d410d0ba8b8&#34;&gt;启程 Setting Out&lt;/h3&gt;

&lt;p&gt;1995年，电子游戏已经不再只是孩子的玩具，即使是医生也可能成为玩家。就在这一年，三名医学院毕业生决定在投身医药行业之前做出自己的游戏。就是这样， Ray Muzyka, Greg Zeschuk和Augustine Yip在Zeschuk的地下室创建了自己的公司。谁能想到这样一个组合最后能成为RPG巨匠？他们的名字代表着精品——Bioware.&lt;/p&gt;

&lt;p&gt;公司制作的第一款游戏叫做《超钢战神》，这是1996年的一款为MS-DOS平台执着的第一人称载具射击游戏。Bioware尝试提升游戏画面表现，将可变形地表作为一大卖点。游戏还有着复杂的背景故事，在那个年代多数射击游戏内容都只是枪枪枪，这种级别的游戏内涵着实不平常，这也成为了公司以后的立足之本。&lt;/p&gt;

&lt;p&gt;《超钢战神》之后Muzyka和Zeschuk想要继续制作游戏，但作为创业伙伴的Augustine Yip决定投身医药行业，离开了公司。尽管如此Bioware还是继续制作了他们的下一款游戏《战场：无垠》并且开始寻找发行商。当interplay旗下的黑岛工作室看过游戏之后，他们并不想仅仅发行游戏，而是想将其打造为公司的标志品牌，并授权Bioware将《战场》做成一款官方D&amp;amp;D规则游戏，结果就是1998年的《博德之门》。&lt;/p&gt;

&lt;p&gt;故事发生在AD&amp;amp;D第二版规则设定的“遗忘之地”，游戏保有一切RPG的特性，从移动、攻击到施法，一切结果都是通过计算获得的。Bioware明智地决定让这一过程对玩家不可见，如此一来，即便是从未看过AD&amp;amp;D规则书的玩家也能很快上手，投身进“遗忘之地”之中。游戏是实时进行的，这在D&amp;amp;D电子游戏里尚属首例，玩家可以在战斗开始前按下“暂停”，选择每个队友的进攻路线，再继续游戏观看战略实施。游戏还拥有当时的顶尖画质，充分利用了PC业界的新技术——专用独立显卡。不同于《暗黑破坏神》的杀杀杀&amp;amp;刷刷刷，《博德之门》将重心放在了剧情上，引人入胜的史诗般任务至少花费数十小时，一个法师学徒为其师父报仇的故事都能谋杀玩家的大量时间。支线任务大多也和主线一样有趣，D&amp;amp;D饭也能遇到很多设定中的著名角色并与之互动，对很多玩家来说是梦想成真。虽然画面在今天看来已经过时，但时至今日博德之门依旧是游戏史上剧情最佳的游戏之一。这还没完，游戏提供了多人模式，允许好友组队一起完成任务。这是首款能这么做的PC RPG，这使得游戏大受欢迎，因为核心玩家能在游戏中一路帮助他缺乏经验的朋友。所有这一切成就了1998年最卖座的游戏之一，成为一代RPG名作。&lt;/p&gt;

&lt;p&gt;仅仅成立3年并推出两部作品，Bioware从医生的爱好成为了业界领导者，这一切都来得太快，没人知道他们能否将这股劲头保持下去。幸运的是，Bioware的成功之路才刚刚开始。&lt;/p&gt;

&lt;h3 id=&#34;组队-gaining-allies:fc5fc58ecd9212b85ea27d410d0ba8b8&#34;&gt;组队 Gaining Allies&lt;/h3&gt;

&lt;p&gt;三名医学院毕业生决定转行，他们建立了一个叫做Bioware的游戏公司。他们的第一款游戏《超钢战神》并没有在业界引起多大反响，而他们的第二部作品就是角色扮演名作《博德之门》，一夜之间便成为了炙手可热得工作室。Bioware想要继续制作这一系列，但同时又不想固定只做一种类型的游戏。刚好《博德之门》的发行方黑岛，说需要一个开发商制作Shiny小组的MDK续作。我们的RPG大师决定同时制作三款游戏：一款要比原作更庞大的续作，一款全新的RPG，一款他们从未涉足过的3D设计游戏。&lt;/p&gt;

&lt;p&gt;和Shiny小组之前的作品一样，MDK是一款风格搞怪的欢乐向游戏。当得知将由《博德之门》小组制作游戏时，MDK粉丝们感到很不安，担心他们会把游戏做得太文艺。幸运的是，即使是医生也懂得欣赏拿枪的战狗，Bioware完全接受了MDK的搞怪风格，续作保持了前作的精彩和幽默。&lt;/p&gt;

&lt;p&gt;疯狂科学家，会说话的狗，一代的倒霉蛋清洁工悉数回归，这一次三人都是可玩的角色。更妙的是三人的玩法完全不同，彰显了三人个性的不同。科学家注重解谜，战狗注重射击，清洁工则是在平台间跳来跳去。三种游戏方式都很精妙好玩，这令玩家喜出望外。2000年游戏发售时获得的评价颇高，很多人认为MDK2已经超越了前作，Bioware作品依旧保持了良好的口碑。事实证明他们不仅仅只会照着D&amp;amp;D规则书做游戏。除此之外，MDK2也是公司初次涉足游戏机，DC版是与PC版同步开发的，这一经验对公司之后的作品十分重要。&lt;/p&gt;

&lt;p&gt;好像是觉得2000年仅发布一部大作还不够，晚些时候，Bioware还发布了《博德之门2：安姆的阴影》。在1代取得成功之后，B社明白得付出很多努力才对得起1代建立起的名声。尽管有压力，并且很多组员忙于其他项目，发售后《博德之门2》依旧广受好评——更大，更好，比前作更漂亮。博德之门2相比于一代突破并不大，但是2代将1代已有的优点进一步完善近乎完美。游戏还有着出色得剧情以及数百小时的流程，被认为是史上最佳RPG之一。&lt;/p&gt;

&lt;p&gt;如果《博德之门1》使Bioware成为了一个3A厂，《博德之门2》则巩固了这一地位。两个项目完成之后，公司还有一个项目尚未完成，依靠对质量和细节的关注，B社使《博德之门》成为了一个成功的品牌，他们也聪明地意识到Mod对销量带来的贡献。考虑到网游越来越受欢迎，公司决定将单人战役，多人体验和MOD工具三合一，让玩家自行选择喜欢的游戏方式。&lt;/p&gt;

&lt;p&gt;5年的开发之后，最终《无冬之夜》于2002年发售，这又是一款设定在“遗忘之地”的D&amp;amp;D游戏，包含大量任务和颇具深度的剧情，既可以单人游戏也可以多人合作。随《无冬之夜》一起发售的还有开发工具包，事实上就是Bioware编写游戏使用的同款工具包，最棒的是工具包支持多人游戏，也就是说可以很容易地做出多人mod。不出意料，网上很快就出现了各种类型的mod，从全新的战役，到无双割草，再到网游化mod，这一切只需要一款游戏的价格。再一次的，一款杰作诞生了。这已经使《无冬之夜》成为史上内容最丰富的游戏之一，但这对Bioware来说还不够，他们还将D&amp;amp;D的一大特色带进了游戏里，《无冬之夜》包含了地下城主多人模式，地下城主（DM）可以在其他玩家进行任务时实时添加游戏内容，这成就了变幻莫测的游戏体验，DM可以随心所欲设计冒险任务。令人激动的，富有挑战性的，或者让人玩不下去，完全取决于个人喜好，就像经典的纸笔D&amp;amp;D游戏玩法一样。&lt;/p&gt;

&lt;p&gt;同时开发三款游戏，全都叫好又叫座，Bioware无疑称霸了美式RPG市场，同时也涉足了游戏机市场，似乎两位加拿大医生的事业已经到达巅峰。但当他们公布下一款作品时，Bioware向世人揭示了他们的梦想是星辰大海。&lt;/p&gt;

&lt;h3 id=&#34;升级-leveling-up:fc5fc58ecd9212b85ea27d410d0ba8b8&#34;&gt;升级 Leveling Up&lt;/h3&gt;

&lt;p&gt;2002年，加拿大开发商Bioware，从只能在创始人的地下室办公，一跃成为业界顶尖工作室。《博德之门》系列和MDK2大获成功后，《无冬之夜》同样也叫好又叫座。但其实早在这些游戏发售前，就有一个发行商与Bioware接洽，帮他们制作第一款RPG。于是乎Bioware和“卢卡斯艺术”共同宣布，《无冬之夜》后公司将开发《旧共和国武士》&lt;/p&gt;

&lt;p&gt;“卢卡斯艺术”在1999年底便初次与Bioware接触，询问是否能制作一款基于星战EP2的游戏。随着谈判的深入，Bioware也可以选择将设定改到电影发生前的4000年，只要B社愿意。意识到这么做有更大的创作自由而不必拘泥于电影的剧情，Bioware选择将时间设定在很久很久很久以前。“卢卡斯艺术”想要他们制作一款家用机游戏，在审视了市场上现有的游戏机后，Bioware选择了即将发售的微软XBOX，因为他们认为XBOX的开发环境最好。另外这也使其成为XBOX上的首款RPG，再加上《星球大战》的名号，大卖是板上钉钉的事情，而他们押对宝了。&lt;/p&gt;

&lt;p&gt;当游戏于2003年发售时，经过数次为了保证质量的延期，发售后不仅星战迷，连评论家也赞不绝口。Bioware在星战科幻背景下编写了一个原创故事，塑造了一个形象生动的角色。游戏在剧情与故事之间找到了平衡，这样一来玩家不仅能带入故事中，还能玩得很开心。&lt;/p&gt;

&lt;p&gt;另外Knights of the Old Republic和B社之前作品的差异没有想象中那么大，回合战斗系统依旧基于第三版D&amp;amp;D规则，但有了光剑、激光枪和原力，游戏带来的妥妥是史诗般的星战体验。游戏不仅在商业上获得巨大成功，还拿到了一堆“年度最佳游戏”奖，时至今日依旧是最好的星战游戏之一，要知道星战游戏多如牛毛。一款续作自然也是板上钉钉，但Bioware将开发转交给了另一个开发商，此举震惊了游戏界。比起成为另一家专职星战游戏的开发商，他们更愿意制作自己的原创游戏。&lt;/p&gt;

&lt;p&gt;在发布了PC版之后，Bioware又开始同步开发多个项目。在制作了多年的授权项目之后，他们决定回归制作自己的游戏。2004年，B社公布了一个全新的奇幻RPG《龙腾世纪》，花了足足五年这款游戏方才面世。2005年他们发布了《翡翠帝国》，一款游戏机平台上的动作RPG，自B社处女座《超钢战神》发售9年后的首款非授权游戏。&lt;/p&gt;

&lt;p&gt;终于完成从回合制到实时战斗的跳跃，B社将叙事与紧张的战斗相结合。游戏背景的灵感来自香港功夫片，和其他Bioware游戏一样，游戏有着众多角色和史诗般的任务，除了拥有会记录你行为的道德系统外，还可以选择发展几段恋情。《翡翠帝国》获得的媒体评价很高，但是玩家受众群没有B社想象的多。游戏销量按其他小组的水平来讲还算不错，但与《博德之门》和《旧共和国武士》相比，仅有Bioware的名字还不足以大卖。另外这款游戏也让B社意识到，游戏的开发成本在成倍增长。即使有之前的成功，他们也得更加商业化，才有自己保质保量地做出他们想要的游戏。&lt;/p&gt;

&lt;p&gt;2005年Bioware与Pandemic工作室合并，这是另一家与“卢卡斯艺术”合作过的工作室。如今两家公司的资源整合到了一起，B社准备好了制作它的下一款杰作。他们意识到游戏类型的界限已经越来越模糊，Bioware的下一个项目将是一款RPG与射击游戏的混合体，令公司走进了高清时代。&lt;/p&gt;

&lt;h3 id=&#34;属性提升-upgrading-stats:fc5fc58ecd9212b85ea27d410d0ba8b8&#34;&gt;属性提升 Upgrading Stats&lt;/h3&gt;

&lt;p&gt;自2004年就有传言说Bioware在制作一款RPG与射击混合的游戏，但直到2005年10月他们才正式公布《质量效益》，《质量效益》被设定为一个科幻史诗三部曲。虽然他们曾经制作过MDK2，但《质量效益》是公司首次制作核心向射击游戏。一般来说射击游戏的剧情都很弱，B社想将它们擅长的高质量剧情与“虚幻3引擎”相结合，借此同时吸引RPG玩家和射击游戏玩家。和其他Bioware游戏一样，经过数次延期，终于在2007年11月登陆XBOX360。&lt;/p&gt;

&lt;p&gt;《质量效益》完全改变了RPG处理对话的方式，不同于在角色头顶冒出对话框或者将画面拉到角色面前的做法，《质量效益》中的对话采用了多角度运镜手法。另外《质量效益》还打破了RPG中只有一方开口说话的传统，主角拥有全程语音，不论玩家选择的角色是男是女。除此之外，B社重新构建了道德衡量标准，并不仅仅是简单的正邪选择，所有的抉择都偏向道德的灰色地带，代表不同的处事信条，迫使玩家在做出选择时得动动脑子，相比市场上的其他游戏更具挑战性。&lt;/p&gt;

&lt;p&gt;《质量效益》有着丰富的内容，充满细节的世界观，有血有肉的角色以及史诗般的任务。不幸的是，游戏在拥有出色表现力的同时，还有着频繁的贴图载入延迟问题，极大的破坏了玩家的代入感。为了赶上已经数次延期的发售日，最终导致多数支线任务都很鸡肋。与游戏故事氛围不相称的糟糕设计系统。另外不得不提一下电梯，原本设计目的是为了让游戏在漫长的载入过程中能与NPC队友进行互动，这却成为了游戏的显著缺点之一。最终瑕不掩瑜，质量效益广受玩家和媒体的赞誉，同时也是2007年圣诞购物季销量最高的游戏之一。&lt;/p&gt;

&lt;p&gt;然而2008年1月，游戏因为性爱场面受到了媒体关注，专栏作家Kevin McCullough发布一篇博客信口雌黄，随后上了福克斯新闻并在节目中以“SEXBOX”为标题，声称游戏允许青少年玩家能在游戏中推倒一切，而且全程可操控，正面全裸高清无码。不幸的是，这一切全是胡扯，这款M级游戏仅包含两段非互动的朦胧性爱场面。此事证明很多人眼中游戏依旧是儿童的玩物，比起暴力，人们对色情话题更为敏感。这一切都没有影响游戏的销售，晚些时候PC版也顺利发售。&lt;/p&gt;

&lt;p&gt;尽管又一款游戏大卖，Bioware明白如果想让成功延续，就得有更多的资源。于是乎，2008年，B社与Pandemic小组的合资公司被EA收购。9月份，公司出品了被EA收购后制作的首款游戏，游戏由世嘉发行，NDS平台游戏《索尼克编年史：黑暗兄弟会》。这是世嘉吉祥物的首款RPG，索尼克需要在朋友们的帮助下解开谜题使世界免遭毁灭，听起来很耳熟是么？&lt;/p&gt;

&lt;p&gt;俗套的剧情加上略为无脑的玩法，对于Bioware来说有些异乎寻常。本作的媒体评价只能说是一般，然而本作也因为忠实于索尼克系列的世界观而受到好评，在近几年的索尼克游戏里亦算佳作。&lt;/p&gt;

&lt;p&gt;2009年初，有了EA的资金支持，Bioware又一次同时开发多个项目，以至于在蒙特利尔建立了一个新的小组，专门帮忙处理人手不足的项目。同年6月，EA宣布Bioware与另一家RPG开发商“Mythic娱乐”合并，也就是说EA让B社全权主导Mythic。B社原工作室保持不变，Mythic直接由B社领导。换言之，EA的整个RPG部门均由这个加拿大开发商领导。&lt;/p&gt;

&lt;p&gt;同月，B社发布了他们的第二款手持设备游戏，iOS平台的《质量效益：银河》。这是一款两小时流程的俯视角射击游戏，展现出Bioware将《质量效益》打造成一个多媒体品牌的渴望。&lt;/p&gt;

&lt;p&gt;公司09年真正的大手笔是制作了五年的《龙腾世纪：起源》。自《无冬之夜》后B社再次回归奇幻题材，游戏允许玩家在开始主线前从6个起源故事中选择一个，当然你还是得招募队友帮助你阻止邪恶势力。与以往的B社游戏不同，龙腾世纪更加成人向，战斗过后角色满身是血，即便是好人战斗时也十分无情。不顾《质量效益》引发的争议，《龙腾世纪》也可以发生几段恋情，并且最后啪啪啪，包括同性之间的恋情。整个游戏包含数十小时的流程，尤其当玩家想体验所有六个起源故事时。游戏在PC，Xbox360和PS3上的销量还不错，但作为《博德之门》的精神续作并没有对业绩造成太大冲击。&lt;/p&gt;

&lt;p&gt;接下来，Bioware与2010年1月发布了《质量效益2》，这是首款会根据前作存档改变剧情的游戏，换言之，你在1代做出的决定会直接影响到2代。职业大幅平衡，更好的战斗体验，画面提升加上更快的电梯，不仅保持了《质量效益》的好名声，还在此基础上进一步发扬光大。&lt;/p&gt;

&lt;p&gt;与此同时Bioware还在制作另一款大作：《星球大战：旧共和国》。这是B社首次涉足网游领域，我们的单机巨人能否在网游界立足？本作号称是史上首款全程语音网游，包括多语言支持。有着《星球大战》的名号，公司意识到这个项目会变得非常巨大，需要一个工作室专门负责该项目，于是他们在德克萨斯州建立了Bioware奥斯汀分部，专职制作这款游戏。与此同时Bioware宣称他们还有尚未公布的游戏正在制作中，是续作还是全新的作品？&lt;/p&gt;

&lt;p&gt;他们已经宣布《质量效益3》在制作中（资料为2010年数据）。尽管他们也在尝试射击游戏和网游，但有一点始终未变：他们坚信任何游戏类型都可以拥有一个好的剧情故事。多数工作室把重心优先放在玩法而将剧情放在次要地位的时候，B社证明了对于细节的追求，复杂的道德选择，有血有肉的人物塑造一样能使游戏大卖。优秀的艺术设计，颇具代入感的游戏玩法，Bioware建立了只出精品的良好声誉，不论制作的是何种题材类型的游戏。&lt;/p&gt;

&lt;p&gt;15年来一直在改变业界，而一切的开端不过是几个医生的个人爱好。&lt;/p&gt;

&lt;p&gt;（光口头说是不够的，如果你这么轻易就被说服，我反而会失望，你亲自去瞧瞧吧）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-bioware/&#34; title=&#34;游戏发展史 - Bioware&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>游戏发展史:Interplay</title>
      <link>http://alimy.me/post/ark_201603242105/</link>
      <pubDate>Thu, 24 Mar 2016 21:05:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242105/</guid>
      <description>&lt;p&gt;Interplay 对于新玩家而言已经过于陌生了，虽然早已不复往昔，但是给游戏业界留下的财富，仍旧不可估量。&lt;/p&gt;

&lt;p&gt;新星崛起 Meteoric Rise&lt;/p&gt;

&lt;p&gt;布莱恩·法戈的高中生涯都在 Apple II 游戏的陪伴下度过，毕业后他想到，如果自己去设计游戏，做出来的作品搞不好比手头这些都好玩。于是1992年他以Saber 软件公司的名义制作了《恶魔熔炉》，当时孤立一人的他，花费了整整一半的预算，在电脑杂志《Softtalk》上刊登了一则广告。之后为了吸引零售商进货，他又冒充普通玩家打电话给商店，询问能否买到杂志上宣传的这款酷毙了的新游戏。&lt;/p&gt;

&lt;p&gt;计谋奏效了，零售商们也开始从 Saber 软件公司订购这款游戏，他们完全没有想到的是：所谓 Saber 实际上是一人企业，而他就是冒名电话背后的始作俑者。凭着这款游戏，法戈得到了 Boom 集团的关注，后一年他被吸收到该集团为他们工作，然而，当 Boom 的一次董事会以大打出手作结时，法戈意识到是该另立门户了。于是他召集死党，在1983年城里了自己的公司。&lt;/p&gt;

&lt;p&gt;当时的他们对未来毫无头绪，然而他们没有料想到，公司将要经历的一系列大起大落是如此充满戏剧性，在整个游戏史上也属罕见。这家公司从小工作室起家，发展成为一流发行商，最后却不幸破产。当年也全亏他们慧眼识英雄，才扶持了暴雪、Bioware 和 Treyarch 这些如今行业的巨头。且听我以吟游诗人的曲调，将 Interplay 娱乐公司的这段兴衰史娓娓道来。&lt;/p&gt;

&lt;p&gt;起初的 Interplay 并没有什么大作为，仅仅从事一些现有游戏的跨平台移植工作，甚至还从一家军事分包商处接活。最后他们终于同Activision达成协议，从事原创游戏开发。1984年他们的首部作品，冒险游戏《Mindshadow》问世，该作一定程度上基于罗伯特·卢德伦的小说《谍影重重》。在游戏中失忆的主角必须收集线索，找回自己不为人知的过去。游戏获得了一定的成功，Interplay 在原创游戏开发方面也借此迈出了一步。仅一年后，Interplay 出品了第一款真正意义上的大作《遗忘故事第一张：吟游诗人传奇》（冰城传奇），这款角色扮演游戏大量借鉴了《巫术》系列，而后者在病危获得官方授权的情况下，完美地运用了龙与地下城（DND）的规则体系。相比之下《吟游诗人传奇》要精致的多：多色彩，游戏音效和背景音乐的加入，使得 DND 式的冒险历程更为引人入胜。&lt;/p&gt;

&lt;p&gt;尽管游戏剧情比较单一，但是开场动画中由一名吟游诗人讲述故事，而后玩家亲身经历冒险的设计，仍令人耳目一新。如同之前的《巫术》，《吟游诗人传奇》中也采用了搜集装备加上练级这种令人欲罢不能的设计。此外，想你的发行商专业化的市场宣传也功不可没，这家初来乍到的新兴企业名为：Electronic Art，EA。尘埃落定后《吟游诗人传奇》一共卖出了30万份，按照1985年的标准这是很惊人的，Interplay 由此从无名小卒一跃成为行业大亨。他们的初衷是把《遗忘故事》做成一个系列，然而本作一炮打响的同时也带来了意料之外的问题，玩家们总是以《吟游诗人传奇》来称呼它。Interplay 原本计划再出两部续作，分别命名为《大法师传奇》和《盗贼传奇》，如今 EA 告诉 Interplay 说，不管他们原本计划如何，现在续作必须得叫做《吟游诗人传奇2》和《吟游诗人传奇3》。当《吟游诗人传奇》的续作陆续获得成功时，也证明了 EA 这家发行商绝非泛泛之辈。Interplay 如今是佳绩不断，如同80年代后期的大部分发行商一样，他们着力于每年推出好几部作品。1988年《吟游诗人传奇3》和《Neuromancer》，后者由威廉·吉布森的著名计算机科幻小说改编。不过 Interplay 在88年最为重量级的作品还要数《废土》，一款以核战后美国西南地区为背景的，充满着道德争议的 RPG 游戏。当时这种崭新的游戏理念前所未闻，玩家可任意探索庞大的游戏世界，而不受单线式流程设计的束缚；游戏有着丰富的剧情，多种多样的角色阵容；地牢采用重复进入时不会复位的设计，而是能够记忆玩家已经杀死了哪些怪物，解开了哪些谜题；但是最具革命性的一点是，与以往 RPG 不同，游戏中不再是善恶分明的黑白世界，玩家的选择往往位于道德的中间灰色地带，有时玩家面临的处境相当灰暗，触及到其他游戏所不敢涉足的禁区。&lt;/p&gt;

&lt;p&gt;这是 Interplay 又一款成功大作，发行商仍然是 EA。此时，Interplay 终于决定不再听命于人，决定要自主发行，此时距公司最初成立仅过去短短五年。他们自己发行了《战斗国际象棋》——只是普通的国际象棋，但是加入了其他国际象棋不具备的要素——暴力。在这款国际象棋中，吃子的时候不是简单的吃，而是通过像素动画，将两枚棋子之间为争夺方格而展开的殊死决战充分表现一番，这项貌似无足轻重的小改变成功吸引了玩家，本作也获得了不错的销量。时值80年代末期90年代伊始，Interplay 意得志满，似乎达到了世界巅峰。在布莱恩·法戈和团队的努力之下，公司发展成为了 RPG 界的重量级开发商，自主发行也很成功，还有最后一道疆界需要征服，即成为其他游戏公司的发行商。看到 Activision 和 EA 从自己的游戏中获取大量利润提成，他们意识到这才是最盈利的方式。如今 Interplay 认为自己的机会来了，决定孤注一掷。当时游戏业还属于新生产业，Interplay 决定把筹码压在一些初出茅庐但颇具才华的新生小组上。&lt;/p&gt;

&lt;p&gt;最早的一批中，三名自称 Silicon&amp;amp;Synapse 的大学毕业生赫然在列，1991年 Interplay 发行了《RPM赛车》，这是超任平台上第一款由美国公司制作的游戏。这对于 Interplay 来说意义非凡，因为至今他们只在 PC 平台上有所建树，如果能成功跨越到主机平台上，他们就能一跃成为行业佼佼者。之后几年，Silicon&amp;amp;Synapse 持续开发了《失落的维京人》《摇滚赛车》等主机作品。最终 Interplay 提出全面并购这家小公司，然后后者（现已更名为暴雪娱乐）志不在此，当时的 Interplay 并不知道这意味着多大的损失。此时 Interplay 作为开发商仍然硕果累累，1992年他们获得了将原版《星际迷航》改编成游戏的授权，这个消息当时没有引起什么关注，该剧集已经持续播放了几十年，而现在的孩子们都只知道新的《下一代》系列续集。然而《星际迷航——25周年纪念版》在商业销量和评论口碑方面都成为了第一款真正成功的《星际迷航》改编游戏。在之后的 CDROM 版中 Interplay 甚至将原班演员齐聚一堂为游戏角色配音，一个游戏能有这般待遇，挺不错了。&lt;/p&gt;

&lt;p&gt;90年代里，Interplay 保留了扶持新兴公司的好传统。1995年他们发行了 Parallax 软件公司制作的《天旋地转》，当时它一般被视为《DOOM》的模仿作品，其实更应该说是启发了《DOOM》的一些游戏的后继作品，类似《银河飞将》。凭借六轴控制，逼真的画面和令人流连忘返的多人模式，《天旋地转》撑了一款小众崇拜作品。Parallax 而后分成 Outrage 和 Volition 两家公司，而后数年，Volition 都委托 Interplay进行游戏发行。他们的《自由空间》系列被认为是一直以来最优秀的太空模拟游戏之一。之后在1996年 Interplay 发行了两部机甲题材游戏，但并未激起很大的波澜。Interplay 内部制作的《铁血兵团》是公司涉足战略类型的首部作品，在 Westwood 工作室推出《命令与征服》后，该游戏类型一夜之间变得火爆。《铁血兵团》与前者有很多共同点，不同之处在于是回合制而非即时。尽管如此，游戏得到了评论界很高的赞誉，许多评论家都声称《铁血兵团》比《命令与征服》更优秀。遗憾的是，玩家们并不这么想，这从本作效良平平上也能看出。同年 Interplay 发行了机甲对战游戏《破碎钢铁》，该作也算不上成功。考虑到本作是由毫无娱乐行业经验的学生制作而成，倒也算不上惊讶。尽管如此，Interplay 同这几名毛头小子保持了良好的关系，后者自称为 Bioware。Interplay 当时没有料到，这几个加拿大小子最终会成为自己最关键的商业伙伴。&lt;/p&gt;

&lt;p&gt;1997年的 Interplay 对另一家公司寄予厚望，希望能借助后者跻身顶尖发行商的行列。Shiny 娱乐公司凭借《蚯蚓战士》系列在全球市场获得了成功，衍生的玩具，T 恤和动画片也接踵而至，Shiny 当时正在开发新的《孤胆枪手》系列，其上也炒作也达到了白热化的程度。如果有什么游戏注定会成为经典大作，那么非《孤胆枪手》莫属。自然而然的，Interplay 不只满足于签订发行协议了，他们直接把整家公司买下。最终在几年的万众瞩目和媒体关注后，《孤胆枪手》终于问世，销量却很一般。虽不能说这是款失败作品，却无疑令人失望。而后 Interplay 再度寄希望于 Shiny 的《Wild 9》试图占领主机市场，结果却令他们再度失望。总而言之，看起来 Interplay 只能专注于 PC 市场，而后者的利润正在一点点被主机平台瓜分。尽管形势不利，Interplay 旗下仍然有几款拿得出手的好游戏。Stainless Games 的《死亡赛车》疯狂到了极致，将道德伦理都抛诸九霄云外，玩家通过冲撞行人，摧毁对手车辆获得分数，游戏中还大胆采用了比较原始的物理引擎，尽管如此，玩家们却为之狂热。&lt;/p&gt;

&lt;p&gt;1997年还有一款大作值得一提，这是一款回归《废土》的新作，系列的所有权仍归 EA 所有，Interplay 只得从零开始设计一个新系列，《辐射》系列由此诞生。同《废土》一样，辐射是一款颠覆传统道德观的核战后题材 RPG，这次在游戏中，玩家也同样必须作出残酷的决定，而没有轻松的路线可选。幸亏有其中的黑色幽默，赋予整个游戏以后总末日狂欢的意味。艺术设计采用上世界50年代通俗小说的复古风，有着机器人，镭射枪和阴极线管。广阔的世界任玩家探索，升级系统设计既有深度又容易上手，众多角色也令人过目不忘。对于同时期游戏来说，本作的配音阵容也是空前强大，其中包括 Richard Dean Anderson，Keith David 和 Tony Shalhoub，Ron Perlman 则是旁白。如同远足《废土》一样，《辐射》也引起了巨大的轰动，然而在销量方面却无法同《最终幻想7》等大作抗衡，最终败于下风。这给人的感觉是无论 Interplay 再怎么努力突破，再怎么获得评论界的满口赞誉，他们的销量始终比不过竞争对手。而现在，长期不利经营的后果也开始呈现。&lt;/p&gt;

&lt;p&gt;此时 Interplay 业务庞大，发行游戏的数量丝毫不亚于 Activision 或者 EA。游戏发行需要庞大的资金投入，但 Interplay 惨淡的销售业绩却难以提供有力的支持。在利润收入方面，PC 成功作品同主机平台成功作品完全无法相提并论，如果 Interplay 无法在主机上尽快打出一块招牌或者让更多的产品扭亏为盈，他们的前景恐怕很不乐观。事实证明，之后的发展比他们想象的要糟糕得多。&lt;/p&gt;

&lt;p&gt;巨星陨落 Meteoric Crash&lt;/p&gt;

&lt;p&gt;成立15年的 Interplay 从一场白日梦起头，发展撑了业内举足轻重的发行商。在创立人布莱恩·法戈的领导下，公司出品的《吟游诗人传奇》《废土》等 RPG 都获得了相当的成功。他们趁热打铁，开始涉足游戏发行。首先他们自主发行了《战斗国际象棋》，而后不久便开始为其他公司发行游戏，其中就包括暴雪和 Bioware 的处女作。在1998年，Interplay 的发行量同 Activision 和 EA 等发行巨头已经旗鼓相当，而这两家公司都曾经为 Interplay 发行过游戏。&lt;/p&gt;

&lt;p&gt;在外人看来，他们是被所有新兴企业羡慕的楷模，这群年轻人通过投身热爱的游戏事业打造了一个帝国。然而即使在令人炫目的成功下，Interplay的处境仍然岌岌可危，游戏发行是一项耗资巨大的业务，如果不能多发行几部销量火爆的大作，就根本毫无利润可言。遗憾的是，即使像 Interplay 自主制作的《辐射》等大销量作品也无法弥补公司赤字。尽管 Interplay 最为重量级的游戏系列接下来即将登场，无奈生不逢时，也未能挽回最终的败局。&lt;/p&gt;

&lt;p&gt;赚到不少钱之后，法戈培养了艺术收藏这个爱好，并成为画家 Gil Bruvel 的崇拜者。当法戈知道 Bruvel 也涉足3D 电脑艺术时，他想到了一个主意：请 Bruvel 为一款点选式冒险游戏做美工，如果能融入文学，神话和宗教的话，新游戏将会有着更为成熟的基调。游戏将探讨原罪与救赎等深层话题，通识彻底颠覆传统。简而言之，这个游戏将作出大胆尝试，把游戏媒介从简单的『玩』上升到艺术高度，然而失败了。1998年出品的《光与暗：预言》是一款七拼八凑的游戏，矫揉造作的同时令人困惑不解，敢于吃螃蟹的少数玩家最后也冷落了它。评论界认为本作有一些闪光的设计，并对其推陈出新的大胆尝试表示赞赏。然而这些都无法掩饰剧情晦涩难懂，过程单调重复的硬伤。当销量不尽人意时，也就不足为奇了。在发行前，游戏就经手了两家制作组，Interplay 还专门邀请好莱坞明星配音，并为 Bruvel 的美工设计支付相当的报酬。换言之，公司在这个游戏上做了很大投入，无奈血本无归。本作可说是 Interplay 所面临困境的缩影，在高瞻远瞩，不遗余力拼搏的同时，缺乏有力的后援。Interplay 一心一意推动创新的努力并为得到应有的回报。&lt;/p&gt;

&lt;p&gt;同年早些时候，他们发行了由新的开发商 Treyarch 制作的《剑下亡魂》，游戏采用较原始的动作控制技术，即鼠标控制主角握剑的手，移动鼠标即挥剑。可惜手感欠佳，这个重要的特性也沦为噱头，Interplay 寄希望于新意的尝试再次落空。&lt;/p&gt;

&lt;p&gt;在这个多事之秋，Interplay 做出了上市的决定。如今回想起来，当时并非 IPO 的最佳时机，然而募股事务需要很长的时间准备，一旦启动便无退路。1998年6月，Interplay 正式公开招股，期望借此筹得一些迫切需要的资金。正如他们的游戏一样，招股的结果并未达到期望。最初他们希望能达到8到10美元的每股价格，事实却是当天闭市时的牌价只有6美元。了解到公司产品不卖座的情况，投资者们十分谨慎，这令 Interplay 大失所望。讽刺的是，仅数个月后 Interplay 发行的游戏便接连引起轰动，其中包括公司历史上最为成功的一款经典作品。&lt;/p&gt;

&lt;p&gt;9月他们发行了黑岛工作室的《辐射2》，且问黑岛工作室是哪位？黑岛工作室即当初制作第一代《辐射》的原班小组，如今他们也有了自己的品牌。之后黑岛继而推出了一系列大作，其中大多数基于 DND 的世界观设定。至于《辐射2》，同前作相比并无太大改变，但增加了大量内容，也如同前作一样，本作只能说是勉强成功，但扔不足以扭转 Interplay 的不利局面。之后在1998年11月，Interplay 发行了 Bioware 的第二款游戏，后者的处女作《破碎钢铁》成绩不佳，在吸取经验教训后，他们继而推出了基于 DND 背景的第二款作品，期望能取得更好的销量。事实证明《博德之门》实际上成为了 Interplay 整个生涯中最重量级的系列。《破碎钢铁》的剧情较为空洞，而《博德之门》却是一款充斥着许多经典角色的亦真亦幻的史诗大作，其庞大的世界任玩家探索。游戏采用快节奏而充满乐趣的设计，同时又不失策略性。DND 爱好者们发现，这款游戏完全忠实于他们熟知的规则体系，堪称完美。随着消息在玩家中不胫而走，Interplay 忽然意识到这群加拿大小子创造了一款经典，然而事不随人愿，《博德之门》操作太复杂，无法在主机上实现，也就是说 Interplay 仍然无法进军利润最为丰厚的家用机市场。尽管《博德之门》有了这样的成绩，Interplay 的季度财政结算仍然是亏损，接下来情况还会变得更糟。&lt;/p&gt;

&lt;p&gt;1999年《天旋地转3》和《自由空间2》遭到了预料之外的挫败，其原因或许是同期发售的这两款游戏过于相似。造化弄人的是，他们之后发行的由 Xatrix 制作的风格粗犷的犯罪游戏《黑街太保》刚好同哥伦比亚高校枪击案撞到一起，于是沃尔玛和百思买等大型零售商纷纷将其下架。当时 Interplay 有几个项目被取消，并正在进行公司重组，其结果就是他们字啊99年的亏损比去年更大了。之后数年我们又见到了几款成功作品，例如 Bioware 的《博德之门2》和《孤胆枪手2》，黑岛的《异域镇魂曲》和《冰风谷传奇》等，但总体而言，他们发行的大部分游戏都成绩平平。&lt;/p&gt;

&lt;p&gt;最终是壮士断腕的时候了，1999年法国科技公司 Titus 互动从 Interplay 购买了大量股权，而后在2001年，他们又提高股份获取了控制权。如今 Titus 享有所有的决策权，并为 Interplay 提供一些资金，事情似乎有了转机，然而这其实就是终章的开始。Titus 公司的创始人和 CEO 埃尔韦·卡昂在 Titus 取得控制权后成为了 Interplay 的新总裁。上任之后，他首先关闭了发行部门，从此 Interplay 只从事游戏开发，由 Vivendi 负责发行。自此公司失去了曾经的行业重要地位，当然，考虑到他们之前作为发行商不断亏损，这算是一个正确的决策。然而卡昂和 Interplay 创始人布莱恩·法戈的关系，只能说是水火不容。2002年1月，接管仅几个月后，法戈离开了公司。公司的决策过程已经完全不让他参与，他完全不能接受在自己的公司里当个局外人。选择自我放逐后，他成立了新的工作室，其名字也十分贴切：InXile 娱乐（与『流亡』 in exile 同音）。&lt;/p&gt;

&lt;p&gt;如今的 Interplay 已经切断了其最重要的历史渊源，随之而来的其他动荡也在意料之中。手头拮据的卡昂开始转让公司旗下的知识产权，并持续吃老本吃了好几年。首先在2002年4月，他以4700万美院的价格把《孤胆枪手》的制作组 Shiny 娱乐卖给了 Infogrames，同时转让的还有《黑客帝国》系列电影的游戏改编权。这不能算贱卖，但失去 Shiny 的损失也是无法挽回的。不幸的是，Interplay 随即受到曾经的得力伙伴 Bioware 的起诉，卡昂领导的 Interplay 不再从事游戏发行，因而尝试将 Bioware 游戏的发行权转授给他人，但并未征求后者意见。义愤填膺的 Bioware 采取了法律手段，与此同时 Bioware 同《天旋地转》的制作方 Parallax 共同起诉 Interplay，理由是拖欠版权费，安检最终庭外和解，且双方同意 Interplay 不再参与 Bioware 的下部作品《无冬之夜》。这些消息还不够坏吗？继而，因其市价不足1美元，Interplay 的股票在2002年10月被纳斯达克退市，2003年 Interplay 因合同违约被自己的发行商 Vivendi 起诉，在此期间，公司每个季度的财政仍然在亏损，最终，不可避免的事情发生了。2003年12月，Interplay 关闭了黑岛工作室——公司自己的制作部门，此时黑岛刚刚完成《博德之门：黑暗联盟2》的制作，正在展开《辐射》下一部续作的开发，其代号为 Van Buren，黑岛的一大批成员预见到了结局，已经纷纷离开另起炉灶，这就是黑曜石娱乐的由来。&lt;/p&gt;

&lt;p&gt;『黑曜石』的成员们很快同 Bioware 取得联系，迅速开始合作开发一部续作，2004年的《星战共和国武士2》得以问世。如今的 Interplay作为游戏公司，既不制作游戏，也没有发行游戏，公司最后仅剩下几个游戏版权，包括《蚯蚓战士》《孤胆枪手》《博德之门》及《辐射》等等。作为 Interplay 最后的盈利手段只有将这些版权转让或授权出去，曾经的行业巨头已经跌到了谷底。&lt;/p&gt;

&lt;p&gt;劫后余波 Life in the Crater&lt;/p&gt;

&lt;p&gt;Interplay 始于创始人布莱恩·法戈眼中自信的光芒，凭借着雄心壮志和早期几部成功作品，公司很快跻身游戏业强者之林，在自行开发的同时，也为其他公司发行游戏。然而在90年代后期，Interplay 的大势已去，尽管已经成 RPG 类型的翘楚，他们的游戏没有一款真正获得突破性的成功。更糟的是，自从家用机一跃成为最盈利的游戏平台以来，Interplay 一直无法跨越 PC 和家用机之间的鸿沟。从2000年开始，形势不断下滑，公司每个季度的财政结算持续亏损。法国公司 Titus 互动购买了 Interplay 的控制股权，其所有人卡昂也成为 Interplay 的新总裁。很快地，Interplay 的发行部门被关闭，法戈离开了公司，而卡昂开始变卖旗下的工作室和产权，最终在2003年末，Interplay 停止了游戏开发，从此他们既不再开发游戏，也不发行游戏，手头仅剩下数款游戏版权。在这种情况下，大多数游戏公司都会选择认输，然而在过去这十年间，Interplay 勉力支撑了过来并几乎回归公众焦点，最后却还是功亏一篑。&lt;/p&gt;

&lt;p&gt;总之，形势相当不利，而后在2004年6月，加州政府的人员上门了，什么原因呢？原来 Interplay 已经几个星期没有给员工发工资了，而薪金保险的提供商也未能偿付，这是违反加州法律的。同时，不缴纳州税也是违反加州法律的，还有，不缴纳联邦税是违反联邦法的，猜猜 Interplay 还有什么没缴纳的？别忘了 Interplay 还欠着房东40万美元的租金。不过卡昂很快就在新的办公楼重新开工，并获得了加州的许可，不过还有个小问题，卡昂的另一家公司 Titus（即 Interplay 的母公司）碰巧破产了，并且也没有钱为员工结算工资。卡昂的所作所为并没有给人信息或让人觉得他是能够力挽狂澜的救星，在2004年到2007年这段时间 Interplay 都默默无闻，偶尔会出现消息说采用 Interplay 版权的游戏将问世，而后又沉寂下去。在最难以预料的情况下，救星降临了。&lt;/p&gt;

&lt;p&gt;角色扮演游戏大厂 Bethesda 突发奇想要出品一款《辐射》游戏，鉴于两家公司的规模悬殊，他们不满足于租用版权，而是要直接买断。2007年 Bethesda 以600万美元的价格买下了这个有着十年历史的系列，双方同时约定，卡昂获得授权制作一款辐射网游，前提是自行筹资，并在规定时间内启动开发。重复一遍，Bethesda 依法『授权Interplay』制作一款辐射网游！根据卡昂的弟弟 Eric 所说，该网友的开发权价值不菲，假如 Inerplay 没有得到授权，转让费就会高达5000万美元，而非600万。Bethesda 继而推出《辐射3》并获得了巨大成功，堪称历史上最成功的 RPG之一。他们最终将《辐射》品牌成功移植到了主机上，实现了 Interplay 的夙愿。突如其来的，《辐射》又再度成为了炙手可热的游戏系列，这正是 Interplay 所需要的，他们的辐射网游也将随之一步登天。然而在2009年9月，Bethesda 一纸诉状将 Interplay 告上法庭，根据合同 Interplay 必须在规定时间内着手网游的开发，如今时间已经超过。此外，趁着新的辐射热，Interplay 又将九班《辐射》游戏再度打包发售，鉴于系列的版权已经易主给 Bethesda，后者声称这是违法的。这场版权争夺战持续了许久，在法庭争端最激烈时，Bethesda 声称当他们授权 Interplay 开发『辐射网游』时，本意是『一款叫做《辐射》的网游』，换言之，同《辐射》系列有关的一切都禁止在游戏中采用：包括武器、角色、场景和著名的 Pip-Boy。根据 Bethesda 的说法，授权范围甚至不包括经典的辐射徽标，Interplay 所能做的，只是制作一款网游并取名为《辐射》。Interplay 无疑提出了抗议，他们认为『辐射网游』的授权本质上就等同于他们可以采用其中的情节、世界背景和一切要素，他们同时还声称网游的开发已经在进行了，当然，实际的开发成果谁也没见过。在此基础上，Interplay 进而提出犹豫 Bethesda 的违约行为，《辐射》系列的版权应当归还给他们。总而言之 Interplay 的处境十分不堪，2001年6月，公司的手头现金仅有3000美元，其债务却高达300万美元，他们通知投资方可能需要裁员。考虑到他们仅有11名员工，这可不是件小事情。即使他们在同 Bethesda 的反诉讼中胜出，也只能取得开发辐射游戏的授权，却不具备实施所需的资金。当然，他们至今还有手握《蚯蚓战士》和《博德之门》的版权，如果能授权或转让出去，应该能获得一些资金，这种商业模式真够诡异的。&lt;/p&gt;

&lt;p&gt;无论当今遭遇如何，Interplay 为整个游戏业界留下的财富仍然有目共睹。暴雪如今是动视暴雪的持股方（虽然现在又分离了），他们的《魔兽争霸》《星际争霸》和《暗黑破坏神》都是有史以来最成功的游戏系列，初出茅庐的他们得到过 Interplay 的扶持。Bioware 如今负责 EA 的整个 RPG 部门，他们制作的一些游戏受到评论界有史以来的最高赞誉，初出茅庐的他们得到过 Interplay 的支持。Treyarch 继而开发了《使命召唤》系列，其中最新的《黑色行动》荣登美国历史上最卖座游戏的宝座，初出茅庐的他们也得到过Interplay 的扶持。由《辐射》原班人马组成的黑曜石娱乐，最终以《辐射：新维加斯》回归到了他们所热爱的游戏系列，他们自己说，假如黑岛没有关闭，那么《新维加斯》的故事就是他们当年在续作中想要表现的。至于 Interplay 创始人布莱恩·法戈新成立的 InXile 公司，则刚刚发行了他们的最新游戏《猎杀：恶魔熔炉》，引领着我们回归到那个最初的起点&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-interplay/&#34; title=&#34;游戏发展史 - Interplay&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>游戏发展史：Blizzard</title>
      <link>http://alimy.me/post/ark_201603242059/</link>
      <pubDate>Thu, 24 Mar 2016 20:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242059/</guid>
      <description>&lt;p&gt;暴雪的大名已如雷贯耳，虽然现在也面临着一些困难，但是回顾往昔，光芒依旧耀眼。&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;就读于加州大学洛杉矶分校的迈克·默汉曾经对同学这样恶作剧：当艾伦·艾德涵暂时离开电脑时，默汉迅速把艾伦的电脑密码改成了 JOE，毫不知情的艾伦回来输入密码，竟然成功登陆了。这时轮到默汉大吃一惊，艾德涵究竟是怎么做到的？于是他招认了自己的恶作剧，然后请教艾德涵是如何破解的，然而，后者的惊讶程度丝毫不亚于默汉，他不过是输入了自己的密码而已。默汉终于明白了其中关键：由于机缘巧合，艾德涵自己的密码也刚好是 JOE。此后两人成为挚友，他们关系之好，最终又成为商业上的合作伙伴，之后20年中他们的工作室制作了数十款精品游戏，不仅成为游戏史上最伟大的传奇之一，更晋升为行业巨头，屹立于整个娱乐产业。他们的公司如此受欢迎，甚至拥有自己的年度大会。且不论两人是否还把 JOE 作为密码，在产品制作的完美程度和持续的卓越方面，世界上几乎少有同行能够同暴雪娱乐并驾齐驱，这是毋庸置疑的。&lt;/p&gt;

&lt;p&gt;毕业之际，艾伦·艾德涵觉得这是实现理想的最佳时机，他热衷玩游戏，为何不以制作游戏为业呢？但是他不甘心在大公司当低级程序员，而是想自己当老板，自己决定工作计划。艾德涵决定创立自己的公司，于是他联系迈克·默汉，邀请他入伙，同时还联系了另外一名同学弗兰克·皮尔斯。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】我与艾伦通过熟人认识，当时很凑巧，因为我确实很想制作游戏，觉得是一项很酷的事业，却苦于不知道如何着手，而艾伦对于自己想做的事情有着明确计划和确切的愿景，他想做的事刚好也是我感兴趣的，因为我少走了很多弯路，我们能够相遇是很幸运的。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】公司成立的第一天我才和弗兰克首次见面，当时我正在说话，一个陌生人出现了，于是我闭住了嘴，然后就这么结识了。&lt;/p&gt;

&lt;p&gt;1991年2月8日，三人在加州科斯塔梅萨建立了他们的工作室『硅与神经键Silicon&amp;amp;Synapse』，艾德涵担任总裁，默汉担任副总裁，皮尔斯则是程序员。他们决心不紧要制作出伟大的游戏，更要在其过程中享受到乐趣。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】其实当初我和迈克都不太相信自己的公司能够这么成功，但是艾伦充满激情，积极乐观，他一直以为，如果几个聪明的头脑集思广益，自然能找出最正确的做事方式，无论是制作游戏还是别的。艾伦做事的原则是从不懈怠，他坚信只要大家投入时间精力，就没有克服不了的难关。艾伦说过，制作游戏并非火箭科技那样高深，只要我们几个聪明人齐心协力，也能同顶级公司一决高下。&lt;/p&gt;

&lt;p&gt;当年他们便崭露头角，在 Commodore64平台早期游戏《毁灭赛车》的启发下，1991年他们为超级任天堂这个新机种开发了《RPM 赛车》。『硅与神经键』如今成为第一家为超任开发游戏的美国工作室，这是个良好的开端。1992年略有不同，这一年他们没有开发原创游戏，而是把已经把发行的游戏移植到其他平台。例如他们把《指环王》移植到 Amiga 平台，《战斗国际象棋》移植到 Windows 等等。游戏移植并非什么激动人心的工作，但报酬不错。原创游戏的开发无疑还是他们的热情所在，同年，硅与神经键在许多平台上发行了《失落的维京人》，在略为老套的剧情中，三名维京人主角被邪恶的 Tomator 吸入太空船中，必须尽力逃脱。作为一款平台跳跃游戏，本作加入了独一无二的要素，玩家能在三名维京人中任意切换，利用每个角色独有的能力来解开谜题。这是一款单人操纵多角色的游戏，通过杰出的艺术设计和幽默感，硅与神经键独树一帜的个性和卓越的制作水平得到了首次体现，这些品质而后都成为了暴雪的代名词。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】作为我们的第一款完全原创游戏，《失落的维京人》有着特殊意义，开发过程中我们都很开心，学到了很多游戏设计的经验以及让玩家通过重复完成动作来实现目标的重要性。《失落的维京人》受欢迎程度之高，在街上遇到熟人都会问今天你玩了吗？这个游戏优秀之处在于它以难以阐明的魅力牢牢吸引了大众，太酷了。&lt;/p&gt;

&lt;p&gt;《失落的维京人》成为工作室早期作品的典型，并在1995年出品了续作。1993年《摇滚赛车》在超任和世嘉上推出，硅与神经键的名声渐响，同年他们获得《电子游戏》杂志办法的最佳软件开发商奖项。麻烦的是，工作室的名字不太到位，硅与神经键原本用来象征科技和创造力的结合，然而合作的商家中没有一个知道神经键是个啥，名字起得让人疑惑不解，这对新生企业不利。于是他们改名混沌工作室，希望借此被更多人熟知。此外还有更大的问题接踵而来：首先，尽管成员都是凭借兴趣爱好走到一起，工作氛围却一点都不轻松。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】我记得在创立之初自己特别拼命，每天都超时工作，一直持续几周，与当时相比，现在的工作规划实在太轻松了，在来到硅与神经键之前我从事航空业，早晨7点就上班，转行到游戏业之后我习惯不改：早上7:00-7:30到公司，埋头工作10到12小时之多。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】7点上班对我来说是天方夜谭，但是我加夜班到很晚。&lt;/p&gt;

&lt;p&gt;火上浇油的是，虽然取得一些成绩，他们在财务方面却很困难。尽管只有15名员工，创始人们却不得不透支之际的信用卡以支付工资，有时候甚至要啃老。当父母的资助也不再可行时，他们知道必须痛定思痛了。1994年，混沌工作室开始对两份并购提议作出正式考量，一份来自大发行商 Interplay公司，另一份来自教育软件开发商戴维斯及联营公司。起初，二选一的答案看似毫无悬念，新兴企业应当寻求行业巨鳄的庇护，然而再三考虑后，他们意识到要加入 Interplay 就得甘当一枚不起眼的螺丝钉，失去自主权，相反戴维斯及联营公司在游戏业初来乍到，因此在产品开发方面愿意给予工作室全面自主。面对两难抉择，他们最终在业界菜鸟一边压下了赌注，最终戴维斯公司以一千万美元并购了混沌工作室，这对于当时的他们无异于雪中送炭。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】戴维斯的这次并购极为关键，它加速了我们的成长。公众所不了解的是，直到这次并购之前我们的预算一直很紧张，当时办公室甚至没有局域网，大家需要轮流用电脑等等。我们希望挺过来之后，能够实现资金自主和自主发行产品。并购后再也不用担心发不出工资，还有了新的高速局域网，我们终于能真正专注到制作游戏上。&lt;/p&gt;

&lt;p&gt;当一切趋于稳定，他们发现不能再用混沌这个名字，商标权已经归属另一家软件公司，他们必须再度改名。几乎选定为食人魔工作室后，又被戴维斯的大老板否决，最后艾德涵翻字典找到了七个备选词，长期讨论后敲定了一个既酷又得到管理层首肯的名字，就是暴雪娱乐。即使在发展之初，因为不愿把自己局限到一种媒体，暴雪公司一开始就选定『娱乐』而不是『游戏』这个词，他们从不缺乏雄心壮志。同年，改头换面的暴雪娱乐受到发行商 Sunsoft 委托，将漫画史上最重要的大事件《超人之死》改编成游戏，8月《超人浴火重生》在超任上发行。这是一款简单的横版过关游戏，不过主角可是超人。游戏终章里主角没有打败最终 boss，而是同归于尽，之后玩家控制剩下的四名超人之一重新游戏，只有在五名超人都通关后才能看到真正结局。《超人浴火重生》这款作品无愧于暴雪公司响当当的名号，创立仅三年，他们就被娱乐界最大的巨头之一点名为其制作游戏。九月，暴雪公司在超任和 DOS 平台吓发布了一款新的原创射击动作游戏《黑色荆棘》。为了使人物动作尽可能逼真，工作人员把弗兰克·皮尔斯的动作拍摄下来，再把录像转化为游戏画面，这一技术被称为 Photoscoping。《黑色荆棘》同样以特立独行的艺术风格和怪诞幽默著称，在逐步形成的暴雪风格上又跨出了一步。至此1994年重大事件不断，公司被并购后又更名，其发行的两款游戏，一款以家喻户晓的超人作为题材，另一款则是原创的《黑色荆棘》，小规模的发行商能做到这份上，无疑是硕果累累。事实上他们远未满足，还计划在圣诞节发布一款小作品——《魔兽争霸》为94年画上完美句号。&lt;/p&gt;

&lt;p&gt;早在1992年，Westwood 工作室发行了《沙丘魔堡2》这款战略游戏，游戏要求玩家利用资源发展建筑，而后通过建筑生产单位来与敌人作战，本作特点如此鲜明，最终发展成全新的游戏类型，称为即时战略或 RTS。该作算是小有收获，但是直到1994年，还没有一款跟风作品出炉。暴雪公司却别出心裁，要另辟蹊径。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】《沙丘魔堡2》问世时我们觉得大为震撼，感觉这种游戏题材真是酷毙，沙丘2仅限单人，我们就想，即时战略中如果能多人对战岂不是碉堡了。当然，那时我们都局限在魔幻题材下，专注魔幻30年可是我们的成功秘诀啊。&lt;/p&gt;

&lt;p&gt;考虑到即时战略游戏的复杂性不适合手柄，《魔兽争霸》成为暴雪公司第一款 PC 专属作品，这也是他们首款自主发行的游戏，同时利用戴维斯和联营公司已然发展成熟的销售网络。游戏中两个种族的平衡性近乎完美，这是因为双方本质上一样，除少许例外，每个种族的攻击力和血量都相等。尽管如此，游戏画面堪称美轮美奂，魔幻背景的情节也是引人入胜，此外更有局域网多人对战模式，也允许技术宅们采用 IP 直连。尽管有这些限制，游戏引发的狂热对战浪潮真正是前所未有，作为沙丘2之后仅有的一款即时战略游戏，市场前景无法估量。《魔兽争霸：兽与人》一上市便受到欢迎，销售业绩颇佳，虽然算不上里程碑式的成功，但上级公司戴维斯即联营公司已经为续作开了绿灯。暴雪公司如今算是走上了正轨，有足够的资金进一步发展并逐步拥有了粉丝群，更重要的是，他们有着完全的创造自主权，这一切，仅仅在四年内就已经做到了。《魔兽争霸》问世后，他们又信心续作能更上一层楼，其实结果让他们自己都吃惊。&lt;/p&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;p&gt;从加州大学洛杉矶分校毕业后，三个好朋友决定放手一搏成立自己的游戏公司。『硅与神经键』在超任上出品的《RPM 赛车》获得成功，并成为第一家为该平台开发游戏的美国公司。在制作几部移植作品之后，他们继而推出了《失落的维京人》和《摇滚赛车》等原创作品。1994年，这家新兴企业经历了不少变动，包括被戴维斯及联营公司并购，以及更名为暴雪娱乐，除了平台动作游戏《黑色荆棘》外，暴雪还推出了《魔兽争霸：兽与人》，魔兽作为整个即时战略类型游戏的第二款作品，更引入了前所未有的多人游戏模式，该作在评论界广受好评，全球销量也不错，暴雪公司逐渐得以立足，《魔兽争霸》成为了公司自主发行的首款游戏。时值1995年，暴雪在计划开发数款续作的同时，也在着手扩展公司的发行业务，期间暴雪逐渐脱颖而出，成为行业的佼佼者。&lt;/p&gt;

&lt;p&gt;1994年暴雪再度接受委托，制作一款 DC 漫画超级英雄题材的游戏，《正义超人大对决》把漫画书的偶像英雄们带进格斗世界，此时格斗游戏作为新的游戏类型很受欢迎。发行商 Acclaim 召集了数家开发商共同开发，其中暴雪负责超任版本的制作，世嘉版则由位于红木城的 Condor 娱乐工作室开发。尽管两个小组之前没有合作经验，暴雪的 CEO 艾伦·艾德涵在一次大会上同 Condor 的几名负责人偶然会过面。之后在1995年1月，暴雪公司接到了一个意料之外的电话，是 Condor 打来的，后者正在开发一款完全原创的新游戏，想要找发行商。他们找遍了所有的大发行商，甚至连小一些的发行商也找过，但都无功而返，发行商们都认为 Condor 一定是秀逗了：这家工作室毫无 PC 平台的经验，却妄想开发一款史诗题材的粘土动画式回合制动作 RPG。如今 Condor 小组饥不择食，转而向在大会上仅有一面之缘的暴雪求助。暴雪在这个项目上看到了一些与众不同的东西，他们认为将有机会出品一款前所未有的崭新佳作，最后他们同意签约，Condor也有幸成为第一家为发行商暴雪制作游戏的公司，这款游戏的名称暂定为《暗黑破坏神》。&lt;/p&gt;

&lt;p&gt;在 Condor 权力着手开发的同时，暴雪的《失落维京人2》也推出了，三名勇敢的主角再次被 Tomator 外星人绑架，不过这次他们学会了用外星人的武器武装自己，甚至还有龙和狼人加入队伍。从游戏性来说角色数量和能力都增加了，不过3名角色的限制还在。2代虽然没有带来前作那样的轰动，却也受到了好评。此时暴雪正在开发另一款续作，这是一款各方面都超越前作的游戏。《魔兽争霸2：黑潮》于1995年12月出品，表面看来同初代极为相似，都是魔幻背景的即时战略游戏，有着相似度颇高的两个种族，然而通过对几百个细节的关注，续作真正将该模式提升到了完美的极致。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】可以说，魔兽2是第一款真正体现出暴雪精益求精风格的作品，通过千锤百炼制作出一款精品。虽然之前的作品也并非泛泛之辈，但是此时我们才真正展现了才华。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我同意，并且魔兽2可以说是各方面都更进一步，游戏人数增加，解析度提高，有海陆空三军。我们在魔兽上投入已经一年，因而小组很清楚自己在开发时应该要做什么。&lt;/p&gt;

&lt;p&gt;在《魔兽2》的许多改进中，对 RTS 类型最具重要意义的是持续存在的战争迷雾。在之前的即时战略中，地图区域探索过之后就持续可见了，魔兽2则不同，只有当玩家的单位正位于一个区域时，才能看到该处的状况，侦查因而成为对战中的关键之一，该设计被战略类游戏广泛采用。在本作中，暴雪的幽默和个性发展成了一种标志性的特色，无论是史诗剧情，还是单位的回应方式都大放异彩。游戏中充满生机的世界观，加上独有的个性从此成为暴雪与众不同的标志。另外2待最显著的改进都在多人游戏方面，对战不仅仅局限于一对一，分组对战中每组可容纳多达4名玩家，由此引入了大规模混战以及惊人的战略复杂性。然而在连接方式上，仍然仅限于局域网或 IP 直连。不过年内早些时候，几名爱好者编写了外挂程序，使得游戏跨域局域网在互联网上对战成为可能，这个程序名叫 Kali。这款并非暴雪操刀的第三方程序为魔兽2推波助澜，使其获得了空前的成功。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】魔兽争霸一代很酷很有乐趣，但是在玩家社群方面颇受限制。我认为凭借互联网发展起来的魔兽2玩家群体对我们至关重要，他们的忠诚是无价的。&lt;/p&gt;

&lt;p&gt;此时还有一场对战正在如火如荼地进行，这就是暴雪公司和即时战略元祖 Westwood 之间的较量。仅在魔兽2发售前几个月他们推出了《命令与征服》，另一款制作精良的战略游戏大作。两款近似的大作接踵而至，使得 RTS 类型空前火热。当然两款游戏各有其重视的拥趸群，互联网上也掀起一场关于孰优孰劣的大论战。至今不变的只有一点，对于狂热的粉丝来说，萝卜白菜各有所爱这种事情真是让人难以接受啊。当然，多亏这些唇枪舌战，两款游戏更为引人注目了。在暴雪方面，魔兽2的销量继而暴涨，仅在4个月内就售出50万份，对于1995年的一家小工作室来说，这是惊人的成绩，最终该作的销量甚至超过了神器的100万份，在当时少有游戏能享受此殊荣，对于10个月的开发期来说，这算是挺不错了。&lt;/p&gt;

&lt;p&gt;在魔兽2已经颇具人气后，暴雪决定趁热打铁出资料片，由于他们自己正忙于新项目抽不开身，便将《黑暗之门》的开发交给 Cyberlore 工作室，后者于1996年完成了制作。同时 Condor 正在不遗余力进行《暗黑破坏神》这款回合制粘土动画动作游戏的制作，并取得了不错的进度。然而，新的发行商暴雪坚持要让他们做出一些改动：首先，要求他们把粘土动画改为3D 动画，此时3D 正在迅速崛起成为未来的新标准，而粘土动画这种方式也太怪异了；此外暴雪还希望 Condor 将回合制改成即时。Condor 起初的反应是抗拒，因为目前为止的制作都是围绕回合制来进行的。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】两个工作室之间的沟通有了障碍，当时同他们工作室的远距离交涉是个很大的挑战，我们自己还很稚嫩，在项目管理方面初来乍到，他们也是头一次涉足游戏制作业，总之加上地理上的距离，使得我们的合作颇具挑战性。最后他们同意制作一份技术掩饰，测试实际的游戏效果。&lt;/p&gt;

&lt;p&gt;Condor 立即就意识到采用即时方式后，游戏变得更为引人入胜了，于是他们把即时方式彻底应用到游戏中。很快暴雪就意识到，Condor 的这个项目将会是个惊天动地的大作，他们不满足于仅仅做发行商了，他们要自己拥有《暗黑破坏神》。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】Condor 正在开发《暗黑破坏神》并且进展相当顺利，彼此合作也很愉快，我们想把他们吸收过来成为兄弟工作室，于是同联营公司即我们的母公司提出了这个想法，他们也很有兴趣，于是不久后 Condor 成为了暴雪北方。&lt;/p&gt;

&lt;p&gt;在1996年E3上，该作品终于向公众展示了庐山真面目并引起了很大反响，这种新颖的游戏设计真的是前所未见。凭借魔兽2，暴雪已经成为世界上最炙手可热的开发商之一，在同年 E3上，暴雪公司还有两项重大事件要发表：首先是 Battle.net 这个免费的在线多人游戏服务平台将同《暗黑破坏神》捆绑提供，玩家们无需再从 Kali 等第三方软件处寻求帮助。暴雪开始提供自己精心打造的联网服务，以供玩家通过互联网进行随机多人游戏。其次发表的第二项内容就不怎么让人惊喜了，这就是『无聊的魔兽争霸科幻山寨版』，连名字也如出一辙——《星际争霸》。最先暴雪的展台上有3个屏幕用于《暗黑破坏神》，另外三个用于《星际争霸》，到了展会结束时，星际被缩减到只有一个屏幕了。星际同去年的魔兽2相比，画面上没什么进步，游戏方式也是平淡无奇，当暴雪北方正在着力制作一款前所未有的创新作品的同时，他们的南方兄弟小组却似乎在用旧创意炒冷饭。展会后，暴雪必须要决定《星际争霸》何去何从，游戏已经有了相当的开发进度，而得到的反响却只能说差强人意。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】那届 E3有很多开发中的即时战略游戏参展，全都令人耳目一新，我们回到公司后开始讨论 RTS 类型的现状以及发展方向，并且意识到应该在《星际争霸》上做到百尺竿头更进一步。&lt;/p&gt;

&lt;p&gt;最后他们做出了艰难的决定，将目前的进度放弃从头开始制作，而不是勉强发布一款平庸作品。之后几年内《星际争霸》从人们视野中消失了。与此同时《暗黑破坏神》却充分吸引了公众的关注，大有不征服市场不罢休之势，然而为了确保品质，暴雪未能按计划在1995年圣诞假日发售游戏。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】《暗黑破坏神》的收尾工作到了关键时期，暴雪南方的员工们也临时到北方分部协助工作，而 Battle.net 的开发则在暴雪南方这边进行，我们在 Battle.net 平台的开发和暗黑的开发之间协调，并为即将发售的游戏提供支持。实际上《星际争霸》小组的大部分成员也被我们指派去协助暗黑的开发。人们所不知道的是，在《暗黑破坏神》中加入 Battle.net 支持这个决定是在游戏快接近完成时才做出的，因为这个点子太新，在上面投入的时间也短。&lt;/p&gt;

&lt;p&gt;整个 Battle.net 的开发只用了几个月，实际上游戏于12月26日开发完成，刚好比圣诞节晚了一天，最终，游戏于1997年1月2日发售并引起了巨大的轰动。《暗黑破坏神》中的 RPG 升级体系和动作要素相辅相成，无疑是最完美的游戏设计，通过史诗般的剧情来完美衬托游戏过程，构成了引人入胜的世界观，更别处心裁的是，每个玩家经历的游戏体验都不同。这全靠随机声称的地牢设计，使得玩家每次冒险时见到的地形、物品和怪物都不一样，暗黑由此获得了杰出的重复可玩性，对于设计一成不变的游戏来说，这是不可企及的。此外玩家还能同他人结伴进入地牢冒险，游戏支持多人合作模式，最多同时支持4名英雄联手对敌。遗憾的是，在合作模式中没有关闭互伤这一选项，杀死盟友这种事情时有发生，这导致不少玩家故意杀光盟友以博得一笑，多么的邪恶啊！&lt;/p&gt;

&lt;p&gt;除去游戏本身优越的品质外，《暗黑破坏神》也是暴雪采用专门小组制作剧情动画的首款作品，后者的任务是制作高品质预渲染的过场动画，为暴雪的游戏增光添彩，使其在同行间脱颖而出。以今天的眼光看这些开场画面颇为过时了，但它们代表着暴雪公司另一个标志性特色的开端。以上这些结合在一起，为暴雪公司带来又一款里程碑式的成功作品。《暗黑破坏神》最终销量也超过了100万，这是暴雪在魔兽2之后紧接着第二次实现这一成绩，当时能达到这个销量的游戏寥寥无几。暴雪公司如今已跻身整个行业最杰出的开发商之列，他们的游戏无论在制作精美度、表现方式和个性上都难有人与之并驾齐驱。他们当前唯一的问题就是那款舅舅不疼姥姥不爱的『魔兽科幻版山寨』，改进游戏质量的尝试也已停滞。现在的问题是：《星际争霸》究竟能否脱胎换骨，成为不愧于暴雪大名的又一款佳作？&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;1997年末的暴雪正是鸿运当头，从三名怀着梦想的毕业生这一平凡的起点，发展到连续出品两款销量百万的游戏，公司获得了空前成功。《魔兽争霸2》作为即时战略游戏有着热衷于对战的庞大拥趸群，而《暗黑破坏神》中角色扮演和动作珠联璧合的形式堪称前所未有。《魔兽争霸2》由位于加州欧文的暴雪总部（暴雪南方）出品，而《暗黑破坏神》则由位于圣马特奥的首家分公司暴雪北方制作，凭借两款大作和两家颇具实力的公司，暴雪似乎已然屹立 PC 市场。然而问题来了，欧文团队当前的项目在首次测试中遭到失败，除了游戏背景设定在太空之外，这款新作其实与《魔兽争霸》八九不离十，甚至名字听起来也相当一致——《星际争霸》。1996年 E3上的玩家和评论家们对这款新作丝毫不感冒，不过凭借着麾下的两款超级大作，暴雪能够调用足够的人力物力重新来过。所以，当北方小组开始着手开发《暗黑破坏神2》的时候，南方小组则推倒了《星际争霸》的全部进度，从零开始设计。&lt;/p&gt;

&lt;p&gt;《暗黑破坏神》广受欢迎，资料片也毫无悬念地推出了，不过如同魔兽的资料片《黑暗之门》，《地狱火》并非由暴雪自己操刀制作，而是外包给 Synergistic 软件公司并于1997年11月发行。暴雪北方手头有更为紧要的工作：出品一款完整的续作，此时离二代问世还有数年。而南方小组的《星际争霸》终于开始收尾，并在1998年3月面世，这款游戏的里里外外都被重新制作一遍，从而在外观、游戏体验和手感上都焕然一新。其本质仍然是一款围绕资源、建筑和单位的即时战略游戏，但却有着革命性的彻底改变：三大种族不再彼此雷同，而是每个都独一无二，一个种族的玩法要套用到另一种族就完全行不通，这使得任何一场赛事中的战略以指数级复杂化，根据对手种族的不同，玩家必须要采取不同的打法，此外《星际争霸》的故事叙述水平更是登峰造极。《魔兽争霸》的剧情引人入胜，但仅限在人物之间的过场部分由旁白来讲述，兽族和人族的剧情体验明显一分为二，并无关联。《星际争霸》与此相反，整个剧情一气呵成，从人族开始，接着是残暴的虫族，最后以高等外星文明神族收尾，故事通过形形色色的角色之间的互动来讲述，其中许多角色都可以在任务中实际操作，这些角色在任务过程中甚至还会继续交流。换言之，剧情叙述和游戏过程一起构成了天衣无缝的娱乐体验，没有任何一款即时战略游戏能够与之媲美。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我们认为背景故事对于玩家的投入度相当重要，首先要让玩家觉得自己在游戏中的行为师出有名，但最重要的是，暴雪的核心价值是游戏性第一，游戏性就是一切东西的核心，从游戏性角度出发，如果一种设计比其他设计更有趣，我们就会尝试从剧情方面来迎合游戏性的需求。&lt;/p&gt;

&lt;p&gt;此外还有一个卖点，就是所谓多人对战，《星际争霸》全面支持暴雪的 Battle.net 服务，用于多人对战，尽管理论上同《魔兽争霸2》相比没有太多改变，三个截然不同的种族再加上多姿多彩的战略深度，在多人游戏中得以发挥到极致。《星际争霸》让人真正废寝忘食，到了史无前例的地步，那么销量究竟如何呢？可以这么说《魔兽争霸2》和《暗黑破坏神》各发行一百万份实现了巨大的商业成功，《星际争霸》也卖出一百万份，而且仅仅是在韩国这一个国家里。在韩国，一百万的销售量已经占到其人口的百分之二，再算上全球其他市场的销量，《星际争霸》一跃成为有史以来最畅销的 PC 游戏之一。&lt;/p&gt;

&lt;p&gt;专业游戏联盟如雨后春笋般诞生，《星际争霸》也成为运动赛事中的竞技项目，问世十年后仍经久不衰——对于瞬息万变的游戏业来说，十年就是永恒。在韩国《星际争霸》至今仍然是一项重大观赏性运动，与传统运动分庭抗礼。最后《星际争霸》的累计销量达到了惊人的1100万份。在此之前暴雪已经跻身世界最成功的游戏开发商之列，现在更是天下无敌，从剧情到手法，再到表现形式，他们重新定义了战略游戏，甚至整个游戏媒介本身，该游戏影响之深远，甚至在1999年5月，发现号航天飞机执行首次国际空间站对接任务时也携带了一份。暴雪本可以做一部平庸作品了事，但凭借着对完美的执着，《星际争霸》成为了永恒经典。当然其资料片也很快跟进，如暴雪早期其他游戏一样，前两款资料片由第三方制作，由 Aztec New Media 制作发行的《起义》讲述了同主线剧情平行发展的分支故事，三个种族各有一套战役；《反攻》由 Stardock 开发，其本质基本相同，也是每个种族一套新战役，两套资料片在评论界波澜不惊，发行量也不大，如今它们已经被遗忘，无法购买得到。&lt;/p&gt;

&lt;p&gt;终于在1998年11月，《星际争霸》的最后一款资料片问世，并引起了前所未有的巨大轰动。《母巢之战》从每个方面对游戏做出了核心上的彻底改进，非但延续了剧情，还引导其进入了全新的领域，同时针对多人对战进行了全新设计和扩充。该资料片显然不是由第三方制作，而是由暴雪自己在 Sapphire 公司的协助下亲自操刀完成。《星际争霸》的资料片中，只有《母巢之战》至今还广为流传。其后很长一段时间内，星际系列都没有发行续作。&lt;/p&gt;

&lt;p&gt;暴雪接二连三的辉煌令人头晕目眩，人们往往忽视了他们的失败作品。《魔兽争霸：氏族之王》计划成为一款关于萨尔个人经历的冒险游戏，讲述一名逃跑的兽族奴隶如何陈伟氏族之王的故事。不幸的是，尽管部分暴雪员工对该作抱有相当的热情，其他人却不以为然，他们认为该游戏不符合暴雪的黄金标准，而且在98年2D和冒险游戏已经倍受冷落，另一个障碍源于该作的开发商 Animation Magic 远在俄罗斯，造成暴雪和他们之间的沟通困难，更糟的是当这款游戏正准备发行时，LucasArts 抢先发布了《猴岛小英雄3》和《冥界狂想曲》，暴雪意识到这两款优秀作品真正将冒险类游戏发挥到了极致，远远超过《氏族之王》。这是相当严峻的，如果他们迎头而上，照原计划发行游戏，玩家们会感觉这只是暴雪的一部跟风之作。最后的消息是，在离预订完成时间只有3个月的时候，暴雪取消了这个项目，他们再度贯彻了要么不做，要么做到完美的准则。&lt;/p&gt;

&lt;p&gt;1998年还有一项重大改变：最早提出成立工作室的共同创始人艾伦·艾德涵辞去了暴雪总裁一职，作为总裁他一直从事商务领域的工作，因为期望回归到游戏制作上来，于是他和另一位创始人迈克·默汉交换了职位，后者至今扔担任该职。1999年暴雪公司没有大的动作，没有发行作品，甚至《暗黑破坏神2》也只预订在圣诞假期旺季发行，其延迟发售无疑让拥趸失望，然而此时人们已经习惯了暴雪为持续改进作品而跳票的方式，9月他们宣布《魔兽争霸3》即将发表，该作集公司最擅长的两种游戏类型于一身：即时战略和角色扮演，即时对暴雪来说这也是很激进的。游戏有六个种族，游戏视角始终以主角的英雄单位作为核心，类似《暗黑破坏神》，其他单位根据英雄发出的指令动作，而不是由玩家直接操控。游戏将采用无缝衔接的场景，由角色之间的对话场景来代替载入画面，除了期待暴雪下一部完美大作之外，粉丝们别无他求，全盘接受。然而有个小问题：在公开宣布后，暴雪制作了游戏概念的内部试玩版——效果连他们自己都讨厌。着手实验了自己的想法后，他们在意识到它有多糟糕。于是在2000年的 E3上暴雪发表了爆炸性消息：他们已经在着手全面改变《魔兽争霸3》，在保持英雄单位重要性的同时，使其更加接近传统即时战略，这也遭到了反对，因为这代表又一次延期，同时给人一种暴雪拒绝创新，却返回到保守安全领域的感觉。&lt;/p&gt;

&lt;p&gt;人们再次议论纷纷，暴雪的游戏虽然品质优良却缺乏根本的创新，然而仅在一个月后暴雪就挽回了名声：2000年6月《暗黑破坏神2》终于问世，在最后一年里，初代的制作组暴雪北方日复一日埋头苦干，只为实现让续作在所有方面都超越前作的初衷。《暗黑破坏神2》有着更丰富的剧情，更庞大的关卡，更多的职业，全新的技能和各式各样种类繁多的武器装备，如此多的游戏内容的制作使得小组成员几乎崩溃，但最后证明这是值得的。《暗黑破坏神2》是一款当之无愧的动作游戏经典，游戏主角在地狱烈焰中的英勇征战令人热血沸腾，游戏当然不是没有缺点的，同4年前的初代相比，画质并无飞跃，游戏首发的几周内 Battle.net 服务也经常崩溃。但游戏在直观、流畅的操作和令人废寝忘食的游戏性方面脱颖而出，以上都是瑕不掩瑜。《暗黑破坏神2》成为了暴雪迄今销售最快的游戏，问世仅一个月就卖出了一百万份，本作经常被誉为游戏史上最优秀的动作 RPG，毋庸置疑的说，暴雪公司现在已经是全世界最受推崇最成功的游戏开发商之一，他们发行的每一款作品都能轻松达到百万销量，并随即成为游戏业的经典作品。暴雪已然称霸了90年代，而新世纪00年代也将成为他们的囊中之物，此时距暴雪成立甚至还不到十年。&lt;/p&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;p&gt;自90年代起的10年间，暴雪娱乐从起初的无名小卒发展为如今的 PC 游戏界大亨，早起的《魔兽争霸》和《暗黑破坏神》的成功，推动了其续作达到新的高峰，经历了艰难的起步后《星际争霸》创造的传奇达到了艺术的高度。自1995年起，每款单机游戏至少卖出了100万份，且逐年递增。暴雪在创造方向和财政上都享有自由，他们的所有想法都得以实现，把游戏做成他们理想中的那样大胆而多样化。但出于各种原因，2000年年初时公司经历了数次挫折且几名高管卸任，最终仅有两款《魔兽争霸》系列的游戏见到了黎明的曙光，这两款游戏跻身于史上最知名最具影响力和最成功的游戏行列当中。即使是在糟糕透顶的时候，暴雪响当当的名号仍然如雷贯耳。&lt;/p&gt;

&lt;p&gt;1998年11月，在完成了资料片《星际争霸：母巢之战》后，暴雪在加州欧文地区的主团队氛围两拨，一拨队伍负责新一代实时策略游戏《魔兽争霸3》，而另一组筹备全新科幻角色扮演游戏《Nomad》，遗憾的是《Nomad》 还没来得及对外宣布就胎死腹中，这就意味着该小组必须另辟项目。此时公司的另一个工作室暴雪北方正红得发紫，在2000年发布了《暗黑破坏神2》后，他们又自行开发了资料片。这种自行开发资料片，而不交给第三方的做法前所未有，如今《母巢之战》起头，暴雪所有的资料片都由游戏的原班人马操刀制作。这种新的策略效果显著：2001年6月发布的《毁灭之王》获得了巨大成功，暴雪北方便趁热打铁着手开发《暗黑破坏神3》，与南部兄弟小组在冒险游戏《魔兽争霸冒险》和《Nomad》项目上屡屡受挫不同，暴雪北方似乎志得意满，他们绝对没有想到，暗黑2将会是他们出品的最后一个游戏。2001年9月，暴雪宣布了一款新作，它是《Nomad》制作小组的后续项目。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】当时许多成员都在玩大型多人在线游戏，在《Nomad》项目毫无进展的时候，我们决定改变方向打造大型多人在线游戏。关于应该采用哪个系列来做网游，以及是创造一个全新世界好，还是尝试利用现有游戏系列的题材好，我们都做了讨论。当开始审视魔兽系列时，我们觉得找到正确的题材了。&lt;/p&gt;

&lt;p&gt;这就是《魔兽世界》的起源，然而按照暴雪的一贯作风，游戏并无确切的发布日期，考虑到小组精益求精的制作态度，游戏很可能数年后才会与玩家见面。同时南方小组正在为其它魔兽系列游戏收尾，2002年7月问世的《魔兽世界3：混乱之治》在初期理念上作出了大幅度的变动，原定的6个种族缩减到了4个，倍受关注的英雄角色并非玩家扮演的主角，而是强化版的单位，也就是说，游戏是传统的即时战略，英雄角色仅用于增色添彩。不过它在某些方面还是领先的：其一，它是暴雪的第一款全3D 游戏，尽管对游戏性没有造成太大的影响；其二，工作室在预渲染过场动画领域更上一层楼，这使得小组能够将单调的剧情叙述变得前所未有的充实，而游戏角色们仍然是焦点，这也也成就了一款注重情节的策略游戏，前无古人。除剧本外，更有暴雪一贯在游戏性方面的完美平衡，以及每个种族的独一无二的设计，所有这些加在一起促成了一款精品，至今仍被认为是最佳策略游戏之一。与《魔兽争霸》前作一样，本作也成为了世界级专业游戏锦标赛的典范。资料片毫无悬念地接踵而至——即2003年的《冰封王座》，与《暗黑破坏神2》一样，资料片同样由原班人马操刀完成，在保有原汁原味的同时确保了同等的高质量。归功于长篇的新剧情以及多人模式添加的多个新单位，资料片几乎是一款全新游戏。&lt;/p&gt;

&lt;p&gt;现今，暴雪旗下三个主要游戏系列都在开发新作品，暴雪北方在开发《暗黑破坏神3》，南方分部着手《星际争霸》的续作以及《魔兽世界》，第三个小组『虚无软件』则在研发全新的《星际争霸》系列作品。2002年启动，预计2003年发布的《星际争霸：幽灵》将成为家用机上的第三人称动作游戏。尽管从1995年后暴雪不再涉足家用机领域，但这款游戏却完美复合家用机的模式，在星际大背景剧情下，故事围绕人族的高级特种兵展开，玩家对此的反馈很不错。暴雪几年内发布了许多截图、预告片以及文章，但游戏本身却不见踪影。按老规矩暴雪将游戏改了又改，发布时间一延再延。此时对《幽灵》团队来说是屋漏偏逢连夜雨，2003年6月《暗黑》项目领导人离开了暴雪北方，这些人起初成立的『秃鹰工作室』被暴雪吸收到麾下，而暴雪本身又是其他集团的子公司，当感觉到自己已经不再参与重大决策且无法保障自身成员的收益和前景时，暴雪北方管理层提出了抗议，他们甚至以辞职威胁获取话语权，不幸的是，辞职得到了批准。&lt;/p&gt;

&lt;p&gt;失去领导人后，《暗黑》团队遭受了无法弥补的损失。祸不单行的是，2004年1月暴雪原团队的领导人也辞职了。艾伦·艾德涵大学毕业后按照自己的想法建立了一个游戏公司，13年后他选择退出。长时间高压的工作打垮了他，如今他希望投身金融领域，他的职位由共同创始人迈克·默汉接替，因而公司并未发生巨变。同年，暴雪停止聘用『虚无软件』公司开发《星际争霸：幽灵》，该游戏至今搁浅无人过问。不过欧文地区团队仍然对《幽灵》信心十足，并且让『飞猿工作室』继续这个项目，『飞猿』最终被暴雪收购，更名为暴雪家用机分布，之后所有暴雪公司的游戏不再外包，全部内部制作，于是《幽灵》的制作得以继续，然后就没有然后了…..与此同时，暴雪自己的续作《星际争霸2》却遥遥无期。&lt;/p&gt;

&lt;p&gt;员工陆续辞职，公司屡屡受挫，有人开始觉得暴雪的巅峰期已经结束。之后在2004年11月，即第一款《魔兽争霸》出品后10周年，《魔兽世界》终于问世。历经4年开发，本作是工作迄今为止规模最大，投资最多的项目，公司成败在此一举。不过暴雪对本作仍然满怀信心，并预期实体店的销量能在第一年达到40万。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】按现在的标准，我们当时的预计销量极为保守。我们在北美的设备能够为40万到50万活跃用户提供支持，当时估计，如果能在北美发展这个数量的用户就谢天谢地了，然后在以此为基础将魔兽系列游戏发展壮大。&lt;/p&gt;

&lt;p&gt;仅仅在第一个月内，他们就如愿以偿，大型多人在线游戏当时还在蹒跚学步阶段，数千玩家汇聚在一个庞大的虚拟世界中，这在当时可是小众游戏，在重点市场如欧洲等地区少有人问津。《魔兽世界》靠离经叛道成为一匹世界级黑马，上述偏见自然也消失殆尽。该游戏类型的优势之一是公司可以向玩家收取月费，从而抵消游戏的开发维护费用。然而当用户群高达数十万之多，就形成了一种盈利模式。在不到一年里，《魔兽世界》用户增加到了史无前例的400万，每名用户的月费加起来，使得本作成为获利最高的单款游戏。否定论者说暴雪在走下坡路，而《魔兽世界》做出了有力的回击，数年来本作的人气有增无减，原班人马制作的每款资料片都在发售后被抢购一空，创造了记录，用户人数从600万逐渐增长到现今的1200万。这首先说明游戏的销售量至少也有1200万，再考虑到有些玩家购买游戏后又停止了付费，实际销量应该更高。另一方面，如果把全球所有玩家的付费加个总和，意味着暴雪仅靠月费每年就能赚取10亿美元，在过去整个游戏史上这是闻所未闻的。&lt;/p&gt;

&lt;p&gt;是什么让人们对它如此着迷？和其他暴雪游戏相同，本作并无任何真正意义上的全新内容，游戏紧贴已然成型的大型多人在线游戏模式，以魔幻角色扮演为题材，着重升级和装备搜集，然则同其他暴雪产品一样，游戏的方方面面都被加工到了完美境界，游戏十分直观友好，任何瑕疵都由负责平衡性的部门快速修正，美工华丽而亲切，战斗体验在大型多人在线游戏中被公认为最佳。当然《魔兽》的金字招牌自首发起就吸引了大批玩家，总体来说，对于打造了数款精品大作，屡屡超越大众期待的暴雪来说，《魔兽世界》是一个新奇迹，到达游戏业巅峰后，暴雪公司再度登峰造极，已经很难有其他公司与之并驾齐驱。凭借着《魔兽世界》带来的这笔意外之财，暴雪接下来的发展势不可挡。当然，他们还得接着运营《魔兽争霸》，这带来了一些问题。尽管他们的大型多人在线巨作获得空前成功，其他项目并为从中受益。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】对《魔兽争霸》玩家社群的支持成为我们的优先工作，尤其在 WOW 发布初期。我甚至觉得如果 WOW没有获得意想不到的成功，《星际争霸2》的推出应该还能更早一些。&lt;/p&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;p&gt;2000到2005年间暴雪娱乐状况不佳，由于辞职不断和大量烂尾项目，暴雪娱乐似乎要跌下游戏霸主的宝座，但是这一切随着2004年11月《魔兽世界》的发行而改变，这个大型多人在线游戏一炮打响，成为有史以来最火爆的游戏。接下来的几年，该游戏的付费人数超过了1200万，如此可观的收益流在整个游戏界是史无前例的，意外的收获本该让暴雪能够率性而为，然而游戏的火爆度始料未及，暴雪不得不勉力扩员，确保在支持《魔兽世界》的同时还能顾及其它项目。暴雪手头已经有大量未完成的游戏，此时同魔兽系列无关的游戏统统问题不断，发行严重滞后，如今最大的问题在于，暴雪能否应付《魔兽世界》突如其来的成功？&lt;/p&gt;

&lt;p&gt;尽管《魔兽世界》如此成功令人难以置信，暴雪其他的项目依然处于挣扎之中，例如暴雪北方小组制作的《暗黑破坏神3》就迟迟无法完工，虽有暗黑这面金字招牌，续作却难以与时俱进，开发团队始终想不出有趣的设计点子，更糟糕的是，按照2005年的标准，游戏画面已经颇为过时，加上暴雪北方管理人也在2003年辞职，使得《暗黑破坏神3》最终失去了方向，最后，位于加利福尼亚欧文的暴雪南方公司的执行者们不得不做出一个艰难的决定，在希望对开发团队加紧管理但却难以远距离操控的情况下，他们于2005年8月决定关闭暴雪北方，同时告知前员工们可以选择到欧文继续开发《暗黑破坏神3》。一部分人加入了南方公司，另一部分人选择离开，但不管是走是留，这一巨变对制作组的自身文化和创作独立性都造成了打击，导致了《暗黑破坏神3》项目流产，此后《暗黑破坏神3》的开发又回到原点。正如暴雪的一贯作风，《暗黑破坏神3》从大众的视野中消失了数年。但2005年也有好的消息，10月，首届暴雪嘉年华拉开了帷幕，这是由暴雪主办的大型粉丝集会。本届参加者可以第一时间试玩《魔兽世界》资料片和《星际争霸：幽灵》，后者是开发中的家用机动作游戏。拥趸们也有机会同游戏的开发者——他们的偶像们见面，这次的大会极为成功，在2006年平息一年后，从2007年起暴雪嘉年华正式成为每年一度的活动，其规模逐年增加也并非巧合，从2009年起暴雪甚至不再出席E3，从此暴雪不用再对游戏社群大力宣传招揽，而是由后者自觉地参与进来。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】如今我们有其他的宣传场合，如暴雪嘉年华，期间我们向粉丝们展示一些尚未测试的游戏，让他们有机会体验试玩，我们同时有机会倾听玩家对该游戏的第一时间反馈。基于第一印象的反馈信息极为珍贵，这也是唯一的机会。&lt;/p&gt;

&lt;p&gt;尽管《星际争霸：幽灵》在暴雪嘉年华上得以抛头露面，本作却再度遭到挫折。XBOX360于2005年11月发售后，暴雪清楚 PS3和 Wii 也将随之推出，暴雪不断跳票直到游戏完美方才发售的作风在 PC 上一帆风顺，然而在家用机平台上却遭到了意想不到的麻烦，这就是家用机的更新换代。为 PS2、GameCube 和初代 XBOX 主机开发的《星际争霸：幽灵》，在消耗了大量的时间和金钱后，突然沦为上一代主机的游戏，甚至离完成之日还远。2006 年3月新一轮的筛选开始了，暴雪宣布该作将无限期延迟。《幽灵》一直到现在还在推迟，其实等同于取消开发，现在已经没有人在开发《星际争霸：幽灵》，员工早已经分配到魔兽和暗黑团队了，这些小问题都丝毫不影响《魔兽世界》迅速崛起和称霸游戏界。2006年5月暴雪自豪地宣布将同好莱坞的传奇影像工作室合作打造魔兽题材电影，不久又宣布《蜘蛛侠》的导演山姆·雷米加入到该项目，之后根据暴雪的典型作风，此事淡出视线，至今仍不为人知。&lt;/p&gt;

&lt;p&gt;几年过去，暴雪除了推出一个又一个魔兽资料片，再没有其它动作，然而2008年公司有了重大动向，即发行巨头 Activision和维旺迪游戏合并了，你问这与暴雪何干？1994年新兴的暴雪被戴维斯及联营公司所收购，后者被 CUC 国际收购，后者不久又和 HFS 集团合并成为 CENDANT 公司，CENDANT 被指控做假帐之后，又被卖给法国哈维斯下属的娱乐部门，后者同一年又被维旺迪收购，维旺迪 vivendi 与2007年12月宣布同游戏发行巨头 Activision 合并，获得多数控股权并成立合资公司，以上都听明白了吗？&lt;/p&gt;

&lt;p&gt;2008年7月时交易完成，合资形成的超级公司在利润方面无疑是业界之最，一半 Activision 一半 vivendi 组成的合资企业并不叫做动视维旺迪，而是叫动视暴雪。暴雪坚持要把自己的名头打出去，实际上他们最初希望公司叫做暴雪动视，最后暴雪做出妥协，允许游戏界首屈一指的 Activision 把名字放在前面而自己屈居第二，这是暴雪崇高地位的不二佐证。在合资公司中暴雪享有前所未闻的自主权，作为独立工作室自主管理，做出计划后仅向动视做出例行通知，直到现在动视对此并无异议，因为暴雪在魔兽上的巨大成功使动视非常满意，今后的合作关系将怎样，我们只能拭目以待（暴雪独立了）。暴雪的自主权使得他们能够维持原有风格，不吝惜时间而努力将游戏做到最好，即时有《幽灵》的前车之鉴，其他两款倍受期待的作品；《星际争霸2》和《暗黑破坏神3》数年来依旧按部就班地进行开发。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】这么说吧，即使我们拥有魔兽、星际和暗黑这些知名系列，如果你回顾我们最近10年左右的记录，你可以说我们只是一家魔兽公司，但所有这些系列对我们来说都很重要，对游戏迷也一样重要，最重要的是我们如何将优秀的游戏体验提供给玩家们，而且保持游戏背景世界观的原汁原味，我们希望忠实地实现这点。过去十年来，我们的重点都放在魔兽系列上，最大的挑战在于如何不偏不倚地把三个系列都照顾好，要知道在最近六七年来为了给《魔兽世界》提供持续支持我们付出了极大努力。&lt;/p&gt;

&lt;p&gt;最终在2011年7月，《星际争霸2》在首作问世多年后推出，游戏有着庞大的非线性关卡结构，依靠过场动画衔接的动人情节，游戏中嵌入的冒险要素，改进后的战网服务，对 Mod 社群的强力支持，此外自然还有举世闻名的多人对战模式，12年的辉煌对于游戏界来说已经不仅仅是不朽神话了，凭借寿命超越想象的星际原作和暴雪响当当的名号，《星际争霸2：自由之翼》在发布的当天就销售了100万份，并在头一个月达到了300万份的销售额，同魔兽系列相比这只是一般般，但和其他游戏公司相比，这是惊人的销量。这次发行后《星际争霸2》的故事还远未结束，原版《星际争霸》被分为三部剧情，第一段针对人类，其他两段对应两个外星种族，对于2代来说，暴雪将剧情分割为三个独立的游戏，现在《自由之翼》只是在讲述人类部分的故事而已。《星际争霸2：虫群之心》预计2012年发布，而三部曲的最后一作《星际争霸2：虚空之遗》将为剧情划上完满的句号。三款组拼之间具体会有什么不同，又会提供什么新的特性来吸引玩家？暴雪会吊住大家的胃口，我们只好慢慢等待了。&lt;/p&gt;

&lt;p&gt;除此之外《暗黑破坏神3》这款千呼万唤始出来的大作，在数次停牌和复牌之后终于接近制作的尾声，故事发生在《暗黑破坏神2：毁灭之王》的20年后，使得老玩家可以延续前情，而新玩家可以有崭新的开始，总体来说，游戏性和风格延续旧作，在俯视视角下身怀绝技的英雄凭借着一身极品装备，像割草般击杀大批敌人，数次迭代后，本作在画风上同暴雪其他游戏靠拢，暴雪还表示，近期的《战神》等动作游戏启发他们在《暗黑破坏神3》中加入更多的视觉冲击，引发动作 RPG 中动作要素的回归，同时他们宣称要更强调角色和剧情，实现动作 RPG 中角色扮演内容的复兴，《暗黑破坏神3》将在2011年下半年或2012年上市，这是仅有的一款暴雪向全球正式公布的游戏。&lt;/p&gt;

&lt;p&gt;然而2010年11月30日，一份包含游戏发行目录的内部文件在互联网上泄密，其中提到了前所未知的游戏，包括计划在2013年发布一款代号《泰坦》的作品，据说泄密文件中还包含敏感的财政数据，之后暴雪中国的总经理被开除，一般认为这证明了本次泄密的真实性，的确《泰坦》现已被暴雪证实确有其事，这将是1995年以来暴雪首款不属于魔兽、星际或是暗黑系列的游戏。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我们已经开始对一款新的多人在线网游进行开发，这并不是《魔兽世界》续作，它是一款崭新的游戏，我们尝试投入这六年在魔兽上得到的经验和教训，打造一款全新的游戏来推动 MMO 类型的发展。&lt;/p&gt;

&lt;p&gt;除了这次泄密的消息，还有传言说暴雪的另一团队真在开发另一个新系列，如果属实，在近10年内除魔兽外并无建树的暴雪，将再一次开拓新的领域。现在已经知道的是，除了魔兽、星际、暗黑、泰坦各有一个开发小组外，还可能有另一对人马在从事新的游戏。如果皇天不负有心人，接下来数年间暴雪将持续发布不同系列下的游戏作品，从而再度成为一个以多款精品游戏而驰名的公司。&lt;/p&gt;

&lt;p&gt;艹，也该是时候了&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-blizzard/&#34; title=&#34;游戏发展史 - Blizzard&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>聊斋：白狐</title>
      <link>http://alimy.me/post/arc_201603192259/</link>
      <pubDate>Sat, 19 Mar 2016 22:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192259/</guid>
      <description>&lt;p&gt;很多年前，一个昭阳四射的清晨，书生坐在树桩上苦读四书五经。书生一贫如洗三餐不饱，家里唯一值钱的就是那两担沉甸甸的书。&lt;/p&gt;

&lt;p&gt;书生每天都坐在这片林子里，随便寻个坐处，读到天黑，日子一天天的就这样在圣贤书中流逝。&lt;/p&gt;

&lt;p&gt;这日黄昏，书生正在读书，读到夕阳遍地时高呼：“书中自有黄金屋，书中自有颜如玉”，突地“吱吱”而鸣声随风而来，书生抬起头来，只见一团白影扑面而至，那是一只晶莹通白的小狐狸，雪白得一尘不染，两只眼珠溜溜而动，口里哀声连连。&lt;/p&gt;

&lt;p&gt;说也来怪，小狐狸奔到书生面前时，竟兀自停住脚步，气喘吁吁。&lt;/p&gt;

&lt;p&gt;书生一把抓住小狐狸，只见小狐狸雪白的后腿上，斜斜地插着一支箭，鲜血顺着箭头沽沽而下，染红了一片。小狐哀鸣几声，双目对着书生，写满了哀怜与乞求。&lt;/p&gt;

&lt;p&gt;书生叹一口气：“小狐狸啊小狐狸，是谁忍心伤你这么深……”&lt;/p&gt;

&lt;p&gt;语音未落，远处蹄声如雷阵阵踏来，小狐狸白溜的身子不停的颤抖，仿佛要从书生手里挣扎逃走，书生急忙捧紧小狐，一咬牙将箭拔出，撕下一片烂衣袍，将小狐狸的伤口包好，轻轻放入宽大的衣袖里，说也来怪，小狐狸竟忍住疼痛，一动不动的躺在书生的袖怀之中。&lt;/p&gt;

&lt;p&gt;书生刚刚端起书，只听得马蹄声轰轰而至，数十匹高大骏马踏青飞来，为头的是一个虬髯大汉，满身华贵地叫道：“兀那书生，可曾见过一只受伤的狐狸逃过？”&lt;/p&gt;

&lt;p&gt;书生抬起头来：“兄台说的可是一只满身雪白的狐狸？”&lt;/p&gt;

&lt;p&gt;虬髯客身旁闪出一团绿影，娇喝道：“正是，正是我射中的那只狐狸，那小畜生呢？”&lt;/p&gt;

&lt;p&gt;书生只闻香风扑面，迎面是一张如花笑脸，书生猛然间惊慌失措，意迷情乱，好半天才回过神来，指着身后结结巴巴的说：“刚刚从这边跑过。”&lt;/p&gt;

&lt;p&gt;少女娇声说道：“多谢书生！我们追！”&lt;/p&gt;

&lt;p&gt;猛一挥手，数十骑悠然而来，又悠然而去，只留下银铃般的笑声荡在书生耳里。&lt;/p&gt;

&lt;p&gt;书生喃喃念道：“书中自有黄金屋，书中自有颜如玉”，啪地一声，圣贤书掉到地上竟不察觉。&lt;/p&gt;

&lt;p&gt;小狐狸从袖口里伸出头，啊啊一声叫醒了书生，书生见它的眼里写满了凄美与感谢。&lt;/p&gt;

&lt;p&gt;书生收起心，轻抚狐狸，爱怜地说：“小狐狸，快躲起来，别让人家欺负你。”&lt;/p&gt;

&lt;p&gt;小狐狸顺着衣袖一溜而下，跛着腿，竟通人性，前腿合一朝书生作一个稽首，吱吱几声，雪白的身体扭着一团，竟跳起舞来，只见白影闪闪，小白狐体肢如一，夕阳西下翩翩起舞，书生看得呆了。&lt;/p&gt;

&lt;p&gt;远方突地也传来吱吱之声，小狐狸收住舞步，再朝书生稽首，恋恋不舍地朝同伴而去，三步一回首，依依而别，消失在远山中。书生拍拍衣袍上的尘土，捡起书来重新苦读。&lt;/p&gt;

&lt;p&gt;书生还是每天坐在树林里读书，只是每天傍晚都会沿着树林转一转，聆耳细听着什么，每每有马蹄声响起时，书生会惊喜坐起，只是他再也没遇到过绿衣女郎。&lt;/p&gt;

&lt;p&gt;书生不知道，每天清晨，露叶旁都有一只小白狐，瞪大着灵动的眼珠，一动不动地望着书生，书生高读时，狐狸仍一动不动，仿佛怕打扰了书生的修行。&lt;/p&gt;

&lt;p&gt;书生很奇怪，每天夕阳西下，每当书生对着远山念念不望绿衣女子时，远山上仿佛有一团白影，迎着夕阳翩翩起舞，书生寻过去时，却什么都找不到。&lt;/p&gt;

&lt;p&gt;一天又一天，书生就这样生活着，直到他死去，再也没见过穿绿衣的女子，她和他不属于一个世界。&lt;/p&gt;

&lt;p&gt;大家都说：书生读了一生什么也没得到，当真白读了。书生去时孤单一人，有人却说看到过一只白狐曾出没在书生的床前，又有人说每年书生祭日，坟头都会有人拜祭。&lt;/p&gt;

&lt;p&gt;很多年过去了，大约是一千年吧。&lt;/p&gt;

&lt;p&gt;当年的树林铲平了，这里刚刚建起了一座官邸。&lt;/p&gt;

&lt;p&gt;今天到处张灯结彩，原来是新晋状元新婚大喜的日子，听说状元才高八斗，连皇上也下令将公主许配给他，举国大庆。&lt;/p&gt;

&lt;p&gt;状元郎今天起得特别早，因为管家告诉他，公主的花轿很快就到了，啪啪啪啪……，鞭声撩人，管家急匆匆地闯进来：“公子！公主花轿到了，公主到了。”&lt;/p&gt;

&lt;p&gt;状元郎激动得三步并作一步，冲出门外，揭开轿门：“公主……”但见一身绿装的公主坐在轿里，笑靥如花。状元一阵晕醺：公主好面熟啊，似乎在梦里见过无数次，可却总是记不起来。&lt;/p&gt;

&lt;p&gt;洞房花烛夜，状元与公主四目深情，门突地被撞开，状元定睛一看，是服侍自己多年的丫鬟，丫鬟从小开始照顾状元，喜欢穿一袭白衣，丫鬟走到状元身前一稽首，眼睛里满是泪珠：“公子，丫鬟自幼伺候您，今日要与您道别了。”&lt;/p&gt;

&lt;p&gt;状元猛然阵阵心痛：“为何故？”&lt;/p&gt;

&lt;p&gt;丫鬟撩起裤脚，雪白的腿上留着一道深疤，丫鬟指着公主说：“临走之前，想报当年一箭之仇，请公子赐恩。”状元大惊，双手护住公主：“你到底所为何事？”&lt;/p&gt;

&lt;p&gt;丫鬟泪珠夺眶而出，凄然着望着状元：“公子当年相救之恩，恨不能立时相报，修行千年方能变成人身，殷殷相许，今日公子金榜题名，前缘尽了，以一恩消一恨，望公子珍重。”&lt;/p&gt;

&lt;p&gt;丫鬟再次深深稽首，礼罢退至大庭深处，翩翩起舞，但见皎皎月下，白衣胜雪，似梦似幻，舞到深处，丫鬟吱吱而鸣，声声凄然。&lt;/p&gt;

&lt;p&gt;明月当空，状元喃喃而立，仿佛看到了当年的夕阳、远山，青山高处，那一团白影踏歌而舞，梦里状元满脑是绿影姣容，梦醒时，状元千百寻找的，可是那翩翩白影？&lt;/p&gt;

&lt;p&gt;从那晚后，再也没见过丫鬟，有人传说：在远山深处，夕照时分，总能看到有人在翩翩起舞，状元郎也差人寻过无数次，再没找到过。&lt;/p&gt;

&lt;p&gt;又有人说，那晚丫鬟哀呀而鸣，唱的是一首歌，那歌是这么唱的：&lt;/p&gt;

&lt;p&gt;我是一只修行千年的狐&lt;br /&gt;
千年修行 千年孤独&lt;br /&gt;
夜深人静时 可有人听见我在哭&lt;br /&gt;
灯火阑珊处 可有人看见我跳舞&lt;/p&gt;

&lt;p&gt;我是一只等待千年的狐&lt;br /&gt;
千年等待 千年孤独&lt;br /&gt;
滚滚红尘里 谁又种下了爱的蛊&lt;br /&gt;
茫茫人海中 谁又喝下了爱的毒&lt;/p&gt;

&lt;p&gt;我爱你时 你正一贫如洗寒窗苦读&lt;br /&gt;
离开你时 你正金榜题名洞房花烛&lt;/p&gt;

&lt;p&gt;能不能为你再跳一支舞&lt;br /&gt;
我是你千百年前放生的白狐&lt;br /&gt;
你看衣袂飘飘 衣袂飘飘&lt;br /&gt;
海誓山盟都化做虚无&lt;/p&gt;

&lt;p&gt;能不能为你再跳一支舞&lt;br /&gt;
只为你临别时的那一次回顾&lt;br /&gt;
你看衣袂飘飘 衣袂飘飘&lt;br /&gt;
天长地久都化做虚无&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;新白狐&lt;br /&gt;
演唱：陈瑞&lt;/p&gt;

&lt;p&gt;我是一只爱了千年的狐&lt;br /&gt;
千年爱恋千年孤独&lt;br /&gt;
长夜里你可知我的红妆为谁补&lt;br /&gt;
红尘中你可知我的秀发为谁梳&lt;/p&gt;

&lt;p&gt;我是一只守候千年的狐&lt;br /&gt;
千年守候千年无助&lt;br /&gt;
情到深处看我用美丽为你起舞&lt;br /&gt;
爱到痛时听我用歌声为你倾诉&lt;/p&gt;

&lt;p&gt;寒窗苦读你我海誓山盟&lt;br /&gt;
铭心刻骨&lt;br /&gt;
金榜花烛却是天涯漫漫&lt;br /&gt;
陌路殊途&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年前爱你的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
生生世世都是你的狐&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年来不变的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;/p&gt;

&lt;p&gt;我是一只守候千年的狐&lt;br /&gt;
千年守候千年无助&lt;br /&gt;
情到深处看我用美丽为你起舞&lt;br /&gt;
爱到痛时听我用歌声为你倾诉&lt;/p&gt;

&lt;p&gt;寒窗苦读你我海誓山盟&lt;br /&gt;
铭心刻骨&lt;br /&gt;
金榜花烛确是天涯漫漫&lt;br /&gt;
陌路殊途&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年前爱你的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
生生世世都是你的狐&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年来不变的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（忽然想听 陈瑞 唱的《白狐》，从网络收集了相关的资料，这是其中之一）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>http://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;

&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;

&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;

&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.&lt;/p&gt;

&lt;p&gt;… that’s it. No, really, that’s it. Bolt is basically a bunch of nested maps. And this simplicity is what makes it so easy to use. There’s no tables to set up, no schemas, no complex querying language to struggle with. Let’s look at a bolt hello world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    “fmt”
    “log”

    “github.com/boltdb/bolt”
)

var world = []byte(“world”)

func main() {
    db, err := bolt.Open(“/home/nate/foo/bolt.db”, 0644, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    key := []byte(“hello”)
    value := []byte(“Hello World!”)

    // store some data
    err = db.Update(func(tx *bolt.Tx) error {
        bucket, err := tx.CreateBucketIfNotExists(world)
        if err != nil {
            return err
        }

        err = bucket.Put(key, value)
        if err != nil {
            return err
        }
        return nil
    })

    if err != nil {
        log.Fatal(err)
    }

    // retrieve the data
    err = db.View(func(tx *bolt.Tx) error {
        bucket := tx.Bucket(world)
        if bucket == nil {
            return fmt.Errorf(“Bucket %q not found!”, world)
        }

        val := bucket.Get(key)
        fmt.Println(string(val))

        return nil
    })

    if err != nil {
        log.Fatal(err)
    }
}

// output:
// Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know what you’re thinking - that seems kinda long. But keep in mind, I fully handled all errors in at least a semi-proper way, and we’re doing all this:&lt;/p&gt;

&lt;p&gt;1.) creating a database&lt;br /&gt;
2.) creating some structure (the “world” bucket)&lt;br /&gt;
3.) storing data to the structure&lt;br /&gt;
4.) retrieving data from the structure.&lt;/p&gt;

&lt;p&gt;I think that’s not too bad in 54 lines of code.&lt;/p&gt;

&lt;p&gt;So let’s look at what that example is really doing. First we call bolt.Open to get the database. This will create the file if necessary, or open it if it exists.&lt;/p&gt;

&lt;p&gt;All reads from or writes to the bolt database must be done within a transaction. You can have as many Readers in read-only transactions at the same time as you want, but only one Writer in a writable transaction at a time (readers maintain a consistent view of the DB while writers are writing).&lt;/p&gt;

&lt;p&gt;To begin, we call db.Update, which takes a function to which it’ll pass a bolt.Tx - bolt’s transaction object. We then create a Bucket (since all data in bolt lives in buckets), and add our key/value pair to it. After the write transaction finishes, we start a read- only transaction with DB.View, and get the values back out.&lt;/p&gt;

&lt;p&gt;What’s great about bolt’s transaction mechanism is that it’s super simple - the scope of the function is the scope of the transaction. If the function passed to Update returns nil, all updates from the transaction are atomically stored to the database. If the function passed to Update returns an error, the transaction is rolled back. This makes bolt’s transactions completely intuitive from a Go developer’s point of view. You just exit early out of your function by returning an error as usual, and bolt Does The Right Thing. No need to worry about manually rolling back updates or anything, just return an error.&lt;/p&gt;

&lt;p&gt;The only other basic thing you may need is to iterate over key/value pairs in a Bucket, in which case, you just call bucket.Cursor(), which returns a Cursor value, which has functions like Next(), Prev() etc that return a key/value pair and work like you’d expect.&lt;/p&gt;

&lt;p&gt;There’s a lot more to the bolt API, but most of the rest of it is more about database statistics and some stuff for more advanced usage scenarios… but the above is all you really need to know to start storing data in a bolt database.&lt;/p&gt;

&lt;p&gt;For a more complex application, just storing strings in the database may not be sufficient, but that’s ok, Go has your back there, too. You can easily use encoding/json or encoding/gob to serialize structs into the database, keyed by a unique name or id. This is what makes it easy for bolt to go from a key/value store to a document store - just have one bucket per document type. Again, the benefit of bolt is low barrier of entry. You don’t have to figure out a whole database schema or install anything to be able to just start dumping data to disk in a performant and manageable way.&lt;/p&gt;

&lt;p&gt;The main drawback of bolt is that there are no queries. You can’t say “give me all foo objects with a name that starts with bar”. You could make your own index in the database and keep it up to date manually. This could be as easy as a slice of IDs serialized into an “indices” bucket for a particular query. Obviously, this is where you start getting into the realm of developing your own relational database, but if you don’t go overboard, it can be nice that all this code is just that - code. It’s not queries in some external DSL, it’s just code like you’d write for an in-memory data store.&lt;/p&gt;

&lt;p&gt;Bolt is not for every application. You must understand your application’s needs and if bolt’s key/value style will be sufficient to fulfill those needs. If it is, I think you’ll be very happy to use such a simple data store with so little mental overhead.&lt;/p&gt;

&lt;p&gt;[edited to clarify reader/writer relationship] Bonus Gob vs. Json benchmark for storing structs in Bolt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkGobEncode  1000000       2191 ns/op
BenchmarkJsonEncode   500000       4738 ns/op
BenchmarkGobDecode  1000000       2019 ns/op
BenchmarkJsonDecode   200000      12993 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://npf.io/2014/07/intro-to-boltdb-painless-performant-persistence/&#34; title=&#34;Intro to BoltDB&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android: Volley&#43;OkHttp with https</title>
      <link>http://alimy.me/post/dev_201603192245/</link>
      <pubDate>Sat, 19 Mar 2016 22:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192245/</guid>
      <description>

&lt;h3 id=&#34;android-network-simple:03999fb0359803477bc987da56a0bc05&#34;&gt;Android Network Simple&lt;/h3&gt;

&lt;p&gt;This article shows how to use volley with OkHttp and security your api with https.
本文可以在&lt;a href=&#34;http://www.jianshu.com/p/e58161cbc3a4&#34; title=&#34;Android 网络--我是怎么做的: Volley+OkHttp+Https&#34;&gt;简书&lt;/a&gt;浏览。&lt;/p&gt;

&lt;h3 id=&#34;使用-okhttp-作为传输层的实现:03999fb0359803477bc987da56a0bc05&#34;&gt;使用 OkHttp 作为传输层的实现.&lt;/h3&gt;

&lt;p&gt;Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现. 3.0 以上使用HttpUrlConnection, 2.3 以下使用 ApacheHttpStack, 参考&lt;a href=&#34;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&#34;&gt;Android Http Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OkHttp 相较于其它的实现有以下的优点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;http://zh.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;，允许连接同一主机的所有请求分享一个socket。&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，会使用连接池减少请求延迟。&lt;/li&gt;
&lt;li&gt;使用GZIP压缩下载内容，且压缩操作对用户是透明的。&lt;/li&gt;
&lt;li&gt;利用响应缓存来避免重复的网络请求。&lt;/li&gt;
&lt;li&gt;当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。&lt;/li&gt;
&lt;li&gt;如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此使用 OkHttp 作为替代是好的选择.&lt;/p&gt;

&lt;p&gt;首先用 OkHttp 实现一个新的 &lt;code&gt;HurlStack&lt;/code&gt; 用于构建 Volley 的 requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OkHttpStack extends HurlStack {

    private OkHttpClient okHttpClient;

    /**
     * Create a OkHttpStack with default OkHttpClient.
     */
    public OkHttpStack() {
        this(new OkHttpClient());
    }

    /**
     * Create a OkHttpStack with a custom OkHttpClient
     * @param okHttpClient Custom OkHttpClient, NonNull
     */
    public OkHttpStack(OkHttpClient okHttpClient) {
        this.okHttpClient = okHttpClient;
    }

    @Override
    protected HttpURLConnection createConnection(URL url) throws IOException {
        OkUrlFactory okUrlFactory = new OkUrlFactory(okHttpClient);
        return okUrlFactory.open(url);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用 OkHttpStack 创建新的 Volley requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestQueue = Volley.newRequestQueue(getContext(), new OkHttpStack());
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就行了.&lt;/p&gt;

&lt;h3 id=&#34;使用-https:03999fb0359803477bc987da56a0bc05&#34;&gt;使用 Https&lt;/h3&gt;

&lt;p&gt;作为一个有节操的开发者应该使用 Https 来保护用户的数据, Android 开发者网站上文章&lt;a href=&#34;https://developer.android.com/training/articles/security-ssl.html&#34;&gt;Security with HTTPS and SSL&lt;/a&gt;做了详尽的阐述.&lt;/p&gt;

&lt;p&gt;OkHttp 自身是支持 Https 的. 参考文档 &lt;a href=&#34;https://github.com/square/okhttp/wiki/HTTPS&#34;&gt;OkHttp Https&lt;/a&gt;, 直接使用上面的 &lt;code&gt;OkHttpStack&lt;/code&gt; 就可以了, 但是如果遇到服务器开发哥哥使用了自签名的证书(不要问我为什么要用自签名的), 就无法正常访问了.&lt;/p&gt;

&lt;p&gt;网上有很多文章给出的方案是提供一个什么事情都不做的&lt;code&gt;TrustManager&lt;/code&gt; 跳过 &lt;code&gt;SSL&lt;/code&gt; 的验证, 这样做很容受到攻击, Https 也就形同虚设了.&lt;/p&gt;

&lt;p&gt;我采用的方案是将自签名的证书打包入 APK 加入信任.&lt;/p&gt;

&lt;p&gt;好处:
* 应用难以逆向, 应用不再依赖系统的 trust store, 使得 Charles 抓包等工具失效. 要分析应用 API 必须反编译 APK.
* 不用额外购买证书, 省钱&amp;hellip;.
缺点:
* 证书部署灵活性降低, 一旦变更证书必须升级程序.&lt;/p&gt;

&lt;h3 id=&#34;实现步骤:03999fb0359803477bc987da56a0bc05&#34;&gt;实现步骤&lt;/h3&gt;

&lt;p&gt;以最著名的自签名网站12306为例说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;导出证书&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo | openssl s_client -connect kyfw.12306.cn:443 2&amp;gt;&amp;amp;1 |  sed -ne &#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#39; &amp;gt; kyfw.12306.cn.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将证书转为 bks 格式
下载最新的bcprov-jdk, 执行下面的命令. storepass 是导出密钥文件的密码.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -importcert -v \
    -trustcacerts \
    -alias 0 \
    -file &amp;lt;(openssl x509 -in kyfw.12306.cn.pem) \
    -keystore kyfw.bks -storetype BKS \
    -providerclass     org.bouncycastle.jce.provider.BouncyCastleProvider \
    -providerpath ./bcprov-jdk16-1.46.jar \
    -storepass asdfqaz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将导出的 kyfw.bks 文件放入 res/raw 文件夹下.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建  &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // A HttpStack implement witch can verify specified self-signed certification.
public class SelfSignSslOkHttpStack extends HurlStack {


  private OkHttpClient okHttpClient;


  private Map&amp;lt;String, SSLSocketFactory&amp;gt; socketFactoryMap;


   // Create a OkHttpStack with default OkHttpClient.
  public SelfSignSslOkHttpStack(Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this(new OkHttpClient(), factoryMap);
  }


  // Create a OkHttpStack with a custom OkHttpClient
  // @param okHttpClient Custom OkHttpClient, NonNull
  public SelfSignSslOkHttpStack(OkHttpClient okHttpClient, Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this.okHttpClient = okHttpClient;
    this.socketFactoryMap = factoryMap;
  }


  @Override
  protected HttpURLConnection createConnection(URL url) throws IOException {
    if (&amp;quot;https&amp;quot;.equals(url.getProtocol()) &amp;amp;&amp;amp; socketFactoryMap.containsKey(url.getHost())) {
        HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(okHttpClient).open(url);
        connection.setSSLSocketFactory(socketFactoryMap.get(url.getHost()));
        return connection;
    } else {
        return  new OkUrlFactory(okHttpClient).open(url);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后用 &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt; 创建 Volley 的 RequestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String[] hosts = {&amp;quot;kyfw.12306.cn&amp;quot;};
int[] certRes = {R.raw.kyfw};
String[] certPass = {&amp;quot;asdfqaz&amp;quot;};
socketFactoryMap = new Hashtable&amp;lt;&amp;gt;(hosts.length);


for (int i = 0; i &amp;lt; certRes.length; i++) {
    int res = certRes[i];
    String password = certPass[i];
    SSLSocketFactory sslSocketFactory = createSSLSocketFactory(context, res, password);
    socketFactoryMap.put(hosts[i], sslSocketFactory);
}


HurlStack stack = new SelfSignSslOkHttpStack(socketFactoryMap);


requestQueue = Volley.newRequestQueue(context, stack);
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;done&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://github.com/dodocat/AndroidNetworkdemo&#34; title=&#34;android network demo&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>庆余年: 又一叶</title>
      <link>http://alimy.me/post/arc_201603192212/</link>
      <pubDate>Sat, 19 Mar 2016 22:12:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192212/</guid>
      <description>&lt;p&gt;当年的废话&lt;/p&gt;

&lt;p&gt;至于是如何和小眉认识的，已经有些记不清楚了，只记得那天太阳当空照，花儿对我笑，小鸟说操操操，喔，不对，那天好象国际上又出了件什么事儿，于是我们几个兄弟以此为由撮了一顿，中午我喝了太多的酒，头有些昏，腿有些沉，舌自然也有些笨了，一个人到街上的书铺借了本小说便直奔大南门外的烂草地，准备刮刮江风，冒充一下孤独；抽抽小烟，模仿一下绝望。&lt;/p&gt;

&lt;p&gt;只是有太久没有出门了，所以没想到七月的太阳竟然会这么毒。&lt;/p&gt;

&lt;p&gt;当然，这是一个常识，但现在我的问题就是缺乏常识。于是在石凳上坐了五分钟后，我便决定脱下满身汗臭的格子短袖，做个脱衣的俗人，脱俗之人。&lt;/p&gt;

&lt;p&gt;当我的手指伸向短袖的第三个扣子时，不期有一道很清凉，很清凉的声音从我的正前方响了起来：&lt;/p&gt;

&lt;p&gt;“天气还真是热呀！”&lt;/p&gt;

&lt;p&gt;甜甜的、酸酸的、有营养……我自顾自地笑了笑，第一个反应是，这绝对是一个雌性动物才能拥有的声音，而且一定是个小雌。&lt;/p&gt;

&lt;p&gt;我的第二个反应是，赶忙把第二个扣子给扣了起来。&lt;/p&gt;

&lt;p&gt;我的第三个反应是，脑袋嗡地一声……世界果然大不同，居然有女子主动找我搭讪。&lt;/p&gt;

&lt;p&gt;我把头深深地埋在怀里，用了半分钟的时间，猜度了种种可能，唯一把美女相约的可能排除掉后，勇敢地抬起头来，面对这个脸上可能涂了八层防晒霜的恐龙。&lt;/p&gt;

&lt;p&gt;若没有眼花的话，那是一个穿着平山绫那种式样裙子，像萧淑慎一样叉着腰，左手学徐熙媛那样用花手帕扇着风，长的酷似没发胖之前的深田恭子模样的女孩，在用李艳的招牌眼神望着我。&lt;/p&gt;

&lt;p&gt;一瞬间，我觉得喝酒之后的口好渴。&lt;/p&gt;

&lt;p&gt;由于自己生就是个衰命，于是我拼命地告诫自己，这绝对是个幻像。对！今天的阳光太过耀眼，而自己又是刚闻韶乐，数月不知肉味。所以这绝对是个幻像！&lt;/p&gt;

&lt;p&gt;可我的肋骨下方，肩胛骨前方，往往用来爱国的地方，常是酸酸的地方，怎突然一下感觉如此温柔。我一时失措，急忙用拇、食二指，曲成蟹螯之状，向腰后多肉处捏了下去……对，掐死你的温柔。&lt;/p&gt;

&lt;p&gt;一掐之下，始知今季并非春日，故眼前美景绝非chun梦。&lt;/p&gt;

&lt;p&gt;其实现在想起来，也不过是眉清目秀罢了。&lt;/p&gt;

&lt;p&gt;但当时我的嘴角险些亲吻我的耳垂。&lt;/p&gt;

&lt;p&gt;大约看我呆了太久，女孩子笑了，轻声道：“天好热啊！”&lt;/p&gt;

&lt;p&gt;我回她一个自认为最儒雅的呆鹅式笑容，貌似随意地用肥厚的手指梳理了一下油搭搭的乱发，再以一秒一合的速度眨了下眼，最后以两秒一字的速度缓缓应道：&lt;/p&gt;

&lt;p&gt;“对呀，好热的天啊。”&lt;/p&gt;

&lt;p&gt;女孩闻言一笑，烈烈夏日空气顿化作清风拂体。&lt;/p&gt;

&lt;p&gt;“这么热的天，还看书啊？”&lt;/p&gt;

&lt;p&gt;我很沉着地点点头，故作镇静道：“嘿……瞎看呗！”，此时我的手中正拿着一本《潇洒出阁》，闻佳人发问，心中不禁大窘，封面已然湿透矣。&lt;/p&gt;

&lt;p&gt;“我也挺喜欢看席娟的书的。”&lt;/p&gt;

&lt;p&gt;“是吗？”声调不由提高了几分。&lt;/p&gt;

&lt;p&gt;“你在哪儿上学了？”&lt;/p&gt;

&lt;p&gt;在嘴角和耳际又做了次亲密接触后，我从牙齿缝里憋出句话来：“加里敦大学。”&lt;/p&gt;

&lt;p&gt;“喔。”那女孩似觉诧异，又有些失望。&lt;/p&gt;

&lt;p&gt;我有些不甘心，生平第一次被美女主动搭讪，就这般无疾而终。于是使出我的撒手锏，用蒋昌建般浑厚的嗓音，缓缓吟道：“谁言人类的精神家园已然花果飘零，看这烈日当空，未料除闲人于此瞎逛，亦有如斯佳人未肯稍弃亲近自然之机。”&lt;/p&gt;

&lt;p&gt;不出我的意料，那女孩一愣之后，忽地掩嘴而笑。但出乎我的意料是，那是一串止不住的笑声，从她那纤细的手指间隙中汩汩而出。若纯以声音论，那笑声像银铃，像黄莺，像百灵（当然，我并不知道黄莺和百灵是不是一种鸟），像火锅旁的冰啤酒，像何伟炸的花生米旁的枝江大曲，像一中球场上那青青的草，还像什么来着……&lt;/p&gt;

&lt;p&gt;只是若这笑声是因我而发，那未免就有些难堪了。我皱了皱眉，以示我的不爽。却闻笑声不止，间有俏声道：&lt;/p&gt;

&lt;p&gt;“怎么你的声音忽上忽下，就像坏了的黑管一样。”&lt;/p&gt;

&lt;p&gt;提到黑管，不由想起了一位同学，听说他在大学里就学这个的。也因如此，我才知道黑管是个乐器。我一面想着，却未料一面就说了出来：&lt;/p&gt;

&lt;p&gt;“我知道黑管是件西洋乐器。”&lt;/p&gt;

&lt;p&gt;她一愣，又笑了起来。我也只好陪笑，但坚决不陪别的。&lt;/p&gt;

&lt;p&gt;她用双手把头发向后拢了拢，用那条花手帕扎了起来，坐了下来，饶有兴致地看着我。&lt;/p&gt;

&lt;p&gt;饶有兴致！我敢用我父亲的人格发誓，她只是觉得我很莫名其妙，绝不可能对我有什么意思。&lt;/p&gt;

&lt;p&gt;不过我并不反对在这样一个炎热的下午，有这样一个女孩陪我晒太阳，虽说这真的有些莫名其妙。&lt;/p&gt;

&lt;p&gt;她又向我手上的书饶有兴致的看了一眼。&lt;/p&gt;

&lt;p&gt;我强颜道：“我姐姐在医院住院，给她借去看，医生又不准。所以……”&lt;/p&gt;

&lt;p&gt;她做出一副恍然大悟的神情，眼神中却带着一抹俏皮的调笑之色。&lt;/p&gt;

&lt;p&gt;当我正要做进一步解释的时候，她笑着说：“其实席娟的书真的挺好看，风行两岸三地，清新可人，人称冰淇淋小说。”&lt;/p&gt;

&lt;p&gt;说话的神情，颇似江苏文艺出版社的发行商。&lt;/p&gt;

&lt;p&gt;于是，这下轮到我笑了。&lt;/p&gt;

&lt;p&gt;对了，冰淇淋小说。对了，她的笑，就像夏天里的冰淇淋&lt;/p&gt;

&lt;p&gt;正当我回味在冰淇淋的甜美中时，却忽然发现了一个危险的讯号。只见这女孩向我发出了一个蠢蠢的笑容。我心一紧，却听她甜甜道：&lt;/p&gt;

&lt;p&gt;“今天天真热，如果能吃上冰淇淋就好了！”&lt;/p&gt;

&lt;p&gt;我搔搔头，好生不解，只觉眼前这似乎应该是酒吧里的情节，而且女主角一般都会说：“嗨！能请我喝杯妈爹的吗？”&lt;/p&gt;

&lt;p&gt;虽说老爸，老妈的东西都挺贵，但毕竟气氛合宜，像这般在烈日之下的滨江公园，一个年轻娇俏的女孩子向一个认识不到五分钟的胖男人“强要”那不值钱的冰淇淋吃，悠悠苍天，此何人哉？&lt;/p&gt;

&lt;p&gt;不过看她的打扮，怎么也比我有钱啊。我想到了生命的真谛，不由困惑了。（扯淡，哪想的到那儿去。）&lt;/p&gt;

&lt;p&gt;虽说我不介意请美女吃吃冰淇淋，聊聊天，因为想像中那种感觉应该是好极了。但当我用手轻拍自己的腰包后，便不由学起那齐什么王来，用最自然的口气，最不自然地接了下去：“这么热的天，你一个女孩子跑到这儿来干吗，不怕晒黑了吗？”&lt;/p&gt;

&lt;p&gt;女孩子很执著地望着我。&lt;/p&gt;

&lt;p&gt;“能请我吃冰淇淋吗？”&lt;/p&gt;

&lt;p&gt;相信我，我从未遇到过这般不知头尾的事情。&lt;/p&gt;

&lt;p&gt;恰好在这时，一个卖冰棍的小贩吟唱着冰淇淋之歌从我们身边走过，他以军情局特务的敏锐嗅觉，觉察出了这看上去毫不般配的男女之间，似乎将要给他创造无限商机。&lt;/p&gt;

&lt;p&gt;面对着小贩饥渴的眼神，再回头看看她比小贩还饥渴的眼神，我在心中浩叹一声，认输了吧。&lt;/p&gt;

&lt;p&gt;“来个蛋卷！”&lt;/p&gt;

&lt;p&gt;小贩正色道：“美怡登的脆皮又出新品种了。！&lt;/p&gt;

&lt;p&gt;“来个蛋卷！”&lt;/p&gt;

&lt;p&gt;“新种脆皮，好吃的很！”一口四川腔。&lt;/p&gt;

&lt;p&gt;龟儿子！我暗骂一句，还是老乡哩，这点面子也不给。&lt;/p&gt;

&lt;p&gt;就当我和小贩以绝世内功透过凌厉眼神暗自拼杀之际，那清清的声音，懒扬扬地说了一句：&lt;/p&gt;

&lt;p&gt;“你个老子的烦不烦啦！说蛋卷，就蛋卷啦！”&lt;/p&gt;

&lt;p&gt;付钱，撕纸，送入嘴中。&lt;/p&gt;

&lt;p&gt;我目瞪口呆地看着她，实未料到美女也会说粗话。&lt;/p&gt;

&lt;p&gt;“喂！别这么看着我。”她一边从红樱桃之唇内吐出丁香之舌品味着如雪美味，一边递给我一个不屑的眼神。&lt;/p&gt;

&lt;p&gt;“你一个大男人，怎么做事这么拖沓。是你买他的东西耶！怎么搞的好象你欠他似的。”&lt;/p&gt;

&lt;p&gt;我这才注意到她说话，神情都干净俐落，吃冰淇淋的速度更是让人望而生畏，让人好生……佩服。而且说的话听上去似乎也有几分道理，不过我还在纳闷，凭什么我要请她吃冰淇淋。&lt;/p&gt;

&lt;p&gt;我搔搔脑袋，闷头闷脑地问道：“为什么……”&lt;/p&gt;

&lt;p&gt;“为什么请我吃冰淇淋？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;她擦了擦手，再擦了擦嘴，站起身来，原地转了一圈，以手支颌，对我眨了眨眼，似是用尽全身之力强忍住笑，问道：“你看我怎么样？”&lt;/p&gt;

&lt;p&gt;我老老实实答道：“生平未见之美女。”&lt;/p&gt;

&lt;p&gt;她很诚恳地点点头，道：“一来证明你近视的度数不是太高。二来说明美丽的东西总是不容易被掩盖的。”&lt;/p&gt;

&lt;p&gt;接着又是一串银铃似的笑声，笑声之下是有些失神的我。&lt;/p&gt;

&lt;p&gt;她坐在了我的身旁，满是笑意地望着我。我这才看清了她的容貌。在心里暗赞了一声：“真她妈生的漂亮！”&lt;/p&gt;

&lt;p&gt;她妈的确把她生的很漂亮。&lt;/p&gt;

&lt;p&gt;看着她那清亮的眼，俏直的眉，润红的唇，随风摇动的衣摆，阳光投射在草地上的细长的影子。我不知怎地，感到了一丝媚惑之意。此意与此女无干，纯是鄙人修行太低之故。&lt;/p&gt;

&lt;p&gt;“请你生平未见之美女吃个冰淇淋，有这么痛苦吗？”&lt;/p&gt;

&lt;p&gt;我回答的更老实了。&lt;/p&gt;

&lt;p&gt;“我缺钱花。”&lt;/p&gt;

&lt;p&gt;“你自己怎么不吃呢？”&lt;/p&gt;

&lt;p&gt;未待我回答，她已抢着大悟了。“真的是很缺钱花。”&lt;/p&gt;

&lt;p&gt;“好啦！看在你请我吃冰淇淋的份上，陪你聊会儿吧。”她以施舍的口气说道。接着伸了个懒腰，将双手合拢伸到裙后，肆意地伸展着身体，曲成了一个美丽的弧形，极具美感。&lt;/p&gt;

&lt;p&gt;我闻言本有些不悦，但看在她伸懒腰都伸地这么漂亮的份上，也就罢了。&lt;/p&gt;

&lt;p&gt;于是，开始聊天。&lt;/p&gt;

&lt;p&gt;本次聊天，从席娟的小说开始，说到台湾的言情市场，再哀叹武侠风潮的没落，亦悲于温瑞安的自我放荡，再到讥笑温瑞安，真的以为自己是个武功高手，还时常穿些功夫服，拍些恶照，损害我们的视网膜。再到痛骂成龙的崇洋媚外，又很痛心吴宇森地堕落，又一致同意发哥发福之后果然更有男人魅力，并共同声讨李安很是老土。&lt;/p&gt;

&lt;p&gt;说起李安曾导过理智与情感，就一同可惜没看过原著，便很有默契地认为外国小说实在是很乏趣味。&lt;/p&gt;

&lt;p&gt;当然也偶有分歧。她说初看废都时，兴奋地想找朋友来研讨。我说你那还不如去看往事回忆录。她问我那是什么，我愣了一愣，她又抢着大悟，脸红了一红。&lt;/p&gt;

&lt;p&gt;于是不谈小说了，说起了九九的鸭头很进味，又说九九九的鸭头大概是九九的徒弟做的。她说三十八块钱一斤的香辣蟹，只有果园路那家做的比较好。我说二十块钱一锅的肥肠，还是要到四零三底下去吃。她说看见桌上的男人喝酒时，她便很想喝鲜橙多，主要原因是因为看别人喝酒，她的胃也会跟着不舒服。我说我喝多了之后，也很想喝鲜橙多，并且主要的原因是因为做广告的那个女孩很吸引我。&lt;/p&gt;

&lt;p&gt;她说看见迪吧里的那些小女孩摇头晃脑，很恐怖。我摇头晃脑一番后说，其实迪吧我还没去过。她说海王星的咖啡馆里有钢琴，不过弹地很糟糕，我终于兴奋地说，海王星？我进去过，十几个人拼了两张方桌，准备喝啤酒，结果被一个小资情调高涨的女同学带着落荒而逃。&lt;/p&gt;

&lt;p&gt;本次聊天还聊了很多，最终结束于我的一句不合时宜的问话：&lt;/p&gt;

&lt;p&gt;“你这么漂亮的女孩子，居然和我一样，这么有空？”&lt;/p&gt;

&lt;p&gt;她抿着嘴笑了笑，笑应该是对着我笑的，眼神却像是漂到了别的地方。她说了最简单的六个字，也是最能说明问题的六个字：“&lt;/p&gt;

&lt;p&gt;“送一个朋友走了。”&lt;/p&gt;

&lt;p&gt;原来气氛的变化，远远迅疾过气温的变化。&lt;/p&gt;

&lt;p&gt;她站起来，给了我一个温柔的笑容，学着松隆子的模样，把脑袋微微一侧，轻声道：“我得走了，谢谢你的冰淇淋。”&lt;/p&gt;

&lt;p&gt;我也站了起来，给了她一个平生最温柔的笑容，用轻到听不到的声音说道：“谢谢你陪我这个无聊人聊天。”&lt;/p&gt;

&lt;p&gt;（对不起，平生最这三个字，似乎又有些滥用了。不过我经常就是这样的。）&lt;/p&gt;

&lt;p&gt;“再见！”&lt;/p&gt;

&lt;p&gt;古龙说过，再见的意思往往就是不再见面。这意思我懂，但从未遇到过，今天和这不知名的女孩，应该算是一例吧。我有些恼火地想着。&lt;/p&gt;

&lt;p&gt;已走出十几步的她，忽然转过身来，把手插在那大花裙子前面的大口袋里，侧着脑袋想了会儿，喊道：“请无聊人说出自己的三大优点。”&lt;/p&gt;

&lt;p&gt;我笑了笑，喊道：“穿花裙子的花姑娘请先。”&lt;/p&gt;

&lt;p&gt;“我的第一个优点是漂亮，妈妈生的；我的第二个优点是美丽，爸爸养的；我的第三个优点是可爱，自己装的。”&lt;/p&gt;

&lt;p&gt;“那么我的第一个优点是老实，姐姐打出来的；我的第二个优点是诚恳，妈妈教出来的；我的第三个优点是木讷，一个姓袁的混俅老师逼出来的。”&lt;/p&gt;

&lt;p&gt;“那好，无聊人，真的再见了哟！”&lt;/p&gt;

&lt;p&gt;“很好，花姑娘，可以再见了耶！”我从不知道，一旦面对美女，我的语调也可以这样肉麻。&lt;/p&gt;

&lt;p&gt;她回头走了，一边背着向后摆手，一边说道：“再说一句话，你长的有点儿像ＪＨＴ，就是胖一些。”&lt;/p&gt;

&lt;p&gt;ＪＨＴ是谁？我不知道，不过有人说自己跟帅哥的区别只是胖一些，我已是感激涕零了。&lt;/p&gt;

&lt;p&gt;不知是哪里来的灵感，我大声吼道：“83４８０６５！”&lt;/p&gt;

&lt;p&gt;她愣了一愣。&lt;/p&gt;

&lt;p&gt;“我的电话号码。”&lt;/p&gt;

&lt;p&gt;她回头看了我一眼，忍不住笑了起来，似乎觉得真的很好笑。不过细细想来的确很好笑，从未见过那个男人用我这般愚蠢的方式，进行这种工作，似乎有些乾坤易位的感觉。&lt;/p&gt;

&lt;p&gt;“陌生人的电话号码，我一般是记不住的。”&lt;/p&gt;

&lt;p&gt;我摊摊手，做洒脱状，道：“无所谓啦。记不住，是你的幸运。万一记住了，就是我的幸运。”&lt;/p&gt;

&lt;p&gt;她又笑了，真是个爱笑的人，而且抿着嘴笑的样子真的有点儿傻傻的……不过我喜欢。&lt;/p&gt;

&lt;p&gt;老天爷其实并不公平。&lt;/p&gt;

&lt;p&gt;比如说把人类生生地分成了两性，地位却有些悬殊。本来男人喜欢女人，女人喜欢男人是天公地道，若强要逆势而为，的确是有些糊涂。但我很不服气的是不喜欢女人的男人都被称作阴阳人，成为包龙星嘴下的烂腐。而不喜欢男人的女人，有个男人却给取个名字叫水母阴姬，笔下满是崇拜之情。另一个不喜欢男人的女人名字更夸张，居然叫什么日后。&lt;/p&gt;

&lt;p&gt;想当太阳吗？我一向以为女人在她的男人面前才可能成为太阳。&lt;/p&gt;

&lt;p&gt;还好，我是喜欢女人的。&lt;/p&gt;

&lt;p&gt;尤其喜欢美女。&lt;/p&gt;

&lt;p&gt;但只是远观而已。&lt;/p&gt;

&lt;p&gt;那时候的我，的确很无聊，曾经有一次坐二路车到九码头拜访亲友，却一直坐到了八一钢厂，只为了车厢前排坐着一个长相清秀的红衣少女。&lt;/p&gt;

&lt;p&gt;我更喜欢背着一个黑包，在晚上八点钟的时候，站在解放路的天桥上，看身边的红男绿女，看女人撒娇，看男人烦恼，自己还借着夜色的掩护傻笑。这虽有些病态，却也是消磨时光的好办法。&lt;/p&gt;

&lt;p&gt;看的人多了，自然难免有些伤心。不过伤心之后，还是照看不误，美其名曰：养眼。&lt;/p&gt;

&lt;p&gt;我一直以为那个冰淇淋女孩也只是偶尔出现的润洁滴眼露。唯一的区别是她曾和我说过几句话，虽说聊的很开心。&lt;/p&gt;

&lt;p&gt;虽然以无穷的勇气，无耻的决心告诉了她我的电话号码，但我并不以为会有什么后文，而且的确也没什么后文。&lt;/p&gt;

&lt;p&gt;于是这个美女就像钞票一样，从我的生活中消失了。&lt;/p&gt;

&lt;p&gt;我没有什么不甘心的，邂逅这种浪漫的桥段，我从未期待过。&lt;/p&gt;

&lt;p&gt;唯一有些放在心上的，是她说我和ＪＨＴ长的有些像。&lt;/p&gt;

&lt;p&gt;要知道，我的同学们都说我长的像尹相杰。&lt;/p&gt;

&lt;p&gt;ＪＨＴ是谁？莫不是亚洲第一美男元彬的英文名？&lt;/p&gt;

&lt;p&gt;于是在之后的十几天里，我拼命地向我那几个读高中的小侄女打听这位明星是谁，却未料到以明星当饭吃的她们也是一脸惘然。&lt;/p&gt;

&lt;p&gt;于是乎，我便产生了这样一个想法。&lt;/p&gt;

&lt;p&gt;这ＪＨＴ莫不是个商界年轻才俊？&lt;/p&gt;

&lt;p&gt;于是开始不顾书店老板的恶言恶语，拼命翻读商界，市场营销之类的书籍，每礼拜天晚上准时收看央视的夸富节目：对话。&lt;/p&gt;

&lt;p&gt;又是十几天过去了，仍是一无所获。&lt;/p&gt;

&lt;p&gt;现在已是八月的夏天，那个小资情调的女同学回来了。&lt;/p&gt;

&lt;p&gt;于是我到她家去了。&lt;/p&gt;

&lt;p&gt;用企望的眼光向她询问。&lt;/p&gt;

&lt;p&gt;“ＪＨＴ？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;她一面擦着滴水的头发，一面毫不避嫌地在我面前往脸上抹些不知名的白色流质体。&lt;/p&gt;

&lt;p&gt;“JHTisJackhatetitanic。”&lt;/p&gt;

&lt;p&gt;我把这句半通不通的洋文重复了一遍，杰克恨泰坦尼克。什么玩意？&lt;/p&gt;

&lt;p&gt;看到我犹自不醒的神情。&lt;/p&gt;

&lt;p&gt;她娇嗔一声道：“就是痞子蔡的网名啦！”&lt;/p&gt;

&lt;p&gt;“痞子蔡是谁？”我仍自不醒。&lt;/p&gt;

&lt;p&gt;只见这位小资同学愕然之后，将那涂的本有些小巧的唇，又张成了保龄球道的洞口，白森森的牙齿象那十个木瓶一样齐刷刷地站立着，向我示威。&lt;/p&gt;

&lt;p&gt;我忍住对她所用牙膏的好奇，以及将拳头送入她嘴中的冲动，仍是谦逊地又问了一遍。&lt;/p&gt;

&lt;p&gt;她深深地叹了口气，似是决定原谅我的无知。然后说出了以下的一段话：&lt;/p&gt;

&lt;p&gt;“当代窜红最快的男性非艺人。感情最为充沛的网络写手。他最后悔没有早读到席慕蓉的无怨的青春。最喜欢喝的是爱尔兰咖啡，最喜欢的香水是DolceVita，……喔，这是意大利文，中文意思是甜蜜的日子，他的室友叫阿泰，他的女友叫轻舞飞扬，可惜死了……”&lt;/p&gt;

&lt;p&gt;虽说可惜，但我明明在小资同学的脸上，看到了一丝幸灾乐祸。&lt;/p&gt;

&lt;p&gt;不等她说完，我已冲下楼，直奔新华书店。至于长的如何，更是不用问了，单看小资同学那崇拜的神情，我便已是成竹在胸。&lt;/p&gt;

&lt;p&gt;到了书店，请小姐帮忙，找到了痞子蔡的书，我瞄了瞄封页，洛阳神茶，爱尔兰咖啡。我笑着问那位小姐，这人是不是卖饮料的。&lt;/p&gt;

&lt;p&gt;小姐一愣，仍是很和蔼地用宜普说道：“先生，你儿可以看哈捏本。很有名的，第一次亲密接触。”（注：宜普即yc地区通用的，带有yc特色的普通话。）&lt;/p&gt;

&lt;p&gt;我笑了笑，感谢她的热诚服务，然后把手插入口袋，两爪清风地离开，留下错愕的她。&lt;/p&gt;

&lt;p&gt;待从另一个有利用价值的朋友处搞到了这本书后，我用了半小时的时间读完。读后深受感动。翻到前页，发现有痞子蔡的照片。&lt;/p&gt;

&lt;p&gt;我认真的看了几眼，私下里并不以为他和我长的有些相像。&lt;/p&gt;

&lt;p&gt;他长的的确不像尹相杰，他比尹相杰还丑。&lt;/p&gt;

&lt;p&gt;伤了会儿心，然后洗了个澡，抽了根烟，躺到床上。那时是凌晨一点，老妈被我吵醒后，很诧异地问我：“今天出什么事了，这么早就睡觉。”&lt;/p&gt;

&lt;p&gt;我总不能说自己很伤心吧，于是温柔地笑着问她：“儿子是不是长的不怎么帅？”&lt;/p&gt;

&lt;p&gt;老妈笑了笑，拍拍我的脸，道：“我儿子长的比哪个都帅。”&lt;/p&gt;

&lt;p&gt;这就是女性和伟大女性的区别。&lt;/p&gt;

&lt;p&gt;有个同学谈过很多次恋爱，但他在酒桌上讲的往往只有一桩，一桩因某个停电之夜雨电交加，而促成的一段孽缘。他认为那次才是真正的浪漫到了极点。&lt;/p&gt;

&lt;p&gt;什么叫浪漫呢？由他多次的谈话中我总结了一下，有这么几条。一要一个喝醉酒的男人。二要有一个孤独的女人。三天要下雨。四天若不下雨，就一定要刮风。五若天不下雨，天不刮风，则天下一定要有大太阳。六下雨的时候没有伞，或只有一把小伞。七刮风的时候，一定要呆在风最大的江岸上，以便把她刮倒在你的怀里。八日光最烈的时候，你可以有最充足的理由请她回自己家喝杯冷饮。九身上一定要带钱。若无钱，虽小说上也曾有贫贱夫妻的浪漫，只怕也是会打折的。&lt;/p&gt;

&lt;p&gt;综上所述，我就不打算浪漫了。&lt;/p&gt;

&lt;p&gt;那些天老姐把福山雅治和常盘贵子演的邂逅借回来看。由于我只喜欢木村和松隆子，所以在吃完饭后，坚决地背着黑包出了门。&lt;/p&gt;

&lt;p&gt;我是一个很执着的人。&lt;/p&gt;

&lt;p&gt;晚上八点钟，又是解放路天桥。&lt;/p&gt;

&lt;p&gt;我站在天桥上想着邂逅这种事情，忽然有些伤心地发现，若邂逅的意思是指早前认识的男女在某种机缘巧合的情况下忽然碰见，那在yc城内，我是不大有什么机会和从前的朋友们邂逅了。别人伤心邂逅的理由，是怕遇不到某个想遇到的人。我伤心的理由却是怕遇不到一个认识的人。&lt;/p&gt;

&lt;p&gt;想到此节，我不由悲从心来，往天桥下过往的车流吐了一口痰。&lt;/p&gt;

&lt;p&gt;“这样不太好吧？”&lt;/p&gt;

&lt;p&gt;一个女子杵到了我的旁边，全然未知我正在念天地之悠悠。&lt;/p&gt;

&lt;p&gt;我不耐烦地看了她一眼，心中得出一个结论：“居然又是一个美女。”&lt;/p&gt;

&lt;p&gt;不过由于当街吐痰被美女看到，所以我的心情不好，决定不去理她。&lt;/p&gt;

&lt;p&gt;“无聊人，不记得我啦？”&lt;/p&gt;

&lt;p&gt;我想到了生命的真谛，不由有些疑惑。（对不起，又想到那儿了。）晚上八点，天已有些黑了，自己又是个近视眼，所以难免有些……&lt;/p&gt;

&lt;p&gt;待看清楚是那个长的像深田恭子的那个女孩，不知为何我忽然松了一口气。&lt;/p&gt;

&lt;p&gt;“花姑娘今天又这么有空。”其实她今天穿的是一件淡蓝底子上印着深蓝碎花的吊带裙，看上去很漂亮，叫她花姑娘，是有些委屈她了。&lt;/p&gt;

&lt;p&gt;“怎么你皇军的口吻总是不改。”她转过身来，靠在天桥的栏杆上，微微地翘起右脚，似是在地上划着什么字。&lt;/p&gt;

&lt;p&gt;我不理她，径直问道：“你在这边看我多久了。”&lt;/p&gt;

&lt;p&gt;“一朵花开的时间。”&lt;/p&gt;

&lt;p&gt;“俗！”我做呕吐状。&lt;/p&gt;

&lt;p&gt;她好心地把手并拢，摊在我的嘴前。&lt;/p&gt;

&lt;p&gt;“最近忙什么呢？”&lt;/p&gt;

&lt;p&gt;“忙着赚钱，花钱。你呢？”&lt;/p&gt;

&lt;p&gt;“忙着睡觉，吃饭。”&lt;/p&gt;

&lt;p&gt;“这回答也挺俗。对了……差点儿忘了你是加大毕业的，只是成天忙这些不烦吗？”&lt;/p&gt;

&lt;p&gt;“哎，你很龟毛哎。”&lt;/p&gt;

&lt;p&gt;“少假仙啦，是不是很寂寞啊。”&lt;/p&gt;

&lt;p&gt;“……”&lt;/p&gt;

&lt;p&gt;我们学习着言情小说里的情节，用极烂的西门町国语，进行着一场惨不忍睹的对话。双方都极力想轻描淡写地当作熟人一样来交谈，可问题是……&lt;/p&gt;

&lt;p&gt;我们并不很熟。&lt;/p&gt;

&lt;p&gt;“哎……”&lt;/p&gt;

&lt;p&gt;两人同时长叹一声气后，大概发现了大家都没有这种本领，于是便选择了沉默。&lt;/p&gt;

&lt;p&gt;于是我在桥上看美女，她在我身旁看我看美女。&lt;/p&gt;

&lt;p&gt;不知站了多久，我笑了笑，道：“如果一直这么立着，别人会不会以为这是两个雕像。”&lt;/p&gt;

&lt;p&gt;她轻轻笑了声，用手拨拉一下额前的刘海儿，道：“对啊，雕像的名字就是美女与野兽。”&lt;/p&gt;

&lt;p&gt;我摇摇头。&lt;/p&gt;

&lt;p&gt;“我以为是巴黎圣母院。”&lt;/p&gt;

&lt;p&gt;看着她的头发在夜色中乱乱地拂着，我很想把它缠在自己的指尖上，不是因为别的，只是想让它安份一些。&lt;/p&gt;

&lt;p&gt;不知为何，她今天的话比那天下午要少许多。&lt;/p&gt;

&lt;p&gt;也许是心情不好？&lt;/p&gt;

&lt;p&gt;“今天又等人吗？”&lt;/p&gt;

&lt;p&gt;“等你啊！”她向我投以温柔一笑，我以傻然一笑化之。&lt;/p&gt;

&lt;p&gt;忽地想起这些天的忙碌，连忙向她报怨：“我似乎比痞子蔡长的要周整些吧？”&lt;/p&gt;

&lt;p&gt;“你也就头发长些，这样很丑。”&lt;/p&gt;

&lt;p&gt;“头发长些，遮住脸，看上去就没那么胖了。你是女人，一定比我清楚。”&lt;/p&gt;

&lt;p&gt;她看了看我衣服上的油渍，叹口气道：“头发长，身上脏，不是要饭，就开画廊。”&lt;/p&gt;

&lt;p&gt;“我在家里天天做饭，哪比得上你们这些千金。”我搔搔头。&lt;/p&gt;

&lt;p&gt;“你会做饭？”她露出不信的神色。&lt;/p&gt;

&lt;p&gt;我暗自在心里为自己这最后的资本得意了一下，点了点头，然后痛心说道：“只是水平太差。像今天炒苦瓜，我放了些干辣椒，再加上你知道的，我怕苦……哦……对了你不知道，不过无所谓……于是我问老妈，可不可以放些糖。结果老妈把我痛骂了一番，说苦瓜不苦，那就不对了。”&lt;/p&gt;

&lt;p&gt;她很轻易地站到我母亲那一边，用力点了点头，问道：“后来？”&lt;/p&gt;

&lt;p&gt;“于是我老老实实地站到了锅前，把准备加的一小勺糖，换成了两勺。”我把站着的两脚前后错开，伸手一挥，大有老毛让人去下乡的气魄。&lt;/p&gt;

&lt;p&gt;她捂着嘴，忍住笑道：“结果？”&lt;/p&gt;

&lt;p&gt;“结果，全家一致公认，比妈炒了三十年的苦瓜要好吃。”&lt;/p&gt;

&lt;p&gt;“得出什么结论？”&lt;/p&gt;

&lt;p&gt;“结论是人人都怕苦，但人人都不说。”&lt;/p&gt;

&lt;p&gt;两人又笑了笑，又不知道该说些什么了，这就是冷场吧，我在心里想着。&lt;/p&gt;

&lt;p&gt;于是我说：“看过痞子蔡的洛阳神茶吗？”心想她可能对这个感兴趣。&lt;/p&gt;

&lt;p&gt;她愣了会儿，侧着脑袋想了会儿，像是忽然明白过来了，反问道：“是洛神红茶吧？”&lt;/p&gt;

&lt;p&gt;我一窘，心想这人写的书名也这么难记。&lt;/p&gt;

&lt;p&gt;“洛阳神茶？”她笑了笑，“还印度神油哩。”&lt;/p&gt;

&lt;p&gt;我又一窘，心知她正在颠覆我心中对漂亮女子的一贯看法。&lt;/p&gt;

&lt;p&gt;“为什么他要叫ＪＨＴ呢？”&lt;/p&gt;

&lt;p&gt;“因为他讨厌泰坦尼克，他的英文名却恰恰叫做杰克。”&lt;/p&gt;

&lt;p&gt;“很好，我也讨厌这部戏，我的英文名叫做萧峰。”&lt;/p&gt;

&lt;p&gt;“阿朱他老公，我虽然喜欢痞子蔡，但我更喜欢泰坦尼克。”她直盯盯地看着我，看样子是指望我临阵变节。&lt;/p&gt;

&lt;p&gt;不过我只能说声报歉了，我对泰片之仇恨，不知其何所来，却知其永无终。&lt;/p&gt;

&lt;p&gt;我清了清喉咙道：“曾经有个朋友，看电影去晚了，去的时候刚刚看到这部电影放了一半的时候。”&lt;/p&gt;

&lt;p&gt;“什么时候？”&lt;/p&gt;

&lt;p&gt;“就是杰克和那个女的第一次zuo爱的时候。”&lt;/p&gt;

&lt;p&gt;她用疑惑的眼神看着我，不知道我接下来会说什么。&lt;/p&gt;

&lt;p&gt;“我朋友一进电影院，眼睛都还没有适应黑暗，就看见银屏上，一个沾满灰尘的汽车里，隐隐约约有人影蠕动。待下个镜头切过来时，却突然！……”我做了个夸张的手势。“……看见一只瘦小的手掌，啪的一声打在那汽车玻璃上，激起阵阵灰浪，同时诡秘的音乐响起。”&lt;/p&gt;

&lt;p&gt;“然后？”&lt;/p&gt;

&lt;p&gt;“然后他就在电影院里睡着了。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“结论是，他直到两个月后，才知道这是一部爱情片，而非他所想像的那样，是个恐怖片。”&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;不知什么时候从天桥上走下来了，一直走到了车站，足足有一百米的距离，我看了看天色，大概走了大半个小时。&lt;/p&gt;

&lt;p&gt;然后她就走了，并且坚决要坐计程车。&lt;/p&gt;

&lt;p&gt;我虽然不知道她家住在哪里，但我以为在yc这个小城的范围内，坐计程车本身就是一种罪过。&lt;/p&gt;

&lt;p&gt;但她说她每个月有几百块钱的交通费，不坐白不坐。于是我说能不能顺便搭我一脚。她笑着说在晚上和陌生男子一同搭车，是一件很危险的事情。于是我放弃。&lt;/p&gt;

&lt;p&gt;帮她关车门的时候，我对她说：“83４８０６５？”&lt;/p&gt;

&lt;p&gt;看她一脸惘然，我解释道：“这还是我家的电话号码。”&lt;/p&gt;

&lt;p&gt;她笑了笑，就让司机开车走了。&lt;/p&gt;

&lt;p&gt;于是我也走了，回到了离车站二百米远的家里。&lt;/p&gt;

&lt;p&gt;由于又碰见了美女，所以心情不错，于是便洗了个澡，抽了根烟，坐在电脑前，开始看木村和松隆子的恋爱世纪，看得自己一个劲傻笑。&lt;/p&gt;

&lt;p&gt;这时候电话铃响了。我没去接，因为一般没人打电话找我。&lt;/p&gt;

&lt;p&gt;但这个电话是打给我的。&lt;/p&gt;

&lt;p&gt;电话的那头是一个久违了的大学同学。他很熟练地和我交换了一套来电必用的客套话，接着便直入主题：&lt;/p&gt;

&lt;p&gt;“她下个星期就要去美国了。”&lt;/p&gt;

&lt;p&gt;我哈哈一笑，道：“真的吗？太好了，这样看来，真是塞翁失马，焉知非福。至少我不用跟着过去吃热狗了。”&lt;/p&gt;

&lt;p&gt;他在那头阴笑着说：“有人陪她吃热狗。”&lt;/p&gt;

&lt;p&gt;我哈哈哈一笑，道：“那就更好了，免得一个人太无聊，又想起我来了。”&lt;/p&gt;

&lt;p&gt;接着挂了电话。&lt;/p&gt;

&lt;p&gt;她是我大学时的同学，我曾经以为会和我在一起的人。&lt;/p&gt;

&lt;p&gt;于是我又洗了个澡，点了根烟，仍然是坐在电脑前面，开始放蓝色生死恋，让操着国语的宋慧乔把自己感动个半死。&lt;/p&gt;

&lt;p&gt;电话又响了。&lt;/p&gt;

&lt;p&gt;我一把抢过来，准备吼人，却没人说话。&lt;/p&gt;

&lt;p&gt;半响之后，有个女孩子怯生生地问道：“你是无聊人吗？”&lt;/p&gt;

&lt;p&gt;“你才无聊！”此时的我很愤怒。&lt;/p&gt;

&lt;p&gt;“我们刚见过面的。”&lt;/p&gt;

&lt;p&gt;“噢……”我大悟。&lt;/p&gt;

&lt;p&gt;“有什么事吗？”&lt;/p&gt;

&lt;p&gt;“没什么事，只是看这个电话是不是打的通。另外……”她在电话的那头笑了笑，“……我失恋了，想通知一下别人。”&lt;/p&gt;

&lt;p&gt;听她的口气是认真的，只是在电话的那头笑个不停。&lt;/p&gt;

&lt;p&gt;我压住自己的不耐烦，询着惯例问道：&lt;/p&gt;

&lt;p&gt;“他喜欢你吗？”&lt;/p&gt;

&lt;p&gt;“我想他什么都不知道吧。”&lt;/p&gt;

&lt;p&gt;“笨蛋！不可救药的笨蛋。”我在心底骂了一句，却不知道是在骂谁。“既然未曾恋过，何来失恋，你这叫单恋美梦的破碎。”&lt;/p&gt;

&lt;p&gt;“是吗？”她的声音一下变的空洞起来。&lt;/p&gt;

&lt;p&gt;我这个师兄教导道：“痴情绝对是一种浪废，而且是一种奢侈的浪废。”&lt;/p&gt;

&lt;p&gt;“好吧，我会振作起来的。”她学着那些弱智的日本女人的口气说道。接着又是一串笑声，只是不知道她是在哭着笑，还是在笑着哭。&lt;/p&gt;

&lt;p&gt;不知怎地，对她忽然有了一丝怜悯，我开解道：“哭一场吧。”&lt;/p&gt;

&lt;p&gt;“我哭不出来！”&lt;/p&gt;

&lt;p&gt;我在心底骂道：“死撑什么，声音都发酸了。”&lt;/p&gt;

&lt;p&gt;“去租些碟子回来看，别看喜剧。看到别人快乐，越发会觉得自己伤心的不像是个人了。”&lt;/p&gt;

&lt;p&gt;“那看什么？”&lt;/p&gt;

&lt;p&gt;“看悲剧。最好是那种没什么社会意义的，让你一看就知道女主角要死了的那一类。看完了之后，你就会觉得阳光依然灿烂了。”&lt;/p&gt;

&lt;p&gt;“师兄介绍一下吧。”&lt;/p&gt;

&lt;p&gt;我有些不服这个称谓，虽说生平情场战事，皆以失败告终。&lt;/p&gt;

&lt;p&gt;“你可以看蛋糕上的草莓，第四集。恋爱世纪，第二集。还有蓝色生死恋的全套，不过最好是第六集和最后一集。”&lt;/p&gt;

&lt;p&gt;“好的，我记一下。”接着听见电话的那头传来沙沙地写字声。&lt;/p&gt;

&lt;p&gt;我很欣赏她的这种认真，虽说认真的有些过分。&lt;/p&gt;

&lt;p&gt;过了一会儿，她又说话了。&lt;/p&gt;

&lt;p&gt;“你现在干什么了？”&lt;/p&gt;

&lt;p&gt;“我刚洗了澡，这时候正在看碟子。”&lt;/p&gt;

&lt;p&gt;“看什么呢？”&lt;/p&gt;

&lt;p&gt;我愣了愣，停了一会儿，对着话筒木然地说道：“我正看着俊熙背着将死的恩熙在海边散步……”&lt;/p&gt;

&lt;p&gt;那边也停了会儿，然后她的声音传了过来：&lt;/p&gt;

&lt;p&gt;“那是最后一集吧。”&lt;/p&gt;

&lt;p&gt;也许是因为天气太热的缘故，每天晚上我都不大喜欢早上chuang，所以总有机会守在电话的旁边。&lt;/p&gt;

&lt;p&gt;也许是因为像她说的那样，她的床头就有一架电话，而她也不喜欢一躺下，就想起了那个男人。&lt;/p&gt;

&lt;p&gt;也许是因为她知道我也看蓝色生死恋，便以为我也和她一样，是个伤心人。&lt;/p&gt;

&lt;p&gt;也许她以为很多事情都不大方便向她的朋友说。&lt;/p&gt;

&lt;p&gt;也许她以为向陌生人倾述一番，倒是不错的选择。而我就是那个陌生人吧。&lt;/p&gt;

&lt;p&gt;也许其实只是因为我们都很无聊。&lt;/p&gt;

&lt;p&gt;所以，时不时的，我会在凌晨一两点钟，接到她的电话，没来由地东拉西扯一番。&lt;/p&gt;

&lt;p&gt;我们聊一切可以聊的事情，这也就意味着聊一切事情。&lt;/p&gt;

&lt;p&gt;我们经常在电话的两头交流一下看暴力电影的心得，看武侠小说的体会。不能免俗的，也会提到自己的过往。&lt;/p&gt;

&lt;p&gt;不过，一般是她说她的过往，她与她的男人的过往。&lt;/p&gt;

&lt;p&gt;虽说那人只是她的一个好朋友，一个兄长式的人物，但她在给我打电话时，坚持称呼为她的男人。&lt;/p&gt;

&lt;p&gt;我想，这大概是在寻求一种生活中不能实现的东西，估计她有些心理上的问题。&lt;/p&gt;

&lt;p&gt;听了很多遍她的故事，总觉得很无聊。不过是女人爱上男人，男人不爱女人，男人爱上女人，女人不爱男人，或是某人爱某人，但某人甲不敢让某人乙知道，或是为了某人乙已有某人丙，于是某人甲便决定瞒某人乙一生，让某人乙很无辜地成为某人甲在背后念叼上数万遍，以至头疼而亡的人。或是这些事情同时发生在三个人乃至四个人身上，总之就是在男人和女人之间加上爱或不爱这两种程式，自由组合就是。&lt;/p&gt;

&lt;p&gt;我告诉她，全世界有六十亿人，那么至少就曾经有过三十亿个这种故事。&lt;/p&gt;

&lt;p&gt;或许还是算少了。&lt;/p&gt;

&lt;p&gt;不过好在我们确实还有许多可以聊的东西。&lt;/p&gt;

&lt;p&gt;她是我所知道的第一个“非常”喜欢当莎丽遇见哈利这部电影的女人。&lt;/p&gt;

&lt;p&gt;其它女人，总是有各种各样的理由来讨厌这部电影。我一向认为是她们嫉妒这种大巧无工的爱情。&lt;/p&gt;

&lt;p&gt;据她说，我也是她所知道的第一个喜欢这部电影的男人。&lt;/p&gt;

&lt;p&gt;她说，其它男人总认为这只是小资情调泛滥之下的产物。&lt;/p&gt;

&lt;p&gt;她也是我所认识的第一个能用很平淡口吻和我谈灯草和尚写的太差的女人。&lt;/p&gt;

&lt;p&gt;其实我在电话的这头早已听的面红耳赤了，后来我告诉她，实际上从来没有异性和我谈过这方面的话题。&lt;/p&gt;

&lt;p&gt;她说我是第一个听她说了若干遍单恋之路故事，而没挂电话的男人。&lt;/p&gt;

&lt;p&gt;其实我在心里早已斥骂她比祥林嫂还烦，只是我很懒，也不觉得有必要打断她那可怜兮兮的叙述。至少这会让我觉得，我不是太惨，尤其是想到她长的还挺不赖的。&lt;/p&gt;

&lt;p&gt;她后来说，实际上她也从来没对别人讲过自己的故事。&lt;/p&gt;

&lt;p&gt;于是我和她都成了彼此的第一人。&lt;/p&gt;

&lt;p&gt;于是在电话里，她会这样告诉我：&lt;/p&gt;

&lt;p&gt;“我的男人回来了。”&lt;/p&gt;

&lt;p&gt;过了几分钟。她补充道：&lt;/p&gt;

&lt;p&gt;“他带着女朋友回来了。”&lt;/p&gt;

&lt;p&gt;又过了几天，她打电话告诉我：&lt;/p&gt;

&lt;p&gt;“我的男人走了。”&lt;/p&gt;

&lt;p&gt;过了几分钟。&lt;/p&gt;

&lt;p&gt;“他居然真的带着他的女朋友走了。“&lt;/p&gt;

&lt;p&gt;她男人的女朋友是她的好朋友。&lt;/p&gt;

&lt;p&gt;我总以为她会很伤心，而且也有道理伤心。但她通常只是在电话的那头很好听的笑几声，然后开玩笑如常。&lt;/p&gt;

&lt;p&gt;只是声音会像专供学校的学生奶一样，变的淡淡的。&lt;/p&gt;

&lt;p&gt;在电话里，我也会告诉她很多事，比如我的外甥女幼儿园放学回来了，她带着她奶奶在街上买的酸奶回来了。然后是外甥女又走了，她去上幼儿园了，她又带了瓶她妈妈拿回来的酸奶走了。诸如此类。&lt;/p&gt;

&lt;p&gt;于是她说我没良心。&lt;/p&gt;

&lt;p&gt;我说自己的良心让她给吃了。&lt;/p&gt;

&lt;p&gt;后来她开始喜欢在电话里和我对对子，虽说她的中国话比我还糟糕。&lt;/p&gt;

&lt;p&gt;她起头总爱说：“我是倾国倾城貌。”一边笑着，一边告诉我，她正在顾影自怜。&lt;/p&gt;

&lt;p&gt;于是我回她：“那我就是多愁多病身。”这是实话，我妈经常骂我在家里玩都快玩出病来了。&lt;/p&gt;

&lt;p&gt;她说：“妾住长干里。”&lt;/p&gt;

&lt;p&gt;我回：“将出玉门外。”&lt;/p&gt;

&lt;p&gt;她说：“郎骑竹马来。”&lt;/p&gt;

&lt;p&gt;我回：“吏捉刀笔裁。”&lt;/p&gt;

&lt;p&gt;她说：“绕床弄青梅。”&lt;/p&gt;

&lt;p&gt;我回：“逾墙折金兰。”&lt;/p&gt;

&lt;p&gt;她说：“两小无嫌猜。”&lt;/p&gt;

&lt;p&gt;我回：“独夫有人爱。”&lt;/p&gt;

&lt;p&gt;她急气败坏，说：“我是兰心蕙质。”&lt;/p&gt;

&lt;p&gt;我在电话这边摇摇头，说：“你是作茧自缚。”&lt;/p&gt;

&lt;p&gt;她沉默了会儿，恨恨地道：“你很没情趣。”&lt;/p&gt;

&lt;p&gt;我以为她生气了，不料，过了会儿，她淡淡的声音又从话筒里传来：&lt;/p&gt;

&lt;p&gt;“前些天又看见他，想起以前暗恋他的日子，真是觉得像我一个同学写的一句诗，梦还身前疑入梦。”&lt;/p&gt;

&lt;p&gt;我在心里说，你应该把暗恋前的以前二字去掉，然后扮出同情的语调说：&lt;/p&gt;

&lt;p&gt;“对呀！这很像我一个同学写的，几人憔悴几人归呀？”&lt;/p&gt;

&lt;p&gt;电话安静了会儿，然后她纠正道：&lt;/p&gt;

&lt;p&gt;“这一句对得全不工整。”&lt;/p&gt;

&lt;p&gt;在电话里，她一直称呼我为师兄，因为她总认为，我失恋的经验比她丰富多许多。&lt;/p&gt;

&lt;p&gt;但我一直很纳闷，我从来没对她说过自己的那些伤心事，她是怎么得出这个结论的。&lt;/p&gt;

&lt;p&gt;在电话里，开始时我还是称呼她为花姑娘，后来由于小泉桑又去跪那座庙，于是便简称她为花。&lt;/p&gt;

&lt;p&gt;挺恶心的一个名字，她为此对我大为脾气。&lt;/p&gt;

&lt;p&gt;不过，虽然她的模样我都记不真切了，但我一直有个印象：&lt;/p&gt;

&lt;p&gt;她的笑颜，依稀如花。&lt;/p&gt;

&lt;p&gt;她总喜欢问我喜欢过什么样的生活。我用尽所有煽情的话语还是不能满足她的胃口，只好发恨似地说了声：&lt;/p&gt;

&lt;p&gt;“最好是一回家就是饭在桌上，你在床上。”&lt;/p&gt;

&lt;p&gt;我是个好人，从不跟异性开这种有些不雅的玩笑的。&lt;/p&gt;

&lt;p&gt;她也是个很乖的女子，可以和我探讨黄色小说的写法，内容，却绝不容许我的言语中有一星半点那种思想在里面。&lt;/p&gt;

&lt;p&gt;所以她有两天没给我打电话。&lt;/p&gt;

&lt;p&gt;两天之后，她来了个急电问我，说她的男人又要回来了，而她这些天又长胖了半公斤，该怎么办？&lt;/p&gt;

&lt;p&gt;虽然我每天饭后和上厕所后的体重之差就要多过数个半公斤，但我还是认真地告诉她，应该去中药店买些大黄，泡水喝，可以迅速减肥，又可去体内虚火，保证不生青春小包。并且还言之凿凿地告诉她，当年我暗恋的一个女同学要回来了，我一急之下就是这样在五天之内瘦了八斤。&lt;/p&gt;

&lt;p&gt;但我忘了告诉她，后来我坐在那个女孩家里，不住地捧起笑脸，往厕所里狂奔。&lt;/p&gt;

&lt;p&gt;她听后似乎颇信以为真。只不知她真喝了没有。&lt;/p&gt;

&lt;p&gt;这件事一直到现在我都不敢问她。&lt;/p&gt;

&lt;p&gt;必须承认，我们聊天聊的很开心，虽然我活了二十几年，唯一的开心事就是聊天。&lt;/p&gt;

&lt;p&gt;我在电话的这头看黑衣人，告诉她威尔史密斯长的很帅，绝对比她的男人要帅。&lt;/p&gt;

&lt;p&gt;她躺在床上看那部什么初恋感觉百分百，告诉我梁咏琪真的很内骚，绝对适合我。&lt;/p&gt;

&lt;p&gt;她的偶像就是那个小威，一个黑头青。&lt;/p&gt;

&lt;p&gt;我当时挺喜欢梁咏琪，虽说后来看了绝世好BRA之后，很是同意二姐说的，此人无胸无脑的评语。&lt;/p&gt;

&lt;p&gt;有一次我告诉她，我有个朋友，也曾经在很长一段日子里，每天深夜和一个女孩聊天，经常一聊就是通宵。&lt;/p&gt;

&lt;p&gt;她问我：“后来呢？”&lt;/p&gt;

&lt;p&gt;“三个月之后，他们结婚了。”&lt;/p&gt;

&lt;p&gt;她咕咕地笑着，显然在话筒旁边捂着嘴，似乎是不相信。&lt;/p&gt;

&lt;p&gt;“结果呢？”&lt;/p&gt;

&lt;p&gt;“两个月之后，他们离婚了。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“我那个朋友是个浑俅。”接着我加了一句：“我不是。”&lt;/p&gt;

&lt;p&gt;我们一直以为自己会像两个经常聊天的陌生人一样，只是聊天。&lt;/p&gt;

&lt;p&gt;但我们忘了，陌生人是不会经常聊天的。&lt;/p&gt;

&lt;p&gt;于是有一天她说，出来见个面吧。&lt;/p&gt;

&lt;p&gt;我坚决反对，誓死反对。&lt;/p&gt;

&lt;p&gt;她在电话那头，闻言轻笑。风动银铃之声不绝于耳。&lt;/p&gt;

&lt;p&gt;她说又不是搞网恋，大家相貌的状况又是一清二楚，绝无见光死的危险，何必如此固执。&lt;/p&gt;

&lt;p&gt;我说最近更穷了，连吃冰淇淋的钱都骗不到了。&lt;/p&gt;

&lt;p&gt;于是她说要请我吃饭。&lt;/p&gt;

&lt;p&gt;地球人都知道，若有人请客吃饭，我向来会保有一贯的激赏之情。&lt;/p&gt;

&lt;p&gt;我们约在桃花岭宾馆对门，那一片郁郁葱葱的林子里见面。&lt;/p&gt;

&lt;p&gt;说郁郁葱葱大概不准确，因为那片林子的树木种的有些稀疏，非常不适合情侣幽会。&lt;/p&gt;

&lt;p&gt;我在林子里呆至头顶结网时，一个美女走近了我，&lt;/p&gt;

&lt;p&gt;当时我们相隔半米之遥，我用了半柱香的时间，才认出她来。&lt;/p&gt;

&lt;p&gt;我说：“你来晚了。”&lt;/p&gt;

&lt;p&gt;她看了看表，笑道：“我还来早了一刻钟。”&lt;/p&gt;

&lt;p&gt;我也笑了笑。&lt;/p&gt;

&lt;p&gt;我身上向来无表，因为无用。而且由于时间多的快发霉了，所以约会一向早到，尤其是赴宴会之约。&lt;/p&gt;

&lt;p&gt;我细细地打量着她。&lt;/p&gt;

&lt;p&gt;一头过肩的直发随意地挽在脑后，发上扎着一条手绢？丝巾？我不知道。身上穿着一件粉红色的紧身无袖短衣，鼓囊囊的胸前（托尔斯泰语）绘着一株极引人注目的花草。衣摆之下是一件像是白牛仔布做的热裤，此裤极短，险险裹住我们通常用来坐的部位。脚上蹬着一双我所以为的拖鞋，只是拖鞋前面还做了一个小布洞，似乎是专门为她尊贵的大脚趾服务。&lt;/p&gt;

&lt;p&gt;我盯着她清凉无汗面上微微拂起的刘海儿，还有那身上无所不在的充满惑意的曲线，捏住鼻子责问道：&lt;/p&gt;

&lt;p&gt;“请我吃饭，用得着下这么大本钱吗？想让我献血啊？”&lt;/p&gt;

&lt;p&gt;她愣了愣，笑道：“主要是为了配合师兄你的短小打扮嘛。”&lt;/p&gt;

&lt;p&gt;我愕然，看了看自己的装束，昨天刚剪短的刺发之下，是一件洗成遗物一般的格子短袖，穿的“休闲”式短裤，也因为身躯的日渐发胖而显得紧绷绷的，脚上蹬着一双上高中时候的凉鞋剪成的拖鞋，我一向很看中此鞋的舒适程度，但给人的感观却是大不佳。&lt;/p&gt;

&lt;p&gt;我俩的配合，似乎并不默契。&lt;/p&gt;

&lt;p&gt;我提议去得胜街吃铞仔，她闻言雀跃，说闻名已久，只是未去过。&lt;/p&gt;

&lt;p&gt;我看了她半天，始相信，这是一个与社会脱离已久的人。或者说，是和下层人民没有搞好干群关系的人。&lt;/p&gt;

&lt;p&gt;我叹了口气，带着她从培心路，肖家巷一路穿了过去。&lt;/p&gt;

&lt;p&gt;路上顺便买了一份体坛周报，一串香蕉，两斤三两的生姜，那是家里明天要的。&lt;/p&gt;

&lt;p&gt;我心安理得的指挥她给小贩付账。&lt;/p&gt;

&lt;p&gt;到了得胜街，随意寻了处小饭馆，我做主，点了二十块钱的豆花肥肠，四块五一瓶的枝江大曲。&lt;/p&gt;

&lt;p&gt;我深深了解细水长流的道理。&lt;/p&gt;

&lt;p&gt;或许我们在电话里，真的可以做到百无禁忌。但如此真切的面对面，却总让人容易产生不真实的感觉。&lt;/p&gt;

&lt;p&gt;于是，我开始喝酒，她开始看着我喝酒。过了一会儿，她开始往我杯子里倒酒。再过了会儿，她就开始从我的杯子里往外倒酒。&lt;/p&gt;

&lt;p&gt;她撑着额，看着小酒馆外不时走过的醉汉，忽地向我问道：&lt;/p&gt;

&lt;p&gt;“听你说话，看你行事，总以为你是个不大懂得在乎的人。&lt;/p&gt;

&lt;p&gt;只是，真的可以什么都不在乎嘛？”&lt;/p&gt;

&lt;p&gt;我打了个酒嗝，端起一杯淡到没有茶味的茶，漱了漱口，应道：&lt;/p&gt;

&lt;p&gt;“男女之间的东西，我倒是一向不大在乎的。……嗯，只是前些天，躺在床上睡不着，瞎想心事时，才发现老爸他闭着眼睛，也会伸手到我这边来摸一摸，看看我是不是盖着。等再过了会儿，又发现老妈开始做老爸一样的事情……”我用手尖轻轻点点她冰凉的鼻尖，笑道：“我可能会在乎这些。”&lt;/p&gt;

&lt;p&gt;也许是因为喝了酒的缘故，我说的分外认真。&lt;/p&gt;

&lt;p&gt;她听的也很认真，然后说了句我一直记得的话：&lt;/p&gt;

&lt;p&gt;“你得道了。”&lt;/p&gt;

&lt;p&gt;接下来的事情有些记不清楚了，好象是我就送她到解放路的二路车站去坐的。还买了两瓶鲜橙多，一人一瓶提在手上摇着。&lt;/p&gt;

&lt;p&gt;直到今天，我也不懂，为什么一定要送她到公共汽车站去坐计程车。怪哉。&lt;/p&gt;

&lt;p&gt;待回到家后，我用了两个小时的时间才从酒意中醒来。&lt;/p&gt;

&lt;p&gt;我死死地盯着身旁的电话，发现它一动不动，不知怎的，觉得非常搞笑。&lt;/p&gt;

&lt;p&gt;于是我在半夜十二点的家中，放声大笑。&lt;/p&gt;

&lt;p&gt;本以为那夜的酩酊之态会把她吓倒。没料到她的电话还是照常地骚扰我，而且似乎来的更频繁些了。&lt;/p&gt;

&lt;p&gt;只是现在在电话里，她开始喜欢自以为是的剖析我，不断进行着昨日之我与今日之她的对照，进行着她所谓的理性批判，妄图谋求湖大和加大辩论赛的最后胜利，对了，我忘了说，她是湖大毕业的。&lt;/p&gt;

&lt;p&gt;我说我只是想有尽可能多的时间承欢于父母之膝下，她说我的潜意识里是想榨干父母的最后一滴血汗。&lt;/p&gt;

&lt;p&gt;我说我的生活态度乃是生而无为，这是很有深度，很有历史渊源的一种活法。&lt;/p&gt;

&lt;p&gt;她说庄子也曾做过油漆协会的会长，老陶同志也曾努力地种田，虽说收成看样子不大好。而只有我好象是什么都不做似的，懒的连说话的声音都显得软软的。&lt;/p&gt;

&lt;p&gt;于是她判定我不是生而无为，而是生而无能。&lt;/p&gt;

&lt;p&gt;我原谅她的无知，须知无能这种评语是不可轻易予人的，尤其是男人。&lt;/p&gt;

&lt;p&gt;我经常被她的长篇大论搞的哭笑不得。于是我常恨恨地问自己，是什么时候变得和她这样熟了，熟的以至于都可以像李艳一样肆无忌惮地攻击我。&lt;/p&gt;

&lt;p&gt;更令我伤神的是，她已不再满足在电话里教育我，经常把我喊出去切磋一番。&lt;/p&gt;

&lt;p&gt;只是她总喜欢带着我去一些我不大愿意去的地方，一些据她说有她和她男人之间甜蜜回忆的地方。&lt;/p&gt;

&lt;p&gt;诸如，在北山坡的阿诗玛餐厅，他们吃了第一顿二人晚餐。&lt;/p&gt;

&lt;p&gt;（其实只是上初中的时候，办黑板报搞晚了，所以在那里吃了两碗面条。）&lt;/p&gt;

&lt;p&gt;又比如，在南榭的水塘边，他们第一次单独约会。&lt;/p&gt;

&lt;p&gt;（其实只是学校办活动，他们两个负责清场。）&lt;/p&gt;

&lt;p&gt;再比如，她的男人在交电大厦对门的马路上教她学的自行车。&lt;/p&gt;

&lt;p&gt;（这其实……对，这是真的。）&lt;/p&gt;

&lt;p&gt;不过好在每逢到了这种地方，她都是眉目含笑，巧笑倩兮。从不给我帮她擦眼泪的机会。&lt;/p&gt;

&lt;p&gt;这叫坚强，还是死撑？&lt;/p&gt;

&lt;p&gt;幸亏她还会主动地邀我吃饭，不然我不知道能忍受她多久，哪怕她长的挺漂亮。&lt;/p&gt;

&lt;p&gt;由于饭钱是她出的，所以地方都由我定。&lt;/p&gt;

&lt;p&gt;于是在yc市的街上常常可以看见一个憨拙拙的男人拖着一个傻兮兮的美女四处奔走于各大面馆之间。&lt;/p&gt;

&lt;p&gt;中午，我们吃文子面馆的炸酱面，她只吃豌豆面，不放辣椒。&lt;/p&gt;

&lt;p&gt;晚上，我们通常是带着在解放电影院门口买的卤豆干，臭豆干，炸豆干，直奔北门，享受那碗香喷喷的红油小面。&lt;/p&gt;

&lt;p&gt;逛街的时候，若饿了，就在街边摊上吃碗凉面。若是走在中山路附近，就只吃热干面，并且一定要到新开的那家。因为据她说，这是从原来的老热干面馆里下岗的几个女工办的，所以要多多支持。&lt;/p&gt;

&lt;p&gt;我不管这些，只是想到这家新开的六角钱一两，比老馆子要便宜一角钱。&lt;/p&gt;

&lt;p&gt;能吃饭，而不用付钱，乃是人生最大享受。&lt;/p&gt;

&lt;p&gt;只是有一天，在夷陵广场那惨兮兮的坟场灯光映照之下，她突然问道：&lt;/p&gt;

&lt;p&gt;“你什么时候去挣点儿钱，也请我吃碗面条？”&lt;/p&gt;

&lt;p&gt;我把叼着烟的脑袋猛地摇了摇，以示从无此意，接着便被眼前晃动的小红点吸引了自己的注意力。&lt;/p&gt;

&lt;p&gt;她轻轻地抠抠耳垂，疑惑道：&lt;/p&gt;

&lt;p&gt;“不对吧？虽然我没谈过恋爱，但也没听说过像你这么追求女孩的。”&lt;/p&gt;

&lt;p&gt;“追求？”我猛咳数声，烟头也掉在了地上。我赶紧拾了起来，以免给城监的罚款。&lt;/p&gt;

&lt;p&gt;“放心，哪怕我命犯天煞孤星，唯君能解此命数，我也不会有此想法。”&lt;/p&gt;

&lt;p&gt;我赶紧撇清。&lt;/p&gt;

&lt;p&gt;“为什么？难道我长的不漂亮吗？”&lt;/p&gt;

&lt;p&gt;她说着一笑，然后轻盈地转了个圈，任发丝飞扬。&lt;/p&gt;

&lt;p&gt;可问题在于，那天她穿了件及膝的白裙，一转之下，不止秀发飞泻，也会裙摆摇摇。&lt;/p&gt;

&lt;p&gt;我睁大了眼睛走上前去，帮她把裙摆按住，以防春guang外泄旁人之眼。&lt;/p&gt;

&lt;p&gt;“正是因为你长的足够漂亮，所以这才不可能。”&lt;/p&gt;

&lt;p&gt;她起先疑惑，继而释然，望着我坏坏的笑道：&lt;/p&gt;

&lt;p&gt;“师兄也会自卑的呀。”&lt;/p&gt;

&lt;p&gt;我撇撇嘴，以示不屑此言，我左脚向前半步，右脚转向半分，头略微后仰，把髋部提前，傲然道：“想当年，班上一娇俏女子赠我雅号：笑揖清风洗我狂。”&lt;/p&gt;

&lt;p&gt;她看着我的样子，先是一阵傻笑，然后细细想了会儿，忽然大悟道：“笑揖清风洗我狂？我想起来了，那是武状元苏乞儿里的一句歌词，噢，原来是送给天下第一大帮帮主的，”&lt;/p&gt;

&lt;p&gt;她坏坏地笑着，坏坏的看着我。&lt;/p&gt;

&lt;p&gt;我心底一阵发毛，谁知道这么帅呆了，酷毙了的一句话，居然是形容叫花子的。&lt;/p&gt;

&lt;p&gt;所以我决定马上到5460上面留言，好生责问一番晶晶姑娘。&lt;/p&gt;

&lt;p&gt;她拿我这脾气没法，只好叹着气，坐到了我的身旁。侧着脸望着我，笑道：&lt;/p&gt;

&lt;p&gt;“我们和恋爱中的男女有分别吗？”&lt;/p&gt;

&lt;p&gt;虽说这些天，我们几乎天天在一起，逛街的时候，手也会很自然的牵在一起，但我还是气壮山河地告诉她：&lt;/p&gt;

&lt;p&gt;“分别很大。比如你要是死了，我会很伤心，但绝不会想到陪你去死。你若是忽然消失了，我也会很伤心，但绝不会想去找到你。你若是忽然扑上来亲我一口，我只会以为是蚊子叮了一下，绝不会……”&lt;/p&gt;

&lt;p&gt;忽然瞧见她一副跃跃欲试的神情，我连忙说道：&lt;/p&gt;

&lt;p&gt;“再比如我不知道你的电话号码，甚至我们俩连彼此的名字都不知道。”&lt;/p&gt;

&lt;p&gt;的确，我们连彼此的名字都还不知道。&lt;/p&gt;

&lt;p&gt;但此刻看着她在夜空下白衣如雪，秀发伏肩，不知怎地忽然有了想知道她姓名的念头。&lt;/p&gt;

&lt;p&gt;“那师兄你叫什么名字？”&lt;/p&gt;

&lt;p&gt;“xf。”&lt;/p&gt;

&lt;p&gt;“？？？”&lt;/p&gt;

&lt;p&gt;“拂晓的晓，晓溪塔的晓。山峰的峰。”&lt;/p&gt;

&lt;p&gt;“挺不错的名字。”&lt;/p&gt;

&lt;p&gt;很好，她不像别的女人一样，总是追问我姓什么。&lt;/p&gt;

&lt;p&gt;“xf意指清晨的山峰，与日同生，与霞共辉的意思。”&lt;/p&gt;

&lt;p&gt;她摇摇头说：“不对。xf，说的是女人的眉毛。”&lt;/p&gt;

&lt;p&gt;接着她背了一句古诗。&lt;/p&gt;

&lt;p&gt;虽说这句诗我没听过，但仍是面上一窘。&lt;/p&gt;

&lt;p&gt;“你呢？”&lt;/p&gt;

&lt;p&gt;她似笑非笑地望了我一眼，轻声道：&lt;/p&gt;

&lt;p&gt;“叶轻眉，看轻天下须眉。”&lt;/p&gt;

&lt;p&gt;她俏皮地抹了一下自己的眉毛，&lt;/p&gt;

&lt;p&gt;偷偷看着无辜的我。&lt;/p&gt;

&lt;p&gt;那天晚上，回到家中，她打来电话。&lt;/p&gt;

&lt;p&gt;我问她，知道了彼此的名字意味着会发生什么事情？&lt;/p&gt;

&lt;p&gt;她似乎觉得我问的有些多此一举：&lt;/p&gt;

&lt;p&gt;“那我们自然就是朋友了。”&lt;/p&gt;

&lt;p&gt;“朋友？”我心里狂松一口气，连忙在电话这头哈腰称是。&lt;/p&gt;

&lt;p&gt;于是我们就是朋友了，很好很好的那一种。&lt;/p&gt;

&lt;p&gt;必须承认，叶轻眉同志是一个好同志。&lt;/p&gt;

&lt;p&gt;至少对我而言，她可以为我提供无来由的饮食供给，可以让我稍微摆脱一下无所事事的生活状态，可以锻炼我那两寸半长的许久未练过的将烂的滑舌，可以让我回忆起牵女孩子小手是一个什么感觉，可以让我重温好为人师的怪癖，可以让我幻想自己是在谈一场从天上掉下来的恋爱。&lt;/p&gt;

&lt;p&gt;不过我很清醒地知道，天上从来没掉下过林妹妹，若有，也是掉到了宝玉的怡红院子里。&lt;/p&gt;

&lt;p&gt;在我的记忆中，唯一从天上掉到我床上的，只有蟑螂而已。&lt;/p&gt;

&lt;p&gt;这是件真事，自那天起，我便和家中的蟑螂势不两立。所以现在它们在我家里的处境非常凄凉，欲死不能，生而不爽。&lt;/p&gt;

&lt;p&gt;不过至少，我现在可以几乎天天看见一张纯净的脸，这让我很容易地就陷入某种自己很喜欢的幻想中。最关键的是，这张脸上，总是带着笑意，无穷无尽的笑意。&lt;/p&gt;

&lt;p&gt;总之，还是那句老话：我喜欢。&lt;/p&gt;

&lt;p&gt;曾经有个中年人，在他三十六岁生日的酒桌上告诉我：&lt;/p&gt;

&lt;p&gt;“xf啊，要好好过日子，人一过二十之后，这日子就跟飞一样的就跑了。当我还没明白是怎么回事，就发现自己已经是孩子他爹了。”&lt;/p&gt;

&lt;p&gt;那年我十八。&lt;/p&gt;

&lt;p&gt;虽说我一直牢记前辈的惨痛教训，但仍然没能阻止日子自己飞走。&lt;/p&gt;

&lt;p&gt;我记得好象前不久香港才回归，怎么一晃又要跨世纪了。&lt;/p&gt;

&lt;p&gt;我很担心自己搞不好哪天一觉醒来，发现自己也是孩子他爹了。&lt;/p&gt;

&lt;p&gt;我曾经总结过，之所以二十岁后的日子会过的快，是因为这一段时间人会过的很疲沓。谈恋爱的没了激情，搞事业的，还来不及培养野心，读书的往往在想鸡阿姨，每天的日子似乎都是这样在过。书还是那几本书，公司还是那个公司，路也还是那条路哟，女朋友都还是那个女朋友，没法换。&lt;/p&gt;

&lt;p&gt;机械的重复，永远是谋杀时间的良策，比如钟表。&lt;/p&gt;

&lt;p&gt;好在东方红，太阳升，中国出了个叶轻眉。&lt;/p&gt;

&lt;p&gt;她绝不会让你觉得和她在一起的时间很无聊，她只会让你觉得非常无聊，无聊地可以让时间停摆。&lt;/p&gt;

&lt;p&gt;第二天，天下雨，她拉着我满大街的飞奔，对街道两旁畏畏缩缩躲在屋檐下的人们投以同情的一笑。然后，不顾那些人们对被她拖着的我的同情，从四新路一直跑到滨江公园那两个烂亭子。&lt;/p&gt;

&lt;p&gt;然后她看了我一会儿，很生气地对我说：&lt;/p&gt;

&lt;p&gt;“你怎么还不脱衣服啊。”&lt;/p&gt;

&lt;p&gt;我大惊之下，早失色心。&lt;/p&gt;

&lt;p&gt;“喂，我很冷耶。”&lt;/p&gt;

&lt;p&gt;她很不耐烦地说，一点都不懂撒娇是什么意思。&lt;/p&gt;

&lt;p&gt;我在心里暗骂一句自找，然后解释道：“你没看见我的衣服全湿了。”&lt;/p&gt;

&lt;p&gt;她摇头以示不在乎。&lt;/p&gt;

&lt;p&gt;于是我叹、叹、叹，叹这女人弱智，脱下像防洪大堤上的编织袋一样的短袖，拧了拧，递给她套上。&lt;/p&gt;

&lt;p&gt;于是亭子里就出现了一个吊带裙外套着件**的短袖，而且似乎还颇为享受的美女，还有一个浑身哆嗦，胸有赘肉的男人。&lt;/p&gt;

&lt;p&gt;这等场景绝对是千古难见的。&lt;/p&gt;

&lt;p&gt;于是我张开猫头鹰的眼睛，透过水朦朦的眼镜，尴尬地回应着四周投来的好奇目光。&lt;/p&gt;

&lt;p&gt;这时候她打了个喷嚏，声音小小的，好可怜。&lt;/p&gt;

&lt;p&gt;于是我明智地打了数个喷嚏，声音颇为张狂，好可怕的那种。&lt;/p&gt;

&lt;p&gt;她望了我一眼，才回过神来。&lt;/p&gt;

&lt;p&gt;我可怜兮兮地通知她：&lt;/p&gt;

&lt;p&gt;“好象感冒了。”&lt;/p&gt;

&lt;p&gt;于是，她的同情心开始泛滥，不再坚持站在亭子里看雨景，喊了辆出租，把我送回了家。&lt;/p&gt;

&lt;p&gt;待我坐到了家中，不禁为刚才的高竿击节叫好，心想若不是使出此等计谋，只怕此时还在那个鬼地方示众。&lt;/p&gt;

&lt;p&gt;正当我兴高彩烈，准备晚上她打电话来的时候好好气气她时，一股酥麻无比的感觉，从两眼之间开始积发，在我还没反应过来时，一阵十二级台风，就从我的鼻孔里刮了出来。而且似乎还不解气，居然是一连刮了数次。&lt;/p&gt;

&lt;p&gt;在喷嚏连连中，我才认识到，自己真的是感冒了。&lt;/p&gt;

&lt;p&gt;我发誓，以后再也不糊弄她了。&lt;/p&gt;

&lt;p&gt;得知我生病的消息，她非常过意不去，在电话里对我温言安慰，让我很是得意。&lt;/p&gt;

&lt;p&gt;我从小便喜欢生病，一半是装的，一小半是真的，另一小半连我自己都搞不清楚是真的，还是装久了以后，搞糊涂了。&lt;/p&gt;

&lt;p&gt;所以我很清楚生病所带来的好处，以前可以不上学，现在是可以不洗碗，父母不会吼你，姐姐们不敢凶你。只是没想到现在又多了一个好处。&lt;/p&gt;

&lt;p&gt;可以听到叶轻眉很好听的声音，很小心地问你明天想吃什么。&lt;/p&gt;

&lt;p&gt;我告诉她：“鸭头和啤酒。”&lt;/p&gt;

&lt;p&gt;她在电话那头傻傻一笑，解释道：“丫头我不喝酒的。”&lt;/p&gt;

&lt;p&gt;我的命不好，生在十一月，所以读书的时候，在称呼上有些吃亏，高中班上虽然还有捷捷几个帅哥比我小，但女人却都比我们大，噢，好象还有小温也比较小。&lt;/p&gt;

&lt;p&gt;不过不管怎么说吧，总是很难把妹妹这个词喊出口，后来在大学里给李艳写信的时候，居然有时会错手写上个姐字。让人很是痛心。&lt;/p&gt;

&lt;p&gt;于是我很喜欢叫她们丫头，一方面表达一种首长关怀小鬼的亲切，一方面，也是想树立自己憨厚长者的形象。可喊了很多年后，发现一点儿用都没有。&lt;/p&gt;

&lt;p&gt;于是当她说可以喊她丫头的时候，我坚决反对。&lt;/p&gt;

&lt;p&gt;我说还是喊你花吧。&lt;/p&gt;

&lt;p&gt;她又抵死不从。&lt;/p&gt;

&lt;p&gt;可她的名字真的挺别扭，喊眉儿吧，太媚。喊小轻轻？又怕她会错意。喊轻眉？路人可能会上来问青梅多少钱一斤。喊小叶？同志般的关怀倒是体现出来了，我又怕她喊我一休哥。至于阿叶这个称呼更是不能用的，那一般是我见到圣婴出世，或世界末日时才会发出的惊呼。&lt;/p&gt;

&lt;p&gt;于是我决定叫她最常见，也是最通用的称呼。&lt;/p&gt;

&lt;p&gt;“喂！”&lt;/p&gt;

&lt;p&gt;她又反对，我只好说她的名字太古怪了。&lt;/p&gt;

&lt;p&gt;她在电话那头想想，也承认，并说这是她老爸取的，于是就让我喊她小眉好了。&lt;/p&gt;

&lt;p&gt;我想这肯定她老爸当年恢复高考时，想考中文系，而因为她的诞生而告吹的时候，一怒之下取了这么个名字。&lt;/p&gt;

&lt;p&gt;我总在想，是一个什么样的人能取出如此酸腐的姓名来。&lt;/p&gt;

&lt;p&gt;一个阳光明媚的下午，我们逛书店时，我把这个分析报告提交给她，她拿着本红袖招，听得吃吃直笑。然后正色告诉我，不能拿她父母开玩笑。说完后，又开始笑。&lt;/p&gt;

&lt;p&gt;于是我们很开心地拖着手在解放路上毫无意义的来回逛着。&lt;/p&gt;

&lt;p&gt;走到海鸥商店的时候，她喊我站住，然后把我头发上的一个纸片摘了下来。&lt;/p&gt;

&lt;p&gt;正当我备感温柔之际，她却猛地把我手甩开了。&lt;/p&gt;

&lt;p&gt;那一下用的劲儿可真大，直到今天回想起来，我的肩膀还隐隐作疼。（莫不是打字打的太多的原因？）&lt;/p&gt;

&lt;p&gt;我愕然地看着她一脸痴呆的表情。&lt;/p&gt;

&lt;p&gt;她一脸愕然地看着我的身后。&lt;/p&gt;

&lt;p&gt;于是我转头，看见一个长相温厚的中年男子，正充满疑问地看着我俩，于是我又愕然。&lt;/p&gt;

&lt;p&gt;然后看见她低首敛眉地轻轻唤道：“老爸！”&lt;/p&gt;

&lt;p&gt;老爸！于是我在愕然之后，也变得有些痴呆。&lt;/p&gt;

&lt;p&gt;我痴呆地看着那个男人，五秒钟后，很弱智地喊了声：“伯父，你好。”&lt;/p&gt;

&lt;p&gt;伯父？我以为我是谁？李嘉诚的儿子？喊的***这么酸。&lt;/p&gt;

&lt;p&gt;这位伯父很有深意！地看了我一眼，然后点点头，和小眉同志说了两句话，便像一个革命者一样，直挺着身板向前走去，头也不回。&lt;/p&gt;

&lt;p&gt;我估计他为了克制转过头来教训我一顿的冲动，一定用尽了全身的力量。&lt;/p&gt;

&lt;p&gt;待他走远后，我们二人同时瘫软在地。&lt;/p&gt;

&lt;p&gt;于是我们开始分析，她老爸会不会有什么错误的判断，&lt;/p&gt;

&lt;p&gt;最后得出的结论是：&lt;/p&gt;

&lt;p&gt;一定会有。&lt;/p&gt;

&lt;p&gt;小眉的理由是，她老爸看我的眼神像是在看一个傻女婿。&lt;/p&gt;

&lt;p&gt;我的理由恰好相反，我觉得她老爸的眼神，好象在审问一个诱拐她宝贝女儿的恶棍。&lt;/p&gt;

&lt;p&gt;不过虽然理由不大一样，但结论是一样的，她回家之后有麻烦了。&lt;/p&gt;

&lt;p&gt;然后她开始埋怨我，说我刚才的表现真的很像电影里那些男主角第一次见老丈人的模样。&lt;/p&gt;

&lt;p&gt;我连忙道歉，说那是因为紧张过度的原因。&lt;/p&gt;

&lt;p&gt;接着我提出藏在心里很久的疑问，能取出这样一个名字的人究竟是何方神圣。&lt;/p&gt;

&lt;p&gt;小眉指指街对面，告诉我，她老爸是市图书馆的。&lt;/p&gt;

&lt;p&gt;于是我释然。于是二人开始相视大笑。&lt;/p&gt;

&lt;p&gt;笑了会儿，我突然觉得有些不对劲，怎么也笑不出来了。&lt;/p&gt;

&lt;p&gt;不知为什么，我突然觉得这个场景好熟悉。好象很多年前就有过一次似的。&lt;/p&gt;

&lt;p&gt;于是我在漫天阳光的笼罩中开始回忆往事，越想越失神。&lt;/p&gt;

&lt;p&gt;失神之后，我问她：“请我唱卡拉圈可？”&lt;/p&gt;

&lt;p&gt;她是个很细心的人，连忙笑道：“小女子不胜荣幸。”&lt;/p&gt;

&lt;p&gt;我很感激。&lt;/p&gt;

&lt;p&gt;那天在包房里，我拼命地找齐秦的一首歌，我忘了名字，但记得歌词。&lt;/p&gt;

&lt;p&gt;总算在唱完三张专辑后，那首歌的调子响了起来。&lt;/p&gt;

&lt;p&gt;我像拿着手榴弹一样拿着麦克，左手抚胸，深情款款，运气憋出那股瓷盘打碎般的瓷性嗓音，认真的唱着：&lt;/p&gt;

&lt;p&gt;你的近况，陆续从朋友口中传到我耳畔，我拿什么条件能够将你遗忘，除非我们……多想不去想，夜夜偏又想……&lt;/p&gt;

&lt;p&gt;一曲唱罢，我把自己感动的唏嘘不已。&lt;/p&gt;

&lt;p&gt;回头看她，仍是满脸带笑，脸上尽是鼓励的神色。&lt;/p&gt;

&lt;p&gt;只是她的手帕还放在桌上，有些湿了。&lt;/p&gt;

&lt;p&gt;据她后来说，那天晚上，她家里开了个家庭大会，着重研究了一下她的交友问题。当她老爸把下午看到的情况说出来后，大家的反应各不相同。她哥哥先是准备提拳头来寻我，待后来想清楚自己妹妹已经二十出头了，又准备提瓶酒来寻我。她的老奶奶则很是激动，要请我去她家吃饭。她妈则在傻笑。&lt;/p&gt;

&lt;p&gt;听她说完后，我放声大笑，然后很无辜地问道：“真的要去吗？”&lt;/p&gt;

&lt;p&gt;她瞪了我一眼，说我想的美。&lt;/p&gt;

&lt;p&gt;其实我以为这是很痛苦的事。&lt;/p&gt;

&lt;p&gt;她又说已经解释清楚了，我只是她的好朋友，不过为了让她家人放心，便给我这个混混儿安排了个工作，一个异常恶心的工作：网络作家。&lt;/p&gt;

&lt;p&gt;我虽然早就是坐家了，但为了替她圆谎，便写了首五十一个字的诗，放到了某家网站上，然后不停地点击再alt加F4。&lt;/p&gt;

&lt;p&gt;不到数天，便有些不长眼睛的人奋勇跟进，居然挤进了排行榜的前十名。&lt;/p&gt;

&lt;p&gt;她拍拍我的头说，小伙子挺聪明的。&lt;/p&gt;

&lt;p&gt;我靠。&lt;/p&gt;

&lt;p&gt;于是我佯狂，靠在她的肩上。&lt;/p&gt;

&lt;p&gt;在以后的那十来天里，我经常带她到一中江边的那道斜坡上去，就是以前上学时我经常和何伟抽烟的那个地儿。&lt;/p&gt;

&lt;p&gt;她撑着额头看着我抽烟的英姿，问：“你在想什么呢？”&lt;/p&gt;

&lt;p&gt;我深吸一口烟，呲牙裂嘴地把白气吐出来，回味半晌，并不答话。&lt;/p&gt;

&lt;p&gt;她越看越入神。&lt;/p&gt;

&lt;p&gt;我有些受不了，说：“我这是在冒充孤独，模仿绝望。”&lt;/p&gt;

&lt;p&gt;她眼睛一下亮了，兴奋道：“嘿，真没想到你这么个人也能说出这么好玩的话来。”&lt;/p&gt;

&lt;p&gt;我扁扁嘴以示不屑，但想了想后，又解释道：“这两句词我在发的每个帖子里都要用一遍的。”我把手一摊，笑道：“不过这是个盗版。那还是上初中的时候，在报纸上看到的。好象是一个铁路系统的文青写的。”&lt;/p&gt;

&lt;p&gt;“嘁！”她颇为失望，“什么都说的这么白，多没意思。”&lt;/p&gt;

&lt;p&gt;我抠抠头说：“跟你第一次见面就说过，我这人最大的好处就是诚恳了。”&lt;/p&gt;

&lt;p&gt;她纠正道：“是木讷。”&lt;/p&gt;

&lt;p&gt;我不服气她的说法，告诉她，我有时候一天会遇见五个问路的，而且其中三个还都没带车钱。这说明我的样貌，给人的第一感觉就是可信。&lt;/p&gt;

&lt;p&gt;她又纠正道：“那叫易骗。”&lt;/p&gt;

&lt;p&gt;我扭过头去，三分钟不找她说话。&lt;/p&gt;

&lt;p&gt;由于我们通电话太勤了些，自然家里也发现了一些异常。比如老姐总在埋怨现在很少吃到我炒的苦瓜了。&lt;/p&gt;

&lt;p&gt;于是我在家里开始被一群姑婆们追问。逼不得已，我以人格起誓，说绝对没谈恋爱。&lt;/p&gt;

&lt;p&gt;结果发现，我的人格似乎有些卑下不可信。于是我改用我父亲的人格起誓，这才逃离了她们的包围。&lt;/p&gt;

&lt;p&gt;有时想起来，会发现小眉同志的确是一个不错的玩伴，或者说朋友。&lt;/p&gt;

&lt;p&gt;她不蹦迪，不上网聊天，不看电影，喜欢看席娟，看言情烂碟，看武侠小说，的确和我搭配的挺好。&lt;/p&gt;

&lt;p&gt;而且我们两人还都是那种极少见的弱智。&lt;/p&gt;

&lt;p&gt;记得有一天，家里来了亲戚，而她又约我出门，为了掌控我的行踪，老爸让姐夫哥把手机丢给我。姐夫很无辜地看了我一眼，我回他一白眼。&lt;/p&gt;

&lt;p&gt;然后逛到青少年宫的时候电话响了，&lt;/p&gt;

&lt;p&gt;然后我们俩人用了半个小时，也没搞清楚这手机是怎么用的。&lt;/p&gt;

&lt;p&gt;于是，只好散伙回家。&lt;/p&gt;

&lt;p&gt;顺便说句题外话，直到公元一九九七年，我才知道怎样打寻呼机，手机？更是没碰过的玩意。&lt;/p&gt;

&lt;p&gt;她虽然在这方面的弱智和我惊人地相像，但人却比我善良多了。&lt;/p&gt;

&lt;p&gt;这一点从我现在都不敢带她从解放路的天桥上过，就可见一斑。&lt;/p&gt;

&lt;p&gt;yc人都知道，那天桥上盛产乞丐。&lt;/p&gt;

&lt;p&gt;我告诉她，与其接济乞丐，还不如接济我。&lt;/p&gt;

&lt;p&gt;她皱皱眉说，怎么能把自己和乞丐相提并论呢？我想了想后，正色答道：“的确不应该，我现在的收入比他们还少。”&lt;/p&gt;

&lt;p&gt;她看着我，想了半响，无奈地点点头，算是承认了这个事实。&lt;/p&gt;

&lt;p&gt;不过我们也经常吵架，争论的焦点一般集中在梅格瑞恩到底该不该和比利克里斯托上chuang。&lt;/p&gt;

&lt;p&gt;她说情到浓时，自然难免。&lt;/p&gt;

&lt;p&gt;我说这完全破坏了那份感觉。&lt;/p&gt;

&lt;p&gt;她说最终圆满的结局证明了，这个床，上的有价值。&lt;/p&gt;

&lt;p&gt;我说结局是编剧写好了的，我只记得梅格瑞恩在完事后，咧着张大嘴，用鼻子长出一口气，活像一个刚生吞了自己丈夫的母螳螂。&lt;/p&gt;

&lt;p&gt;于是她恨恨地说了声；男人啊……&lt;/p&gt;

&lt;p&gt;于是我们两个同时把电视打开，同步播放影碟，一边盯着屏幕，一边拿着电话开始争吵。&lt;/p&gt;

&lt;p&gt;不一会儿，就看到哈利开始在街边上思念他的前妻了。&lt;/p&gt;

&lt;p&gt;电视里传来比利克里斯托那土拨鼠一样的声音：&lt;/p&gt;

&lt;p&gt;“我不知道是想念海伦，还是想念想念海伦的念头。”&lt;/p&gt;

&lt;p&gt;莎丽正准备上前安慰他，只见哈利用哲学家的风度思考了半秒钟后，像个白痴一样，无头无脑地说：&lt;/p&gt;

&lt;p&gt;“IMISSHELEN！”&lt;/p&gt;

&lt;p&gt;然后，小眉在电话的那头没了声音。&lt;/p&gt;

&lt;p&gt;我知道她一直在她的男人面前扮演那个最不懂事的，最傻兮兮的好朋友角色，我也知道她经常演的力不从心，知道她演的很辛苦，知道她在生活里实在是笑的太多了，又倔强的不肯哭，我知道她就像荔枝一样，最外面是鲜美而坚硬的壳，剥开后是柔嫩易伤的瓤，瓤里面裹着的是那颗苦苦的核。&lt;/p&gt;

&lt;p&gt;由于我喜欢我的朋友们多笑，不哭，于是连忙开始讲解那个诃契尼还是叫契诃尼的理论。&lt;/p&gt;

&lt;p&gt;就是那个说人的记忆最搞笑，得不到的东西记忆最深刻的那套玩艺儿，这套理论最关键的地方，就是什么尼说，没可能的感情付出最容易让人沉醉，因为总让你觉得对方的身上有无尽的宝藏供你挖掘，有无尽的秘密任你独享。&lt;/p&gt;

&lt;p&gt;她被我拙劣的讲解搞的笑出声来，问我怎么知道那个什么尼。&lt;/p&gt;

&lt;p&gt;我想了想后，记了起来，告诉她是中午在中央台看的第二起跑线里提到的。&lt;/p&gt;

&lt;p&gt;她很疑惑。&lt;/p&gt;

&lt;p&gt;于是我进一步解释道：“青春期性教育专题节目。”&lt;/p&gt;

&lt;p&gt;我和小眉总是像恋人一样的单独出来约会。我们也从不让双方的朋友圈子交杂其间，只是进行一对一的交流，俗称单挑。&lt;/p&gt;

&lt;p&gt;唯一有些遗憾的是，我绝没有恋人一方的那种权利，就是那种路漫漫其修远兮，吾将上下而……的权利。面对美女而做柳下惠，实为人生至痛。&lt;/p&gt;

&lt;p&gt;偶尔有一天，她喊我陪她去赴一个酒宴，我说为什么，她说她的男人回来了。&lt;/p&gt;

&lt;p&gt;于是我说好，然后我洗了个澡，找了两件姐夫哥当年和老姐斗争时的战袍，蹬上前天姐夫哥刚买的新皮鞋，揣上姐夫哥的诺基亚，虽说还不大会用。还上了点姐夫哥的咖哩水，噢不好意思，写错了。&lt;/p&gt;

&lt;p&gt;总之，是打扮的人模狗样的去了。&lt;/p&gt;

&lt;p&gt;她在酒店的外面接我，见到我的一身行头，很诧异地皱皱眉头，问道：“今天怎么穿成这副德行？”&lt;/p&gt;

&lt;p&gt;我挑挑唇边，道：“要冒充你的男朋友，总得下点儿本钱吧。我不怕丢脸，但很怕朋友因为我而丢脸。”&lt;/p&gt;

&lt;p&gt;她伸手捂住自己嘴巴，笑道：“你怎么这么聪明，我还没说，你就知道了？”&lt;/p&gt;

&lt;p&gt;“我是天才。”&lt;/p&gt;

&lt;p&gt;我向来持天才无用论。&lt;/p&gt;

&lt;p&gt;结果那天的酒席上，我发现自己真的很无用，面对那些酒席上比我还人模狗样的人们，我实在不知该说些什么，这位说自己当年的室友在加拿大买了个PLAYSTATION，结果没玩两天就坏了。那位则把周星驰的几句话换了几个宾语在那里背来背去，还有两位更是搞笑，居然说不知道安琪集团为什么到现在还不配股，颇为不满，待听说我有个同学在安琪，居然要我喊出来聊聊，把证券的这块业务让给他们做。&lt;/p&gt;

&lt;p&gt;天可怜见，我那位同学自己手上的一点内部股还不准卖哩。&lt;/p&gt;

&lt;p&gt;我说天才无用的另一个佐证是，自己这个天才被那些人看鲜花下的狗屎眼光逼的举杯应战，居然战局刚开，便已丢盔卸甲了。&lt;/p&gt;

&lt;p&gt;于是醉眼朦胧的我，并没能看清楚小眉那个迟到了的男人。&lt;/p&gt;

&lt;p&gt;只隐约有个印象，虽然比我高，但还是不高。不过长的确实比我帅。&lt;/p&gt;

&lt;p&gt;此处套用一句俗话：&lt;/p&gt;

&lt;p&gt;长的比我帅不叫帅，长的比我丑，那才叫真丑。&lt;/p&gt;

&lt;p&gt;后来小眉送喝醉了的我回家，到我家楼下两人分手前，她笑着对我说：“今天演的真不赖！”&lt;/p&gt;

&lt;p&gt;我傻笑一番，伸出大拇指，说：“我是临时演员，而你是影坛常青树，演技比我好。”&lt;/p&gt;

&lt;p&gt;知道明星什么时候会演砸吗？&lt;/p&gt;

&lt;p&gt;就像姜文和万梓良拍的那部恶片，说明他在没有了自己喜欢的东西后会演砸。&lt;/p&gt;

&lt;p&gt;知道明星为什么会演砸吗？&lt;/p&gt;

&lt;p&gt;就像周润发拍的和平饭店，那说明他潜意识里想断绝自己在香港的后路。&lt;/p&gt;

&lt;p&gt;知道小眉为什么会演砸吗？&lt;/p&gt;

&lt;p&gt;道理很简单，她失去了自己最喜欢的东西，然后发现后路原来早就断了。&lt;/p&gt;

&lt;p&gt;我接到她的那个电话，是在晚上九点钟，海霞马上要开始播新闻了。&lt;/p&gt;

&lt;p&gt;她很可怜兮兮地在电话里告诉我，她得到消息，她的男人要结婚了。新娘当然不是她，可问题在于，新娘也不是她的那个好朋友，听说是一个南蛮小妹。&lt;/p&gt;

&lt;p&gt;她说她并不伤心她的男人要结婚，只是觉得气不过怎么找了个这么个人。&lt;/p&gt;

&lt;p&gt;似乎为了证明这点，她在电话那头傻笑不止。&lt;/p&gt;

&lt;p&gt;然后我就听到了她的抽泣声。&lt;/p&gt;

&lt;p&gt;我第一次听见她哭，就在那个似乎应该一如平常的晚上。&lt;/p&gt;

&lt;p&gt;我并不是很担心她，只是觉得像电影里的情节，此时一般应该有个傻兮兮的男人守在一边。&lt;/p&gt;

&lt;p&gt;虽然我不傻，但我们是朋友，我对朋友向来很温厚，所以我觉得应该马上找到她。只是我想她不会告诉我她现在在哪儿的。装惯了坚强的人，在受伤后，总喜欢找一个没人知道的角落里去哭。&lt;/p&gt;

&lt;p&gt;于是我说：“你看你身边的江风一会儿向上吹，一会儿向下吹，世事如风，本无定数，何必执着呢。”&lt;/p&gt;

&lt;p&gt;她闷闷地答道是啊，只是江风好冷啊。&lt;/p&gt;

&lt;p&gt;于是我知道了她在江边。&lt;/p&gt;

&lt;p&gt;我看了看电视上的时间，接着说：“钟楼开始敲钟了吧，你看时间总是不停的，日子总要继续吧。”&lt;/p&gt;

&lt;p&gt;她说是啊，只是这声音好吵啊。&lt;/p&gt;

&lt;p&gt;于是我知道她在钟楼的附近。&lt;/p&gt;

&lt;p&gt;于是我知道了她是在南榭。&lt;/p&gt;

&lt;p&gt;那个据说是她和号称她男人的无辜朋友第一次约会的地点。&lt;/p&gt;

&lt;p&gt;于是在三分钟后，我出现在南榭的门口。&lt;/p&gt;

&lt;p&gt;直到今天，我还认为，这是我平生最聪明的一次举动。&lt;/p&gt;

&lt;p&gt;于是她很惊讶地迎接我的到来，很无助地靠在我的肩上。&lt;/p&gt;

&lt;p&gt;我笑着对她说：“今天晚上我的肩膀对你是免费的。”&lt;/p&gt;

&lt;p&gt;这句话，我是向何伟学的。&lt;/p&gt;

&lt;p&gt;果然有效，她笑了。&lt;/p&gt;

&lt;p&gt;于是开始陪她逛街，陪她喝酒，开始进行平日里是她做的工作，从杯子里往外面倒酒。不过区别在于，平日里她总是把我的酒倒在地上，而今夜是我把她的杯中物倒在了自己的肚子里，不能浪费，是吧。&lt;/p&gt;

&lt;p&gt;可她还是醉了，我也醉了，两人像酒鬼一样互相搀扶着在江边瞎逛。&lt;/p&gt;

&lt;p&gt;走到了大公桥那边，她突然伏在我的怀里哭起来。&lt;/p&gt;

&lt;p&gt;我轻轻地搂着她，穿过她的黑发的我的手，轻拍着她的肩。&lt;/p&gt;

&lt;p&gt;过了一阵，她平息了下来，用那双带着醉意却仍是美丽的眼睛看着我，喃喃地说道：“xf，你真是个好人。”&lt;/p&gt;

&lt;p&gt;用哈利的一个男性朋友的话讲，说一个人是好人，便意味着这人长的不咋的。&lt;/p&gt;

&lt;p&gt;一般的电影拍到这里就可以了，我也是这样认为。&lt;/p&gt;

&lt;p&gt;所以当她用那冰凉的胳臂环住我的颈，傻傻地说道：“来，亲我的嘴。”我一时没反应过来。&lt;/p&gt;

&lt;p&gt;过了小半晌，我打了个酒嗝，纠正道：“那叫吻。”&lt;/p&gt;

&lt;p&gt;她在我怀里扭动着身躯，我不知道这是叫撒娇，还是喝多了不大舒服。&lt;/p&gt;

&lt;p&gt;我好意地提醒她：“你刚刚吐了的。”&lt;/p&gt;

&lt;p&gt;于是她用踉跄的步伐冲过马路，买来了口香糖和矿泉水，用十秒钟的时间漱完口，嚼完口香糖，又嘟起了红红的唇。&lt;/p&gt;

&lt;p&gt;我深吸两口气，忽然想起了一句台词：&lt;/p&gt;

&lt;p&gt;“我只是刚好路过，你就要和我……我……牙都还没刷呢。”&lt;/p&gt;

&lt;p&gt;依照谢文砚的吩咐，以下删去二十一字……&lt;/p&gt;

&lt;p&gt;她无意识地看着我，忽然轻轻地说道：“我们是不是只能做朋友？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;然后她说：“那好，我们去找家旅馆，好吗？”&lt;/p&gt;

&lt;p&gt;我这才确定，她不止喝醉了，而且已经醉的人事不省了。&lt;/p&gt;

&lt;p&gt;只是她的发绕着我的耳，她的唇贴着我的颊，我的手抚着她的背。&lt;/p&gt;

&lt;p&gt;让我心思思。&lt;/p&gt;

&lt;p&gt;必须承认，那天夜里的我是有些无耻。虽说喝醉了，但还是有些无耻。&lt;/p&gt;

&lt;p&gt;于是我们开始在江边那条街上寻找地方。但由于经验方面的原因，二人一直是逡巡不前，对那些闪着光的招牌有些望而生畏。&lt;/p&gt;

&lt;p&gt;一直疲惫地走到一马路那里，她软软地靠在我身上，轻声骂了我一句：“你是男人哎，连开房都不会，真是个笨蛋。”&lt;/p&gt;

&lt;p&gt;我虽然已醉了，但还是回了句：“笑话，我是很纯洁的。”&lt;/p&gt;

&lt;p&gt;然后，我们同时注意到了街对面的一个招牌：烟草招待所。招牌的下面有四个小字：安全舒适。&lt;/p&gt;

&lt;p&gt;然后，我们四目互视，像那夜在天桥上一样，化为雕像长达半个小时。&lt;/p&gt;

&lt;p&gt;然后，她鼓起勇气，一个人走过去问房间多少钱一夜。&lt;/p&gt;

&lt;p&gt;小姐告诉她，是按床收费，不是按房间。&lt;/p&gt;

&lt;p&gt;一个床位三十五，双人间就是七十。&lt;/p&gt;

&lt;p&gt;然后她像蜗牛一样地走了回来，&lt;/p&gt;

&lt;p&gt;然后她说没带钱，让我去交钱。&lt;/p&gt;

&lt;p&gt;然后我说我也没带。&lt;/p&gt;

&lt;p&gt;于是我拦了辆的士送她回家。&lt;/p&gt;

&lt;p&gt;然后她很自然地掏出了皮包里的钞票付了车钱。&lt;/p&gt;

&lt;p&gt;然后我又拦了辆的士回家。&lt;/p&gt;

&lt;p&gt;然后我很后悔地摸出今天家里刚交上来的生活费付了车钱。&lt;/p&gt;

&lt;p&gt;可能是那夜酒喝的太多了的原因吧，我们有三天没见面。&lt;/p&gt;

&lt;p&gt;再见面的时候，我们约在儿童公园。&lt;/p&gt;

&lt;p&gt;儿童公园里最出名的，便是那些一个疯胜一个的气功爱好者，以及湖心亭里那几位不惧风雨的老同志，一声凄厉过一声的吊嗓子声。他们十分爱好伟大祖国的历史遗产，却忘了更多的人一向是拒领这份遗产的。&lt;/p&gt;

&lt;p&gt;我和小眉见面的时候是下午，那时候公园里非常的安静。&lt;/p&gt;

&lt;p&gt;我忽然十分想念那些老同志发出来的声音。&lt;/p&gt;

&lt;p&gt;在儿童公园里那些大树的荫蔽之下，我看着穿着一件大红裙子的她，觉得好尴尬。&lt;/p&gt;

&lt;p&gt;在不时拂来的热风里，她盯着满脸紧张的我，显得好无措。&lt;/p&gt;

&lt;p&gt;我强迫自己堆起脸颊边的两垛肉，笑着说：“今天穿这么红，想自杀殉情，然后化为厉鬼去找你男人算账啊？”&lt;/p&gt;

&lt;p&gt;她一愣，忽地面上一红，并不答话。&lt;/p&gt;

&lt;p&gt;原来这个笑话真的很冷。&lt;/p&gt;

&lt;p&gt;正当我们不知该怎么办的时候，发现身边突然多了两群小孩在吵架，一群是男小孩，一群是女小孩。&lt;/p&gt;

&lt;p&gt;女小孩为首的指着男小孩群说：“你们好酷喔……”然后一堆女小孩齐声叫道：“内裤的裤。”&lt;/p&gt;

&lt;p&gt;为首的男小孩，指着女小孩的鼻子骂道：“你们好凶噢。”然后大家一起吼道：“胸罩的胸。”&lt;/p&gt;

&lt;p&gt;于是我们在一旁放声大笑，笑的天地失色，笑的涕泪俱下，笑的夸张无比，似乎把一切可笑的事全放在此时笑了出来。&lt;/p&gt;

&lt;p&gt;于是xf和小眉这两个小朋友又回到了从前。&lt;/p&gt;

&lt;p&gt;我一向认为自己是一个很惫懒的人，特别是在那几年里。&lt;/p&gt;

&lt;p&gt;我每天按时于十一点三十分起床，然后吃饭，刷牙。并且一直坚持吃过午饭才刷牙，因为我觉得这体现了华罗庚研究的那个什么学的原理，可以避免不必要的重复工作。&lt;/p&gt;

&lt;p&gt;吃过午饭，便开始洗碗，然后趁着父母午睡的时间，一个人拿着遥控器对着电视机傻笑。等老爸起床后，为了逃避和他下象棋的苦差，便出门瞎逛。由于瞎逛是没有目的性的，于是我在那几年里，用自己的脚板，步量了yc市所有的大街小巷。&lt;/p&gt;

&lt;p&gt;逛到四点半钟，便开始往回走，走到三联书店的时候，便假装自己很热爱文化，泡进去看各式小说，一直拖到六点半。&lt;/p&gt;

&lt;p&gt;如果我的阴谋得逞的话，待回到家时，大概已经有人因为饿的受不了，会主动做好了饭。但很遗憾，我家人的耐性一般都比较好。&lt;/p&gt;

&lt;p&gt;虽说晚上这顿饭一般逃不脱，但那几年的书店逃亡史却让我有了个新的爱好，那就是看席娟的言情小说。我觉得她的书挺好，不费神，又好看，而且她本人长的也不丑。&lt;/p&gt;

&lt;p&gt;晚上吃完饭，便又开始洗碗，然后度日如年地等待着父母姐姐们看的恶俗电视剧播完。然后很殷勤地通知她们，现在已经很晚了，早些睡觉，明天上班，精神会好一些。&lt;/p&gt;

&lt;p&gt;待她们入睡后，我又开始拿着遥控器，看着深夜重播的恶俗电视剧傻笑。&lt;/p&gt;

&lt;p&gt;笑完后，我会洗个澡，点上一根烟，坐在阳台上想心事。&lt;/p&gt;

&lt;p&gt;往往想了半天，才发现没什么心事好想。&lt;/p&gt;

&lt;p&gt;于是去上厕所，然后睡觉，睡之前提醒自己，一定要在十一点半起床，提醒自己明天要改变路线，到铁路坝的新华书店去，因为三联的席娟的小说已经清空了。还提醒自己，明天又是新的一天了，应该大口地呼吸这城市里新鲜的空气，应该用笑容去面对每一个人，提醒自己要像鹌鹑一样的生活：安稳并且纯蠢。&lt;/p&gt;

&lt;p&gt;由于李艳已经有了男朋友，再没空陪我了，所以当时我最大的快乐，便是那几个很穷的兄弟经常会请我吃饭喝酒。人是些极有趣的人，酒是很有糊包谷味的酒。不过最快乐的时候却在于吃完付账的时候，看着他们很头痛地凑着钱，而自己却可以跷着二郎腿，剔着牙，一副悠然自得的模样。&lt;/p&gt;

&lt;p&gt;是的，我没钱，没工作，没爱人，没向往。&lt;/p&gt;

&lt;p&gt;哪怕认识小眉之后，这四样还是一点没变。&lt;/p&gt;

&lt;p&gt;我的生活中唯一在变的似乎只有自己的体重和年龄。&lt;/p&gt;

&lt;p&gt;不过若要强说一点没变，那是撒谎。&lt;/p&gt;

&lt;p&gt;至少现在是我和小眉两个人一起用脚板来丈量这个朱总理所期望的世界级城市。只是我俩一直很疑惑，这世界级的城市居然仅用双足也可以走遍。&lt;/p&gt;

&lt;p&gt;现在泡书店也是两个人了，大多数时间我也不在家里吃饭了，那几个兄弟也见得少了。没办法，见色忘义乃是我辈本份。&lt;/p&gt;

&lt;p&gt;不过我还是习惯晚上坐在阳台上想那些并不存在的心事。越想越以为自己患了老年痴呆。&lt;/p&gt;

&lt;p&gt;不想心事的时候，我和小眉两个人穿人海，过公园，摸桂树下的草，闻面馆里的香，看尽天下言情小说，尝遍江风各种味道，曾坐在湖边一起发呆，看到美女齐声尖叫，帮老人家提过菜，也曾恐吓过骂女小孩胸罩一样凶的男小孩，勾肩搭背常有，心中坦坦荡荡是实。&lt;/p&gt;

&lt;p&gt;我们谈中东危机，台湾地震，印尼失火，华为爆炸。我们也谈她的朋友以及我的朋友。谈她的家人及我的家人。谈她的过去及我的过去。只是遗漏了她的未来和我的未来。&lt;/p&gt;

&lt;p&gt;她在公司里可以上网，所以帮我申请了一个信箱，问我要取个什么名字。我告诉她，就用xfstz，她想了想，说幸福属天主，什么意思？我告诉她，我不信教，意思也很简单，xf是头猪。&lt;/p&gt;

&lt;p&gt;她摇摇头，没说什么。&lt;/p&gt;

&lt;p&gt;她现在甚至可以问我多少天洗一次澡，我说夏天时一天洗三次都可以，冬天时三月洗一次都说不定。我还说我每年十一月十八号开始禁澡，来年的二月三十一号开禁。她正感不解，我告诉她，由于没有二月三十一号，所以顺延至三月二十二号。&lt;/p&gt;

&lt;p&gt;她问是什么特别的日子，我说那天是李艳的生日，水节。&lt;/p&gt;

&lt;p&gt;她还问过我，是否与当年那个女同学还有联系，我说有啊，她家的小狗叫多多，就是我取的，用的就是李艳家的小狗的名字。&lt;/p&gt;

&lt;p&gt;只不过我没有告诉小眉，这似乎是我和那个女同学唯一的变相联系。&lt;/p&gt;

&lt;p&gt;她疑惑了五天，才问我到底喜欢的是李艳还是谁。&lt;/p&gt;

&lt;p&gt;于是我颇为得意地告诉她，如果是李艳打电话告诉我她要结婚，我一定会把她臭骂一通，然后找个机会和她老公大醉一场。&lt;/p&gt;

&lt;p&gt;她还是不懂，于是我解释道，若是我那个当年的女同学结婚了，我会对那个女同学送上最诚挚的祝福，然后当掉自己所有的家当，买个钟送给她的老公。&lt;/p&gt;

&lt;p&gt;她仍然不懂，于是我说，李艳是我最好的朋友，就像小眉是我最好的朋友一样。&lt;/p&gt;

&lt;p&gt;于是她表示了解。&lt;/p&gt;

&lt;p&gt;后来有几天，小眉的家人陪她的老奶奶回老家去了，丢下了孤伶伶的她，于是我便有了机会去她家作陪客，吃免费的肉，喝免费的好酒，抽免费的好烟，总之用了三天的时间，整干净了她父亲所有的存货。&lt;/p&gt;

&lt;p&gt;我们在一起也没什么节目，一般就是她靠在我的肩上看电视，看困了她就去洗澡，然后回房睡觉，睡之前，提醒我走的时候记得要锁门。这种行事方式总是让我很难一时回过神来。&lt;/p&gt;

&lt;p&gt;有一天她突然趴在我肩上问我，为什么我们两个人就是不来电。&lt;/p&gt;

&lt;p&gt;“我们难道不相配吗？”&lt;/p&gt;

&lt;p&gt;又不是男生女生配，我在心里想着。嘴上说：&lt;/p&gt;

&lt;p&gt;“我们是天生绝配。”&lt;/p&gt;

&lt;p&gt;她笑了，说：“那倒是，我有貌，美貌；你有才……”&lt;/p&gt;

&lt;p&gt;“蠢材。”我接道。&lt;/p&gt;

&lt;p&gt;“我不吃辣椒。”&lt;/p&gt;

&lt;p&gt;“我爱好大蒜。”&lt;/p&gt;

&lt;p&gt;“我喜欢席娟。”&lt;/p&gt;

&lt;p&gt;“我也不讨厌。”&lt;/p&gt;

&lt;p&gt;“你是徐子陵。”&lt;/p&gt;

&lt;p&gt;“那你就是师妃暄。”&lt;/p&gt;

&lt;p&gt;“那我是人淡如菊，爱在窗台上摆盆绿菊的凌霜华。”&lt;/p&gt;

&lt;p&gt;“那我就是那个丁典，为了看你窗台上的ju花，甘愿入牢十二年。”&lt;/p&gt;

&lt;p&gt;我忽地想到凌霜华最终被自己父亲害死了，而丁典也中毒而亡，不由一愣。&lt;/p&gt;

&lt;p&gt;这时小眉还傻兮兮地抱着个布娃娃皱着眉头想还有什么可以说。我一是怕她想得太费神，二来也并不觉得肉麻是很有趣的，于是总结道：&lt;/p&gt;

&lt;p&gt;“最关键的是你有钞票，而我没钱。”&lt;/p&gt;

&lt;p&gt;她闻言大喜，连连点头。翘起两手的大拇指排成一排，&lt;/p&gt;

&lt;p&gt;“果然是绝配。”接着一叹：“可惜没感觉。”&lt;/p&gt;

&lt;p&gt;我想小眉说的是对的。&lt;/p&gt;

&lt;p&gt;但像她这么漂亮的女孩子依在你的身旁，要说心里没点儿想法，那你绝对是在包装一家上市公司，做做样子而已。&lt;/p&gt;

&lt;p&gt;我知道我的相貌是上好的绝缘体，但她常常于无意间流露出的娇憨之态却是常温下的超导材料。&lt;/p&gt;

&lt;p&gt;幸亏我们只是朋友而已。不然我一定会很害怕的。&lt;/p&gt;

&lt;p&gt;只是我不知道自己究竟怕的是什么。&lt;/p&gt;

&lt;p&gt;过了几天，那个喜欢阴笑的大学同学又打了个电话来了，说出国的她又回成都了。&lt;/p&gt;

&lt;p&gt;于是我才醒过来，原来我是一个生活在过去世界的人。&lt;/p&gt;

&lt;p&gt;原来我所害怕的，只是忘了我是那个世界的人。&lt;/p&gt;

&lt;p&gt;可是若我能忘了我是那个世界的人，又有什么不好呢？&lt;/p&gt;

&lt;p&gt;我是忘不了，还是害怕忘了呢？&lt;/p&gt;

&lt;p&gt;就像哈利说的，他是想念海伦，还是想念想念海伦的念头呢？&lt;/p&gt;

&lt;p&gt;只是哈利最后也说了：“Imisshelen!”&lt;/p&gt;

&lt;p&gt;这不是学会忘记的问题，而是学会不去强迫自己记得的问题。&lt;/p&gt;

&lt;p&gt;而且我不敢想像，我们两个这么弱智的人也会有学会的一天。&lt;/p&gt;

&lt;p&gt;我想这些的时候，已经收拾好了行李，与所有的兄弟喝完了壮行的酒，买好了去成都的车票，在车站前看着有些发呆的小眉。&lt;/p&gt;

&lt;p&gt;她忍不住说：“你真的要去吗？你还不死心吗？”&lt;/p&gt;

&lt;p&gt;我笑着拍拍她的脑袋，道：“丫头，今天怎么这么操心。有很多事情，往往是我们自己也控制不了的。”&lt;/p&gt;

&lt;p&gt;她也笑了，道：“你今天终于肯叫我丫头了。”接着顿了顿，续道：“只是为什么今天要叫我丫头呢？”眼神中有些迷惑不解。&lt;/p&gt;

&lt;p&gt;我不作解释，往车站里走去，一边走一边挥手。&lt;/p&gt;

&lt;p&gt;她从后面追了上来，拉着我的包，怯怯地道：“可以不走吗？”&lt;/p&gt;

&lt;p&gt;我问为什么。&lt;/p&gt;

&lt;p&gt;她有些不豫，嚷道：“你老沉在那里面干吗，能当饭吃吗？你说xf是头猪，你以为你真是头猪啊！你有猪宝宝那么可爱吗？一头猪，浑身是宝，你呢？除了耍耍嘴皮子，还会做什么？吃我的花我的，现在还不知死活的跑到那个鬼地方去。我不准你去。”&lt;/p&gt;

&lt;p&gt;对于她的表现，我好感激。&lt;/p&gt;

&lt;p&gt;我又笑了笑，把她的发缠在自己的食指上，粗声道：“放心吧，我只是去看看。记住自己要照顾好自己哟！”&lt;/p&gt;

&lt;p&gt;我想了想，又说：“其实我离开些日子也好，免得你总是吃面条，那样营养跟不上，身材可是要变形的。”&lt;/p&gt;

&lt;p&gt;她也笑了，轻轻叹了口气道：“哎，算了，你还是去吧。看来我们两个都是一样的不可救药。”&lt;/p&gt;

&lt;p&gt;待我走出十几米，忽然听见她在后面喊道：&lt;/p&gt;

&lt;p&gt;“你可不是一头猪，你比猪还胖。”&lt;/p&gt;

&lt;p&gt;我笑着摇头，结果发现车站的人都在看我。&lt;/p&gt;

&lt;p&gt;“……你意为鸿鹄志在天下，只怕一失足成千古笑；你意在吞吐天地，不料却成天诛地灭……”她还在我身后，反复吟诵着。&lt;/p&gt;

&lt;p&gt;我记起来了，这是白愁飞临死之前哼的两句废话。&lt;/p&gt;

&lt;p&gt;我搔搔头，心想，小眉真是一个完美的一塌糊涂的女子，可惜天生就是不属于我的。&lt;/p&gt;

&lt;p&gt;火车马上就要开了，在我踏入车厢的那一刻，我不自觉地张开了嘴，轻轻哼着：“我是一头小憨猪，过的很幸福，不想明天能吃什么，只把昨晚的剩菜牢牢记住，啦，啦，啦，啦，啦……过的不糊涂……”&lt;/p&gt;

&lt;p&gt;成都是我曾经生活了两年半的地方。当年我在那里时，我拼命地告诉自己的高中同学，那是一个四季如春的美丽城市。后来我离开了那里，我便拼命地说，那是一个终年看不到太阳，让人闷头闷脑的地方。&lt;/p&gt;

&lt;p&gt;等我回到了这里，才发现不管我怎么说，这城市还是像从前一样，淡淡的天，乌乌的云，灰灰的楼，安静的人群。&lt;/p&gt;

&lt;p&gt;甚至连去学校的公汽都还是那一路。&lt;/p&gt;

&lt;p&gt;我一个人背着包到了学校，找到了一个当年和她关系比较好的老师，打听她的联系方法。&lt;/p&gt;

&lt;p&gt;那个老师很诧异会看到我，更加诧异地说道她昨天晚上就搭飞机走了。&lt;/p&gt;

&lt;p&gt;我算了算时间，那时候我坐的火车刚刚经过达县。&lt;/p&gt;

&lt;p&gt;我这才知道有钱可以改变很多东西，至少对于当时的我而言，金钱就意味着时间，时间就意味着机会，机会就意味着可能，只是可能通常的意思是说不可能……&lt;/p&gt;

&lt;p&gt;我向那位老师说了声谢谢。然后走出办公室，在校园里瞎逛着。&lt;/p&gt;

&lt;p&gt;路过原来住的旧六舍的时候才发现，当年的木板楼早已拆了，现在杵在我面前的是一个很漂亮的学生公寓。公寓里面灯火通明，学生们幸福的一塌糊涂。&lt;/p&gt;

&lt;p&gt;我想起当年在木板楼的过道里借着灯光写信，不由笑了起来。&lt;/p&gt;

&lt;p&gt;我那时候给李艳写四页纸的信，便一定会给她写五页，如此类推。&lt;/p&gt;

&lt;p&gt;我搓搓手，想了起来，当时给李艳写的最长的一封信，只有十七页。&lt;/p&gt;

&lt;p&gt;我突然很痛恨眼前这漂亮的建筑。&lt;/p&gt;

&lt;p&gt;晚上，找到了那个大学同学。&lt;/p&gt;

&lt;p&gt;他似乎并不惊讶会在这里看到我，反而幸灾乐祸地说道：“她昨天就走了。”&lt;/p&gt;

&lt;p&gt;我说我知道，然后躺下就睡。&lt;/p&gt;

&lt;p&gt;他看了我两眼，便出去买酒菜。&lt;/p&gt;

&lt;p&gt;在他的狗窝里呆了两天，喝倒了很多老同学，又重温了一遍田晓霞之死，我便不知道该干什么了，我不知道该到哪里去了。&lt;/p&gt;

&lt;p&gt;这时候，我想起了一个非常好的朋友，当年因为大学成绩过于糟糕，现在分到了阿坝自治州的一个电厂。于是我给他打了个电话，让他来接我。&lt;/p&gt;

&lt;p&gt;他住的地方叫映秀镇，这个小镇我后来和很多女孩子都提过，记得是这样描述的：这个小镇，山不清，水不秀，还有个电厂，空气也不是顶好，不过人少，夜静，月明。&lt;/p&gt;

&lt;p&gt;其实我最喜欢的倒是院子旁边的那条声音很大的河。&lt;/p&gt;

&lt;p&gt;在那几个月里，我经常沿着那条河随意乱走，在那几条索桥之间穿来穿去，偶尔看到山垭里的野棉花，便停下来，采两把，丢到水里面。&lt;/p&gt;

&lt;p&gt;有时候，看着那山顶上的积雪，也曾认真地想着要去爬一爬。&lt;/p&gt;

&lt;p&gt;只是我觉得自己好累。&lt;/p&gt;

&lt;p&gt;河的这岸，就是映秀小镇。&lt;/p&gt;

&lt;p&gt;小镇无特色，只是豆腐多，萝卜多，毛片也多。&lt;/p&gt;

&lt;p&gt;当然最多的还是一些从不认识却自然变的亲切的朋友。&lt;/p&gt;

&lt;p&gt;小镇虽好，只是太过寂寞。&lt;/p&gt;

&lt;p&gt;别说寂寞这词太俗。我在映秀镇只用了半个月的时间便了解了为何有些人会因孤独而死。&lt;/p&gt;

&lt;p&gt;三个半月之后，我不但喝光了朋友所有的全兴，看完了所有的毛片，所有看的下去的武侠小说，到最后甚至连鲁迅杂文全集都当宝贝似地看了两遍。还因为弄饭而整坏了四个电炉，可还是寂寞。&lt;/p&gt;

&lt;p&gt;于是我开始想写一本可以流传半年的武侠小说。&lt;/p&gt;

&lt;p&gt;可又不会写。&lt;/p&gt;

&lt;p&gt;我平均每个月打个电话回家，告诉父母我活的很好。&lt;/p&gt;

&lt;p&gt;我也曾给李艳打过电话，但一直没人接。&lt;/p&gt;

&lt;p&gt;所以我只好每个月给在武汉的一位女同学写封信，借此通知高中的同学们，xf还没死，只是不知道他们在不在乎。&lt;/p&gt;

&lt;p&gt;我也曾给小眉打过电话，但老奶奶说她已经到天津上班去了。&lt;/p&gt;

&lt;p&gt;我想这样很好。&lt;/p&gt;

&lt;p&gt;直到有一天，我例行给家里打电话后，又顺手拨了李艳家的电话。&lt;/p&gt;

&lt;p&gt;她在那头笑呵呵地说：“我要结婚了，祝福我吧！”&lt;/p&gt;

&lt;p&gt;我忽然一下想起了小眉，想起了我对她的承诺。&lt;/p&gt;

&lt;p&gt;所以我把李艳痛斥了一番，然后问她什么时候让我和老任痛痛快快地喝次酒。接着开始收拾行李。&lt;/p&gt;

&lt;p&gt;在电厂工作的好朋友知道我要走了，便陪我到河的两岸去走了走。&lt;/p&gt;

&lt;p&gt;那是他第二十几次陪我了。&lt;/p&gt;

&lt;p&gt;他递给我一根烟，帮我点燃，然后拍拍我的头。&lt;/p&gt;

&lt;p&gt;说了一句很没深度的话：&lt;/p&gt;

&lt;p&gt;“其实我们这里的烧豆腐还是很好吃的，有空常来。”&lt;/p&gt;

&lt;p&gt;等我坐着旅游船赶回yc的时候，才知道李艳已经在一个风雪飘扬的冬日，坐着拖拉机出嫁了。&lt;/p&gt;

&lt;p&gt;于是我狠狠地吃了她们夫妇几顿。&lt;/p&gt;

&lt;p&gt;回到了家里，才知道自己其实很想家。但这并不阻碍我又开始背着黑包，四处寻美色养眼。只是时近年关，人们多穿的比较厚实。看了几分钟，便觉得很没兴致。&lt;/p&gt;

&lt;p&gt;于是我跑到书店里看书，坐在面馆里吃面，呆在江边吹冷风，抽三峡牌香烟，自己和自己聊天。&lt;/p&gt;

&lt;p&gt;我这才发现，小眉在我的生活里不止扮演着参与者的角色，她还很能替我省钱。&lt;/p&gt;

&lt;p&gt;有一天，眼镜摔坏了，我去换八块钱一个的镜片，走在路上，险些撞到一个人，由于眼前一片模糊，所以不知道长的什么样，只是觉得眼前一亮，似乎是个穿着花裙子的漂亮女孩。&lt;/p&gt;

&lt;p&gt;我知道这是眼花，大冬天的，谁穿花裙子找冻。&lt;/p&gt;

&lt;p&gt;父母并不曾问我这些月做了什么，我益发地觉得歉疚。所以过年的那些天，尽量不和兄弟们出去，而是呆在家里陪他们。有一天，家里来了不少亲戚，顿时热闹起来。&lt;/p&gt;

&lt;p&gt;我小意地四处周旋着，却听到电话铃响了。&lt;/p&gt;

&lt;p&gt;我拿起电话，听到一道夏日里冰淇淋一般清凉的声音，虽然现在是冬天，但我还是很高兴。&lt;/p&gt;

&lt;p&gt;“你知道猪是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我想了想，说：“笨死的。”&lt;/p&gt;

&lt;p&gt;“知道农夫是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我答不出来。&lt;/p&gt;

&lt;p&gt;“是看见猪笨死了之后，气死了。”&lt;/p&gt;

&lt;p&gt;“那你总该知道农夫的邻居是怎么死的吧？”&lt;/p&gt;

&lt;p&gt;我想了想，还是答不出来。&lt;/p&gt;

&lt;p&gt;“你真是头猪耶！那当然是因为看见农夫竟然会因为猪笨死而气死，所以那个邻居就笑死了。”&lt;/p&gt;

&lt;p&gt;“那你知道那个邻居的老婆是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我又想了想，认真回答道：“大概是看见她老公竟然笑死了，丢下自己孤儿寡母，所以恨死了。”&lt;/p&gt;

&lt;p&gt;我感觉她在电话那头摇摇头，然后听见她说：&lt;/p&gt;

&lt;p&gt;“那个邻居的老婆心疼死了。”&lt;/p&gt;

&lt;p&gt;我在电话的这头笑了，轻声道：“小眉，好久不见。”&lt;/p&gt;

&lt;p&gt;这时候门铃响了，我舍不得丢下手中的话筒，向坐在桌上的哥哥姐姐们投去求助的眼光。却发现他们的眼光都盯在桌子上。&lt;/p&gt;

&lt;p&gt;于是我在电话里向小眉道了个歉，旋风一般冲到门口打开。&lt;/p&gt;

&lt;p&gt;我看见门外亭亭玉立着小眉。&lt;/p&gt;

&lt;p&gt;她把手机收回袋里，眉眼带笑道：“意外吧？！惊喜吧？！”&lt;/p&gt;

&lt;p&gt;我很意外，待回过头来看见满桌的人张大了嘴四处找牙齿，再看见老妈露出卖掉二十几年存货的神色，才知道原来他们很惊喜。&lt;/p&gt;

&lt;p&gt;像小眉这般可爱的人，自然可以很轻易地让我老爸老妈哥哥姐姐们喜爱。&lt;/p&gt;

&lt;p&gt;于是她吃了平生最饱的一餐饭，听了平生最温柔的话。&lt;/p&gt;

&lt;p&gt;当我看着老妈看小眉的神情，不免有些怀疑这个老妈究竟是谁的妈。&lt;/p&gt;

&lt;p&gt;然后我送她回家。&lt;/p&gt;

&lt;p&gt;在路上，我们一直傻傻地走着，直到她问我：“结果如何？”&lt;/p&gt;

&lt;p&gt;“当然没有结果。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“暂时没有。”&lt;/p&gt;

&lt;p&gt;她停下来，看着我，叹口气道：“你真是快笨死了，我真是快气死了。”&lt;/p&gt;

&lt;p&gt;我笑了笑，说：“你若气死了，我岂不是要笑死了。”&lt;/p&gt;

&lt;p&gt;她也笑了，说：“你最好别死，不然，我可是要心疼死的。”&lt;/p&gt;

&lt;p&gt;那天的风很冷，所以我不觉得自己有些发热。&lt;/p&gt;

&lt;p&gt;我哈哈哈数声，然后说：“我现在正值脆弱，你可别引诱我。”&lt;/p&gt;

&lt;p&gt;她呸了一声，说赏我一口唾沫。&lt;/p&gt;

&lt;p&gt;我笑着摊开双掌，伸到她的唇前接着。&lt;/p&gt;

&lt;p&gt;我们互述别后情由，我说我伤心的时候就抄史记，让自己以为自己是个老学究，根本不识情为何物。她说当她想她的男人的时候，就按照我教的办法，拼命看蓝色生死恋，结果越看越伤神。&lt;/p&gt;

&lt;p&gt;我向她道歉，她说不用。她说我们家那错架子一般的楼梯让她好生难找，我向她道歉。她说从天津回来过年，结果等了我几天的电话，也没等着，于是我又向她道歉。她说在天津那边，偶尔还会想我，我只好又道歉。然后发觉自己道歉的很没道理。&lt;/p&gt;

&lt;p&gt;于是我们又变成秤不离砣，砣不离秤了。&lt;/p&gt;

&lt;p&gt;她说回来后，曾经见过一次她的男人，那是在一次牌桌上。&lt;/p&gt;

&lt;p&gt;我问她表现如何。&lt;/p&gt;

&lt;p&gt;她笑嘻嘻地说想到他已经结了婚了，以后也没什么机会了，所以趁着摸牌的机会，不停地用手指触摸他的手臂，拼命地揩油。&lt;/p&gt;

&lt;p&gt;我笑着纠正，那不叫揩油，那叫送油上门。&lt;/p&gt;

&lt;p&gt;她突然盯着我很严肃地说，现在发现过了好几个月，那个男人依然可以很轻易地影响到她的心情。&lt;/p&gt;

&lt;p&gt;我想了想，认为自己没什么立场开解她，便开玩笑说，那你还是等着他离婚吧。&lt;/p&gt;

&lt;p&gt;本以为她会笑，谁知她竟认真地想了起来。&lt;/p&gt;

&lt;p&gt;我暗呼圣母之名。&lt;/p&gt;

&lt;p&gt;她走的前一天晚上，又给我打了个电话，开门见山头一句：&lt;/p&gt;

&lt;p&gt;“你做我男朋友好不好？”&lt;/p&gt;

&lt;p&gt;一般日本小女生在这个时候会说：“我可以和你交往吗？”脸上还会带着羞怯而大胆的表情。&lt;/p&gt;

&lt;p&gt;宣萱演的白领在这个时候会说：“上我家去喝杯咖啡吗？”表情是不容人拒绝的。&lt;/p&gt;

&lt;p&gt;琼瑶一般会说：“你看那天边的两朵彩云，一朵似我，旁边的一朵是否是你呢？”表情是弱智的。&lt;/p&gt;

&lt;p&gt;古时候的女人可能会说：“遗君明珠，荐君枕席，侍君添香，蒙君不弃……”表情是未知的。&lt;/p&gt;

&lt;p&gt;当代的湖北女人，一般是打死都不会先说的，表情是期待的。&lt;/p&gt;

&lt;p&gt;所以我知道当小眉这样说，一定有下文，所以我很平静。&lt;/p&gt;

&lt;p&gt;果然她苦兮兮地叹道：“真不想走，又找不到个借口留下来。”&lt;/p&gt;

&lt;p&gt;我愤然于她的麻木，惊讶于自己的麻木。&lt;/p&gt;

&lt;p&gt;我说可以介绍很多优秀青年给她认识，比如捷捷和王博。&lt;/p&gt;

&lt;p&gt;过了会儿，又满怀遗憾地告诉她，我们班的这两面旗帜都已倒在美人怀里了。&lt;/p&gt;

&lt;p&gt;于是她又呸了我一口，然后问我，真的不考虑一下。&lt;/p&gt;

&lt;p&gt;我告诉她，她既没得白血病，我也没出车祸，看样子不大可能。&lt;/p&gt;

&lt;p&gt;她想了想，也认同了我的看法，并且为我万分可惜。&lt;/p&gt;

&lt;p&gt;然后她笑嘻嘻地说：“你会后悔的。”&lt;/p&gt;

&lt;p&gt;我说那是一定的。&lt;/p&gt;

&lt;p&gt;“你再也找不到比我更合适当你女朋友的人了。”&lt;/p&gt;

&lt;p&gt;我说那是不一定的。&lt;/p&gt;

&lt;p&gt;“你有可能再也找不到女朋友了。”&lt;/p&gt;

&lt;p&gt;我说那是你胡扯的。&lt;/p&gt;

&lt;p&gt;我们很开心地笑了起来，挂电话之前她说：&lt;/p&gt;

&lt;p&gt;“这次走了，可能就不回来了，以后没人陪你玩，你可别把自己闷着。还有，不该想的事就别想了。早点儿找个工作，自己都养不活自己，丢不丢人啊？还有，别对女孩子说自己喜欢看言情小说，那也很丢人的。还有注意运动，快些减肥。还有什么来着……噢，还有DON’T**OKEANDDRINKALOT，OK?”&lt;/p&gt;

&lt;p&gt;我一一含笑应允，正准备挂电话，又听到她抢着说：&lt;/p&gt;

&lt;p&gt;“还有……帮我问侯你爸爸，妈妈。”&lt;/p&gt;

&lt;p&gt;这是我最后一次听到她的声音。&lt;/p&gt;

&lt;p&gt;小眉走了以后，我仍然是像以往那样生活着，只是骗家里人买了一部电脑，所以老爸天天在和机器下棋，也没空烦我了，所以我也不用天天出门逛街了。&lt;/p&gt;

&lt;p&gt;老姐带着我那个有二级厨师证书的姐夫哥搬回来住了，所以我也不用天天做饭了。&lt;/p&gt;

&lt;p&gt;那些穷兄弟也渐渐地鸟兽东南散了，我也不用经常喝酒了。&lt;/p&gt;

&lt;p&gt;李艳也跟随她老公南下了，我也没有吵架的对象了。&lt;/p&gt;

&lt;p&gt;我也开始考文凭，准备工作了。&lt;/p&gt;

&lt;p&gt;我把一天的时间分成十份，用其中六份来思念钞票，两份用来记住那位身在异国的女同学，一份用来悼念李艳和她的多多，一份用来想想高中同学的相貌，一分用来策划让别人想念。只是偶尔还会想起小眉，曾经是我最好，最好的朋友的那个小眉，那个再无音信的小眉。&lt;/p&gt;

&lt;p&gt;由于时间实在还是太多，便开始续写在映秀镇上没写成的武侠小说，由于把自己幻想成了金小庸，铺设的场面太大，便喊在武汉读书的那位女同学给我拿点儿历史资料回来。结果她给我带了一本大概是小学用的中国古代通史。&lt;/p&gt;

&lt;p&gt;所以这个计划又搁置了起来。&lt;/p&gt;

&lt;p&gt;后来用上了ＱＱ，练就了一身双手互搏的本领，周游于诸多头像之间，发了疯似地告诉她们：&lt;/p&gt;

&lt;p&gt;“从前有座学校，学校里有个澡堂，澡堂里有个我，我在澡堂里洗澡，一边洗澡一边唱歌，我是一头小憨猪，过的很幸福……”&lt;/p&gt;

&lt;p&gt;然后她们说我很有趣。&lt;/p&gt;

&lt;p&gt;于是我把她们都拉到了黑名单里。&lt;/p&gt;

&lt;p&gt;后来又来了一批头像，她们都说对我的名字很感兴趣，说轻眉老生是什么意思。&lt;/p&gt;

&lt;p&gt;我说那意味着我博学多才，成熟稳重，看轻天下其它男子。&lt;/p&gt;

&lt;p&gt;她们问我有何佐证。&lt;/p&gt;

&lt;p&gt;我告诉她们，我经常背的黑包里，一般放着四本书：&lt;/p&gt;

&lt;p&gt;一本是荣格文集，这体现了我的深度。&lt;/p&gt;

&lt;p&gt;一本是鲁迅杂文全集，这体现了我忧国忧民之心。&lt;/p&gt;

&lt;p&gt;一本是平凡的世界，这说明了我如同浴火的凤凰，向往着从苦难中升华。&lt;/p&gt;

&lt;p&gt;还有一本是交错时光的爱恋，完完全全是因为自己喜欢看。&lt;/p&gt;

&lt;p&gt;看到我的回答，她们的答复无一例外是一声呸。&lt;/p&gt;

&lt;p&gt;我也偶尔会上席绢梦幻阁去看看，取了个望月精灵的恶名，与那些十五六岁的小朋友们打打嘴仗，不亦乐乎。&lt;/p&gt;

&lt;p&gt;我还上了５４６０，潜进了湖大所有的班级，只是很可惜，没有小眉的信息。&lt;/p&gt;

&lt;p&gt;一个阳光明媚的夏天，我偷偷到冰箱里把外甥女的冰淇淋摸了一根，坐在电脑前有滋有味地品尝了起来。然后发现李艳在ＱＱ里埋怨我帮她取的叶轻眉的名字很难听，我笑了起来。&lt;/p&gt;

&lt;p&gt;她又问我是不是还在和那些未成年人打嘴仗，也不知道省点儿钱。&lt;/p&gt;

&lt;p&gt;正准备回答，就发现有另外一个头像开口了。&lt;/p&gt;

&lt;p&gt;于是我告诉李艳，想到和她聊天，确实有点儿心疼钱，但想到和别人聊天，嗯不错，我舍得。&lt;/p&gt;

&lt;p&gt;李艳怒发冲冠，警告我，以后不准再四处攻击她，免得影响她后半生的幸福。&lt;/p&gt;

&lt;p&gt;我愕然道，你还有幸福吗，更莫说是下半辈子的。&lt;/p&gt;

&lt;p&gt;两人又互骂几句后，我才有空去看来的那条消息。&lt;/p&gt;

&lt;p&gt;那个头像说：&lt;/p&gt;

&lt;p&gt;“天气还真是热啊。”&lt;/p&gt;

&lt;p&gt;我忙着和李艳打闹，急忙敷衍道：&lt;/p&gt;

&lt;p&gt;“天好热啊。”&lt;/p&gt;

&lt;p&gt;本不打算再理她，谁知她的下一句话，来的奇快无比。&lt;/p&gt;

&lt;p&gt;“你知道猪是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我摸了摸后脑勺，点上根烟，咧着嘴笑了，像弹钢琴一样打着键盘。&lt;/p&gt;

&lt;p&gt;“我是想你想死的。”&lt;/p&gt;

&lt;p&gt;是的，叶轻眉，我的朋友，最好最好的那一种。&lt;/p&gt;

&lt;p&gt;跋：（其实这个字本身就很有搞笑的功能）&lt;/p&gt;

&lt;p&gt;我所想念的，一切都可以结束了&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（这是猫腻的长篇小说《庆余年》里写在前面的非常有趣的一章，很喜欢这个故事，所以摘录到此）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>杂谈:指纹歌里的人生百态</title>
      <link>http://alimy.me/post/etc_201603192115/</link>
      <pubDate>Sat, 19 Mar 2016 21:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/etc_201603192115/</guid>
      <description>

&lt;p&gt;“一螺穷，二螺富，三螺四螺开当铺……”童年时代，您可曾唱过指纹歌？童谣未必预示了命运，但却包含了人生百态。&lt;/p&gt;

&lt;p&gt;指纹，是在每个人出生第六个月就形成，并跟随人一生一世的身体纹线，每个人的指纹都是独一无二的，世界上绝不会有指纹完全相同的两个人。所以，我国在一千多年前的唐代，就实行了指纹画押。古代的借据就是借户用中指和食指在借据上并列印上指纹叫作“花押”。直到现代，立据签约还仍然使用这种当事人在契约上按手印的方法作为凭信。刑事侦探还把鉴别手纹作为破案的重要手段。&lt;/p&gt;

&lt;p&gt;两种最基本的指纹：纹如水流中的漩涡形，或中间的纹成封口的环状，叫涡纹，又叫螺纹；指纹呈流线形脱开，不封口，叫流纹，又叫箕纹。&lt;/p&gt;

&lt;p&gt;螺是指螺旋状的环形纹，箕是指簸箕状的开口纹。张爱玲在《谈看书》中提到：十只手指上，螺越多越好，聚得住钱；男人簸箕也好，会赚钱，能够把钱铲回家；女人则是螺好，会积钱，手上没螺，拿东西不牢。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的地图-盛行于东南沿海:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的地图：盛行于东南沿海&lt;/h3&gt;

&lt;p&gt;在一些童谣集中载录了大量的指纹歌，如商务印书馆《各省童谣集》第一集（1923年）就收录了三首，分别采自安徽休宁、浙江杭县、浙江新昌；上海世界书局《绘图童谣大观》（1924年）也收录了三首，分别采自江苏的吴县、无锡和江都。&lt;/p&gt;

&lt;p&gt;《各省童谣集》的编者说：“看螺纹定一生贫富贵贱，各省都有这种事，但所说各不相同，可见这事不足深信。”这话听起来，好像如果各地所说一致，就可以深信似的。这首曾经被打入“封建迷信”另册的趣味童谣，正因为异文众多，不足为信，才会给我们的童年生活带来许多相互打趣的快乐。&lt;/p&gt;

&lt;p&gt;我陆续搜集了101首大同小异的指纹歌，却发现它们只出现在11个省市，并非“各省都有”。对照中国地图看一下，指纹歌基本上流行于东南沿海地区，从江苏沿海路向南，上海、浙江、福建、台湾、广东，一个不落，而内陆却只有安徽、湖北、湖南、江西等几个紧靠以上地区的省份。在西北和东北地区，居然没能找到一首指纹歌。&lt;/p&gt;

&lt;p&gt;北京的儿歌是最丰富的，可是，北大《歌谣》周刊并未见到有指纹歌发表。我所仅见的北京这首《一螺穷》，内容还被精减、合并为“一螺穷，二螺富，三螺四螺开当铺，五螺六螺磨豆腐，七螺八螺自来有，九螺一箕，稳吃稳坐”。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的韵脚-韵一换-运也转:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的韵脚：韵一换，运也转&lt;/h3&gt;

&lt;p&gt;北京的《一螺穷》虽然简单，却大致反映了许多指纹歌的主导思路，也即张爱玲说的，螺越多越好。另一首不明地域的螺纹歌，这一思路更加明显：“一螺穷，二螺富，三螺四螺卖豆腐，五螺六螺开当铺，七螺八螺有官做，九螺十螺享清福。”生活质量的好坏基本上与手上螺纹的多少成正比。不过，指纹歌的价值更多体现在它的游戏性，而不是命相的准确度。&lt;/p&gt;

&lt;p&gt;各地指纹歌中最一致的，大约是起首句“一螺穷（贫），二螺富”，全部101首中，占了67首。大凡“一螺穷，二螺富”的地区，基本都是为了在前几句中押一个“富”字韵，北平的《一螺穷》最有代表性。明白了这一点，也就明白了为什么有那么多人开当铺、磨豆腐、披麻布、无着裤、住大屋、倒大路。&lt;/p&gt;

&lt;p&gt;多数“一螺穷”会在五螺之后换韵。韵一换，运也转，比如湖北流传的“一螺穷，二螺富，三螺四螺住大屋，五螺卖柴，六螺穿鞋，七螺八螺，挑屎过街，九螺单，当天官，十螺全，点状元，十个簸箕，金银挑起”。这就有点像客家儿童唱“一二三四五，上山打老虎，老虎不在家，放屁就是他”，为什么放屁的是他而不是你和我，只是因为“他”与“家”押韵。因此，如果上一句唱成“老虎在家里”，那么对不起，“放屁就是你”。&lt;/p&gt;

&lt;p&gt;起首句与《一螺穷》不一致的地区，主要是广东、福建和台湾。台湾金门的“一螺一嗲嗲，二螺跄脚蹉”与闽南的“一螺一底底,二螺跑飞飞”，以及潮州的“一螺一帝帝，二螺走脚皮”估计是同源异文，所谓嗲、底、帝，大概也只是各地记录者用词的不同，都是为了表达一种闲适状态，以便与“二螺跄脚蹉”的劳碌状态相区别。&lt;/p&gt;

&lt;p&gt;《一螺穷》放在闽南话中，读起来很不爽口，因此只能重编一套《一螺一嗲嗲》的新指纹歌。所以说，一螺到底是“穷”还是“嗲嗲”，不是因为东海岸人与南海岸人长得有什么不一样，而是因为他们的语言系统不一样。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的秘密-三教九流-人生百态:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的秘密：三教九流，人生百态&lt;/h3&gt;

&lt;p&gt;在杭州到台州的连接带上，杭州、诸暨、新昌、天台、临海，都流行一种恐怖版指纹歌，杭州是“五螺磨刀枪，六螺杀爹娘”，诸暨是“七螺磨刀枪，八螺杀爷娘”，新昌是“七螺磨尖刀，八螺杀爹娘”，天台是“六螺磨刀枪，七螺杀姨娘”，临海是“五螺掼刀枪，六螺杀爷娘”。少一螺的，总是执行前一工序，或者叫帮凶；多一螺的，总是执行后一工序，因此成了凶手。&lt;/p&gt;

&lt;p&gt;六螺在所有螺数中是最狠最倒霉的，在杭州和临海一定是凶手；到了天台可以弱化为帮凶；再到诸暨或新昌，穷虽穷，却可以不必干那杀人的勾当；如果能走远一点，北上江苏如皋，好歹可以“去种田”；到了扬州、仪征一带就能“骑花马”；如果脚力勤，远上北京，还能攒钱“开当铺”。但是不能往西或往南，往湖北只能“穿草鞋”、“做强盗”；往湖南则是“打草鞋”、“放鸭婆”；到江西也还有可能“打死人”；到了广东和福建，大多数情况下还是只能“讨饭匹”、“掰心肠”、“做小偷”、“给狗拆”。当然，少数南下分子也可能“做相公”；如果能渡海到台湾，则有可能“米头全”或者“有米煮”。&lt;/p&gt;

&lt;p&gt;据说人种不同，螺数分布的规律也不同。白种人与非洲人箕纹多，澳洲土著螺纹多，黄种人介于两者之间。假设这种说法是正确的，那么，黄种人应该是以五螺六螺居多了，按杭州和临海的说法，他们都在“磨刀霍霍向爹娘”——这当然只能拿来当个噱头，供儿童们互相唱着取笑。&lt;/p&gt;

&lt;p&gt;纵观各地指纹歌，各行各业五花八门，计有重工业（砸石条、掼刀枪），轻工业（磨豆腐、弹棉花），农牧业（会种田、牵猪牯），建筑业（起大厝），服务业（挑粪桶、抬花轿），商业（开当铺、卖老婆），交通（骑白马、坐官船），能源（担柴卖），文教卫生（中状元、捡狗屎），信息产业（做媒婆），文化艺术（吹喇叭），宗教（拜菩萨），行政管理（会做官、管天下）等等，三教九流，包罗万象。&lt;/p&gt;

&lt;p&gt;指纹歌中最常见的生活状态是平平过、谷满仓、坐颓颓、走脚皮、盖草铺、住大屋、无米炊、操心肠、得高寿、有钱无人知、金子银子压秤砣之类。另外，打死人、做强盗、做贼、偷挖壁、沿街乞、倒大路的现象也非常严重。&lt;/p&gt;

&lt;p&gt;要说指纹歌真实地反映了现代社会的人生百态，那显然是拔高了，但若说反映了传统农业社会对于社会结构与人生百态的粗浅理解，则不会太过。&lt;/p&gt;

&lt;p&gt;当然，指纹歌也缺失了许多很重要的社会内容。比如对于读书的理解，只给出了“中状元”一条出路，似乎中不了状元就只能捡狗屎。至于现代社会的现代行业，就得不到体现了。指纹歌几乎没有什么实际的命相作用，也不会真有人拿着鸡毛当令箭，因此，我们也就用不着大惊小怪地把它当作封建迷信一棒打杀，权当一张陈旧发黄的老照片，也挺好。&lt;/p&gt;

&lt;h3 id=&#34;各地指纹歌:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;各地指纹歌&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;北京&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺四螺开当铺，五螺六螺磨豆腐，七螺八螺自来有，九螺一箕，稳吃稳坐。&lt;br /&gt;
&lt;em&gt;（1930年，雪如女士《北平歌谣续集》）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一斗穷二斗富三斗四斗卖豆腐，五斗六斗开当铺，七斗八斗把官做，九斗十斗享清福.&lt;/p&gt;

&lt;p&gt;一斗穷二斗富三斗四斗卖豆腐，五斗六斗去赶集，七斗八斗去赴席，九斗一过，老了稳坐&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;苏州&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗巧二罗好，三罗抱棒柱，四罗打得稳勿住，五罗穷六罗富，七罗做长工，八罗做相公，九罗骑白马，十罗坐官船。&lt;br /&gt;
&lt;em&gt;原注：指纹皆圆者为罗，吴人以罗之多少，占一生之命运。（《吴歌丙集》第39首，320页）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一螺巧二螺拙，三螺拖棒柱，四螺纯勿识，五螺富，六螺穷，七螺做相公，八螺做长工，九螺骑白马，十螺坐官船。&lt;br /&gt;
&lt;em&gt;原注：按指纹中作回旋状者，谓之螺，否则谓之粪箕。又传说：男以螺多为贵；女以粪箕多为贵。（《吴歌丁集》第4首，350页）&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;常熟&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩巧，二箩拙，三箩回勿转，四箩拖捧柱，五箩富，六箩穷，七箩相公，八箩长工，九箩撑黄伞，十箩十畚箕，堆满老宅基。&lt;/p&gt;

&lt;p&gt;一螺巧，二螺笨，三螺拖捧头，四螺全不识，五螺富，六螺穷，七螺挑糞桶，八螺做长工，九螺骑白马，十螺坐官船，无螺一场空。&lt;br /&gt;
&lt;em&gt;解释：拖捧头指吃生活挨打，全不识是文盲。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;鄂西&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺四螺住瓦屋，五螺六螺穿草鞋，七螺八螺挑屎卖，九螺单，当天官，十螺全，点状元，十把筲箕，金银挑起&lt;br /&gt;
&lt;em&gt;原注：螺，即指纹。呈螺旋形的叫螺，有缺口的叫筲箕。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;杭州&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富；三罗四罗披麻布；五罗六罗开店铺；七罗八罗有官做；九罗一畚箕，顿顿吃干的；十罗全，中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;临海&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富， 三罗造酒醋，四罗卖豆腐， 五罗掼刀枪，六罗杀鸡娘， 七罗七，讨饭匹， 八罗八，拜菩萨， 九罗九，做太守， 十罗十，生个小儿别大别。 满手鸡，做个状元有吃又有嬉。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;缙云&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一脶穷两脶富，三脶换豆腐，四脶卖酒醋，五脶骑白马，六脶管天下，七脶摇铃铃，八脶上天灯，九脶九，做太守，十脶全，中状元。&lt;br /&gt;
&lt;em&gt;【注释】换豆腐——缙云古代，豆腐不用钱买，而是用豆子换，一斤豆子换三斤豆腐。做豆腐的人家一般没有多少利润，只是赚些豆腐渣喂猪。后来有了豆腐店，豆腐也可以用钱买了，但是习惯上依旧叫做“换豆腐”。摇铃铃——指当道士。上天灯——“天灯”是缙云旧俗由“积善人家”一家或几家轮流点在十字路口或丁字路口的灯笼。这里指积善。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;诸暨&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺挑担捡鸡屙，四螺骑白马五螺管天下六螺做丞相七螺磨刀枪八螺做贼，九螺逼（追）着——十只鸡，满天飞！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;天台&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富，三罗卖豆腐，四罗捉狗屙，五罗高官做，六罗磨刀枪，七罗杀爹娘，八罗八，敲菩萨，九罗九，做太守，十罗全，生个小囝中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;瑞安&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一雷富，二雷平平过，三雷扫猪污，四雷卖豆腐，五背刀枪，六雷杀爷娘，七雷骑白马，八雷坐天下，九雷九，背快口，十雷全，中状元，十雷空，做相公。” 潮汕&lt;/p&gt;

&lt;p&gt;一螺一飞飞，二螺走脚皮，三螺有米煮，四螺无米炊，五螺五田庄，六螺百心肠，七螺七益益，八螺做乞食，九螺九翁翁，十螺做太公。无螺十簸箕，免赚就有钱。&lt;br /&gt;
&lt;em&gt;解释：飞飞即悠闲，走脚皮指到处奔波。五田庄即家有田地，地主也。百心肠是太多烦恼操心事。七益益指乐善好施。九翁翁即翁媳婆媳关系和睦。做太公即四代同堂，多子多福。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一螺坐颓颓；二螺走脚皮；三螺无米煮；四螺无米炊；五螺五田庄；六螺操心肠；七螺七役役；八螺做乞食；九螺九安安；十螺会做官&lt;/p&gt;

&lt;p&gt;一螺穷、二螺家、三螺四螺开当铺、五个螺作媒婆、六个螺作小偷、七螺遭殃、八螺吃糠、九螺一个箕到老坐着吃、十个螺作大官。&lt;/p&gt;

&lt;p&gt;一螺巧嗲嗲；二螺走脚皮；三螺有米煮；四螺胡饭炊；五螺顾三餐；六螺岁寿长；七螺七富富；八螺起大厝；九螺九安安；没螺没簸箕；有厝又有钱。&lt;/p&gt;

&lt;p&gt;一螺学爬爬，二螺走骹皮，三螺无米煮，四螺无饭炊，五螺五挖挖，六螺做乞食，七螺穷到底，八螺富上天，九螺玉春臼，十螺金瓦厝。&lt;/p&gt;

&lt;p&gt;一螺一帝帝，二螺走脚皮，三螺无米煮，四螺有饭炊，五螺五益益，六螺给狗拆，七螺七富裕，八螺起大厝，九螺挖壁空，十螺做相公。十畚箕，有嗵食有嗵披。&lt;/p&gt;

&lt;p&gt;一螺一直坐，二螺撑脚蹄，三螺无米煮，四螺学喷吹，五螺偷挖壁，六螺做乞食，七螺穷，八螺富，九螺起大厝，十螺中进士。&lt;/p&gt;

&lt;p&gt;一螺一短短，二螺欠脚气，三螺学吹箫，四螺有米煮，五螺五尖当，六螺日头长，七螺七娃娃，八螺做乞吃，九螺九安安，十螺会做官。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;赣南客家&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺牵猪古（意为贫贱），四螺蒸酒卖豆腐，五螺骑马应圩，六螺打死人，七螺做中人，八螺驮锁链（即戴枷锁），九螺解下院（意为吃官司），十螺十足，层箩列谷，瓮子盛足，无螺穿椟惢（意为什么都留不住）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;闽东&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷，二螺富，三螺开酒库，四螺没饭吃，五螺做乞食（乞丐），六螺圆车车（形容人的富态），七螺做老爹（大官），八螺是庙祝（寺庙中管香火的人），九螺会当家，十螺管天下。（《福州百首民谣》）&lt;/p&gt;

&lt;p&gt;一缧堆，二缧衰，三缧没米煮，四缧有饭吹，五缧红又红，六缧去卖田，七缧富又富，八缧穿破裤，九缧弯又弯，十缧去做官&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;闽南&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺一直坐，二螺撑脚蹄，三螺无米煮，四螺学喷吹，五螺偷挖壁，六螺做乞食，七螺穷，八螺富，九螺起大厝，十螺中进士。&lt;/p&gt;

&lt;p&gt;一脶一坐座，二脶走脚皮，三脶无米煮，四脶有饭炊，五脶五花妆，六脶米头全，七脶七挖壁，八脶做乞吃，九脶九上山，十脶去做官。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;金门&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺一嗲嗲，二螺跄脚蹉，三螺贤歕吹，四螺有米煮，五螺五花装，六螺米头长，七螺七挖壁，八螺做乞食，十螺去做官。十畚箕有通食阁有通偏。&lt;br /&gt;
&lt;em&gt;注：跄脚蹉：单脚跳。贤歕吹：很会哭。偏：占便宜。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;资兴&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩穷二箩富，三箩蒸曲卖豆腐，四箩家军窟，五箩家贫民窟，六箩骑马走街上过，七箩打杀人，八箩煞娘爷，九箩咚咚咚，十箩窃古种&lt;br /&gt;
&lt;em&gt;解释：家军窟指充军命，家平民窟，是平民命，骑马，是指中状元。打杀人，指江湖人氏，煞娘爷，相当狠。咚咚咚，不是乞丐就是戏子。窃古种，野种（窃古=小偷）。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;安仁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩穷二箩富，三箩四箩蒸酒卖豆腐，五箩六箩打草鞋，七箩八箩挑屎卖，九箩一操，骑马背官刀，十箩全，中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;乐昌客家&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷，二螺富，三螺牵猪牯，四螺蒸酒卖豆腐，五螺骑马迎喝，六螺打死人，七螺做中人，八螺锁链，九螺解锁链，十螺盎子装粥吃客家,。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;南雄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一脶穷，二脶富，三脶蒸酒磨豆腐，四脶满冬冬，五脶做相公，六脶打死人，七脶做中人，八脶平平过，九脶十脶饿死没人知。一脶巧，二脶饱，三脶抓屎爪，四脶满冬冬，五脶做相公，六脶骑马过河，七脶银打秤锤，八脶九脶子孙多，十脶死了劳劳嘈。河北&lt;/p&gt;

&lt;p&gt;一斗穷，二斗富，三斗四斗开当铺，五斗卖煤子，六斗小贼子。七斗当员外，八斗作知府，九斗十斗，不做就有。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;附带一个测试游戏-测测你的指纹:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;附带一个测试游戏（测测你的指纹）&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;注意：o为斗（手指肚上纹路形成一个闭合的圆圈环绕状），x为簸萁（其余任何图案,一般就是纹路不闭合，开口向下）斗是代表得到，簸萁是代表付出&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;提示：男左女右&lt;/em&gt;&lt;br /&gt;
顺序：大食中无小&amp;mdash;-性格简述&lt;br /&gt;
1.  oooox&amp;mdash;有点能力，思想波动，见异思迁，讲信用。&lt;br /&gt;
2.  ooxoo&amp;mdash;朋友多，工作有成绩，感情深，性格开朗。&lt;br /&gt;
3.  ooooo&amp;mdash;有信心，办事积极，有领导能力，身体健康，易挫折。&lt;br /&gt;
4.  oooxx&amp;mdash;信用心强，心地善良。&lt;br /&gt;
5.  xxxxx&amp;mdash;温顺有耐力，性格朴实，正直。&lt;br /&gt;
6.  oxxxo&amp;mdash;花言巧语，诡计多端，以自己为主。&lt;br /&gt;
7.  xxxxo&amp;mdash;机智，狡猾。&lt;br /&gt;
8.  xxxoo&amp;mdash;唱材，感情用事，活泼，不自量。&lt;br /&gt;
9.  xoxoo&amp;mdash;稳重，有活动能力，有信心，容易自我毁灭。&lt;br /&gt;
10. xooxo&amp;mdash;活动能力超群，能充分理解事物。&lt;br /&gt;
11. xxooo&amp;mdash;感情丰富，不稳定，欠考虑，活动能力强，易挫折。&lt;br /&gt;
12. oxxoo&amp;mdash;易动感情，愿意助人。&lt;br /&gt;
13. oxoxo&amp;mdash;感情丰富，有活动能力，好显示自己。&lt;br /&gt;
14. oxoox&amp;mdash;易动感情，才貌超群，肯设想，通情达理。&lt;br /&gt;
15. ooxox&amp;mdash;手巧，有能力，遇事冷静，表面急躁。&lt;br /&gt;
16. xxoxo&amp;mdash;热情，好吹嘘，有时积极稳重，独立活动不多。&lt;br /&gt;
17. ooxxo&amp;mdash;自私，不听劝，好色，易挫折。&lt;br /&gt;
18. xxoxx&amp;mdash;手巧，聪明，固执。&lt;br /&gt;
19. oooxo&amp;mdash;做事漂亮，口是心非，经不起情色考验。&lt;br /&gt;
20. xxxox&amp;mdash;有经验，办事认真，稳重。&lt;br /&gt;
21. xooox&amp;mdash;感情强烈，活泼，有耐心，自尊心强，但服从分配。&lt;br /&gt;
22. oxoxx&amp;mdash;好奇心强，有志气，有远见，但易失败。&lt;br /&gt;
23. xoooo&amp;mdash;能说能干，性格急躁，自尊心强。&lt;br /&gt;
24. oxooo&amp;mdash;想象力丰富，个性强，运气好。&lt;br /&gt;
25. xoxox&amp;mdash;做事无计划，通情达理，有活动能力。&lt;br /&gt;
26. xxoox&amp;mdash;斗争性强，性格坚强，有时狂热。&lt;br /&gt;
27. oxxxx&amp;mdash;性格温顺，善于为人，耿直，做事圆滑机智。&lt;br /&gt;
28. ooxxx&amp;mdash;强烈求知欲，做事坚强，文武兼备。&lt;br /&gt;
29. xoxxx&amp;mdash;铁面无私，有活动能力，待人热情。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（资料整理自网络，仅供参考）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>就这样认识了Gogs</title>
      <link>http://alimy.me/post/inf_201603182105/</link>
      <pubDate>Fri, 18 Mar 2016 21:05:00 CST</pubDate>
      
      <guid>http://alimy.me/post/inf_201603182105/</guid>
      <description>&lt;p&gt;大概是2015年12月21日，我想知道一些关于SGL(Skia Graphics Engine)的信息，就糊里糊涂的跳到
一个网站&lt;a href=&#34;https://libskia.so/&#34;&gt;https://libskia.so/&lt;/a&gt;, 然后顺便浏览了一下，做的还是很有吸引力的个人网站。其中有一
篇Blog： &lt;a href=&#34;https://libskia.so/b/discovering-gogs.html&#34;&gt;Discovering Gogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;博主写道:&lt;br /&gt;
I just discovered Gogs, a light Git web fronted written in Go.
After reading a bit on its website, I decided to try a bit, just
for fun. It was really easy to install it with NginX as reverse
proxy, everything is Gogs&amp;rsquo; documentation, and it was ready in
less than 10 minutes. Wonderful!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s still in beta, but already very functionnal, providing most
of the classic features such as issues, milestones, ssh keys, README.md
parser, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Finally, I just dropped my old Gitweb1, and I welcome you to my new Gogs! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我也跟着他的节奏部署了Gogs,用的是sqlite3作为数据库，安装非常简单，用户体验和Github
非常相似但简便的多。之前部署过Gitlab社区版，部署的时候各种的不爽，在我的机子上运行速度还不匝地，
无奈还是放弃用Gitlab，只使用cgit来web浏览git库。现在好了，有了gogs，部署简便，运行速度也很快，
UX也是棒棒的，我想说，这就是我一直想要的。&lt;/p&gt;

&lt;p&gt;附上Gogs的信息： &lt;a href=&#34;https://gogs.io&#34; title=&#34;官方网站&#34;&gt;【官网】&lt;/a&gt; &lt;a href=&#34;https://try.gogs.io&#34; title=&#34;官方演示&#34;&gt;【演示】&lt;/a&gt;  &lt;a href=&#34;https://github.com/gogits/gogs&#34; title=&#34;官方源码&#34;&gt;【源码】&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>50 Shades of Go</title>
      <link>http://alimy.me/post/dev_201603182045/</link>
      <pubDate>Fri, 18 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603182045/</guid>
      <description>

&lt;p&gt;Go is a simple and fun language, but, like any other language, it has a few gotchas&amp;hellip; Many of those gotchas are not entirely Go&amp;rsquo;s fault. Some of these mistakes are natural traps if you are coming from another language. Others are due to faulty assumptions and missing details.&lt;/p&gt;

&lt;p&gt;A lot of these gotchas may seem obvious if you took the time to learn the language reading the official spec, wiki, mailing list discussions, many great posts and presentations by Rob Pike, and the source code. Not everybody starts the same way though and that&amp;rsquo;s OK. If you are new to Go the information here will save you hours debugging your code.&lt;/p&gt;

&lt;p&gt;This post covers Go 1.5 and below.&lt;/p&gt;

&lt;h3 id=&#34;total-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Total Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;Unused Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;Unused Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;Redeclaring Variables Using Short Variable Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;Accidental Variable Shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8&#34;&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#10&#34;&gt;Map Capacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#11&#34;&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12&#34;&gt;Array Function Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13&#34;&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#14&#34;&gt;Slices and Arrays Are One-Dimensional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#15&#34;&gt;Accessing Non-Existing Map Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#16&#34;&gt;Strings Are Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#17&#34;&gt;Conversions Between Strings and Byte Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#18&#34;&gt;Strings and Index Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#19&#34;&gt;Strings Are Not Always UTF8 Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#20&#34;&gt;String Length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#21&#34;&gt;Missing Comma In Multi-Line Slice/Array/Map Literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22&#34;&gt;log.Fatal and log.Panic Do More Than Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23&#34;&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24&#34;&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#25&#34;&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#26&#34;&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#27&#34;&gt;Increments and Decrements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#28&#34;&gt;Bitwise NOT Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#29&#34;&gt;Operator Precedence Differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#30&#34;&gt;Unexported Structure Fields Are Not Encoded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#31&#34;&gt;App Exits With Active Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32&#34;&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33&#34;&gt;Sending to an Closed Channel Causes a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#35&#34;&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;intermediate-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Intermediate Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#36&#34;&gt;Closing HTTP Response Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#37&#34;&gt;Closing HTTP Connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#38&#34;&gt;Unmarshalling JSON Numbers into Interface Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#39&#34;&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#40&#34;&gt;Recovering From a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#41&#34;&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;for range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42&#34;&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43&#34;&gt;Slice Data Corruption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#44&#34;&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#45&#34;&gt;Type Declarations and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#46&#34;&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#47&#34;&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#48&#34;&gt;Deferred Function Call Argument Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#49&#34;&gt;Deferred Function Call Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#50&#34;&gt;Failed Type Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#51&#34;&gt;Blocked Goroutines and Resource Leaks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;advanced-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Advanced Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#52&#34;&gt;Using Pointer Receiver Methods On Value Instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#53&#34;&gt;Updating Map Value Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#54&#34;&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#55&#34;&gt;Stack and Heap Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#56&#34;&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#57&#34;&gt;Read and Write Operation Reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#58&#34;&gt;Preemptive Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-1-a-opening-brace-can-t-be-placed-on-a-separate-line:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most other languages that use braces you get to choose where you place them. Go is different. You can thank automatic semicolon injection (without lookahead) for this behavior. Yes, Go does have semicolons :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main()  
{ //error, can&#39;t have the opening brace on a separate line
    fmt.Println(&amp;quot;hello there!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(&amp;quot;works!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-2-a-unused-variables:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;2&#34;&gt;&lt;/a&gt;Unused Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have an unused variable your code will fail to compile. There&amp;rsquo;s an exception though. You must use variables you declare inside functions, but it&amp;rsquo;s OK if you have unused global variables. It&amp;rsquo;s also OK to have unused function arguments.&lt;/p&gt;

&lt;p&gt;If you assign a new value to the unused variable your code will still fail to compile. You need to use the variable value somehow to make the compiler happy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var gvar int //not an error

func main() {  
    var one int   //error, unused variable
    two := 2      //error, unused variable
    var three int //error, even though it&#39;s assigned 3 on the next line
    three = 3

    func(unused string) {
        fmt.Println(&amp;quot;Unused arg. No compile error&amp;quot;)
    }(&amp;quot;what?&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox473116179/main.go:6: one declared and not used /tmp/sandbox473116179/main.go:7: two declared and not used /tmp/sandbox473116179/main.go:8: three declared and not used
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var one int
    _ = one

    two := 2
    fmt.Println(two)

    var three int
    three = 3
    one = three

    var four int
    four = four
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to comment out or remove the unused variables :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-3-a-unused-imports:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;3&#34;&gt;&lt;/a&gt;Unused Imports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your code will fail to compile if you import a package without using any of its exported functions, interfaces, structures, or variables.&lt;/p&gt;

&lt;p&gt;If you really need the imported package you can use the blank identifier, _ , as its package name to avoid this compilation failure. The blank identifier is used to import packages for their side effects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox627475386/main.go:4: imported and not used: &amp;quot;fmt&amp;quot; /tmp/sandbox627475386/main.go:5: imported and not used: &amp;quot;log&amp;quot; /tmp/sandbox627475386/main.go:6: imported and not used: &amp;quot;time&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    _ &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = log.Println

func main() {  
    _ = time.Now
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to remove or comment out the unused imports :-) The goimports tool can help you with that.&lt;/p&gt;

&lt;h3 id=&#34;a-name-4-a-short-variable-declarations-can-be-used-only-inside-functions:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;4&#34;&gt;&lt;/a&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

myvar := 1 //error

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox265716165/main.go:3: non-declaration statement outside function body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var myvar = 1

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-5-a-redeclaring-variables-using-short-variable-declarations:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;5&#34;&gt;&lt;/a&gt;Redeclaring Variables Using Short Variable Declarations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t redeclare a variable in a standalone statement, but it is allowed in multi-variable declarations where at least one new variable is also declared.&lt;/p&gt;

&lt;p&gt;The redeclared variable has to be in the same block or you&amp;rsquo;ll end up with a shadowed variable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one := 1 //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox706333626/main.go:5: no new variables on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one, two := 1,2

    one,two = two,one
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-6-a-can-t-use-short-variable-declarations-to-set-field-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;6&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  data.result, err := work() //error
  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:18: non-name data.result on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though there&amp;rsquo;s a ticket to address this gotcha it&amp;rsquo;s unlikely to change because Rob Pike likes it &amp;ldquo;as is&amp;rdquo; :-)&lt;/p&gt;

&lt;p&gt;Use temporary variables or predeclare all your variables and use the standard assignment operator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  var err error
  data.result, err = work() //ok
  if err != nil {
    fmt.Println(err)
    return
  }

  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data) //prints: info: {result:13}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-7-a-accidental-variable-shadowing:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;7&#34;&gt;&lt;/a&gt;Accidental Variable Shadowing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The short variable declaration syntax is so convenient (especially for those coming from a dynamic language) that it&amp;rsquo;s easy to treat it like a regular assignment operation. If you make this mistake in a new code block there will be no compiler error, but your app will not do what you expect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := 1
    fmt.Println(x)     //prints 1
    {
        fmt.Println(x) //prints 1
        x := 2
        fmt.Println(x) //prints 2
    }
    fmt.Println(x)     //prints 1 (bad if you need 2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very common trap even for experienced Go developers. It&amp;rsquo;s easy to make and it could be hard to spot.&lt;/p&gt;

&lt;p&gt;You can use the vet command to find some of these problems. By default, vet will not perform any shadowed variable checks. Make sure to use the -shadow flag: go tool vet -shadow your_file.go&lt;/p&gt;

&lt;p&gt;Note that the vet command will not report all shadowed variables. Use go-nyet for more aggressive shadowed variable detection.&lt;/p&gt;

&lt;h3 id=&#34;a-name-8-a-can-t-use-nil-to-initialize-a-variable-without-an-explicit-type:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;8&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;nil&amp;rdquo; identifier can be used as the &amp;ldquo;zero value&amp;rdquo; for interfaces, functions, pointers, maps, slices, and channels. If you don&amp;rsquo;t specify the variable type the compiler will fail to compile your code because it can&amp;rsquo;t guess the type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x = nil //error

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox188239583/main.go:4: use of untyped nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x interface{} = nil

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-9-a-using-nil-slices-and-maps:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;9&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to add items to a &amp;ldquo;nil&amp;rdquo; slice, but doing the same with a map will produce a runtime panic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var s []int
    s = append(s,1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var m map[string]int
    m[&amp;quot;one&amp;quot;] = 1 //error

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-10-a-map-capacity:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;10&#34;&gt;&lt;/a&gt;Map Capacity&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can specify the map capacity when it&amp;rsquo;s created, but you can&amp;rsquo;t use the cap() function on maps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    m := make(map[string]int,99)
    cap(m) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox326543983/main.go:5: invalid argument m (type map[string]int) for cap
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-11-a-strings-can-t-be-nil:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;11&#34;&gt;&lt;/a&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha for developers who are used to assigning &amp;ldquo;nil&amp;rdquo; identifiers to string variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string = nil //error

    if x == nil { //error
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment /tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string //defaults to &amp;quot;&amp;quot; (zero value)

    if x == &amp;quot;&amp;quot; {
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-12-a-array-function-arguments:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;12&#34;&gt;&lt;/a&gt;Array Function Arguments&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr [3]int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [1 2 3] (not ok if you need [7 2 3])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original array data use array pointer types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr *[3]int) {
        (*arr)[0] = 7
        fmt.Println(arr) //prints &amp;amp;[7 2 3]
    }(&amp;amp;x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []int{1,2,3}

    func(arr []int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-13-a-unexpected-values-in-slice-and-array-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;13&#34;&gt;&lt;/a&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can happen if you are used to the &amp;ldquo;for-in&amp;rdquo; or &amp;ldquo;foreach&amp;rdquo; statements in other languages. The &amp;ldquo;range&amp;rdquo; clause in Go is different. It generates two values: the first value is the item index while the second value is the item data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for v := range x {
        fmt.Println(v) //prints 0, 1, 2
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for _, v := range x {
        fmt.Println(v) //prints a, b, c
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-14-a-slices-and-arrays-are-one-dimensional:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;14&#34;&gt;&lt;/a&gt;Slices and Arrays Are One-Dimensional&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may seem like Go supports multi-dimensional arrays and slices, but it doesn&amp;rsquo;t. Creating arrays of arrays or slices of slices is possible though. For numerical computation apps that rely on dynamic multi-dimensional arrays it&amp;rsquo;s far from ideal in terms of performance and complexity.&lt;/p&gt;

&lt;p&gt;You can build dynamic multi-dimensional arrays using raw one-dimensional arrays, slices of &amp;ldquo;independent&amp;rdquo; slices, and slices of &amp;ldquo;shared data&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;If you are using raw one-dimensional arrays you are responsible for indexing, bounds checking, and memory reallocations when the arrays need to grow.&lt;/p&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;independent&amp;rdquo; slices is a two step process. First, you have to create the outer slice. Then, you have to allocate each inner slice. The inner slices are independent of each other. You can grow and shrink them without affecting other inner slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := 2
    y := 4

    table := make([][]int,x)
    for i:= range table {
        table[i] = make([]int,y)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;shared data&amp;rdquo; slices is a three step process. First, you have to create the data &amp;ldquo;container&amp;rdquo; slice that will hold raw data. Then, you create the outer slice. Finally, you initialize each inner slice by reslicing the raw data slice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    h, w := 2, 4

    raw := make([]int,h*w)
    for i := range raw {
        raw[i] = i
    }
    fmt.Println(raw,&amp;amp;raw[4])
    //prints: [0 1 2 3 4 5 6 7] &amp;lt;ptr_addr_x&amp;gt;

    table := make([][]int,h)
    for i:= range table {
        table[i] = raw[i*w:i*w + w]
    }

    fmt.Println(table,&amp;amp;table[1][0])
    //prints: [[0 1 2 3] [4 5 6 7]] &amp;lt;ptr_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a spec/proposal for multi-dimensional arrays and slices, but it looks like it&amp;rsquo;s a low priority feature at this point in time.&lt;/p&gt;

&lt;h3 id=&#34;a-name-15-a-accessing-non-existing-map-keys:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;15&#34;&gt;&lt;/a&gt;Accessing Non-Existing Map Keys&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner
This is a gotcha for developers who expect to get &amp;ldquo;nil&amp;rdquo; identifiers (like it&amp;rsquo;s done in other languages). The returned value will be &amp;ldquo;nil&amp;rdquo; if the &amp;ldquo;zero value&amp;rdquo; for the corresponding data type is &amp;ldquo;nil&amp;rdquo;, but it&amp;rsquo;ll be different for other data types. Checking for the appropriate &amp;ldquo;zero value&amp;rdquo; can be used to determine if the map record exists, but it&amp;rsquo;s not always reliable (e.g., what do you do if you have a map of booleans where the &amp;ldquo;zero value&amp;rdquo; is false). The most reliable way to know if a given map record exists is to check the second value returned by the map access operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if v := x[&amp;quot;two&amp;quot;]; v == &amp;quot;&amp;quot; { //incorrect
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if _,ok := x[&amp;quot;two&amp;quot;]; !ok {
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-16-a-strings-are-immutable:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;16&#34;&gt;&lt;/a&gt;Strings Are Immutable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trying to update an individual character in a string variable using the index operator will result in a failure. Strings are read-only byte slices (with a few extra properties). If you do need to update a string then use a byte slice instead converting it to a string type when necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    x[0] = &#39;T&#39;

    fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox305565531/main.go:7: cannot assign to x[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    xbytes := []byte(x)
    xbytes[0] = &#39;T&#39;

    fmt.Println(string(xbytes)) //prints Text
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn&amp;rsquo;t really the right way to update characters in a text string because a given character could be stored in multiple bytes. If you do need to make updates to a text string convert it to a rune sclice first. Even with rune slices a single character might span multiple runes, which can happen if you have characters with grave accent, for example. This complicated and ambiguous nature of &amp;ldquo;characters&amp;rdquo; is the reason why Go strings are represented as byte sequences.&lt;/p&gt;

&lt;h3 id=&#34;a-name-17-a-conversions-between-strings-and-byte-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;17&#34;&gt;&lt;/a&gt;Conversions Between Strings and Byte Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you convert a string to a byte slice (and vice versa) you get a complete copy of the orginal data. It&amp;rsquo;s not like a cast operation in other languages and it&amp;rsquo;s not like reslicing where the new slice variable points to the same underlying array used by the original byte slice.&lt;/p&gt;

&lt;p&gt;Go does have a couple of optimizations for []byte to string and string to []byte conversions to avoid extra allocations (with more optimizations on the todo list).&lt;/p&gt;

&lt;p&gt;The first optimization avoids extra allocations when []byte keys are used to lookup entries in map[string] collections: m[string(key)].&lt;/p&gt;

&lt;p&gt;The second optimization avoids extra allocations in for range clauses where strings are converted to []byte: for i,v := range []byte(str) {&amp;hellip;}.&lt;/p&gt;

&lt;h3 id=&#34;a-name-18-a-strings-and-index-operator:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;18&#34;&gt;&lt;/a&gt;Strings and Index Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index operator on a string returns a byte value, not a character (like it&amp;rsquo;s done in other languages).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    fmt.Println(x[0]) //print 116
    fmt.Printf(&amp;quot;%T&amp;quot;,x[0]) //prints uint8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to access specific string &amp;ldquo;characters&amp;rdquo; (unicode code points/runes) use the for range clause. The official &amp;ldquo;unicode/utf8&amp;rdquo; package and the experimental utf8string package (golang.org/x/exp/utf8string) are also useful. The utf8string package includes a convenient At() method. Converting the string to a slice of runes is an option too.&lt;/p&gt;

&lt;h3 id=&#34;a-name-19-a-strings-are-not-always-utf8-text:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;19&#34;&gt;&lt;/a&gt;Strings Are Not Always UTF8 Text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;String values are not required to be UTF8 text. They can contain arbitrary bytes. The only time strings are UTF8 is when string literals are used. Even then they can include other data using escape sequences.&lt;/p&gt;

&lt;p&gt;To know if you have a UTF8 text string use the ValidString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data1 := &amp;quot;ABC&amp;quot;
    fmt.Println(utf8.ValidString(data1)) //prints: true

    data2 := &amp;quot;A\xfeC&amp;quot;
    fmt.Println(utf8.ValidString(data2)) //prints: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-20-a-string-length:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;20&#34;&gt;&lt;/a&gt;String Length&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you are a python developer and you have the following piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data = u&#39;♥&#39;  
print(len(data)) #prints: 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you convert it to a similar Go code snippet you might be surprised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(len(data)) //prints: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in len() function returns the number of bytes instead of the number of characters like it&amp;rsquo;s done for unicode strings in Python.&lt;/p&gt;

&lt;p&gt;To get the same results in Go use the RuneCountInString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(utf8.RuneCountInString(data)) //prints: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically the RuneCountInString() function doesn&amp;rsquo;t return the number of characters because a single character may span multiple runes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;é&amp;quot;
    fmt.Println(len(data))                    //prints: 3
    fmt.Println(utf8.RuneCountInString(data)) //prints: 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-21-a-missing-comma-in-multi-line-slice-array-and-map-literals:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;21&#34;&gt;&lt;/a&gt;Missing Comma In Multi-Line Slice, Array, and Map Literals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2 //error
    }
    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox367520156/main.go:6: syntax error: need trailing comma before newline in composite literal /tmp/sandbox367520156/main.go:8: non-declaration statement outside function body /tmp/sandbox367520156/main.go:9: syntax error: unexpected }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2,
    }
    x = x

    y := []int{3,4,} //no error
    y = y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You won&amp;rsquo;t get a compiler error if you leave the trailing comma when you collapse the declaration to be on a single line.&lt;/p&gt;

&lt;h3 id=&#34;a-name-22-a-log-fatal-and-log-panic-do-more-than-log:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;22&#34;&gt;&lt;/a&gt;log.Fatal and log.Panic Do More Than Log&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logging libraries often provide different log levels. Unlike those logging libraries, the log package in Go does more than log if you call its Fatal&lt;em&gt;() and Panic&lt;/em&gt;() functions. When your app calls those functions Go will also terminate your app :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;log&amp;quot;

func main() {  
    log.Fatalln(&amp;quot;Fatal Level: log entry&amp;quot;) //app exits here
    log.Println(&amp;quot;Normal Level: log entry&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-23-a-built-in-data-structure-operations-are-not-synchronized:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;23&#34;&gt;&lt;/a&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though Go has a number of features to support concurrency natively, concurrency safe data collections are not one them :-) It&amp;rsquo;s your responsibility to ensure the data collection updates are atomic. Goroutines and channels are the recommended way to implement those atomic operations, but you can also leverage the &amp;ldquo;sync&amp;rdquo; package if it makes sense for your application.&lt;/p&gt;

&lt;h3 id=&#34;a-name-24-a-iteration-values-for-strings-in-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;24&#34;&gt;&lt;/a&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index value (the first value returned by the &amp;ldquo;range&amp;rdquo; operation) is the index of the first byte for the current &amp;ldquo;character&amp;rdquo; (unicode code point/rune) returned in the second value. It&amp;rsquo;s not the index for the current &amp;ldquo;character&amp;rdquo; like it&amp;rsquo;s done in other languages. Note that an actual character might be represented by multiple runes. Make sure to check out the &amp;ldquo;norm&amp;rdquo; package (golang.org/x/text/unicode/norm) if you need to work with characters.&lt;/p&gt;

&lt;p&gt;The for range clauses with string variables will try to interpret the data as UTF8 text. For any byte sequences it doesn&amp;rsquo;t understand it will return 0xfffd runes (aka unicode replacement characters) instead of the actual data. If you have arbitrary (non-UTF8 text) data stored in your string variables, make sure to convert them to byte slices to get all stored data as is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;A\xfe\x02\xff\x04&amp;quot;
    for _,v := range data {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)

    fmt.Println()
    for _,v := range []byte(data) {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfe 0x2 0xff 0x4 (good)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-25-a-iterating-through-a-map-using-a-for-range-clause:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;25&#34;&gt;&lt;/a&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha if you expect the items to be in a certain order (e.g., ordered by the key value). Each map iteration will produce different results. The Go runtime tries to go an extra mile randomizing the iteration order, but it doesn&amp;rsquo;t always succeed so you may get several identical map iterations. Don&amp;rsquo;t be surprised to see 5 identical iterations in a row.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    m := map[string]int{&amp;quot;one&amp;quot;:1,&amp;quot;two&amp;quot;:2,&amp;quot;three&amp;quot;:3,&amp;quot;four&amp;quot;:4}
    for k,v := range m {
        fmt.Println(k,v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you use the Go Playground (&lt;a href=&#34;https://play.golang.org/&#34;&gt;https://play.golang.org/&lt;/a&gt;) you&amp;rsquo;ll always get the same results because it doesn&amp;rsquo;t recompile the code unless you make a change.&lt;/p&gt;

&lt;h3 id=&#34;a-name-26-a-fallthrough-behavior-in-switch-statements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;26&#34;&gt;&lt;/a&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;case&amp;rdquo; blocks in &amp;ldquo;switch&amp;rdquo; statements break by default. This is different from other languages where the default behavior is to fall through to the next &amp;ldquo;case&amp;rdquo; block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;: //error
        case &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can force the &amp;ldquo;case&amp;rdquo; blocks to fall through by using the &amp;ldquo;fallthrough&amp;rdquo; statement at the end of each &amp;ldquo;case&amp;rdquo; block. You can also rewrite your switch statement to use expression lists in the &amp;ldquo;case&amp;rdquo; blocks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;, &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints true (ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-27-a-increments-and-decrements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;27&#34;&gt;&lt;/a&gt;Increments and Decrements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages have increment and decrement operators. Unlike other languages, Go doesn&amp;rsquo;t support the prefix version of the operations. You also can&amp;rsquo;t use these two operators in expressions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    ++i //error
    fmt.Println(data[i++]) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox101231828/main.go:8: syntax error: unexpected ++ /tmp/sandbox101231828/main.go:9: syntax error: unexpected ++, expecting :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    i++
    fmt.Println(data[i])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-28-a-bitwise-not-operator:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;28&#34;&gt;&lt;/a&gt;Bitwise NOT Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages use ~ as the unary NOT operator (aka bitwise complement), but Go reuses the XOR operator (^) for that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(~2) //error
}
Compile Error:

/tmp/sandbox965529189/main.go:6: the bitwise complement operator is ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var d uint8 = 2
    fmt.Printf(&amp;quot;%08b\n&amp;quot;,^d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go still uses ^ as the XOR operator, which may be confusing for some people.&lt;/p&gt;

&lt;p&gt;If you want you can represent a unary NOT operation (e.g, NOT 0x02) with a binary XOR operation (e.g., 0x02 XOR 0xff). This could explain why ^ is reused to represent unary NOT operations.&lt;/p&gt;

&lt;p&gt;Go also has a special &amp;lsquo;AND NOT&amp;rsquo; bitwise operator (&amp;amp;^), which adds to the NOT operator confusion. It looks like a special feature/hack to support A AND (NOT B) without requiring parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var a uint8 = 0x82
    var b uint8 = 0x02
    fmt.Printf(&amp;quot;%08b [A]\n&amp;quot;,a)
    fmt.Printf(&amp;quot;%08b [B]\n&amp;quot;,b)

    fmt.Printf(&amp;quot;%08b (NOT B)\n&amp;quot;,^b)
    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [B XOR 0xff]\n&amp;quot;,b,0xff,b ^ 0xff)

    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [A XOR B]\n&amp;quot;,a,b,a ^ b)
    fmt.Printf(&amp;quot;%08b &amp;amp; %08b = %08b [A AND B]\n&amp;quot;,a,b,a &amp;amp; b)
    fmt.Printf(&amp;quot;%08b &amp;amp;^%08b = %08b [A &#39;AND NOT&#39; B]\n&amp;quot;,a,b,a &amp;amp;^ b)
    fmt.Printf(&amp;quot;%08b&amp;amp;(^%08b)= %08b [A AND (NOT B)]\n&amp;quot;,a,b,a &amp;amp; (^b))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-29-a-operator-precedence-differences:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;29&#34;&gt;&lt;/a&gt;Operator Precedence Differences&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from the &amp;ldquo;bit clear&amp;rdquo; operators (&amp;amp;^) Go has a set of standard operators shared by many other languages. The operator precedence is not always the same though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Printf(&amp;quot;0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; %#x\n&amp;quot;,0x2 &amp;amp; 0x2 + 0x4)
    //prints: 0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; 0x6
    //Go:    (0x2 &amp;amp; 0x2) + 0x4
    //C++:    0x2 &amp;amp; (0x2 + 0x4) -&amp;gt; 0x2

    fmt.Printf(&amp;quot;0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; %#x\n&amp;quot;,0x2 + 0x2 &amp;lt;&amp;lt; 0x1)
    //prints: 0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x6
    //Go:     0x2 + (0x2 &amp;lt;&amp;lt; 0x1)
    //C++:   (0x2 + 0x2) &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x8

    fmt.Printf(&amp;quot;0xf | 0x2 ^ 0x2 -&amp;gt; %#x\n&amp;quot;,0xf | 0x2 ^ 0x2)
    //prints: 0xf | 0x2 ^ 0x2 -&amp;gt; 0xd
    //Go:    (0xf | 0x2) ^ 0x2
    //C++:    0xf | (0x2 ^ 0x2) -&amp;gt; 0xf
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-30-a-unexported-structure-fields-are-not-encoded:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;30&#34;&gt;&lt;/a&gt;Unexported Structure Fields Are Not Encoded&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The struct fields starting with lowercase letters will not be (json, xml, gob, etc.) encoded, so when you decode the structure you&amp;rsquo;ll end up with zero values in those unexported fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

type MyData struct {  
    One int
    two string
}

func main() {  
    in := MyData{1,&amp;quot;two&amp;quot;}
    fmt.Printf(&amp;quot;%#v\n&amp;quot;,in) //prints main.MyData{One:1, two:&amp;quot;two&amp;quot;}

    encoded,_ := json.Marshal(in)
    fmt.Println(string(encoded)) //prints {&amp;quot;One&amp;quot;:1}

    var out MyData
    json.Unmarshal(encoded,&amp;amp;out)

    fmt.Printf(&amp;quot;%#v\n&amp;quot;,out) //prints main.MyData{One:1, two:&amp;quot;&amp;quot;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-31-a-app-exits-with-active-goroutines:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;31&#34;&gt;&lt;/a&gt;App Exits With Active Goroutines&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app will not wait for all your goroutines to complete. This is a common mistake for beginners in general. Everybody starts somewhere, so there&amp;rsquo;s no shame in making rookie mistakes :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        go doit(i)
    }
    time.Sleep(1 * time.Second)
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    time.Sleep(3 * time.Second)
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[1] is running
all done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the most common solutions is to use a &amp;ldquo;WaitGroup&amp;rdquo; variable. It will allow the main goroutine to wait until all worker goroutines are done. If your app has long running workers with message processing loops you&amp;rsquo;ll also need a way to signal those goroutines that it&amp;rsquo;s time to exit. You can send a &amp;ldquo;kill&amp;rdquo; message to each worker. Another option is to close a channel all workers are receiving from. It&amp;rsquo;s a simple way to signal all goroutines at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,done,wg)
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int,done &amp;lt;-chan struct{},wg sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    &amp;lt;- done
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this app you&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[0] is done
[1] is running
[1] is done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the workers are done before the main goroutine exists. Great! However, you&amp;rsquo;ll also see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fatal error: all goroutines are asleep - deadlock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not so great :-) What&amp;rsquo;s going on? Why is there a deadlock? The workers exited and they executed wg.Done(). The app should work.&lt;/p&gt;

&lt;p&gt;The deadlock happens because each worker gets a copy of the original &amp;ldquo;WaitGroup&amp;rdquo; variable. When workers execute wg.Done() it has no effect on the &amp;ldquo;WaitGroup&amp;rdquo; variable in the main goroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    wq := make(chan interface{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,wq,done,&amp;amp;wg)
    }

    for i := 0; i &amp;lt; workerCount; i++ {
        wq &amp;lt;- i
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int, wq &amp;lt;-chan interface{},done &amp;lt;-chan struct{},wg * sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    for {
        select {
        case m := &amp;lt;- wq:
            fmt.Printf(&amp;quot;[%v] m =&amp;gt; %v\n&amp;quot;,workerId,m)
        case &amp;lt;- done:
            fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
            return
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it works as expected :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-32-a-sending-to-an-unbuffered-channel-returns-as-soon-as-the-target-receiver-is-ready:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;32&#34;&gt;&lt;/a&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sender will not be blocked until your message is processed by the receiver. Depending on the machine where you are running the code, the receiver goroutine may or may not have enough time to process the message before the sender continues its execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    ch := make(chan string)

    go func() {
        for m := range ch {
            fmt.Println(&amp;quot;processed:&amp;quot;,m)
        }
    }()

    ch &amp;lt;- &amp;quot;cmd.1&amp;quot;
    ch &amp;lt;- &amp;quot;cmd.2&amp;quot; //won&#39;t be processed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-33-a-sending-to-an-closed-channel-causes-a-panic:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;33&#34;&gt;&lt;/a&gt;Sending to an Closed Channel Causes a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Receiving from a closed channel is safe. The ok return value in a receive statement will be set to false indicating that no data was received. If you are receiving from a buffered channel you&amp;rsquo;ll get the buffered data first and once it&amp;rsquo;s empty the ok return value will be false.&lt;/p&gt;

&lt;p&gt;Sending data to a closed channel causes a panic. It is a documented behavior, but it&amp;rsquo;s not very intuitive for new Go developers who might expect the send behavior to be similar to the receive behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get the first result
    fmt.Println(&amp;lt;-ch)
    close(ch) //not ok (you still have other senders)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on your application the fix will be different. It might be a minor code change or it might require a change in your application design. Either way, you&amp;rsquo;ll need to make sure your application doesn&amp;rsquo;t try to send data to a closed channel.&lt;/p&gt;

&lt;p&gt;The buggy example can be fixed by using a special cancellation channel to signal the remaining workers that their results are no longer neeeded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    done := make(chan struct{})
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            select {
            case ch &amp;lt;- (idx + 1) * 2: fmt.Println(idx,&amp;quot;sent result&amp;quot;)
            case &amp;lt;- done: fmt.Println(idx,&amp;quot;exiting&amp;quot;)
            }
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    close(done)
    //do other work
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-34-a-using-nil-channels:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;34&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send and receive operations on a nil channel block forver. It&amp;rsquo;s a well documented behavior, but it can be a surprise for new Go developers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    var ch chan int
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the code you&amp;rsquo;ll see a runtime error like this: fatal error: all goroutines are asleep - deadlock!&lt;/p&gt;

&lt;p&gt;This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;  
import &amp;quot;time&amp;quot;

func main() {  
    inch := make(chan int)
    outch := make(chan int)

    go func() {
        var in &amp;lt;- chan int = inch
        var out chan &amp;lt;- int
        var val int
        for {
            select {
            case out &amp;lt;- val:
                out = nil
                in = inch
            case val = &amp;lt;- in:
                out = outch
                in = nil
            }
        }
    }()

    go func() {
        for r := range outch {
            fmt.Println(&amp;quot;result:&amp;quot;,r)
        }
    }()

    time.Sleep(0)
    inch &amp;lt;- 1
    inch &amp;lt;- 2
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-35-a-methods-with-value-receivers-can-t-change-the-original-value:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;35&#34;&gt;&lt;/a&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Method receivers are like regular function arguments. If it&amp;rsquo;s declared to be a value then your function/method gets a copy of your receiver argument. This means making changes to the receiver will not affect the original value unless your receiver is a map or slice variable and you are updating the items in the collection or the fields you are updating in the receiver are pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    key *string
    items map[string]bool
}

func (this *data) pmethod() {  
    this.num = 7
}

func (this data) vmethod() {  
    this.num = 8
    *this.key = &amp;quot;v.key&amp;quot;
    this.items[&amp;quot;vmethod&amp;quot;] = true
}

func main() {  
    key := &amp;quot;key.1&amp;quot;
    d := data{1,&amp;amp;key,make(map[string]bool)}

    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=1 key=key.1 items=map[]

    d.pmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=key.1 items=map[]

    d.vmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=v.key items=map[vmethod:true]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-36-a-closing-http-response-body:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;36&#34;&gt;&lt;/a&gt;Closing HTTP Response Body&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you make requests using the standard http library you get a http response variable. If you don&amp;rsquo;t read the response body you still need to close it. Note that you must do it for empty responses too. It&amp;rsquo;s very easy to forget especially for new Go developers.&lt;/p&gt;

&lt;p&gt;Some new Go developers do try to close the response body, but they do it in the wrong place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    defer resp.Body.Close()//not ok
    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code works for successful requests, but if the http request fails the resp variable might be nil, which will cause a runtime panic.&lt;/p&gt;

&lt;p&gt;The most common why to close the response body is by using a defer call after the http response error check.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if err != nil {
        fmt.Println(err)
        return
    }

    defer resp.Body.Close()//ok, most of the time :-)
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time when your http request fails the resp variable will be nil and the err variable will be non-nil. However, when you get a redirection failure both variables will be non-nil. This means you can still end up with a leak.&lt;/p&gt;

&lt;p&gt;You can fix this leak by adding a call to close non-nil response bodies in the http response error handling block. Another option is to use one defer call to close response bodies for all failed and successful requests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The orignal implementation for resp.Body.Close() also reads and discards the remaining response body data. This ensured that the http connection could be reused for another request if the keepalive http connection behavior is enabled. The latest http client behavior is different. Now it&amp;rsquo;s your responsibility to read and discard the remaining response data. If you don&amp;rsquo;t do it the http connection might be closed instead of being reused. This little gotcha is supposed to be documented in Go 1.5.&lt;/p&gt;

&lt;p&gt;If reusing the http connection is important for your application you might need to add something like this at the end of your response processing logic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_, err = io.Copy(ioutil.Discard, resp.Body)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will be necessary if you don&amp;rsquo;t read the entire response body right away, which might happen if you are processing json API responses with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;json.NewDecoder(resp.Body).Decode(&amp;amp;data)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-37-a-closing-http-connections:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;37&#34;&gt;&lt;/a&gt;Closing HTTP Connections&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some HTTP servers keep network connections open for a while (based on the HTTP 1.1 spec and the server &amp;ldquo;keep-alive&amp;rdquo; configurations). By default, the standard http library will close the network connections only when the target HTTP server asks for it. This means your app may run out of sockets/file descriptors under certain conditions.&lt;/p&gt;

&lt;p&gt;You can ask the http library to close the connection after your request is done by setting the Close field in the request variable to true.&lt;/p&gt;

&lt;p&gt;Another option is to add a Connection request header and set it to close. The target HTTP server should respond with a Connection: close header too. When the http library sees this response header it will also close the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    req, err := http.NewRequest(&amp;quot;GET&amp;quot;,&amp;quot;http://golang.org&amp;quot;,nil)
    if err != nil {
        fmt.Println(err)
        return
    }

    req.Close = true
    //or do this:
    //req.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)

    resp, err := http.DefaultClient.Do(req)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also disable http connection reuse globally. You&amp;rsquo;ll need to create a custom http transport configuration for it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    tr := &amp;amp;http.Transport{DisableKeepAlives: true}
    client := &amp;amp;http.Client{Transport: tr}

    resp, err := client.Get(&amp;quot;http://golang.org&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(resp.StatusCode)

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you send a lot of requests to the same HTTP server it&amp;rsquo;s ok to keep the network connection open. However, if your app sends one or two requests to many different HTTP servers in a short period of time it&amp;rsquo;s a good idea to close the network connections right after your app receives the responses. Increasing the open file limit might be a good idea too. The correct solution depends on your application though.&lt;/p&gt;

&lt;h3 id=&#34;a-name-38-a-unmarshalling-json-numbers-into-interface-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;38&#34;&gt;&lt;/a&gt;Unmarshalling JSON Numbers into Interface Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Go treats numeric values in JSON as float64 numbers when you decode/unmarshal JSON data into an interface. This means the following code will fail with a panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = result[&amp;quot;status&amp;quot;].(int) //error
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Runtime Panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic: interface conversion: interface is float64, not int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the JSON value you are trying to decode is an integer you have serveral options.&lt;/p&gt;

&lt;p&gt;Option one: use the float value as-is :-)&lt;/p&gt;

&lt;p&gt;Option two: convert the float value to the integer type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = uint64(result[&amp;quot;status&amp;quot;].(float64)) //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option three: use a Decoder type to unmarshal JSON and tell it to represent JSON numbers using the Number interface type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status,_ = result[&amp;quot;status&amp;quot;].(json.Number).Int64() //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the string representation of your Number value to unmarshal it to a different numeric type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status uint64
  if err := json.Unmarshal([]byte(result[&amp;quot;status&amp;quot;].(json.Number).String()), &amp;amp;status); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option four: use a struct type that maps your numeric value to the numeric type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result struct {
    Status uint64 `json:&amp;quot;status&amp;quot;`
  }

  if err := json.NewDecoder(bytes.NewReader(data)).Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Printf(&amp;quot;result =&amp;gt; %+v&amp;quot;,result)
  //prints: result =&amp;gt; {Status:200}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option five: use a struct that maps your numeric value to the json.RawMessage type if you need to defer the value decoding.&lt;/p&gt;

&lt;p&gt;This option is useful if you have to perform conditional JSON field decoding where the field type or structure might change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  records := [][]byte{
    []byte(`{&amp;quot;status&amp;quot;: 200, &amp;quot;tag&amp;quot;:&amp;quot;one&amp;quot;}`),
    []byte(`{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;two&amp;quot;}`),
  }

  for idx, record := range records {
    var result struct {
      StatusCode uint64
      StatusName string
      Status json.RawMessage `json:&amp;quot;status&amp;quot;`
      Tag string             `json:&amp;quot;tag&amp;quot;`
    }

    if err := json.NewDecoder(bytes.NewReader(record)).Decode(&amp;amp;result); err != nil {
      fmt.Println(&amp;quot;error:&amp;quot;, err)
      return
    }

    var sstatus string
    if err := json.Unmarshal(result.Status, &amp;amp;sstatus); err == nil {
      result.StatusName = sstatus
    }

    var nstatus uint64
    if err := json.Unmarshal(result.Status, &amp;amp;nstatus); err == nil {
      result.StatusCode = nstatus
    }

    fmt.Printf(&amp;quot;[%v] result =&amp;gt; %+v\n&amp;quot;,idx,result)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-39-a-comparing-structs-arrays-slices-and-maps:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;39&#34;&gt;&lt;/a&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the equality operator, ==, to compare struct variables if each structure field can be compared with the equality operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    fp float32
    complex complex64
    str string
    char rune
    yes bool
    events &amp;lt;-chan string
    handler interface{}
    ref *byte
    raw [10]byte
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2) //prints: v1 == v2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of the struct fields are not comparable then using the equality operator will result in compile time errors. Note that arrays are comparable only if their data items are comparable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go does provide a number of helper functions to compare variables that can&amp;rsquo;t be compared using the comparison operators.&lt;/p&gt;

&lt;p&gt;The most generic solution is to use the DeepEqual() function in the reflect package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true

    m1 := map[string]string{&amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;}
    m2 := map[string]string{&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;}
    fmt.Println(&amp;quot;m1 == m2:&amp;quot;,reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true

    s1 := []int{1, 2, 3}
    s2 := []int{1, 2, 3}
    fmt.Println(&amp;quot;s1 == s2:&amp;quot;,reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from being slow (which may or may not be a deal breaker for your application), DeepEqual() also has its own gotchas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,reflect.DeepEqual(b1, b2)) //prints: b1 == b2: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() doesn&amp;rsquo;t consider an empty slice to be equal to a &amp;ldquo;nil&amp;rdquo; slice. This behavior is different from the behavior you get using the bytes.Equal() function. bytes.Equal() considers &amp;ldquo;nil&amp;rdquo; and empty slices to be equal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,bytes.Equal(b1, b2)) //prints: b1 == b2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() isn&amp;rsquo;t always perfect comparing slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

func main() {  
    var str string = &amp;quot;one&amp;quot;
    var in interface{} = &amp;quot;one&amp;quot;
    fmt.Println(&amp;quot;str == in:&amp;quot;,str == in,reflect.DeepEqual(str, in))
    //prints: str == in: true true

    v1 := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    v2 := []interface{}{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1, v2))
    //prints: v1 == v2: false (not ok)

    data := map[string]interface{}{
        &amp;quot;code&amp;quot;: 200,
        &amp;quot;value&amp;quot;: []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;},
    }
    encoded, _ := json.Marshal(data)
    var decoded map[string]interface{}
    json.Unmarshal(encoded, &amp;amp;decoded)
    fmt.Println(&amp;quot;data == decoded:&amp;quot;,reflect.DeepEqual(data, decoded))
    //prints: data == decoded: false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your byte slices (or strings) contain text data you might be tempted to use ToUpper() or ToLower() from the &amp;ldquo;bytes&amp;rdquo; and &amp;ldquo;strings&amp;rdquo; packages when you need to compare values in a case insensitive manner (before using ==,bytes.Equal(), or bytes.Compare()). It will work for English text, but it will not work for text in many other languages. strings.EqualFold() and bytes.EqualFold() should be used instead.&lt;/p&gt;

&lt;p&gt;If your byte slices contain secrets (e.g., cryptographic hashes, tokens, etc.) that need to be validated against user-provided data, don&amp;rsquo;t use reflect.DeepEqual(), bytes.Equal(), or bytes.Compare() because those functions will make your application vulnerable to timing attacks. To avoid leaking the timing information use the functions from the &amp;lsquo;crypto/subtle&amp;rsquo; package (e.g., subtle.ConstantTimeCompare()).&lt;/p&gt;

&lt;h3 id=&#34;a-name-40-a-recovering-from-a-panic:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;40&#34;&gt;&lt;/a&gt;Recovering From a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recover() function can be used to catch/intercept a panic. Calling recover() will do the trick only when it&amp;rsquo;s done in a deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    recover() //doesn&#39;t do anything
    panic(&amp;quot;not good&amp;quot;)
    recover() //won&#39;t be executed :)
    fmt.Println(&amp;quot;ok&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    defer func() {
        fmt.Println(&amp;quot;recovered:&amp;quot;,recover())
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to recover() works only if it&amp;rsquo;s called directly in your deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func doRecover() {  
    fmt.Println(&amp;quot;recovered =&amp;gt;&amp;quot;,recover()) //prints: recovered =&amp;gt; &amp;lt;nil&amp;gt;
}

func main() {  
    defer func() {
        doRecover() //panic is not recovered
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-41-a-updating-and-referencing-item-values-in-slice-array-and-map-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;41&#34;&gt;&lt;/a&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data values generated in the &amp;ldquo;range&amp;rdquo; clause are copies of the actual collection elements. They are not references to the original items. This means that updating the values will not change the original data. It also means that taking the address of the values will not give you pointers to the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for _,v := range data {
        v *= 10 //original item is not changed
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [1 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original collection record value use the index operator to access the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for i,_ := range data {
        data[i] *= 10
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [10 20 30]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your collection holds pointer values then the rules are slightly different. You still need to use the index operator if you want the original record to point to another value, but you can update the data stored at the target location using the second value in the &amp;ldquo;for range&amp;rdquo; clause.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []*struct{num int} {{1},{2},{3}}

    for _,v := range data {
        v.num *= 10
    }

    fmt.Println(data[0],data[1],data[2]) //prints &amp;amp;{10} &amp;amp;{20} &amp;amp;{30}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-42-a-hidden-data-in-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;42&#34;&gt;&lt;/a&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you reslice a slice, the new slice will reference the array of the original slice. If you forget about this behavior it can lead to unexpected memory usage if your application allocates large temporary slices creating new slices from them to refer to small sections of the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    return raw[:3]
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 10000 &amp;lt;byte_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid this trap make sure to copy the data you need from the temporary slice (instead of reslicing it).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    res := make([]byte,3)
    copy(res,raw[:3])
    return res
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 3 &amp;lt;byte_addr_y&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-43-a-slice-data-corruption:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;43&#34;&gt;&lt;/a&gt;Slice Data &amp;ldquo;Corruption&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you need to rewrite a path (stored in a slice). You reslice the path to reference each directory modifying the first folder name and then you combine the names to create a new path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex]
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; uffixBBBB (not ok)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It didn&amp;rsquo;t work as you expected. Instead of &amp;ldquo;AAAAsuffix/BBBBBBBBB&amp;rdquo; you ended up with &amp;ldquo;AAAAsuffix/uffixBBBB&amp;rdquo;. It happened because both directory slices referenced the same underlying array data from the original path slice. This means that the original path is also modified. Depending on your application this might be a problem too.&lt;/p&gt;

&lt;p&gt;This problem can fixed by allocating new slices and copying the data you need. Another option is to use the full slice expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex:sepIndex] //full slice expression
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB (ok now)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extra parameter in the full slice expression controls the capacity for the new slice. Now appending to that slice will trigger a new buffer allocation instead of overwriting the data in the second slice.&lt;/p&gt;

&lt;h3 id=&#34;a-name-44-a-stale-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;44&#34;&gt;&lt;/a&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multiple slices can reference the same data. This can happen when you create a new slice from an existing slice, for example. If your application relies on this behavior to function properly then you&amp;rsquo;ll need to worry about &amp;ldquo;stale&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;At some point adding data to one of the slices will result in a new array allocation when the original array can&amp;rsquo;t hold any more new data. Now other slices will point to the old array (with old data).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;

func main() {  
    s1 := []int{1,2,3}
    fmt.Println(len(s1),cap(s1),s1) //prints 3 3 [1 2 3]

    s2 := s1[1:]
    fmt.Println(len(s2),cap(s2),s2) //prints 2 2 [2 3]

    for i := range s2 { s2[i] += 20 }

    //still referencing the same array
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [22 23]

    s2 = append(s2,4)

    for i := range s2 { s2[i] += 10 }

    //s1 is now &amp;quot;stale&amp;quot;
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [32 33 14]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-45-type-declarations-and-methods:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;45&#34;&gt;&amp;lt;/&amp;gt;Type Declarations and Methods&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a type declaration by defining a new type from an existing (non-interface) type, you don&amp;rsquo;t inherit the methods defined for that existing type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myMutex sync.Mutex

func main() {  
    var mtx myMutex
    mtx.Lock() //error
    mtx.Unlock() //error  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox106401185/main.go:9: mtx.Lock undefined (type myMutex has no field or method Lock) /tmp/sandbox106401185/main.go:10: mtx.Unlock undefined (type myMutex has no field or method Unlock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do need the methods from the original type you can define a new struct type embedding the original type as an anonymous field.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker struct {  
    sync.Mutex
}

func main() {  
    var lock myLocker
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interface type declarations also retain their method sets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker sync.Locker

func main() {  
    var lock myLocker = new(sync.Mutex)
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-46-a-breaking-out-of-for-switch-and-for-select-code-blocks:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;46&#34;&gt;&lt;/a&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &amp;ldquo;break&amp;rdquo; statement without a label only gets you out of the inner switch/select block. If using a &amp;ldquo;return&amp;rdquo; statement is not an option then defining a label for the outer loop is the next best thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    loop:
        for {
            switch {
            case true:
                fmt.Println(&amp;quot;breaking out...&amp;quot;)
                break loop
            }
        }

    fmt.Println(&amp;quot;out!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &amp;ldquo;goto&amp;rdquo; statement will do the trick too&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;a-name-47-a-iteration-variables-and-closures-in-for-statements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;47&#34;&gt;&lt;/a&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most common gotcha in Go. The iteration variables in for statements are reused in each iteration. This means that each closure (aka function literal) created in your for loop will reference the same variable (and they&amp;rsquo;ll get that variable&amp;rsquo;s value at the time those goroutines start executing).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func() {
            fmt.Println(v)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest solution (that doesn&amp;rsquo;t require any changes to the goroutine) is to save the current iteration variable value in a local variable inside the for loop block.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        vcopy := v //
        go func() {
            fmt.Println(vcopy)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another solution is to pass the current iteration variable as a parameter to the anonymous goroutine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func(in string) {
            fmt.Println(in)
        }(v)
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a slightly more complicated version of the trap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        v := v
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you think you&amp;rsquo;ll see when you run this code (and why)?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []*field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-48-a-deferred-function-call-argument-evaluation:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;48&#34;&gt;&lt;/a&gt;Deferred Function Call Argument Evaluation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arguments for a deferred function call are evaluated when the defer statement is evaluated (not when the function is actually executing).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var i int = 1

    defer fmt.Println(&amp;quot;result =&amp;gt;&amp;quot;,func() int { return i * 2 }())
    i++
    //prints: result =&amp;gt; 2 (not ok if you expected 4)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-49-a-deferred-function-call-execution:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;49&#34;&gt;&lt;/a&gt;Deferred Function Call Execution&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The deferred calls are executed at the end of the containing function and not at the end of the containing code block. It&amp;rsquo;s an easy mistake to make for new Go developers confusing the deferred code execution rules with the variable scoping rules. It can become a problem if you have a long running function with a for loop that tries to defer resource cleanup calls in each iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        f, err := os.Open(target)
        if err != nil {
            fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err) //prints error: too many open files
            break
        }
        defer f.Close() //will not be closed at the end of this code block
        //do something with the file...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to solve the problem is by wrapping the code block in a function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        func() {
            f, err := os.Open(target)
            if err != nil {
                fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err)
                return
            }
            defer f.Close() //ok
            //do something with the file...
        }()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to get rid of the defer statement :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-50-a-failed-type-assertions:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;50&#34;&gt;&lt;/a&gt;Failed Type Assertions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failed type assertions return the &amp;ldquo;zero value&amp;rdquo; for the target type used in the assertion statement. This can lead to unexpected behavior when it&amp;rsquo;s mixed with variable shadowing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if data, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,data)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; 0 (not &amp;quot;great&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if res, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; great (as expected)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-51-a-blocked-goroutines-and-resource-leaks:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;51&#34;&gt;&lt;/a&gt;Blocked Goroutines and Resource Leaks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rob Pike talked about a number of fundamental concurrency patterns in his &amp;ldquo;Go Concurrency Patterns&amp;rdquo; presentation at Google I/O in 2012. Fetching the first result from a number of targets is one of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function starts a goroutines for each search replica. Each goroutine sends its search result to the result channel. The first value from the result channel is returned.&lt;/p&gt;

&lt;p&gt;What about the results from the other goroutines? What about the goroutines themselves?&lt;/p&gt;

&lt;p&gt;The result channel in the First() function is unbuffered. This means that only the first goroutine returns. All other goroutines are stuck trying to send their results. This means if you have more than one replica each call will leak resources.&lt;/p&gt;

&lt;p&gt;To avoid the leaks you need to make sure all goroutines exit. One potential solution is to use a buffered result channel big enough to hold all results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,len(replicas))
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another potential solution is to use a select statement with a default case and a buffered result channel that can hold one value. The default case ensures that the goroutines don&amp;rsquo;t get stuck even when the result channel can&amp;rsquo;t receive messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,1)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        default:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use a special cancellation channel to interrupt the workers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    done := make(chan struct{})
    defer close(done)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        case &amp;lt;- done:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }

    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why did the presentation contain these bugs? Rob Pike simply didn&amp;rsquo;t want to comlicate the slides. It makes sense, but it can be a problem for new Go developers who would use the code as is without thinking that it might have problems.&lt;/p&gt;

&lt;h3 id=&#34;a-name-52-a-using-pointer-receiver-methods-on-value-instances:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;52&#34;&gt;&lt;/a&gt;Using Pointer Receiver Methods On Value Instances&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to call a pointer receiver method on a value as long as the value is addressable. In other words, you don&amp;rsquo;t need to have a value receiver version of the method in some cases.&lt;/p&gt;

&lt;p&gt;Not every variable is addressable though. Map elements are not addressable. Variables referenced through interfaces are also not addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func (p *data) print() {  
    fmt.Println(&amp;quot;name:&amp;quot;,p.name)
}

type printer interface {  
    print()
}

func main() {  
    d1 := data{&amp;quot;one&amp;quot;}
    d1.print() //ok

    var in printer = data{&amp;quot;two&amp;quot;} //error
    in.print()

    m := map[string]data {&amp;quot;x&amp;quot;:data{&amp;quot;three&amp;quot;}}
    m[&amp;quot;x&amp;quot;].print() //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox017696142/main.go:21: cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver)
/tmp/sandbox017696142/main.go:25: cannot call pointer method on m[&amp;quot;x&amp;quot;] /tmp/sandbox017696142/main.go:25: cannot take the address of m[&amp;quot;x&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-53-a-updating-map-value-fields:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;53&#34;&gt;&lt;/a&gt;Updating Map Value Fields&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a map of struct values you can&amp;rsquo;t update individual struct fields.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox380452744/main.go:9: cannot assign to m[&amp;quot;x&amp;quot;].name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work because map elements are not addressable.&lt;/p&gt;

&lt;p&gt;What can be extra confusing for new Go devs is the fact that slice elements are addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    s := []data {{&amp;quot;one&amp;quot;}}
    s[0].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(s)    //prints: [{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that a while ago it was possible to update map element fields in one of the Go compilers (gccgo), but that behavior was quickly fixed :-) It was also considered as a potential feature for Go 1.3. It wasn&amp;rsquo;t important enough to support at that point in time, so it&amp;rsquo;s still on the todo list.&lt;/p&gt;

&lt;p&gt;The first work around is to use a temporary variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    r := m[&amp;quot;x&amp;quot;]
    r.name = &amp;quot;two&amp;quot;
    m[&amp;quot;x&amp;quot;] = r
    fmt.Printf(&amp;quot;%v&amp;quot;,m) //prints: map[x:{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another workaround is to use a map of pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(m[&amp;quot;x&amp;quot;]) //prints: &amp;amp;{two}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, what happens when you run this code?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;z&amp;quot;].name = &amp;quot;what?&amp;quot; //???
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-54-a-nil-interfaces-and-nil-interfaces-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;54&#34;&gt;&lt;/a&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the second most common gotcha in Go because interfaces are not pointers even though they may look like pointers. Interface variables will be &amp;ldquo;nil&amp;rdquo; only when their type and value fields are &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The interface type and value fields are populated based on the type and value of the variable used to create the corresponding interface variable. This can lead to unexpected behavior when you are trying to check if an interface variable equals to &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data *byte
    var in interface{}

    fmt.Println(data,data == nil) //prints: &amp;lt;nil&amp;gt; true
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; true

    in = data
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; false
    //&#39;data&#39; is &#39;nil&#39;, but &#39;in&#39; is not &#39;nil&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch out for this trap when you have a function that returns interfaces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res) //prints: good result: &amp;lt;nil&amp;gt;
        //&#39;res&#39; is not &#39;nil&#39;, but its value is &#39;nil&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        } else {
            return nil //return an explicit &#39;nil&#39;
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;bad result (res is nil)&amp;quot;) //here as expected
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-55-a-stack-and-heap-variables:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;55&#34;&gt;&lt;/a&gt;Stack and Heap Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don&amp;rsquo;t always know if your variable is allocated on the stack or heap. In C++ creating variables using the new operator always means that you have a heap variable. In Go the compiler decides where the variable will be allocated even if the new() or make() functions are used. The compiler picks the location to store the variable based on its size and the result of &amp;ldquo;escape analysis&amp;rdquo;. This also means that it&amp;rsquo;s ok to return references to local variables, which is not ok in other languages like C or C++.&lt;/p&gt;

&lt;p&gt;If you need to know where your variables are allocated pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go run -gcflags -m app.go).&lt;/p&gt;

&lt;h3 id=&#34;a-name-56-a-gomaxprocs-concurrency-and-parallelism:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;56&#34;&gt;&lt;/a&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 1.4 and below uses only one execution context / OS thread. This means that only one goroutine can execute at any given time. Starting with 1.5 Go sets the number of execution contexts to the number of logical CPU cores returned by runtime.NumCPU(). That number may or may not match the total number of logical CPU cores on your system depending on the CPU affinity settings of your process. You can adjust this number by changing the GOMAXPROCS environment variable or by calling the runtime.GOMAXPROCS() function.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a common misconception that GOMAXPROCS represents the number of CPUs Go will use to run goroutines. The runtime.GOMAXPROCS() function documentation adds more to the confusion. The GOMAXPROCS variable description (&lt;a href=&#34;https://golang.org/pkg/runtime/&#34;&gt;https://golang.org/pkg/runtime/&lt;/a&gt;) does a better job talking about OS threads.&lt;/p&gt;

&lt;p&gt;You can set GOMAXPROCS to more than the number of your CPUs. The max value for GOMAXPROCS is 256.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: X (1 on play.golang.org)
    fmt.Println(runtime.NumCPU())       //prints: X (1 on play.golang.org)
    runtime.GOMAXPROCS(20)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 20
    runtime.GOMAXPROCS(300)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 256
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-57-a-read-and-write-operation-reordering:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;57&#34;&gt;&lt;/a&gt;Read and Write Operation Reordering&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go may reorder some operations, but it ensures that the overall behavior in the goroutine where it happens doesn&amp;rsquo;t change. However, it doesn&amp;rsquo;t guarantee the order of execution across multiple goroutines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;runtime&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = runtime.GOMAXPROCS(3)

var a, b int

func u1() {  
    a = 1
    b = 2
}

func u2() {  
    a = 3
    b = 4
}

func p() {  
    println(a)
    println(b)
}

func main() {  
    go u1()
    go u2()
    go p()
    time.Sleep(1 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code a few times you might see these a and b variable combinations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
2

3
4

0
2

0
0

1
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting combination for a and b is &amp;ldquo;02&amp;rdquo;. It shows that b was updated before a.&lt;/p&gt;

&lt;p&gt;If you need to preserve the order of read and write operations across multiple goroutines you&amp;rsquo;ll need to use channels or the appropriate constructs from the &amp;ldquo;sync&amp;rdquo; package.&lt;/p&gt;

&lt;h3 id=&#34;a-name-58-a-preemptive-scheduling:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;58&#34;&gt;&lt;/a&gt;Preemptive Scheduling&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s possible to have a rogue goroutine that prevents other goroutines from running. It can happen if you have a for loop that doesn&amp;rsquo;t allow the scheduler to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for loop doesn&amp;rsquo;t have to be empty. It&amp;rsquo;ll be a problem as long as it contains code that doesn&amp;rsquo;t trigger the scheduler execution.&lt;/p&gt;

&lt;p&gt;The scheduler will run after GC, &amp;ldquo;go&amp;rdquo; statements, blocking channel operations, blocking system calls, and lock operations. It may also run when a non-inlined function is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        fmt.Println(&amp;quot;not done!&amp;quot;) //not inlined
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out if the function you call in the for loop is inlined pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go build -gcflags -m).&lt;/p&gt;

&lt;p&gt;Another option is to invoke the scheduler explicitly. You can do it with the Gosched() function from the &amp;ldquo;runtime&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        runtime.Gosched()
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you made it here and you have comments or ideas feel free to add a note to this Reddit discussion.&lt;/p&gt;

&lt;p&gt;Thank you for your feedback and suggestions!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&#34; title=&#34;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>诚意十足的招聘页面</title>
      <link>http://alimy.me/post/etc_201603152115/</link>
      <pubDate>Tue, 15 Mar 2016 21:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/etc_201603152115/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160315210501.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210501.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160315210502.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210502.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210503.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210503.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210504.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210504.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210505.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210505.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210506.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210506.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210507.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210507.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210508.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210508.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210509.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210509.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210510.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210510.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210511.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210511.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210512.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210512.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210513.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210513.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210514.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210514.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210515.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210515.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210516.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210516.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210517.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210517.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210518.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210518.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210519.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210519.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
