<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on 北 野 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/post/</link>
    
    
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <updated>Sun, 25 Nov 2018 20:59:00 CST</updated>
    
    <item>
      <title>FAQs: ssh</title>
      <link>http://alimy.me/post/dev_201811252059/</link>
      <pubDate>Sun, 25 Nov 2018 20:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811252059/</guid>
      <description>&lt;h4 id=&#34;sect-解决ssh登录后闲置时间过长而断开连接&#34;&gt;&amp;sect;解决ssh登录后闲置时间过长而断开连接&lt;/h4&gt;

&lt;p&gt;我们通过终端连接服务器时，当鼠标和键盘长时间不操作，服务器就会自动断开连接，我们还需要重新连接，感觉很麻烦，总结一下解决此问题的方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一、
修改/etc/ssh/sshd_config配置文件，找到ClientAliveCountMax（单位为分钟）修改你想要的值，
执行service sshd reload&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法二、
找到所在用户的.ssh目录,如root用户该目录在：/root/.ssh/
在该目录创建config文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /root/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加入下面一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerAliveInterval 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，重新开启root用户的shell，则ssh远程服务器的时候，
不会因为长时间操作断开。应该是加入这句之后，ssh客户端会每隔一
段时间自动与ssh服务器通信一次，所以长时间操作不会断开。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法三、
修改/etc/profile配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增加：TMOUT=1800
这样30分钟没操作就自动LOGOUT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法四、
利用expect 模拟键盘动作，在闲置时间之内模拟地给个键盘响应,将下列代码保存为xxx，然后用expect执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect  
set timeout 60  
spawn ssh user@host   
  interact {          
        timeout 300 {send &amp;quot;\x20&amp;quot;}  
  } 
expect xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着按提示输入密码就可以了，这样每隔300秒就会自动打一个空格(\x20)，具体的时间间隔可以根据具体情况设置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法五、
如果你在windows下通过工具连接，可以设置为
secureCRT：选项&amp;mdash;终端&amp;mdash;反空闲 中设置每隔多少秒发送一个字符串，或者是NO-OP协议包
putty：putty -&amp;gt; Connection -&amp;gt; Seconds between keepalives ( 0 to turn off ), 默认为0, 改为300.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法六、&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务端配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/sshd_config
ClientAliveInterval 60     #服务端主动向客户端请求响应的间隔
ClientAliveCountMax 10    #服务器发出请求后客户端没有响应的次数达到一定值就自动断开
sudo restart ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端配置 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/ssh_config  #或~/.ssh/config

TCPKeepAlive=yes
ServerAliveInterval 60   #客户端主动向服务端请求响应的间隔
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i &amp;lt;key-file&amp;gt; -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveInterval=30 ubuntu@&amp;lt;ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-重用&#34;&gt;&amp;sect;重用&lt;/h4&gt;

&lt;p&gt;如果你用mac本的话，很不方便的是没有clone功能，新窗口时需要重新输入繁琐的用户名和密码，对于经常排查线上问题的程序猿来说是一件很悲催的事 情，同样幸运的是ssh提供了连接重用功能，这个功能的原理很简单，开一个ssh连接放在后台，以后再需要用ssh到同样的远程主机时，ssh会直接用这 个连接的socket文件，不再创建新的连接了，同理，也不需要进行用户身份验证了，是不是很happy，只需要新建文件~/.ssh/config并输 入如下命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-bad-owner-or-permissions-on-home-ssh-config&#34;&gt;&amp;sect;Bad owner or permissions on $HOME/.ssh/config&lt;/h4&gt;

&lt;p&gt;The ssh with RHEL 4 is a lot more anal about security checking. In my case, it was the fact that $HOME/.ssh/config was group-writable which was causing it to barf. To fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
$ chmod 600 *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this error message is kind of stupid, since $HOME/.ssh had permissions 700 on it, and $HOME had 750 permissions on it. If any process managed to evade those permissions, changing the permissions on the config file would be similarly defeated.&lt;/p&gt;

&lt;h4 id=&#34;sect-在那些没退出的-ssh-会话里用-优雅-的断开连接&#34;&gt;&amp;sect;在那些没退出的 ssh 会话里用 ~. “优雅” 的断开连接&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ ~.
$ man ssh
...
ESCAPE CHARACTERS
     ...

     The supported escapes (assuming the default `~&#39;) are:

     ~.      Disconnect.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>sshuttle：不需配置的 VPN</title>
      <link>http://alimy.me/post/dev_201811250757/</link>
      <pubDate>Sun, 25 Nov 2018 07:57:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811250757/</guid>
      <description>&lt;p&gt;sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle，按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。&lt;/p&gt;

&lt;p&gt;sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sshuttle/sshuttle
$ cd sshuttle
$ sudo ./setup.py install
$ sshuttle -r username@sshserver 0.0.0.0/0 -vv
Starting sshuttle proxy.
[local sudo] Password: 
firewall manager: Starting firewall with Python version 2.7.15
firewall manager: ready method name nat.
IPv6 enabled: False
UDP enabled: False
DNS enabled: False
User enabled: False
Binding redirector: 12300 12299
TCP redirector listening on (&#39;127.0.0.1&#39;, 12299).
TCP redirector listening with &amp;lt;socket._socketobject object at 0x7f5eb68b1c90&amp;gt;.
Starting client with Python version 2.7.15
c : connecting to server...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.vpsee.com/2011/05/sshuttle-a-simple-instant-vpn/&#34; title=&#34;sshuttle as vpn&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppArmor的前世今生和基本使用</title>
      <link>http://alimy.me/post/dev_201811171435/</link>
      <pubDate>Sat, 17 Nov 2018 14:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811171435/</guid>
      <description>&lt;h4 id=&#34;一-mac和dac-一些前置知识&#34;&gt;一：MAC和DAC (一些前置知识)&lt;/h4&gt;

&lt;p&gt;DAC(Discretionary Access Control)，自主访问控制，是最常用的一类访问控制机制，意思为主体（文件所有者）可以自主指定系统中其它用户对其文件的所有权，最典型的就是Linux的&amp;rdquo;拥有者/同组用户/其他&amp;rdquo;。这种方式虽然为用户提供了很大的灵活性，但是缺乏必要的安全性&lt;/p&gt;

&lt;p&gt;MAC(Mandatory Access Control)，强制访问控制,在这种机制下，系统中的每一个进程，每一个文件，每一个IPC主体都被管理员按照严格的规则设置了相应的安全属性，不能被用户和其它直接或间接的修改。&lt;/p&gt;

&lt;h4 id=&#34;二-apparmor-https-gitlab-com-apparmor-apparmor-apparmor-in-gitlab&#34;&gt;二：&lt;a href=&#34;https://gitlab.com/apparmor/apparmor&#34; title=&#34;AppArmor in GitLab&#34;&gt;AppArmor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由于SELinux使用复杂，适用于对安全要求特别高的企业或者组织，为了简化操作，就推出了AppArmor，所以可以说AppArmor脱胎于SELinux，但与SELinux基于角色的MAC不同的是，AppArmor是与程序绑定的基于路径的MAC，也就是说如果路径发生改变，策略就会失效。一般的Linux的系统，都会内置以上两种MAC其中的一种，这也意味着，你需要对文件（其它）进行操作，你需要同时通过DAC和 MAC的检测。&lt;/p&gt;

&lt;p&gt;AppArmor有两种工作模式：enforcement、complain/learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enforcement – 在这种模式下，配置文件里列出的限制条件都会得到执行，并且对于违反这些限制条件的程序会进行日志记录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Complain – 在这种模式下，配置文件里的限制条件不会得到执行，AppArmor只是对程序的行为进行记录。例如程序可以写一个在配置文件里注明只读的文件，但AppArmor不会对程序的行为进行限制，只是进行记录。这种模式也叫学习模式，如果某个程序的行为不符合其配置文件的限制，可以将其行为记录到系统日志，并且可以根据程序的行为，将日志转换成配置文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AppArmor可以对程序进行多方面的限制，详细可以看官方文档，这里只提供几个基本的例子：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文件系统的访问控制   例：  /home/Desktop/a.c rw 表示程序可以对/home/Desktop/a.c 进行读和写。&lt;/li&gt;
&lt;li&gt;资源限制   例： set rlimit as&amp;lt;=1M ，表示该程序可以使用的虚拟内存小于等于1M&lt;/li&gt;
&lt;li&gt;访问网络   例： network inet tcp ,表示该程序可以在IPV4的情况下使用TCP协议 　&lt;/li&gt;
&lt;li&gt;capability条目 例：capability setgid，表示程序进行setgid操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;三-基本使用&#34;&gt;三：基本使用&lt;/h4&gt;

&lt;p&gt;ubuntu自带AppArmor，所以以ubuntu14.04为例。
最好先安装了apparmor的管理工具套装：apt-get install apparmor-utils&lt;/p&gt;

&lt;p&gt;测试程序源码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
int main(int argc, char *argv[])  
{  
 　　FILE *f;  
 　　int nn, i;   char ch;   
 　　if(3 == argc){   
  　　　　f = fopen(argv[1], &amp;quot;w&amp;quot;);   
  　 if(f == NULL){                          printf(&amp;quot;Open file %s with write ERROR\n&amp;quot;, argv[1]);  
   　　return 2;  
　　　}   
  　nn = strlen(argv[2]);   
   i = 0;   
   while(i &amp;lt; nn){   
   　　fputc(argv[2][i], f);  
   　　++i; 
  　}  
  fclose(f); 
  }else if(argc == 2){  
  　　f = fopen(argv[1], &amp;quot;r&amp;quot;);  
  　　if(NULL == f){  
   　　　　printf(&amp;quot;Open file %s with read ERROR\n&amp;quot;, argv[1]);  
   　　　　return 2;  
  　　}   
  　　while((ch=fgetc(f)) != EOF){   
   　　　　printf(&amp;quot;%c&amp;quot;, ch);  
 　　 }   
  　　printf(&amp;quot;\n&amp;quot;); 
  　　fclose(f); 
 }else{ 
  　　printf(&amp;quot;Usage: test file **\n&amp;quot;);   
  　　return 3;  
 } 
 
　　 return 0;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本功能是对，文件进行读写，使用如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　$　./test a.c &amp;quot;hello,world&amp;quot;  #进行写
　$　./test a.c  #进行读
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以根据 aa-genprof 生成配置文件，生成的文件在/etc/apparmor.d下，文件名为home.jdchen.test&lt;/p&gt;

&lt;p&gt;生成的文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于apparmor采取类似于白名单的机制，所以不能进行任何操作。
现在给配置文件添加可写的权限并重新加载。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;
    /home/jdchen/a.c w，

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后介绍几个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ Start : sudo /etc/init.d/apparmor start   #启动
$ Stop : sudo /etc/init.d/apparmor stop   #停止
$ reload: sudo /etc/init.d/apparmor reload 重新加载
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在修改配置之后，需要重载：&lt;/p&gt;

&lt;p&gt;可以试着查看一下日志，节选：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ov 11 04:23:53 ubuntu kernel: [ 2419.881291] audit_printk_skb: 15 callbacks suppressed
Nov 11 04:23:53 ubuntu kernel: [ 2419.881306] audit: type=1400 audit(1478867033.872:204): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4108 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
Nov 11 04:24:07 ubuntu kernel: [ 2433.212034] audit: type=1400 audit(1478867047.204:205): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4111 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不需要配置，可以直接将配置文件删除。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.cnblogs.com/0xJDchen/p/6055531.html&#34; title=&#34;Apparmor的前世今生和基本使用&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Athens:香港服务器Docker部署</title>
      <link>http://alimy.me/post/dev_201811111946/</link>
      <pubDate>Sun, 11 Nov 2018 19:46:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811111946/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;go1.11开始加入module功能支持GOPROXY，解决go依赖包下载问题(你懂的！),Athens应运而生。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gomods.io/&#34; title=&#34;Athens&#34;&gt;官网介绍&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Athens is a project building on top of vgo (or go1.11+) trying to bring dependencies closer to you so you can count on repeatable builds even at a time when VCS is down.&lt;/p&gt;

&lt;p&gt;The big goal of Athens is to provide a new place where dependencies — not code — live. Dependencies are immutable blobs of code and associated metadata that come from Github. They live in storage that Athens controls.&lt;/p&gt;

&lt;h4 id=&#34;docker部署&#34;&gt;Docker部署&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像&lt;a href=&#34;https://hub.docker.com/r/gomods/proxy/&#34; title=&#34;Athens&#39;s docker image&#34;&gt;gomods/proxy:latest&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker volume create data-athens
$ docker run -d --name athens-proxy --restart always -p 3000:3000 \
    -v data-athens:/var/lib/athens \
    -e ATHENS_DISK_STORAGE_ROOT=/var/lib/athens \ 
    -e ATHENS_STORAGE_TYPE=disk \
    gomods/proxy:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;use-memory-backend-defualt&#34;&gt;Use Memory Backend (Defualt)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d --name athens-proxy --restart always -p 3000:3000 gomods/proxy:latest
$ docker logs -f athens-proxy # display logs
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Hello, Rustacean</title>
      <link>http://alimy.me/post/day_2018090119142/</link>
      <pubDate>Sat, 01 Sep 2018 19:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/day_2018090119142/</guid>
      <description>&lt;pre&gt;&lt;code&gt;fn main() {
    let greetings = [&amp;quot;Hello&amp;quot;, &amp;quot;Hola&amp;quot;, &amp;quot;Bonjour&amp;quot;,
                     &amp;quot;Ciao&amp;quot;, &amp;quot;こんにちは&amp;quot;, &amp;quot;안녕하세요&amp;quot;,
                     &amp;quot;Cześć&amp;quot;, &amp;quot;Olá&amp;quot;, &amp;quot;Здравствуйте&amp;quot;,
                     &amp;quot;Chào bạn&amp;quot;, &amp;quot;您好&amp;quot;, &amp;quot;Hallo&amp;quot;,
                     &amp;quot;Hej&amp;quot;, &amp;quot;Ahoj&amp;quot;, &amp;quot;سلام&amp;quot;,&amp;quot;สวัสดี&amp;quot;];

    for (num, greeting) in greetings.iter().enumerate() {
        print!(&amp;quot;{} : &amp;quot;, greeting);
        match num {
            0 =&amp;gt;  println!(&amp;quot;This code is editable and runnable!&amp;quot;),
            1 =&amp;gt;  println!(&amp;quot;¡Este código es editable y ejecutable!&amp;quot;),
            2 =&amp;gt;  println!(&amp;quot;Ce code est modifiable et exécutable !&amp;quot;),
            3 =&amp;gt;  println!(&amp;quot;Questo codice è modificabile ed eseguibile!&amp;quot;),
            4 =&amp;gt;  println!(&amp;quot;このコードは編集して実行出来ます！&amp;quot;),
            5 =&amp;gt;  println!(&amp;quot;여기에서 코드를 수정하고 실행할 수 있습니다!&amp;quot;),
            6 =&amp;gt;  println!(&amp;quot;Ten kod można edytować oraz uruchomić!&amp;quot;),
            7 =&amp;gt;  println!(&amp;quot;Este código é editável e executável!&amp;quot;),
            8 =&amp;gt;  println!(&amp;quot;Этот код можно отредактировать и запустить!&amp;quot;),
            9 =&amp;gt;  println!(&amp;quot;Bạn có thể edit và run code trực tiếp!&amp;quot;),
            10 =&amp;gt; println!(&amp;quot;这段代码是可以编辑并且能够运行的！&amp;quot;),
            11 =&amp;gt; println!(&amp;quot;Dieser Code kann bearbeitet und ausgeführt werden!&amp;quot;),
            12 =&amp;gt; println!(&amp;quot;Den här koden kan redigeras och köras!&amp;quot;),
            13 =&amp;gt; println!(&amp;quot;Tento kód můžete upravit a spustit&amp;quot;),
            14 =&amp;gt; println!(&amp;quot;این کد قابلیت ویرایش و اجرا دارد!&amp;quot;),
            15 =&amp;gt; println!(&amp;quot;โค้ดนี้สามารถแก้ไขได้และรันได้&amp;quot;),
            _ =&amp;gt;  {},
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错，今天开始，正式入坑&lt;a href=&#34;https://www.rust-lang.org&#34; title=&#34;Rust official site&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;，我要成为&lt;a href=&#34;http://www.rustacean.net/&#34; title=&#34;Hello, crustaceans&#34;&gt;&lt;strong&gt;Rustacean&lt;/strong&gt;&lt;/a&gt;（Rust社区的成员被称为 Rustacean）的一员！我已经是一名Gopher（Golang程序猿的昵称），日常就是使用Go写写bug，研究一下大佬们的代码，然后继续写自个儿的bug，标准的Gopher节奏，WTF～&lt;/p&gt;

&lt;p&gt;话说，&lt;a href=&#34;https://golang.org&#34; title=&#34;Go official site&#34;&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/a&gt;的吉祥物是Gopher（囊地鼠），陆上跑地欢；Rust的吉祥物是Crab（螃蟹），海里游地慌；巧合吗，很有意思！既如此，已经入坑了陆上跑地欢的&lt;code&gt;Go&lt;/code&gt;，再入手个海里游地慌的&lt;code&gt;Rust&lt;/code&gt;，又有何妨，乐哉!似乎还有一个&lt;code&gt;Swift&lt;/code&gt;，吉祥物是天上飞的雨燕， 也是计划入手的一门语言，但不是现在（项目暂时没用上,不急）， 到时候就海陆空全齐了， 哈哈哈～&lt;/p&gt;

&lt;p&gt;欲攻其事，必先善其器，各门语言有他们擅长的使用场景，都有他们各自溜的舞台，项目需要或适合什么语言去构建，自然就要入手去使用，达到最好运行效果！ 学过很多语言，但日常编程用的最多的还是Go和Java， 嗯哼， 之所以还入手Rust语言，除了项目用的上，更简单的原因就是：看上了&lt;a href=&#34;https://github.com/tikv/tikv&#34; title=&#34;TikV in GitHub&#34;&gt;&lt;strong&gt;TiKV&lt;/strong&gt;&lt;/a&gt; ~&lt;em&gt;So Easy To Nice&lt;/em&gt;~&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SRE:3节点部署TiKV用于测试功能</title>
      <link>http://alimy.me/post/dev_201808191316/</link>
      <pubDate>Sun, 19 Aug 2018 13:16:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201808191316/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;闲置几台屌丝版腾讯云服务器（2 core &lt;code&gt;CPU&lt;/code&gt; 4GB &lt;code&gt;Memory&lt;/code&gt; 40GB &lt;code&gt;Disk&lt;/code&gt;)，难得清闲，用其中的3台部署一套TiKV用于测试功能和代码研究。&lt;/p&gt;

&lt;h4 id=&#34;节点分布&#34;&gt;节点分布&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像pingcap/pd:v2.0.6、pingcap/tikv:v2.0.6&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|    Name   |   Host IP   |  Services  |  Docker Volume  |  Data Path  |
| Node1(TB) | 172.22.0.6  |    PD1     |     pd-data     |    /data    |
| Node2(TD) | 172.22.0.10 |    PD2     |     pd-data     |    /data    |
| Node3(TE) | 172.22.0.15 |    PD3     |     pd-data     |    /data    |
| Node1(TB) | 172.22.0.6  |   TiKV1    |     tikv-data   |    /data    |
| Node2(TD) | 172.22.0.10 |   TiKV2    |     tikv-data   |    /data    |
| Node3(TE) | 172.22.0.15 |   TiKV3    |     tikv-data   |    /data    |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;准备工作&#34;&gt;准备工作&lt;/h4&gt;

&lt;p&gt;三节点（Node1/Node2/Node3)都执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker pull pingcap/pd:v2.0.6  
sudo docker pull pingcap/tikv:v2.0.6  
sudo docker volume create pd-data  
sudo docker volume create tikv-data

export TBIP=&amp;quot;172.21.0.6&amp;quot;
export TDIP=&amp;quot;172.21.0.10&amp;quot;
export TEIP=&amp;quot;172.21.0.15&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;部署pd&#34;&gt;部署PD&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In Node1(TB)&amp;gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd1 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd1&amp;quot; \
--data-dir=&amp;quot;/data/pd1&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TBIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TBIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node2(TD)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd2 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd2&amp;quot; \
--data-dir=&amp;quot;/data/pd2&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TDIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TDIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node3(TE)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd3 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd3&amp;quot; \
--data-dir=&amp;quot;/data/pd3&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TEIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TEIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;部署tikv&#34;&gt;部署TiKV&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In Node1(TB)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv1 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TBIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv1&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node2(TD)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv2 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TDIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv2&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node3(TE)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv3 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TEIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv3&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;检验是否部署完成&#34;&gt;检验是否部署完成&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查看PD的成员 (任意节点中执行)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl ${TAIP}:2379/v2/members
或（使用httpie）
http ${TAIP}:2379/v2/members
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看TiKV节点 (任意节点中执行)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl ${TAIP}:2379/pd/api/v1/stores
或（使用httpie）
http ${TAIP}:2379/pd/api/v1/stores
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tikv-api-简单使用&#34;&gt;TiKV API 简单使用&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/pingcap/tidb/config&amp;quot;
    &amp;quot;github.com/pingcap/tidb/store/tikv&amp;quot;
)

func main() {
    cli, err := tikv.NewRawKVClient([]string{&amp;quot;:2379&amp;quot;}, config.Security{})
    if err != nil {
        panic(err)
    }
    defer cli.Close()

    fmt.Printf(&amp;quot;cluster ID: %d\n&amp;quot;, cli.ClusterID())

    key := []byte(&amp;quot;Company&amp;quot;)
    val := []byte(&amp;quot;PingCAP&amp;quot;)

    // put key into tikv
    err = cli.Put(key, val)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;Successfully put %s:%s to tikv\n&amp;quot;, key, val)

    // get key from tikv
    val, err = cli.Get(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;found val: %s for key: %s\n&amp;quot;, val, key)

    // delete key from tikv
    err = cli.Delete(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;key: %s deleted\n&amp;quot;, key)

    // get key again from tikv
    val, err = cli.Get(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;found val: %s for key: %s\n&amp;quot;, val, key)
}

// output:
// INFO[0000] [pd] create pd client with endpoints [192.168.199.113:2379]
// INFO[0000] [pd] leader switches to: http://127.0.0.1:2379, previous:
// INFO[0000] [pd] init cluster id 6554145799874853483
// cluster ID: 6554145799874853483
// Successfully put Company:PingCAP to tikv
// found val: PingCAP for key: Company
// key: Company deleted
// found val:  for key: Company
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意要点&#34;&gt;注意要点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;在部署TiKV时， 如果按官方文档部署， 有的使用环境下会出现因为Docker容器内最大文件打开数小于82920导致启动TiKV服务失败, 需要添加&lt;code&gt;--ulimit nofile=82920:82920&lt;/code&gt;选项使用docker启动TiKV&lt;/li&gt;
&lt;li&gt;PD先部署启动完成后再去部署TiKV&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pingcap.com/docs/tikv/deploy-tikv-using-docker/&#34; title=&#34;deploy-tikv-using-docker&#34;&gt;Docker部署TiKV官方文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go modules</title>
      <link>http://alimy.me/post/dev_201807232147/</link>
      <pubDate>Mon, 23 Jul 2018 21:47:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807232147/</guid>
      <description>&lt;h4 id=&#34;sect-definition&#34;&gt;&amp;sect;Definition&lt;/h4&gt;

&lt;p&gt;A module is a collection of related go packages. Modules are the unit of
source code interchange and versionning.&lt;/p&gt;

&lt;h4 id=&#34;sect-quick-history&#34;&gt;&amp;sect;Quick history&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go before 1.5: populating &lt;em&gt;GOPATH&lt;/em&gt; with &lt;code&gt;go get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go 1.5 and after: dependency vendoring is introduced.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/vgo&#34;&gt;vgo&lt;/a&gt; is proposed as a prototype for Go modules support.&lt;/li&gt;
&lt;li&gt;Go 1.11 (beta): &lt;code&gt;vgo&lt;/code&gt; is being merged and refined as &lt;code&gt;go mod&lt;/code&gt; (experimental).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-terminology&#34;&gt;&amp;sect;Terminology&lt;/h4&gt;

&lt;p&gt;This article refers to recurrent expressions. Let&amp;rsquo;s clarify them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module root&amp;rdquo;&lt;/em&gt;: the directory containing the file named &lt;code&gt;go.mod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module path&amp;rdquo;&lt;/em&gt;: the import path prefix corresponding to the module root.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Main module&amp;rdquo;&lt;/em&gt;: the module containing the directory where the &lt;code&gt;go&lt;/code&gt; command
is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-module-structure&#34;&gt;&amp;sect;Module structure&lt;/h4&gt;

&lt;p&gt;A module is a tree of Go source files to which is added a file named &lt;em&gt;go.mod&lt;/em&gt;.
It contains the module import name, and the declaration of dependency
requirements, exclusions and replacements. Its content would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;module my/thing
  
require (
        one/thing v1.3.2
        other/thing v2.5.0 // indirect
        ...
)

exclude (
        bad/thing v0.7.3
)

replace (
        src/thing 1.0.2 =&amp;gt; dst/thing v1.1.0
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Note that a dependency not directly imported in the module&amp;rsquo;s source code by
an import statement is indentified as &lt;em&gt;indirect&lt;/em&gt; in the file.&lt;/p&gt;

&lt;p&gt;A module can contain other modules, in which case their content is excluded
from the parent module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20180723215300.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alongside &lt;em&gt;go.mod&lt;/em&gt;, a file named &lt;code&gt;go.sum&lt;/code&gt; may be present. This file retains
cryptographic cheksums of module dependencies, if any. It is used to verify
that cached dependencies meet module requirements.&lt;/p&gt;

&lt;p&gt;A module root can reside &lt;strong&gt;anywhere&lt;/strong&gt; on the filesystem, whatever is the
current &lt;em&gt;GOPATH&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sect-module-dependencies&#34;&gt;&amp;sect;Module dependencies&lt;/h4&gt;

&lt;p&gt;Dependencies are downloaded and stored in &lt;code&gt;GOPATH/src/mod&lt;/code&gt;. A direct
consequence is that the use of a &lt;em&gt;vendor&lt;/em&gt; directory is now obsolete.&lt;/p&gt;

&lt;p&gt;What does this new structure looks like? Suppose we are working on a module
that depends on &lt;em&gt;github.com/me/lib&lt;/em&gt; at version &lt;em&gt;1.0.0&lt;/em&gt;. For such a case, in
&lt;em&gt;GOPATH/src/mod&lt;/em&gt; we would find:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20180723215301.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What we can observe is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies source trees are placed at the root of this directory, with a
slight change: the import path is suffixed with &lt;code&gt;@version&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Source archives retrieved or built from VCS are stored in the &lt;em&gt;download&lt;/em&gt;
folder.&lt;/li&gt;
&lt;li&gt;VCS data is stored in the &lt;em&gt;vcs&lt;/em&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-enabling-go-modules-support&#34;&gt;&amp;sect;Enabling Go modules support&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;Go 1.11beta2&lt;/em&gt;, the environment variable &lt;code&gt;GO111MODULE&lt;/code&gt; controls whether
module support is enabled or disabled. It accepts three values: &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;,
&lt;code&gt;auto&lt;/code&gt; (default).&lt;/p&gt;

&lt;p&gt;If set to &lt;em&gt;&amp;ldquo;on&amp;rdquo;&lt;/em&gt;, module support is enabled whatever path we are in.&lt;/p&gt;

&lt;p&gt;If set to &lt;em&gt;&amp;ldquo;off&amp;rdquo;&lt;/em&gt;, it is permanently disabled.&lt;/p&gt;

&lt;p&gt;If unset or set to &lt;em&gt;&amp;ldquo;auto&amp;rdquo;&lt;/em&gt;, module support is enabled outside of
&lt;em&gt;GOPATH&lt;/em&gt; only if the current directory is a module root or one of
its subdirectories.&lt;/p&gt;

&lt;h4 id=&#34;sect-integration&#34;&gt;&amp;sect;Integration&lt;/h4&gt;

&lt;p&gt;Go modules are integrated with Go tools, for instance upon invocation of
commands such as &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go install&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt; appropriate
actions will fire up like populating the cache, creating or updating &lt;em&gt;go.mod&lt;/em&gt;
and &lt;em&gt;go.sum&lt;/em&gt; etc.&lt;/p&gt;

&lt;h4 id=&#34;sect-autoformat&#34;&gt;&amp;sect;Autoformat&lt;/h4&gt;

&lt;p&gt;You should never have to run these commands on your own since they are
invoked by other commands, but for the sake of completeness, let&amp;rsquo;s mention
that &lt;code&gt;go mod -fmt&lt;/code&gt; is the equivalent of &lt;code&gt;go fmt&lt;/code&gt; for &lt;em&gt;go.mod&lt;/em&gt; and &lt;em&gt;go.sum&lt;/em&gt;
files and that &lt;code&gt;go mod -fix&lt;/code&gt; do some smart things in order to keep &lt;em&gt;go.mod&lt;/em&gt;
clean, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rewriting non-canonical version identifiers to semantic versioning form.&lt;/li&gt;
&lt;li&gt;Removing duplicates.&lt;/li&gt;
&lt;li&gt;Updating requirements to reflect exclusions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-initialization&#34;&gt;&amp;sect;Initialization&lt;/h4&gt;

&lt;p&gt;To create &lt;em&gt;go.mod&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have to pass the command an import path with &lt;code&gt;-module &amp;lt;path&amp;gt;&lt;/code&gt; if the
module root lives outside a VCS.&lt;/p&gt;

&lt;p&gt;For the sake of backward compatibility and in order to ease the transition
process, module creation has support for popular dependency management tools
like &lt;code&gt;dep&lt;/code&gt;, &lt;code&gt;glide&lt;/code&gt;, &lt;code&gt;glock&lt;/code&gt;, &lt;code&gt;godep&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h4 id=&#34;sect-synchronization&#34;&gt;&amp;sect;Synchronization&lt;/h4&gt;

&lt;p&gt;In order to clean up unused dependencies or to fetch new ones, use the sync
option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-adding-excluding-and-replacing-dependencies&#34;&gt;&amp;sect;Adding, excluding and replacing dependencies&lt;/h4&gt;

&lt;p&gt;Two possibilities: either edit &lt;em&gt;go.mod&lt;/em&gt; by hand or use the CLI. The latter
comes with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# require a new dependency
go mod -require one/thing@version

# drop a requirement
go mod -droprequire one/thing

# exclude a dependency
go mod -exclude bad/thing@version

# drop an exclusion
go mod -dropexclude bad/thing@version

# replace a dependency
go mod -replace src/thing@version=dst/thing@version

# drop a replacement
go mod -dropreplace src/thing@version
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-dependency-graph&#34;&gt;&amp;sect;Dependency graph&lt;/h4&gt;

&lt;p&gt;To print the graph of module dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -graph
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-generating-vendor&#34;&gt;&amp;sect;Generating &lt;em&gt;vendor&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;If for backward compatibility reasons you need to ship your application with
vendoring, you can generate the &lt;em&gt;vendor&lt;/em&gt; directory from &lt;em&gt;go.mod&lt;/em&gt; thanks to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-getting-help&#34;&gt;&amp;sect;Getting help&lt;/h4&gt;

&lt;p&gt;Don&amp;rsquo;t hesistate to refer to &lt;code&gt;go help mod&lt;/code&gt; and &lt;code&gt;go help modules&lt;/code&gt; for further
details about Go module support!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://systemdump.io/posts/2018-07-22-go-modules&#34; title=&#34;go modules&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guide: gorilla/mux</title>
      <link>http://alimy.me/post/dev_201807151843/</link>
      <pubDate>Sun, 15 Jul 2018 18:43:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807151843/</guid>
      <description>&lt;p&gt;The name mux stands for &amp;ldquo;HTTP request multiplexer&amp;rdquo;. Like the standard
&lt;code&gt;http.ServeMux&lt;/code&gt;, &lt;code&gt;mux.Router&lt;/code&gt; matches incoming requests against a list of
registered routes and calls a handler for the route that matches the URL
or other conditions. The main features are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Requests can be matched based on URL host, path, path prefix, schemes,
  header and query values, HTTP methods or using custom matchers.
* URL hosts, paths and query values can have variables with an optional
  regular expression.
* Registered URLs can be built, or &amp;quot;reversed&amp;quot;, which helps maintaining
  references to resources.
* Routes can be used as subrouters: nested routes are only tested if the
  parent route matches. This is useful to define groups of routes that
  share common conditions like a host, a path prefix or other repeated
  attributes. As a bonus, this optimizes request matching.
* It implements the http.Handler interface so it is compatible with the
  standard http.ServeMux.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start registering a couple of URL paths and handlers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  r := mux.NewRouter()
  r.HandleFunc(&amp;quot;/&amp;quot;, HomeHandler)
  r.HandleFunc(&amp;quot;/products&amp;quot;, ProductsHandler)
  r.HandleFunc(&amp;quot;/articles&amp;quot;, ArticlesHandler)
  http.Handle(&amp;quot;/&amp;quot;, r)
  log.Fatal(http.ListenAndServe(&amp;quot;:12345&amp;quot;, nil))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Here we register three routes mapping URL paths to handlers. This is
equivalent to how &lt;code&gt;http.HandleFunc()&lt;/code&gt; works: if an incoming request URL matches
one of the paths, the corresponding handler is called passing
&lt;code&gt;(http.ResponseWriter, *http.Request)&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;Paths can have variables. They are defined using the format &lt;code&gt;{name}&lt;/code&gt; or
&lt;code&gt;{name:pattern}&lt;/code&gt;. If a regular expression pattern is not defined, the matched
variable will be anything until the next slash. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/products/{key}&amp;quot;, ProductHandler)
r.HandleFunc(&amp;quot;/articles/{category}/&amp;quot;, ArticlesCategoryHandler)
r.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;, ArticleHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Groups can be used inside patterns, as long as they are non-capturing &lt;code&gt;(?:re)&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HandleFunc(&amp;quot;/articles/{category}/{sort:(?:asc|desc|new)}&amp;quot;, ArticlesCategoryHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names are used to create a map of route variables which can be retrieved
calling mux.Vars():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vars := mux.Vars(request)
category := vars[&amp;quot;category&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if any capturing groups are present, mux will panic() during parsing. To prevent
this, convert any capturing groups to non-capturing, e.g. change&lt;code&gt;&amp;quot;/{sort:(asc|desc)}&amp;quot;&lt;/code&gt; to
&lt;code&gt;&amp;quot;/{sort:(?:asc|desc)}&amp;quot;&lt;/code&gt;. This is a change from prior versions which behaved unpredictably
when capturing groups were present.&lt;/p&gt;

&lt;p&gt;And this is all you need to know about the basic usage. More advanced options
are explained below.&lt;/p&gt;

&lt;p&gt;Routes can also be restricted to a domain or subdomain. Just define a host
pattern to be matched. They can also have variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
// Only matches if domain is &amp;quot;www.example.com&amp;quot;.
r.Host(&amp;quot;www.example.com&amp;quot;)
// Matches a dynamic subdomain.
r.Host(&amp;quot;{subdomain:[a-z]+}.domain.com&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are several other matchers that can be added. To match path prefixes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.PathPrefix(&amp;quot;/products/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or HTTP methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Methods(&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or URL schemes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Schemes(&amp;quot;https&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or header values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Headers(&amp;quot;X-Requested-With&amp;quot;, &amp;quot;XMLHttpRequest&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or query values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Queries(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or to use a custom matcher function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {
    return r.ProtoMajor == 0
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and finally, it is possible to combine several matchers in a single route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HandleFunc(&amp;quot;/products&amp;quot;, ProductsHandler).
  Host(&amp;quot;www.example.com&amp;quot;).
  Methods(&amp;quot;GET&amp;quot;).
  Schemes(&amp;quot;http&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the same matching conditions again and again can be boring, so we have
a way to group several routes that share the same requirements.
We call it &lt;code&gt;subrouting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say we have several URLs that should only match when the
host is &lt;code&gt;www.example.com&lt;/code&gt;. Create a route for that host and get a &lt;code&gt;subrouter&lt;/code&gt;
from it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.Host(&amp;quot;www.example.com&amp;quot;).Subrouter()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then register routes in the subrouter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.HandleFunc(&amp;quot;/products/&amp;quot;, ProductsHandler)
s.HandleFunc(&amp;quot;/products/{key}&amp;quot;, ProductHandler)
s.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;), ArticleHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The three URL paths we registered above will only be tested if the domain is
&lt;code&gt;www.example.com&lt;/code&gt;, because the subrouter is tested first. This is not
only convenient, but also optimizes request matching. You can create
subrouters combining any attribute matchers accepted by a route.&lt;/p&gt;

&lt;p&gt;Subrouters can be used to create domain or path &lt;code&gt;namespaces&lt;/code&gt;: you define
subrouters in a central place and then parts of the app can register its
paths relatively to a given subrouter.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more thing about subroutes. When a subrouter has a path prefix,
the inner routes use it as base for their paths:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.PathPrefix(&amp;quot;/products&amp;quot;).Subrouter()
// &amp;quot;/products/&amp;quot;
s.HandleFunc(&amp;quot;/&amp;quot;, ProductsHandler)
// &amp;quot;/products/{key}/&amp;quot;
s.HandleFunc(&amp;quot;/{key}/&amp;quot;, ProductHandler)
// &amp;quot;/products/{key}/details&amp;quot;
s.HandleFunc(&amp;quot;/{key}/details&amp;quot;, ProductDetailsHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the path provided to &lt;code&gt;PathPrefix()&lt;/code&gt; represents a &amp;ldquo;wildcard&amp;rdquo;: calling
&lt;code&gt;PathPrefix(&amp;quot;/static/&amp;quot;).Handler(...)&lt;/code&gt;means that the handler will be passed any
request that matches&lt;code&gt;&amp;quot;/static/*&amp;quot;&lt;/code&gt;. This makes it easy to serve static files with mux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
    var dir string

    flag.StringVar(&amp;amp;dir, &amp;quot;dir&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;the directory to serve files from. Defaults to the current dir&amp;quot;)
    flag.Parse()
    r := mux.NewRouter()

    // This will serve files under http://localhost:8000/static/&amp;lt;filename&amp;gt;
    r.PathPrefix(&amp;quot;/static/&amp;quot;).Handler(http.StripPrefix(&amp;quot;/static/&amp;quot;, http.FileServer(http.Dir(dir))))

    srv := &amp;amp;http.Server{
        Handler:      r,
        Addr:         &amp;quot;127.0.0.1:8000&amp;quot;,
        // Good practice: enforce timeouts for servers you create!
        WriteTimeout: 15 * time.Second,
        ReadTimeout:  15 * time.Second,
    }

    log.Fatal(srv.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how to build registered URLs.&lt;/p&gt;

&lt;p&gt;Routes can be named. All routes that define a name can have their URLs built,
or &amp;ldquo;reversed&amp;rdquo;. We define a name calling &lt;code&gt;Name()&lt;/code&gt; on a route. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;, ArticleHandler).
  Name(&amp;quot;article&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build a URL, get the route and call the &lt;code&gt;URL()&lt;/code&gt; method, passing a sequence of
&lt;code&gt;key/value&lt;/code&gt; pairs for the route variables. For the previous route, we would do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and the result will be a url.URL with the following path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/articles/technology/42&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also works for host and query value variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.Host(&amp;quot;{subdomain}.domain.com&amp;quot;).
  Path(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;).
  Queries(&amp;quot;filter&amp;quot;, &amp;quot;{filter}&amp;quot;).
  HandlerFunc(ArticleHandler).
  Name(&amp;quot;article&amp;quot;)

// url.String() will be &amp;quot;http://news.domain.com/articles/technology/42?filter=gorilla&amp;quot;
url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;,
                                 &amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;,
                                 &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;,
                                 &amp;quot;filter&amp;quot;, &amp;quot;gorilla&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All variables defined in the route are required, and their values must
conform to the corresponding patterns. These requirements guarantee that a
generated URL will always match a registered route &amp;ndash; the only exception is
for explicitly defined &amp;ldquo;build-only&amp;rdquo; routes which never match.&lt;/p&gt;

&lt;p&gt;Regex support also exists for matching Headers within a route. For example, we could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HeadersRegexp(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/(text|json)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and the route will match both requests with a Content-Type of &lt;code&gt;application/json&lt;/code&gt; as well as
&lt;code&gt;application/text&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a way to build only the URL host or path for a route:
use the methods URLHost() or URLPath() instead. For the previous route,
we would do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// &amp;quot;http://news.domain.com/&amp;quot;
host, err := r.Get(&amp;quot;article&amp;quot;).URLHost(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;)

// &amp;quot;/articles/technology/42&amp;quot;
path, err := r.Get(&amp;quot;article&amp;quot;).URLPath(&amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you use subrouters, host and path defined separately can be built
as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.Host(&amp;quot;{subdomain}.domain.com&amp;quot;).Subrouter()
s.Path(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;).
  HandlerFunc(ArticleHandler).
  Name(&amp;quot;article&amp;quot;)

// &amp;quot;http://news.domain.com/articles/technology/42&amp;quot;
url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;,
                                 &amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;,
                                 &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mux supports the addition of middlewares to a Router, which are executed in the order they are added if a match is found, including its subrouters. Middlewares are (typically) small pieces of code which take one request, do something with it, and pass it down to another middleware or the final handler. Some common use cases for middleware are request logging, header manipulation, or ResponseWriter hijacking.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type MiddlewareFunc func(http.Handler) http.Handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed to it, and then calls the handler passed as parameter to the MiddlewareFunc (closures can access variables from the context where they are created).&lt;/p&gt;

&lt;p&gt;A very basic middleware which logs the URI of the request being handled could be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func simpleMw(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Do stuff here
        log.Println(r.RequestURI)
        // Call the next handler, which can be another middleware in the chain, or the final handler.
        next.ServeHTTP(w, r)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Middlewares can be added to a router using &lt;code&gt;Router.Use()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/&amp;quot;, handler)
r.Use(simpleMw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more complex authentication middleware, which maps session token to users, could be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define our struct
type authenticationMiddleware struct {
    tokenUsers map[string]string
}

// Initialize it somewhere
func (amw *authenticationMiddleware) Populate() {
    amw.tokenUsers[&amp;quot;00000000&amp;quot;] = &amp;quot;user0&amp;quot;
    amw.tokenUsers[&amp;quot;aaaaaaaa&amp;quot;] = &amp;quot;userA&amp;quot;
    amw.tokenUsers[&amp;quot;05f717e5&amp;quot;] = &amp;quot;randomUser&amp;quot;
    amw.tokenUsers[&amp;quot;deadbeef&amp;quot;] = &amp;quot;user0&amp;quot;
}

// Middleware function, which will be called for each request
func (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        token := r.Header.Get(&amp;quot;X-Session-Token&amp;quot;)

        if user, found := amw.tokenUsers[token]; found {
            // We found the token in our map
            log.Printf(&amp;quot;Authenticated user %s\n&amp;quot;, user)
            next.ServeHTTP(w, r)
        } else {
            http.Error(w, &amp;quot;Forbidden&amp;quot;, http.StatusForbidden)
        }
    })
}

r := mux.NewRouter()
r.HandleFunc(&amp;quot;/&amp;quot;, handler)

amw := authenticationMiddleware{}
amw.Populate()

r.Use(amw.Middleware)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The handler chain will be stopped if your middleware doesn&amp;rsquo;t call &lt;code&gt;next.ServeHTTP()&lt;/code&gt; with the corresponding parameters. This can be used to abort a request if the middleware writer wants to.&lt;/p&gt;

&lt;p&gt;(Origin official document is &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/mux&#34; title=&#34;gorilla/mux document&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/gorilla/mux&#34; title=&#34;gorilla/mux source code in GitHub&#34;&gt;&lt;em&gt;Source code in GitHub&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker: 对Docker Remote API进行认证</title>
      <link>http://alimy.me/post/dev_201807012219/</link>
      <pubDate>Sun, 01 Jul 2018 22:19:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807012219/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;建立证书授权中心&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/docker
$ cd /etc/docker
$ echo 01 | sudo tee ca.csl
$ sudo openssl genrsa -des3 -out ca-key.pem
$ sudo openssl req -new -x509 -days 365 -key ca-key.pem -out ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建服务器的证书签名请求和密钥&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl genrsa -des3 -out server-key.pem
$ sudo openssl req -new -key server-key.pem -out server.csr
$ sudo openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem
$ sudo openssl rsa -in server-key.pem -out server-key.pem
$ sudo chmod 0600 /etc/docker/server-key.pem /etc/docker/server-cert.pem /etc/docker/ca-key.pem /etc/docker/ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置Docker守护进程 (/etc/docker/daemon.json on Linux systems, or C:\ProgramData\docker\config\daemon.json on Windows.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;debug&amp;quot;: true,
  &amp;quot;tls&amp;quot;: true,
  &amp;quot;tlscacert&amp;quot;: &amp;quot;/etc/docker/ca.pem&amp;quot;,
  &amp;quot;tlscert&amp;quot;: &amp;quot;/etc/docker/server-cert.pem&amp;quot;,
  &amp;quot;tlskey&amp;quot;: &amp;quot;/etc/docker/server-key.pem&amp;quot;,
  &amp;quot;hosts&amp;quot;: [&amp;quot;tcp://&amp;lt;config of CN&amp;gt;:2376&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建客户端证书和密钥&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl genrsa -des3 -out client-key.pem
$ sudo openssl req -new -key client-key.pem -out client.csr
$ echo extendedKeyUsage = clientAuth &amp;gt; extfile.config
$ sudo openssl x509 -req -days 365 -in client.csr -CA ca.pem -CAkey ca-key.pem -out client-cert.pem -extfile extfile.cnf
$ sudo openssl rsa -in client-key.pem -out client-key.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置Docker客户端开启认证功能&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/.docker
$ cp ca.pem ~/.docker/ca.pem
$ cp client-key.pem ~/.docker/key.pem
$ cp client-cert.pem ~/.docker/cert.pem
$ chmod 0600 ~/.docker/key.pem ~/.docker/cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;测试TLS认证过的连接&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker -H=&amp;lt;config of CN&amp;gt;:2376 --tlsverify info
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;可以添加环境变量(~/.bashrc)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_HOST=&amp;lt;config of CN&amp;gt;:2376
alias docker=&#39;docker --tlsverify&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>存储系统: 札记</title>
      <link>http://alimy.me/post/dev_201807011459/</link>
      <pubDate>Sun, 01 Jul 2018 14:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807011459/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/3292.html&#34; title=&#34;Finding a needle in Haystack: Facebook’s photo storage&#34;&gt;经典论文翻译导读之《Finding a needle in Haystack: Facebook’s photo storage》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;amp;mid=2247483679&amp;amp;idx=1&amp;amp;sn=584dbd80aa08fa1188627ad725680928&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1208L9z4yXKLW60rPph2ZmMn#rd&#34; title=&#34;微信序列号生成器架构设计及演变&#34;&gt;万亿级调用系统：微信序列号生成器架构设计及演变&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5322</title>
      <link>http://alimy.me/post/dev_201806301842/</link>
      <pubDate>Sat, 30 Jun 2018 18:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201806301842/</guid>
      <description>&lt;h3 id=&#34;add-new-dockerfile-docker-ce-for-docker-ce-v17-06-to-build-gogs-s-docker-image&#34;&gt;Add new Dockerfile.docker-ce for docker-ce(&amp;gt;=v17.06) to build Gogs&amp;rsquo;s docker image&lt;/h3&gt;

&lt;p&gt;Docker-CE can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the&lt;code&gt;FROM&lt;/code&gt; instruction sine release version of v17.06. The Dockerfile&amp;rsquo;s &lt;code&gt;FROM&lt;/code&gt; instruction like below:&lt;/p&gt;

&lt;h4 id=&#34;from&#34;&gt;FROM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt; [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[@&amp;lt;digest&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Optionally a name can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the &lt;code&gt;FROM&lt;/code&gt; instruction. The name can be used in subsequent &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;COPY --from=&amp;lt;name|index&amp;gt;&lt;/code&gt; instructions to refer to the image built in this stage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find Docker-ce official document &lt;a href=&#34;https://docs.docker.com/v17.06/engine/reference/builder/#from&#34; title=&#34;Docker official Document&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;You can use this patch to build docker image if  docker-ce that version &amp;gt;=v17.06 is installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;docker version
Client:
 Version:      18.03.1-ce
 API version:  1.37
 Go version:   go1.9.5
 Git commit:   9ee9f40
 Built:        Thu Apr 26 07:20:16 2018
 OS/Arch:      linux/amd64
 Experimental: false
 Orchestrator: swarm

Server:
 Engine:
  Version:      18.03.1-ce
  API version:  1.37 (minimum version 1.12)
  Go version:   go1.9.5
  Git commit:   9ee9f40
  Built:        Thu Apr 26 07:23:58 2018
  OS/Arch:      linux/amd64
  Experimental: false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Build docker image&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd $GOPATH/src/github.com/gogs/gogs
&amp;gt; docker build -t &amp;lt;your/image-tag&amp;gt; -f Dockerfile.docker-ce .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile.docker-ce&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.10.3-alpine AS binarybuilder
# Install build deps
RUN apk --no-cache --no-progress add --virtual build-deps build-base git linux-pam-dev
WORKDIR /go/src/github.com/gogs/gogs
COPY . .
RUN make build TAGS=&amp;quot;sqlite cert pam&amp;quot;

FROM alpine:3.7
# Install system utils &amp;amp; Gogs runtime dependencies
ADD https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64 /usr/sbin/gosu
RUN chmod +x /usr/sbin/gosu \
  &amp;amp;&amp;amp; echo http://dl-2.alpinelinux.org/alpine/edge/community/ &amp;gt;&amp;gt; /etc/apk/repositories \
  &amp;amp;&amp;amp; apk --no-cache --no-progress add \
    bash \
    ca-certificates \
    curl \
    git \
    linux-pam \
    openssh \
    s6 \
    shadow \
    socat \
    tzdata

ENV GOGS_CUSTOM /data/gogs

# Configure LibC Name Service
COPY docker/nsswitch.conf /etc/nsswitch.conf

WORKDIR /app/gogs
COPY docker ./docker
COPY templates ./templates
COPY public ./public
COPY --from=binarybuilder /go/src/github.com/gogs/gogs/gogs .

RUN ./docker/finalize-docker-ce.sh

# Configure Docker Container
VOLUME [&amp;quot;/data&amp;quot;]
EXPOSE 22 3000
ENTRYPOINT [&amp;quot;/app/gogs/docker/start.sh&amp;quot;]
CMD [&amp;quot;/bin/s6-svscan&amp;quot;, &amp;quot;/app/gogs/docker/s6/&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gogs/gogs/pull/5322&#34; title=&#34;Gogs PR-5322&#34;&gt;Note a PR-5322 for Gogs.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5262</title>
      <link>http://alimy.me/post/dev_201806040842/</link>
      <pubDate>Mon, 04 Jun 2018 08:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201806040842/</guid>
      <description>&lt;h3 id=&#34;fix-make-build-failure-when-enviroment-of-gopath-have-multiple-items&#34;&gt;Fix make build failure when enviroment of &lt;code&gt;GOPATH&lt;/code&gt; have multiple items&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ make
go install &amp;quot;-v&amp;quot; -ldflags &#39;-X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildTime=2018-06-04 06:17:19 UTC&amp;quot; -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildGitHash=c08aab90ec696b7fcc56b8da0a468e74d266b89e&amp;quot;&#39; -tags &#39;&amp;quot;&amp;quot;&#39;
cp &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39; .
cp: cannot stat &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39;: No such file or directory
Makefile:36: recipe for target &#39;build&#39; failed
make: *** [build] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scene &lt;code&gt;GOPATH&lt;/code&gt; have two item (/home/alimy/art/ago and /home/alimy/art/arg) and gogs source is not in first &lt;code&gt;GOPATH&lt;/code&gt; items, when excecute &lt;code&gt;go install ...&lt;/code&gt; will install to path that contain the source of gogs&amp;rsquo;s &lt;code&gt;GOPATH&lt;/code&gt; items. when cp gogs file back will occur error like above.
this patch fixed this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo ${PWD%%src*}
/home/alimy/art/arg/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Also when have multiple item in &lt;code&gt;GOPATH&lt;/code&gt; env you should do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=$HOME/art/ago:$HOME/art/arg
export PATH=$GOROOT/bin:${GOPATH//://bin:}/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gogs&amp;rsquo;s Makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDFLAGS += -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildTime=$(shell date -u &#39;+%Y-%m-%d %I:%M:%S %Z&#39;)&amp;quot;
LDFLAGS += -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildGitHash=$(shell git rev-parse HEAD)&amp;quot;

DATA_FILES := $(shell find conf | sed &#39;s/ /\\ /g&#39;)
LESS_FILES := $(wildcard public/less/gogs.less public/less/_*.less)
GENERATED  := pkg/bindata/bindata.go public/css/gogs.css

OS := $(shell uname)

TAGS = &amp;quot;&amp;quot;
BUILD_FLAGS = &amp;quot;-v&amp;quot;

RELEASE_ROOT = &amp;quot;release&amp;quot;
RELEASE_GOGS = &amp;quot;release/gogs&amp;quot;
NOW = $(shell date -u &#39;+%Y%m%d%I%M%S&#39;)
GOVET = go tool vet -composites=false -methods=false -structtags=false
GOPATH = $(shell echo $${PWD%%src*})

.PHONY: build pack release bindata clean

.IGNORE: public/css/gogs.css

all: build

check: test

dist: release

web: build
	./gogs web

govet:
	$(GOVET) gogs.go
	$(GOVET) models pkg routes

build: $(GENERATED)
	go install $(BUILD_FLAGS) -ldflags &#39;$(LDFLAGS)&#39; -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

build-dev: $(GENERATED) govet
	go install $(BUILD_FLAGS) -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

build-dev-race: $(GENERATED) govet
	go install $(BUILD_FLAGS) -race -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

pack:
	rm -rf $(RELEASE_GOGS)
	mkdir -p $(RELEASE_GOGS)
	cp -r gogs LICENSE README.md README_ZH.md templates public scripts $(RELEASE_GOGS)
	rm -rf $(RELEASE_GOGS)/public/config.codekit $(RELEASE_GOGS)/public/less
	cd $(RELEASE_ROOT) &amp;amp;&amp;amp; zip -r gogs.$(NOW).zip &amp;quot;gogs&amp;quot;

release: build pack

bindata: pkg/bindata/bindata.go

pkg/bindata/bindata.go: $(DATA_FILES)
	go-bindata -o=$@ -ignore=&amp;quot;\\.DS_Store|README.md|TRANSLATORS|auth.d&amp;quot; -pkg=bindata conf/...

less: public/css/gogs.css

public/css/gogs.css: $(LESS_FILES)
	@type lessc &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; lessc $&amp;lt; &amp;gt;$@ || echo &amp;quot;lessc command not found, skipped.&amp;quot;

clean:
	go clean -i ./...

clean-mac: clean
	find . -name &amp;quot;.DS_Store&amp;quot; -print0 | xargs -0 rm

test:
	go test -cover -race ./...

fixme:
	grep -rnw &amp;quot;FIXME&amp;quot; cmd routers models pkg

todo:
	grep -rnw &amp;quot;TODO&amp;quot; cmd routers models pkg

# Legacy code should be remove by the time of release
legacy:
	grep -rnw &amp;quot;LEGACY&amp;quot; cmd routes models pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gogs/gogs/pull/5262&#34; title=&#34;Gogs PR-5262&#34;&gt;Note a PR-5322 for Gogs.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>收藏: 技术相关网站</title>
      <link>http://alimy.me/post/info_201805210818/</link>
      <pubDate>Mon, 21 May 2018 08:19:00 CST</pubDate>
      
      <guid>http://alimy.me/post/info_201805210818/</guid>
      <description>&lt;h3 id=&#34;kubernetes-https-kubernetes-io-kubernetes官网&#34;&gt;&lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes官网&#34;&gt;Kubernetes&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/cn/docs/&#34; title=&#34;官方中文文档&#34;&gt;官方中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.feisky.xyz/zh/&#34; title=&#34;feisky版 Kubernetes指南&#34;&gt;Kubernetes指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/&#34; title=&#34;Jimmy版 Kubernetes指南&#34;&gt;Kubernetes指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://feisky.gitbooks.io/sdn/&#34; title=&#34;SDN指南&#34;&gt;SDN指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NewSQL: 分布式数据库TiDB、CockroachDB</title>
      <link>http://alimy.me/post/dev_201805021940/</link>
      <pubDate>Wed, 02 May 2018 19:40:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201805021940/</guid>
      <description>&lt;h3 id=&#34;tidb-https-pingcap-com-pingcap官网&#34;&gt;&lt;a href=&#34;https://pingcap.com/&#34; title=&#34;PingCap官网&#34;&gt;TiDB&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;TiDB 开源分布式 NewSQL 关系型数据库
TiDB 是新一代开源分布式 NewSQL 数据库，模型受 Google Spanner / F1 论文的启发，实现了自动的水平伸缩，强一致性的分布式事务，基于 Raft 算法的多副本复制等重要 NewSQL 特性。TiDB 结合了 RDBMS 和 NoSQL 的优点，部署简单，在线弹性扩容和异步表结构变更不影响业务， 真正的异地多活及自动故障恢复保障数据安全，同时兼容 &lt;a href=&#34;https://mariadb.com/kb/en/library/documentation/&#34; title=&#34;MariaDB Documentation&#34;&gt;MySQL&lt;/a&gt; 协议，使迁移使用成本降到极低。&lt;/p&gt;

&lt;h3 id=&#34;cockroachdb-https-www-cockroachlabs-com-cockroach-labs-蟑螂db-小强db&#34;&gt;&lt;a href=&#34;https://www.cockroachlabs.com/&#34; title=&#34;Cockroach LABS&#34;&gt;CockroachDB&lt;/a&gt; (蟑螂DB/小强DB)&lt;/h3&gt;

&lt;p&gt;CockroachDB（中文名蟑螂DB，所以又可以称为小强DB），是构建于事务处理及强一致性KV存储上的分布式SQL数据库，支持水平扩展、自动容错处理、强一致性事务，并且提供SQL接口用于数据处理，是Google Spanner/F1的开源实现。
   CockroachDB适用于应用对数据要求精确、可靠、完全正确的场景，支持自动复制、均匀分布、基于极小配置的数据恢复，可用于分布式的、可复制的联机事务处理（OLTP），多数据中心的部署，私有云的基础构建，它不适用于读少写多的场景，可以用内存数据库来代替，也不适用于复杂的join查询，重量级的数据分析及联机分析处理（OLAP）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;CockroachDB is a distributed SQL database built on a transactional and strongly-consistent key-value store. It scales horizontally; survives disk, machine, rack, and even datacenter failures with minimal latency disruption and no manual intervention; supports strongly-consistent ACID transactions; and provides a familiar SQL API for structuring, manipulating, and querying data.SQL queries reach CockroachDB&amp;rsquo;s cluster through the &lt;a href=&#34;https://www.postgresql.org/docs/10/static/index.html&#34; title=&#34;PostgreSQL 10.3 Documentation&#34;&gt;PostgreSQL&lt;/a&gt; wire protocol.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logus:另一种简单、优雅、高效打Log的方式</title>
      <link>http://alimy.me/post/dev_201804192316/</link>
      <pubDate>Thu, 19 Apr 2018 23:16:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201804192316/</guid>
      <description>&lt;h3 id=&#34;起源&#34;&gt;起源：&lt;/h3&gt;

&lt;p&gt;最近项目中有使用Uber的&lt;a href=&#34;https://github.com/uber-go/zap&#34; title=&#34;zap in GitHub&#34;&gt;zap&lt;/a&gt;（Go语言生态中一种高效打印Log的实用库，久经考验）打印log，用的顺手，于是借鉴其中的设计思想，在Android环境下封装Log类提供相似功能。&lt;/p&gt;

&lt;h3 id=&#34;设计思想&#34;&gt;设计思想：&lt;/h3&gt;

&lt;p&gt;分离消息与数据域，避免字符串拼接和效率低的字符串格式化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;把log信息分两段：消息和数据域；消息是必须的， 数据域是个数可变的键-值对&lt;/li&gt;
&lt;li&gt;消息仅仅是String，不带任何格式化或字符串拼接&lt;/li&gt;
&lt;li&gt;数据域是以key-value的形式成对作为参数传给打印函数，忽略最后一个不成对参数&lt;/li&gt;
&lt;li&gt;内部实现是使用StringBuilder组合最终要打印的信息，避免过多的字符串拼接导致log打印频繁时给gc过多压力&lt;/li&gt;
&lt;li&gt;StackTrace信息是可以设置打印或不打印&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用例&#34;&gt;用例：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// file: MainActivity.java
@Override
protected void onResume() {
    super.onResume();
    Logus.d(&amp;quot;just a message&amp;quot;);
    Logus.e(&amp;quot;a field message&amp;quot;, &amp;quot;a&amp;quot;, 1);
    Logus.w(&amp;quot;3 fields but see 2&amp;quot;, &amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;, true, &amp;quot;c&amp;quot;);
    Logus.V(&amp;quot;Main&amp;quot;, &amp;quot;with prefix just a message&amp;quot;);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;with prefix 2 fields&amp;quot;, &amp;quot;a&amp;quot;, 10, &amp;quot;b&amp;quot;, false);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;with prefix 3 fields but log 2&amp;quot;, &amp;quot;a&amp;quot;, 10, &amp;quot;b&amp;quot;, true, &amp;quot;c&amp;quot;);
    Logus.setStackTrace(false);
    Logus.E(&amp;quot;Main&amp;quot;, &amp;quot;no stack trace with prefix&amp;quot;);
}

// 输出：
04-19 22:12:56.209 3256-3256/net.gility.note  D/Logus: MainActivity.java(425)#onResume &amp;gt; just a message
04-19 22:12:56.210 3256-3256/net.gility.note  E/Logus: MainActivity.java(426)#onResume &amp;gt; a field message { a=1; }
04-19 22:12:56.210 3256-3256/net.gility.note  W/Logus: MainActivity.java(427)#onResume &amp;gt; 3 fields but see 2 { a=1; b=true; }
04-19 22:12:56.211 3256-3256/net.gility.note  V/Logus: MainActivity.java(428)#onResume Main&amp;gt; with prefix just a message
04-19 22:12:56.212 3256-3256/net.gility.note  E/Logus: MainActivity.java(429)#onResume Main&amp;gt; with prefix 2 fields { a=10; b=false; }
04-19 22:12:56.213 3256-3256/net.gility.note  E/Logus: MainActivity.java(430)#onResume Main&amp;gt; with prefix 3 fields but log 2 { a=10; b=true; }
04-19 22:12:56.213 3256-3256/net.gility.note  D/Logus: &amp;gt; no stack trace no prefix
04-19 22:12:56.213 3256-3256/net.gility.note  E/Logus: Main&amp;gt; no stack trace with prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;具体实现&#34;&gt;具体实现：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public final class Logus {
    // 数据域长度调整掩码,用于计算数据域长度；aInt &amp;amp; FIXED_LENGTH_MASK 相当于 aInt % 2 == 0 ? aInt : aInt - 1;
    private static final int FIXED_LENGTH_MASK = ~1;

    private static String sPreTag = &amp;quot;Logus&amp;quot;;        // 预设TAG
    private static String sPrePrefix = &amp;quot;&amp;quot;;          // 预设消息前缀
    private static boolean sIsStackTrace = true;    // 是否打印StackTrace Info

    /**
     * 设置TAG
     *
     * @param tag
     */
    public static void setTag(final String tag) {
        if (!TextUtils.isEmpty(tag)) {
            sPreTag = tag;
        }
    }

    /**
     * 设置消息前缀
     *
     * @param prefix
     */
    public static void setPrefix(final String prefix) {
        if (!TextUtils.isEmpty(prefix)) {
            sPrePrefix = prefix;
        } else {
            sPrePrefix = &amp;quot;&amp;quot;;
        }
    }

    /**
     * 设置是否打印StackTrace信息 （显示文件名(行数)#函数名:）
     *
     * @param isStackTrace true/false
     */
    public static void setStackTrace(boolean isStackTrace) {
        sIsStackTrace = isStackTrace;
    }

    /**
     * Verbose level log
     *
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void v(final String message, Object... fields) {
        printMsg(Log.VERBOSE, sPrePrefix, message, fields);
    }

    /**
     * Debug level log print
     *
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void d(final String message, Object... fields) {
        printMsg(Log.DEBUG, sPrePrefix, message, fields);
    }

    /**
     * Info level log print
     *
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void i(final String message, Object... fields) {
        printMsg(Log.INFO, sPrePrefix, message, fields);
    }

    /**
     * Warning level log print
     *
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void w(final String message, Object... fields) {
        printMsg(Log.WARN, sPrePrefix, message, fields);
    }

    /**
     * Error level log print
     *
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void e(final String message, Object... fields) {
        printMsg(Log.ERROR, sPrePrefix, message, fields);
    }

    /**
     * Verbose level log
     *
     * @param prefix  消息前缀
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void V(final String prefix, final String message, Object... fields) {
        printMsg(Log.VERBOSE, prefix, message, fields);
    }

    /**
     * Debug level log print
     *
     * @param prefix  消息前缀
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void D(final String prefix, final String message, Object... fields) {
        printMsg(Log.DEBUG, prefix, message, fields);
    }

    /**
     * Info level log print
     *
     * @param prefix  消息前缀
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void I(final String prefix, final String message, Object... fields) {
        printMsg(Log.INFO, prefix, message, fields);
    }

    /**
     * Warning level log print
     *
     * @param prefix  消息前缀
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void W(final String prefix, final String message, Object... fields) {
        printMsg(Log.WARN, prefix, message, fields);
    }

    /**
     * Error level log print
     *
     * @param prefix  消息前缀
     * @param message 消息
     * @param fields  数据域，键-值连续的数据对，必须确保fields的长度为偶数，否则最后一个数据将不会打印
     */
    public static void E(final String prefix, final String message, Object... fields) {
        printMsg(Log.ERROR, prefix, message, fields);
    }

    /**
     * 打印log
     *
     * @param level   log级别
     * @param prefix  前缀
     * @param message 消息体（必须的）
     * @param fields  数据域
     */
    private static void printMsg(final int level, final String prefix, final String message, Object... fields) {
        StringBuilder sb = new StringBuilder();
        // 添加栈信息（文件及函数信息）
        if (sIsStackTrace) {
            StackTraceElement[] elements = Thread.currentThread().getStackTrace();
            if (elements != null &amp;amp;&amp;amp; elements.length &amp;gt; 4) {
                sb.append(elements[4].getFileName());
                sb.append(&amp;quot;(&amp;quot;);
                sb.append(elements[4].getLineNumber());
                sb.append(&amp;quot;)#&amp;quot;);
                sb.append(elements[4].getMethodName());
                sb.append(&amp;quot; &amp;quot;);
            }
        }
        sb.append(prefix);
        sb.append(&amp;quot;&amp;gt; &amp;quot;);
        sb.append(message);
        if (fields.length &amp;gt; 1) {
            sb.append(&amp;quot; { &amp;quot;);
            for (int i = 0, j = fields.length &amp;amp; FIXED_LENGTH_MASK; i &amp;lt; j; ) {
                sb.append(String.valueOf(fields[i++]));
                sb.append(&amp;quot;=&amp;quot;);
                sb.append(String.valueOf(fields[i++]));
                sb.append(&amp;quot;; &amp;quot;);
            }
            sb.append(&amp;quot;}&amp;quot;);
        }
        switch (level) {
            case Log.VERBOSE:
                Log.v(sPreTag, sb.toString());
                break;
            case Log.DEBUG:
                Log.d(sPreTag, sb.toString());
                break;
            case Log.INFO:
                Log.i(sPreTag, sb.toString());
                break;
            case Log.WARN:
                Log.w(sPreTag, sb.toString());
                break;
            case Log.ERROR:
                Log.e(sPreTag, sb.toString());
                break;
            default:
                break;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
