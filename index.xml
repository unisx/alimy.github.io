<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/</link>
    
    
    <copyright>Copyright (c) 20015 - 2016, Alimy; all rights reserved.</copyright>
    <updated>Wed, 20 Jan 2016 00:00:00 UTC</updated>
    
    <item>
      <title>我今年，二十七八岁</title>
      <link>http://alimy.me/post/day_2016012001649/</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/day_2016012001649/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160120170100.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，每天起床的时间从中午12点变成了早上7点，睡觉的时间从凌晨变成了晚上11点。&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，工作中开始接触形形色色的人，见到亲戚朋友，他们不再问你考试考了多少分，而
是问你工资多少，结婚没有&amp;hellip;&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，聊天的话题从各种网络游戏变成汽车，房子…吃饭的时候，往往讨论的是他准备结婚，
她哪年结婚了…&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，每天不再感慨学校作业有多少作业做不完，开始感慨油价，房价涨的有多快，股票是
涨还是跌…&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，不再乱买东西，月底开始算计，还了信用卡，开销多少，还剩下多少，该开始攒钱买
房子了…&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，渐渐的开始讨厌的酒吧、ktv，喜欢亲近自然，喜欢健康的生活方式…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160120170102.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，偶尔会有寂寞，偶尔会挂念一个人；&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，我们开始追逐梦想，不会再轻易流泪，不会再为了一点挫折而放弃…&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，没有了年少的轻狂，把遇到的挫折困难都当作一种人生的阅历，试着去包容去忍耐…&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，回想起曾经，我们做了太多的错事，走了太多的弯路，我们总是在后悔，可是我
们回不去了，回不去那个曾经纯真的年代了。当我们被社会上无形的压力压的喘不过去的时候，我们渴
望曾经的那份爱，渴望每天下班有人一起吃饭，一起看电影，我们需要有一个人为我们，来分担一些东
西。我们在一条伟大的航路上我们需要有人为我们鼓劲，也许我们累倒想放弃，深吸一口气，继续向前
走，我深信，总有一个能靠岸的彼岸。&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，无聊时我们没有去玩游戏，我们开始上平购宝购物，挑折扣，买正品。&lt;/p&gt;

&lt;p&gt;我们今年二十七八岁，孤单时我们没有去网吧，我们用手机隐身上QQ，看看谁在线，看看熟悉的人，想
说点什么，究竟又什么也没说，就这样反复纠结的着…我们把空间刷新了一遍又一遍，看看谁更新心情了，
看看谁更新了日志了，回复了符号，却没有回复句子…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160120170103.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，烦恼的时候不再发牢骚，我静静的，静静的看着听着，这很现实又很虚伪的世界…&lt;/p&gt;

&lt;p&gt;我今年二十七八岁，明明很想哭，却还在笑。明明很在乎，却装作无所谓。明明很想留下，却坚定的说
要离开。明明很痛苦，却偏偏说自己很幸福。明明忘不掉，却说已经忘了。明明放不下，却说他是他，
我是我。明明舍不得，却说我已经受够了。明明说的是违心的假话，却说那是自己的真心话。明明眼泪
都快溢出眼眶，却高昂着头。明明已经无法挽回，却依旧执着。明明知道自己很受伤，却说你不必觉得
欠我的。明明这样『伪装』着很累，却还得依旧…为得只是隐藏自己的脆弱，即使很难过，也会装的无所
谓…只是不愿别人看见自己的伤口，不让自己周围的人担心，不想别人同情自己…只想在心底独自承受，虽
然心疼的难以呼吸，却笑着告诉所有人“我没事的！”然后静下来时，自己就笑话自己，何必把自己伪装的
这么坚强？好像自己可以承受所有的苦难…呵…这好累、好累！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160120170101.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.iqiyi.com/w_19rrbsyvtp.html&#34; title=&#34;我今年二十七八岁&#34;&gt;【爱奇艺&amp;bull;视频】&lt;/a&gt;
(转载自网络)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DogeOS,SmartOS,illumos</title>
      <link>http://alimy.me/post/dev_201601161712/</link>
      <pubDate>Sat, 16 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601161712/</guid>
      <description>

&lt;h2 id=&#34;dogeos-smartos-illumos-这些都是什么:a570edf7f9cf5da971e53a3290dfcb84&#34;&gt;DogeOS, SmartOS, illumos，这些都是什么？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;都是操作系统&lt;/li&gt;
&lt;li&gt;都是云计算操作系统&lt;/li&gt;
&lt;li&gt;都是先进的云计算操作系统&lt;/li&gt;
&lt;li&gt;都是小众的先进的云计算操作系统&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;讲完收工&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;当然不是这么简单 :)&lt;/p&gt;

&lt;p&gt;但是也不希望写的太长。以下就尽量言简意垓的把来龙去脉，历史纠纷，以及革命先进性都说清楚。&lt;/p&gt;

&lt;h2 id=&#34;从illumos开始:a570edf7f9cf5da971e53a3290dfcb84&#34;&gt;从illumos开始&lt;/h2&gt;

&lt;p&gt;什么是&lt;a href=&#34;http://www.illumos.org&#34;&gt;illumos&lt;/a&gt;？简单的讲，illumos是OpenSolaris的后续开源项目。万恶的Oracle收购了Sun之后，原有OpenSolaris的开发者基本上都离开了Oracle，组成了illumos社区，继续对OpenSolaris先进的内核进行维护，更新，以及添加nb的新功能。这种事情在Oracle的收购史上似乎一再出现，想想MySQL，OpenOffice，Java，强烈的既视感。&lt;/p&gt;

&lt;p&gt;当然，OpenSolaris不是完蛋了，其实还&lt;a href=&#34;http://solaris.java.net/&#34;&gt;存活着&lt;/a&gt;。不过因为核心开发者的出走，都在illumos那边玩，很多&lt;a href=&#34;http://www.slideshare.net/ahl0003/illumos-innovations-that-will-never-be-in-oracle-solaris&#34;&gt;先进特性&lt;/a&gt;（尤以存储和虚拟化方面为甚）都不再回流。&lt;/p&gt;

&lt;p&gt;illumos继承了所有OpenSolaris的先进特性，例如ZFS，Zone，Crossbow和Dtrace。简单的总结如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ZFS可以说是终极文件系统，提供了卷管理，快照，和所有想得到的nb东西&lt;code&gt;在linux里面，这个功能由
LVM以及一堆不同的文件系统完成&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Zone是OS Container，即操作系统隔离，或者叫做轻量级虚拟机&lt;code&gt;linux在Zone出现5年之后，也
模仿开发了LXC功能&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Crossbow是网络虚拟化，说白了就是将网卡硬件和软件设备分离，一块硬件对应好多个软件设备，并且
提供了nb的虚拟switch支持&lt;code&gt;linux这部分的成果也基本上进入了内核，在几年之后&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dtrace是系统管理员的终极武器，无痛在线勘察系统瓶颈的手术刀&lt;code&gt;MacOSX借用FreeBSD的成果
移植了Dtrace，构成了Xcode中nb闪闪的instruments功能（乔老爷子亲自宣布的），linux这边
限于授权协议问题，则由IBM联合RedHat克隆了一份，名为SystemTap&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，在joyent公司里面&lt;a href=&#34;http://www.slideshare.net/bcantrill/experiences-porting-kvm-to-smartos&#34;&gt;两位神人的努力下&lt;/a&gt;，KVM被移植到了illumos内核上，于是illumos也拥有了通常所说的&lt;a href=&#34;http://en.wikipedia.org/wiki/Hypervisor&#34;&gt;Type 2虚拟化技术&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;于是illumos = ZFS + Zone + Crossbow + Dtrace + KVM。所有云计算的关键服务在这里集合，形成了一个为云计算而生的系统内核。&lt;/p&gt;

&lt;p&gt;但是需要注意的是illumos只是一个内核（正确的说是，内核(OS)加网络层(Network)，即ON）。在geek的手里，它已经完备;放在生产环境，则还欠缺一个包装。&lt;/p&gt;

&lt;h2 id=&#34;然后是smartos:a570edf7f9cf5da971e53a3290dfcb84&#34;&gt;然后是SmartOS&lt;/h2&gt;

&lt;p&gt;怎么把illumos包装成通常意义上的OS，这是接下来需要考虑的问题，也是最好的商业化的契机。&lt;/p&gt;

&lt;p&gt;于是就诞生了一批社区和公司围绕着illumos做包装工作，产品谓之发行版。&lt;/p&gt;

&lt;p&gt;第一个明显的方向，即是让GNU工具，也就是通常意义上我们认识的linux部分（Gnome，KDE，X11等等）跑在illumos内核上，组成一个可以天天使用和开发的平台。这方面诞生了&lt;a href=&#34;http://www.openindiana.org&#34;&gt;OpenIndiana&lt;/a&gt;，安装使用这个系统，在感官层次，基本上与linux也区别不大。&lt;/p&gt;

&lt;p&gt;但是illumos的优势毕竟不是在桌面系统，而是在服务器上。所以第二个方向，就是打包成一个可以给数据中心使用的云操作系统。这方面的公司，就有&lt;a href=&#34;http://www.nexenta.com&#34;&gt;nexenta&lt;/a&gt;，&lt;a href=&#34;http://www.delphix.com&#34;&gt;delphix&lt;/a&gt;和&lt;a href=&#34;http://www.joyent.com&#34;&gt;joyent&lt;/a&gt;三家公司。前两者集中火力发挥ZFS存储的威力，对准EMC开炮。joyent则走向了云计算，不仅运营自己的公有云，也提供私有云解决方案。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.smartos.org&#34;&gt;SmartOS&lt;/a&gt;即是joyent在包装illumos方面的答案。joyent将illumos内核和必要的组件和命令行工具，打包成为了一个300MB左右的LiveCD，实现了“启动即拥有云计算能力”这个目标。&lt;/p&gt;

&lt;p&gt;joyent公司其实更加为人熟知的，是其&lt;a href=&#34;http://www.nodejs.org&#34;&gt;nodejs&lt;/a&gt;平台。SmartOS里面的关键命令行工具和组件，都是用nodejs来实现的。用javascript来实现严肃认真的服务器功能，或许这很让人觉得有些不可思议。但是joyent就是这样做的，而且用事实证明，他们干的很不错，实现的效率并不比编译好的二进制程序差。&lt;/p&gt;

&lt;p&gt;因为KVM技术是由joyent第一次整合进入illumos，所以SmartOS理所当然成为第一个能提供KVM服务（即运行CentOS，Ubuntu和Windows）的illumos发行版。鉴于illumos社区的良好风气，&lt;a href=&#34;https://github.com/joyent/illumos-kvm&#34;&gt;KVM on illumos&lt;/a&gt;从一开始就是开源项目，最后也进入illumos内核。&lt;/p&gt;

&lt;p&gt;SmartOS的特点总结如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;继承了illumos所有的特点（ZFS + Zone + Crossbow + Dtrace + KVM）&lt;code&gt;linux近年来，在KVM
和LXC进入内核之后，也逐步具有了以上功能，但是网络虚拟化和Dtrace部分，则始终差一点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;集成了joyent所开发的vmadm，imgadm等工具软件，使得虚拟化部分具有了可操作性&lt;code&gt;linux系统则是
由libvirt+一系列小工具来完成这些功能&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;秉承LiveOS的理念，强调无需安装，将几乎全部的服务器资源留给了租户&lt;code&gt;linux方面，这方面的进步则
不明显，但是有商业公司进行探讨&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-fifo:a570edf7f9cf5da971e53a3290dfcb84&#34;&gt;Project FiFo&lt;/h2&gt;

&lt;p&gt;SmartOS是纯粹为云计算而生的操作系统，出世之后即引起了群众的注意，开始应用。但是数据中心维护的管理员熟知，安装好方才是梦魇的开始。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;怎么维护系统？&lt;/li&gt;
&lt;li&gt;怎么管理系统的各项资源？&lt;/li&gt;
&lt;li&gt;怎么进行日常的操作？&lt;/li&gt;
&lt;li&gt;怎么监控系统？&lt;/li&gt;
&lt;li&gt;怎么处理系统的故障？&lt;/li&gt;
&lt;li&gt;怎么升级系统？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回答这些问题，方才是系统管理员最终选择一个操作系统的真正考察点。&lt;/p&gt;

&lt;p&gt;SmartOS只可以部分的回答上述问题。&lt;/p&gt;

&lt;p&gt;joyent是一个商业公司，它并没有把所有的东西都放在SmartOS里面让大家免费使用。准确的说，joyent将回答所有上述问题的*能力*，无私的都放在了SmartOS中。但是体现这些能力的*工具*，或者以更为熟知的术语表述，*运维管理系统*，并没有放出来。joyent的运维管理工具，名为SmartDataCenter，是一个商业产品，需要不菲的授权费用才可以使用。&lt;/p&gt;

&lt;p&gt;于是使用SmartOS运营数据中心，就变成如下两种常见的方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;强者不需要任何运维工具。因为既然能力都已经具备，那么实际上所有事情都可以通过一些基本管理工具，以及API的调用完成。换言之，强者会开发自己的运维系统。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不具备开发自己运维系统能力的用户。要么就是小规模的使用SmartOS，生产虚拟机之后，即很长时间不去动弹它（SmartOS的稳定性基本可以保证终身不怎么出问题），要么就是去获取SmartDataCetner的授权。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;如果有一个开源的运维管理系统就好了？&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;通常我们都会这么想。&lt;/p&gt;

&lt;p&gt;运维管理系统的开发，理论上来讲，并不是一个很难的事情，只是需要付出大量的时间和开发精力（因此可能illumos内核那帮家伙不屑去做:)）。然而，这套系统又是运维的核心部分，天然的具有巨大的商业价值。因此不排除有些运营SmartOS的商业公司，开发了这套系统，但是并没有将之开源。&lt;/p&gt;

&lt;p&gt;直到&lt;a href=&#34;http://www.project-fifo.net&#34;&gt;Project FiFo&lt;/a&gt;的出现。&lt;/p&gt;

&lt;p&gt;Project FiFo贡献了一套开源SmartOS的运维管理系统，它的开发者主要是德国人&lt;a href=&#34;https://github.com/Licenser&#34;&gt;Heinz N. Gies&lt;/a&gt;。FiFo不仅仅是一套运维系统，实际上它还做了更多，完成了镜像管理，高可用，多数据中心管理等多方面的任务。简言之，Project FiFo解决了前面提出的大多数的问题。&lt;/p&gt;

&lt;p&gt;让我们感谢Heinz先。&lt;/p&gt;

&lt;h2 id=&#34;最后是dogeos:a570edf7f9cf5da971e53a3290dfcb84&#34;&gt;最后是DogeOS&lt;/h2&gt;

&lt;p&gt;Project FiFo作为一套运维管理系统，补全了SmartOS，但是它并不是SmartOS的一部分。&lt;/p&gt;

&lt;p&gt;简单的说，用户仍然需要先安装SmartOS，再安装好FiFo。注意，SmartOS理论上是没有安装这种概念的，但是FiFo作为管理系统，显然是需要安装以解决持久化的问题的。&lt;/p&gt;

&lt;p&gt;于是用户再一次可能陷入混乱。&lt;/p&gt;

&lt;p&gt;作为一个SmartOS的爱好者，本来我是准备克隆一套SmartDataCenter来扬名立万的:)，但是发现Heinz把这件事情做的这么好，我就放弃了自己开发，转而投入到*粉*Heinz的事业中去。&lt;/p&gt;

&lt;p&gt;直到我发现了Project FiFo还并不是SmartOS一部分这个问题，便开始解决这个问题。&lt;/p&gt;

&lt;p&gt;我计划将SmartOS拆散重组，整合FiFo进去，形成了一个可能稍微好用一点点的系统。&lt;/p&gt;

&lt;p&gt;这个系统被我叫做&lt;a href=&#34;http://www.dogeos.net&#34;&gt;DogeOS&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;一个理想中的，生来用来管理数据中心的，完备的云计算操作系统，终于可能成为现实。&lt;/p&gt;

&lt;p&gt;这让我为之兴奋不已。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://liyu1981.github.io/dogeos-smartos-illumos/&#34; title=&#34;liyu1981&#39;s page&#34;&gt;【转载自liyu1981】&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://alimy.me/post/dev_201601131558/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601131558/</guid>
      <description>

&lt;h3 id=&#34;bull-what-is-markdown:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;&amp;bull; What is Markdown?&lt;/h3&gt;

&lt;p&gt;Markdown is a way to style text on the web. You control the display of the
document; formatting words as bold or italic, adding images, and creating lists
are just a few of the things we can do with Markdown. Mostly, Markdown is just
regular text with a few non-alphabetic characters thrown in, like # or *.&lt;br /&gt;
&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34; title=&#34;Daring FireBall: Home&#34;&gt;[Markdown Reference]&lt;/a&gt; &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34; title=&#34;GitHub&#39;s Mastering Markdown&#34;&gt;[Mastering Markdown]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;bull-syntax-cheatsheet:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;&amp;bull; Syntax Cheatsheet:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Phrase Emphasis&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; *italic*   **bold**
 _italic_   __bold__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;italic&lt;/em&gt;   &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;italic&lt;/em&gt;   &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Links-Inline(titles are optional)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;An [example](http://url.com/ &amp;quot;Title&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An &lt;a href=&#34;http://url.com/&#34; title=&#34;Title&#34;&gt;example&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Links-Reference-style labels(titles are optional)&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[example][id] reference-style link.
[example] [id] reference-style link.
[example][] reference-style link.

[id]: http://example.com/ &amp;quot;Optional Title Here&amp;quot;
[id]: http://example.com/ &#39;Option Tile Here&#39;
[id]: http://example.com/ (Option Tile Here)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reference-style link: &lt;a href=&#34;https://github.com/alimy&#34; title=&#34;alimy&#39;s github&#34;&gt;GitHub&lt;/a&gt; &lt;a href=&#34;https://twitter.com/alimy86&#34; title=&#34;alimy&#39;s twitter&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;http://alimy.me/&#34; title=&#34;alimy&#39;s blog&#34;&gt;Alimy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Images-Inline(titles are optional)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;![alt text](/path/img.jpg &amp;quot;Optional Title Here&amp;quot;)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Images-Reference-style(titles are optional)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![alt text][id]
[id]: /url/to/img.jpg &amp;quot;Optional Title Here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Headers-Setext-style&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Header 1
========
Header 2
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;header-1:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 1&lt;/h1&gt;

&lt;h2 id=&#34;header-2:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 2&lt;/h2&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Headers-Atx-style(closing #&amp;rsquo;s are optional)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Header 1 #
## Header 2 ##
### Header 3
#### Header 4
##### Header 5
###### Header 6
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;header-1-1:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 1&lt;/h1&gt;

&lt;h2 id=&#34;header-2-1:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 2&lt;/h2&gt;

&lt;h3 id=&#34;header-3:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 3&lt;/h3&gt;

&lt;h4 id=&#34;header-4:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 4&lt;/h4&gt;

&lt;h5 id=&#34;header-5:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 5&lt;/h5&gt;

&lt;h6 id=&#34;header-6:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Header 6&lt;/h6&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List-Ordered,without paragraphs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;gt;   1. first
  &amp;gt;   2. second
  &amp;gt;   3. Three
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List-Unordered,with paragraphs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;gt;   * A list item.
  &amp;gt;     with multiple paragraphs
  &amp;gt;   * Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blockquotes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Email-style angle brackets
&amp;gt; are used for blockquotes.


&amp;gt; &amp;gt; And, they can be nested.


&amp;gt; #### Headers in blockquotes
&amp;gt;
&amp;gt; * You can quote a list.
&amp;gt; * Etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Preview below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Email-style angle brackets
are used for blockquotes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And, they can be nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;headers-in-blockquotes:8a3103bd0efc46558eecfb5aef7eee0d&#34;&gt;Headers in blockquotes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can quote a list.&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code Spans&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;lt;code&amp;gt;` spans are delimited by backticks.
You can include literal backticks like `` `this` ``.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Preformatted Code Blocks
Indent every line of a code block by at least 4 spaces or 1 tab.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a normal paragraph.


  This is a preformatted
  code block.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Preview below:&lt;/p&gt;

&lt;p&gt;This is a normal paragraph.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a preformatted
code block.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Horizontal Rules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ---
  ***
  * * *
  - - - -
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Manual Line Breaks&lt;br /&gt;
end a line with two or more spaces:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Roses are red,  
Violets are blue.  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Preview below:&lt;/p&gt;

&lt;p&gt;Roses are red,&lt;br /&gt;
Violets are blue.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Too many open files 的解决方法</title>
      <link>http://alimy.me/post/dev_201601121531/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601121531/</guid>
      <description>

&lt;h2 id=&#34;由来:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;由来&lt;/h2&gt;

&lt;p&gt;gogs 打开一个android app库的资源文件夹(&lt;a href=&#34;http://gogs.me/coding/Coding-Android/src/master/app/src/main/res/drawable-xxhdpi&#34;&gt;http://gogs.me/coding/Coding-Android/src/master/app/src/main/res/drawable-xxhdpi&lt;/a&gt;)
返回 500&lt;/p&gt;

&lt;h2 id=&#34;源头:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;源头&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[git@linux gogs]$ ./gogs web
2016/01/12 15:35:31 [T] Custom path: /home/git/opt/gogs/custom
2016/01/12 15:35:31 [T] Log path: /home/git/opt/gogs/log
2016/01/12 15:35:31 [I] Gogs 0.8.19.0111
2016/01/12 15:35:31 [I] Log Mode: File(Info)
2016/01/12 15:35:31 [I] Cache Service Enabled
2016/01/12 15:35:31 [I] Session Service Enabled
2016/01/12 15:35:31 [I] Git Version: 2.5.0
2016/01/12 15:35:31 [I] SQLite3 Supported
2016/01/12 15:35:31 [I] Run Mode: Production
2016/01/12 15:35:31 [T] Doing: CheckRepoStats
2016/01/12 15:35:31 [I] Listen: http://0.0.0.0:2048
[Macaron] Started GET /coding/Coding-Android/src/master/app/src/main/res/drawable-xxhdpi for 127.0.0.1
2016/01/12 15:35:36 [D] Session ID: bd615aa3d0616740
2016/01/12 15:35:36 [D] CSRF Token: Ff7aL72oaVjpxMgcOS0fqcVokWE6MTQ1MjU2NzkxMjM0NTE3Njg2MA==
2016/01/12 15:35:37 [...routers/repo/view.go:134 Home()] [E] GetCommitsInfo: GetCommitByPath (app/src/main/res/drawable-xxhdpi//ic_location_list_check.png): pipe2: too many open files

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;bull; 原来是&lt;code&gt;pipe2: too many open files&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;ulimit:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;ulimit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[git@linux gogs]$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 31850
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 4096
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 8182
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;bull; 嗯，(open files)=4096，那也不小啊，gogs君，这是Bug吗？好吧，我改&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;解决方案:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;解决方案&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[root@linux gogs]# cat /proc/sys/fs/file-max
813396

[root@linux gogs]# ulimit -n 32768

[root@linux gogs]# ulimit -Sn
32768

[root@linux gogs]# ulimit -Hn
65536

[root@linux gogs]# ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 31850
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 32768
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 32768
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;终极方案:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;终极方案&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[root@linux gogs]# cat /etc/security/limits.conf
# /etc/security/limits.conf
#
#This file sets the resource limits for the users logged in via PAM.
#It does not affect resource limits of the system services.
#
#Also note that configuration files in /etc/security/limits.d directory,
#which are read in alphabetical order, override the settings in this
#file in case the domain is the same or more specific.
#That means for example that setting a limit for wildcard domain here
#can be overriden with a wildcard setting in a config file in the
#subdirectory, but a user specific setting here can be overriden only
#with a user specific setting in the subdirectory.
#
#Each line describes a limit for a user in the form:
#
#&amp;lt;domain&amp;gt;        &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;  &amp;lt;value&amp;gt;
#
#Where:
#&amp;lt;domain&amp;gt; can be:
#        - a user name
#        - a group name, with @group syntax
#        - the wildcard *, for default entry
#        - the wildcard %, can be also used with %group syntax,
#                 for maxlogin limit
#
#&amp;lt;type&amp;gt; can have the two values:
#        - &amp;quot;soft&amp;quot; for enforcing the soft limits
#        - &amp;quot;hard&amp;quot; for enforcing hard limits
#
#&amp;lt;item&amp;gt; can be one of the following:
#        - core - limits the core file size (KB)
#        - data - max data size (KB)
#        - fsize - maximum filesize (KB)
#        - memlock - max locked-in-memory address space (KB)
#        - nofile - max number of open file descriptors
#        - rss - max resident set size (KB)
#        - stack - max stack size (KB)
#        - cpu - max CPU time (MIN)
#        - nproc - max number of processes
#        - as - address space limit (KB)
#        - maxlogins - max number of logins for this user
#        - maxsyslogins - max number of logins on the system
#        - priority - the priority to run user process with
#        - locks - max number of file locks the user can hold
#        - sigpending - max number of pending signals
#        - msgqueue - max memory used by POSIX message queues (bytes)
#        - nice - max nice priority allowed to raise to values: [-20, 19]
#        - rtprio - max realtime priority
#
#&amp;lt;domain&amp;gt;      &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;         &amp;lt;value&amp;gt;
#

#*               soft    core            0
#*               hard    rss             10000
#@student        hard    nproc           20
#@faculty        soft    nproc           20
#@faculty        hard    nproc           50
#ftp             hard    nproc           0
#@student        -       maxlogins       4

# End of file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;bull; 编辑这个配置文件修改limits&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@linux gogs]# vi /etc/security/limits.conf

[root@linux gogs]# cat /etc/security/limits.conf
# /etc/security/limits.conf
#
#&amp;lt;domain&amp;gt;      &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;         &amp;lt;value&amp;gt;
*   soft    nproc   32768
*   hard    nproc   65536
*   soft    nofile  32768
*   hard    nofile  65536
# End of file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;bull; 系统重启后生效。&lt;/p&gt;

&lt;h2 id=&#34;limits-conf的工作原理:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;limits.conf的工作原理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;limits.conf是pam_limits.so的配置文件&lt;/li&gt;
&lt;li&gt;/etc/pam.d/下的应用程序调用pam_***.so模块&lt;/li&gt;
&lt;li&gt;当用户访问服务器，服务程序将请求发送到PAM模块，PAM模块根据服务名称在/etc/pam.d
目录下选择一个对应的服务文件，然后根据服务文件的内容选择具体的PAM模块进行处理。&lt;/li&gt;
&lt;li&gt;例：限制admin用户登录到sshd的服务不能超过2个
在/etc/pam.d/sshd 中添加 session required pam_limits.so
在/etc/security/limits.conf中添加 admin - maxlogins 2&lt;/li&gt;
&lt;li&gt;查看应用程序能否被PAM支持，用ldd&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;limits-conf文件中的参数配置方式:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;limits.conf文件中的参数配置方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;暂时地，登录 shell 会话期间使用ulimit 命令配置&lt;/li&gt;
&lt;li&gt;永久地，通过将一个相应的 ulimit 语句添加到由登录 shell 读取的文件之一
（例如 ~/.profile 或者 ~/.bashrc），即特定于 shell 的用户资源文件；
或者通过编辑 /etc/security/limits.conf.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;后记:24c92de71c82cd5c5c09db7aef53b004&#34;&gt;&amp;gt;后记&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以上方法并没有完全解决gogs:too many files -&amp;gt; return 500的问题,如果以服务的模式运行
&lt;code&gt;[root@linux gogs]# systemctl start gogs.service&lt;/code&gt;问题依然存在，但是在Shell
会话中&lt;code&gt;[git@linux gogs]$ ./gogs web&lt;/code&gt;却没有问题，不再出现too many files 的错误。
Google了一下还是没有什么好的思路，就去github.com/gogits/gogs的Issue中找答案，那里本来
就有一个关于too manyfiles的讨论-&lt;a href=&#34;https://github.com/gogits/gogs/issues/1270&#34;&gt;[GitHub Issue]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原来是sysemd在搞怪。systemd对limits的配置是在相应的服务定义文件中（如gogs的服务定义是在
/usr/lib/systemd/system/gogs.service），如果需要配置相应的limits，systemd
提供了对应的&lt;code&gt;directive&lt;/code&gt;(eg: &lt;code&gt;LimitNOFILE&lt;/code&gt; &lt;code&gt;LimitMEMLOCK&lt;/code&gt; &amp;hellip;)，
systemd忽略通过ulimit配置的limits（是否理会/etc/security/limits.conf中的配置以及如
何响应就不得而知了，没有深究）对systemd不是特别了解，有时间再深入研究。&lt;/li&gt;
&lt;li&gt;下面是我的gogs.service&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[git@linux gogs]$ cat /usr/lib/systemd/system/gogs.service
[Unit]
Description=Gogs (Go Git Service)
After=syslog.target
After=network.target

[Service]
LimitMEMLOCK=infinity
LimitNOFILE=65535
Type=simple
User=git
Group=git
WorkingDirectory=/home/git/opt/gogs
ExecStart=/home/git/opt/gogs/gogs web
Restart=always
Environment=USER=git HOME=/home/git

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>咏春</title>
      <link>http://alimy.me/post/art_201601100836/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601100836/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160110095600.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;花开有季（&lt;a href=&#34;http://alimy.me/images/post/20160110095600.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160110095600.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>陌陌</title>
      <link>http://alimy.me/post/art_201601090836/</link>
      <pubDate>Sat, 09 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601090836/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160109084900.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无题（&lt;a href=&#34;http://alimy.me/images/post/20160109084900.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160109084900.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>冰月</title>
      <link>http://alimy.me/post/art_201601080836/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601080836/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160108084900.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;末日销魂（&lt;a href=&#34;http://alimy.me/images/post/20160108084900.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160108084900.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>少女</title>
      <link>http://alimy.me/post/art_201601071212/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601071212/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160107165800.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;很喜欢这幅画（&lt;a href=&#34;http://alimy.me/images/post/20160107161300.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160107161300.png&#34; title=&#34;png格式图片&#34;&gt;PNG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>猎人</title>
      <link>http://alimy.me/post/art_201601061212/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601061212/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160106165800.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;雪中猎人（&lt;a href=&#34;http://alimy.me/images/post/20160106161600.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160106161600.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>朝阳</title>
      <link>http://alimy.me/post/art_201601051212/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601051212/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160105091800.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;浪尽天涯（&lt;a href=&#34;http://alimy.me/images/post/20160105091801.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160105091801.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>迷雾</title>
      <link>http://alimy.me/post/art_201601041212/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/art_201601041212/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20160104122100.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;何处有人家（&lt;a href=&#34;http://alimy.me/images/post/20160104122100.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt; &amp;middot; &lt;a href=&#34;http://alimy.me/images/post/20160104122100.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;JPEG&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>关于TOML</title>
      <link>http://alimy.me/post/dev_201601031221/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601031221/</guid>
      <description>

&lt;h2 id=&#34;toml的由来:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;TOML的由来&lt;/h2&gt;

&lt;p&gt;TOML的全称是　Tom&amp;rsquo;s Obvious, Minimal Language，因为它是GitHub　前CEO,联合创始人
Tom Preston-Werner 于2013年创建的语言。&lt;/p&gt;

&lt;p&gt;配置文件的使用由来已久，从.ini、XML、JSON、YAML再到TOML，语言的表达能力越来越强，同时书
写便捷性也在不断提升。&lt;/p&gt;

&lt;h2 id=&#34;toml-的目标:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;TOML 的目标&lt;/h2&gt;

&lt;p&gt;TOML的目标是成为一个小规模的易于使用的语义化配置文件格式。TOML被设计为可以无二义性的转换
为一个哈希表(Hash table)，从而被多种语言解析。&lt;/p&gt;

&lt;h3 id=&#34;例子:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;例子&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;title = &amp;quot;TOML 例子&amp;quot;

[owner]
name = &amp;quot;Tom Preston-Werner&amp;quot;
organization = &amp;quot;GitHub&amp;quot;
bio = &amp;quot;GitHub Cofounder &amp;amp; CEO\nLikes tater tots and beer.&amp;quot;
dob = 1979-05-27T07:32:00Z # 日期时间是一等公民。为什么不呢？

[database]
server = &amp;quot;192.168.1.1&amp;quot;
ports = [ 8001, 8001, 8002 ]
connection_max = 5000
enabled = true

[servers]

  # 你可以依照你的意愿缩进。使用空格或Tab。TOML不会在意。
  [servers.alpha]
  ip = &amp;quot;10.0.0.1&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

  [servers.beta]
  ip = &amp;quot;10.0.0.2&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

[clients]
data = [ [&amp;quot;gamma&amp;quot;, &amp;quot;delta&amp;quot;], [1, 2] ]

# 在数组里换行没有关系。
hosts = [
  &amp;quot;alpha&amp;quot;,
  &amp;quot;omega&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TOML是大小写敏感的。&lt;/p&gt;

&lt;h3 id=&#34;注释:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;注释&lt;/h3&gt;

&lt;p&gt;使用 # 表示注释：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# I am a comment. Hear me roar. Roar.
key = &amp;quot;value&amp;quot; # Yeah, you can do this.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字符串:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;字符串&lt;/h3&gt;

&lt;p&gt;字符串和 JSON 的定义一致，只有一点除外：　TOML 要求使用　UTF-8 编码。&lt;/p&gt;

&lt;p&gt;注释以引号包裹，里面的字符必须是　UTF-8 格式。引号、反斜杠和控制字符（U+0000 到 U+001F）
需要转义。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;I&#39;m a string. \&amp;quot;You can quote me\&amp;quot;. Name\tJos\u00E9\nLocation\tSF.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用的转义序列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\b     - backspace       (U+0008)
\t     - tab             (U+0009)
\n     - linefeed        (U+000A)
\f     - form feed       (U+000C)
\r     - carriage return (U+000D)
\&amp;quot;     - quote           (U+0022)
\/     - slash           (U+002F)
\\     - backslash       (U+005C)
\uXXXX - unicode         (U+XXXX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用保留的特殊字符，TOML　会抛出错误。例如，在　Windows 平台上，应该使用两个反斜杠来表示
路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrong = &amp;quot;C:\Users\nodejs\templates&amp;quot; # 注意：这不会生成合法的路径。
right = &amp;quot;C:\\Users\\nodejs\\templates&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二进制数据建议使用　Base64　或其他合适的编码。具体的处理取决于特定的应用。&lt;/p&gt;

&lt;h3 id=&#34;整数:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;整数&lt;/h3&gt;

&lt;p&gt;整数就是一些没有小数点的数字。想用负数？按直觉来就行。整数的尺寸最小为64位。&lt;/p&gt;

&lt;h3 id=&#34;浮点数:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;浮点数&lt;/h3&gt;

&lt;p&gt;浮点数带小数点。小数点两边都有数字。64位精度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3.1415
-0.01
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;布尔值:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;布尔值&lt;/h3&gt;

&lt;p&gt;布尔值永远是小写。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;日期时间:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;日期时间&lt;/h3&gt;

&lt;p&gt;使用　ISO 8601　完整格式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1979-05-27T07:32:00Z
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数组:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;数组&lt;/h3&gt;

&lt;p&gt;数组使用方括号包裹。空格会被忽略。元素使用逗号分隔。注意，不允许混用数据类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 1, 2, 3 ]
[ &amp;quot;red&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;green&amp;quot; ]
[ [ 1, 2 ], [3, 4, 5] ]
[ [ 1, 2 ], [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] ] # 这是可以的。
[ 1, 2.0 ] # 注意：这是不行的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数组可以多行。也就是说，除了空格之外，方括号间的换行也会被忽略。在关闭方括号前的最终项后的
逗号是允许的。&lt;/p&gt;

&lt;h3 id=&#34;表格:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;表格&lt;/h3&gt;

&lt;p&gt;表格（也叫哈希表或字典）是键值对的集合。它们在方括号内，自成一行。注意和数组相区分，数组只
有值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在此之下，直到下一个　table 或　EOF 之前，是这个表格的键值对。键在左，值在右，等号在中间。
键以非空字符开始，以等号前的非空字符为结尾。键值对是无序的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table]
key = &amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以随意缩进，使用 Tab 或空格。为什么要缩进呢？因为你可以嵌套表格。&lt;/p&gt;

&lt;p&gt;嵌套表格的表格名称中使用.。你可以任意命名你的表格，只是不要用点，点是保留的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[dog.tater]
type = &amp;quot;pug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上等价于如下的 JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;dog&amp;quot;: { &amp;quot;tater&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;pug&amp;quot; } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不想的话，你不用声明所有的父表。TOML　知道该如何处理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# [x] 你
# [x.y] 不需要
# [x.y.z] 这些
[x.y.z.w] # 可以直接写
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;空表是允许的，其中没有键值对。&lt;/p&gt;

&lt;p&gt;只要父表没有被直接定义，而且没有定义一个特定的键，你可以继续写入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[a.b]
c = 1

[a]
d = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而你不能多次定义键和表格。这么做是不合法的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 别这么干！

[a]
b = 1

[a]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 也别这个干

[a]
b = 1

[a.b]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;表格数组:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;表格数组&lt;/h3&gt;

&lt;p&gt;最后要介绍的类型是表格数组。表格数组可以通过包裹在双方括号内的表格名来表达。使用相同的双方
括号名称的表格是同一个数组的元素。表格按照书写的顺序插入。双方括号表格如果没有键值对，会被
当成空表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[products]]
name = &amp;quot;Hammer&amp;quot;
sku = 738594937

[[products]]

[[products]]
name = &amp;quot;Nail&amp;quot;
sku = 284758393
color = &amp;quot;gray&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于以下的　JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;products&amp;quot;: [
    { &amp;quot;name&amp;quot;: &amp;quot;Hammer&amp;quot;, &amp;quot;sku&amp;quot;: 738594937 },
    { },
    { &amp;quot;name&amp;quot;: &amp;quot;Nail&amp;quot;, &amp;quot;sku&amp;quot;: 284758393, &amp;quot;color&amp;quot;: &amp;quot;gray&amp;quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表格数组同样可以嵌套。只需在子表格上使用相同的双方括号语法。每一个双方括号子表格回从属于最
近定义的上层表格元素。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [fruit.physical]
    color = &amp;quot;red&amp;quot;
    shape = &amp;quot;round&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;granny smith&amp;quot;

[[fruit]]
  name = &amp;quot;banana&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;plantain&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于如下的　JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;fruit&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;apple&amp;quot;,
      &amp;quot;physical&amp;quot;: {
        &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
        &amp;quot;shape&amp;quot;: &amp;quot;round&amp;quot;
      },
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;red delicious&amp;quot; },
        { &amp;quot;name&amp;quot;: &amp;quot;granny smith&amp;quot; }
      ]
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;banana&amp;quot;,
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;plantain&amp;quot; }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尝试定义一个普通的表格，使用已经定义的数组的名称，将抛出一个解析错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 不合法的　TOML

[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  # 和上面冲突了
  [fruit.variety]
    name = &amp;quot;granny smith&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TOML v0.4.0</title>
      <link>http://alimy.me/post/dev_201601021221/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601021221/</guid>
      <description>

&lt;p&gt;Tom&amp;rsquo;s Obvious, Minimal Language.&lt;/p&gt;

&lt;p&gt;By Tom Preston-Werner.&lt;/p&gt;

&lt;p&gt;Be warned, this spec is still changing a lot. Until it&amp;rsquo;s marked as 1.0, you
should assume that it is unstable and act accordingly.&lt;/p&gt;

&lt;h2 id=&#34;objectives:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Objectives&lt;/h2&gt;

&lt;p&gt;TOML aims to be a minimal configuration file format that&amp;rsquo;s easy to read due to
obvious semantics. TOML is designed to map unambiguously to a hash table. TOML
should be easy to parse into data structures in a wide variety of languages.&lt;/p&gt;

&lt;h2 id=&#34;example:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# This is a TOML document. Boom.

title = &amp;quot;TOML Example&amp;quot;

[owner]
name = &amp;quot;Lance Uppercut&amp;quot;
dob = 1979-05-27T07:32:00-08:00 # First class dates? Why not?

[database]
server = &amp;quot;192.168.1.1&amp;quot;
ports = [ 8001, 8001, 8002 ]
connection_max = 5000
enabled = true

[servers]

  # You can indent as you please. Tabs or spaces. TOML don&#39;t care.
  [servers.alpha]
  ip = &amp;quot;10.0.0.1&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

  [servers.beta]
  ip = &amp;quot;10.0.0.2&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

[clients]
data = [ [&amp;quot;gamma&amp;quot;, &amp;quot;delta&amp;quot;], [1, 2] ]

# Line breaks are OK when inside arrays
hosts = [
  &amp;quot;alpha&amp;quot;,
  &amp;quot;omega&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;spec:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Spec&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TOML is case sensitive.&lt;/li&gt;
&lt;li&gt;A TOML file must contain only UTF-8 encoded Unicode characters.&lt;/li&gt;
&lt;li&gt;Whitespace means tab (0x09) or space (0x20).&lt;/li&gt;
&lt;li&gt;Newline means LF (0x0A) or CRLF (0x0D0A).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comment:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Comment&lt;/h2&gt;

&lt;p&gt;Speak your mind with the hash symbol. They go from the symbol to the end of the
line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# I am a comment. Hear me roar. Roar.
key = &amp;quot;value&amp;quot; # Yeah, you can do this.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;String&lt;/h2&gt;

&lt;p&gt;There are four ways to express strings: basic, multi-line basic, literal, and
multi-line literal. All strings must contain only valid UTF-8 characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic strings&lt;/strong&gt; are surrounded by quotation marks. Any Unicode character may
be used except those that must be escaped: quotation mark, backslash, and the
control characters (U+0000 to U+001F).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;&amp;quot;I&#39;m a string. \&amp;quot;You can quote me\&amp;quot;. Name\tJos\u00E9\nLocation\tSF.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For convenience, some popular characters have a compact escape sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\b         - backspace       (U+0008)
\t         - tab             (U+0009)
\n         - linefeed        (U+000A)
\f         - form feed       (U+000C)
\r         - carriage return (U+000D)
\&amp;quot;         - quote           (U+0022)
\\         - backslash       (U+005C)
\uXXXX     - unicode         (U+XXXX)
\UXXXXXXXX - unicode         (U+XXXXXXXX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any Unicode character may be escaped with the &lt;code&gt;\uXXXX&lt;/code&gt; or &lt;code&gt;\UXXXXXXXX&lt;/code&gt; forms.
The escape codes must be valid Unicode &lt;a href=&#34;http://unicode.org/glossary/#unicode_scalar_value&#34;&gt;scalar values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All other escape sequences not listed above are reserved and, if used, TOML
should produce an error.&lt;/p&gt;

&lt;p&gt;Sometimes you need to express passages of text (e.g. translation files) or would
like to break up a very long string into multiple lines. TOML makes this easy.
&lt;strong&gt;Multi-line basic strings&lt;/strong&gt; are surrounded by three quotation marks on each
side and allow newlines. A newline immediately following the opening delimiter
will be trimmed. All other whitespace and newline characters remain intact.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key1 = &amp;quot;&amp;quot;&amp;quot;
Roses are red
Violets are blue&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TOML parsers should feel free to normalize newline to whatever makes sense for
their platform.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# On a Unix system, the above multi-line string will most likely be the same as:
key2 = &amp;quot;Roses are red\nViolets are blue&amp;quot;

# On a Windows system, it will most likely be equivalent to:
key3 = &amp;quot;Roses are red\r\nViolets are blue&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For writing long strings without introducing extraneous whitespace, end a line
with a &lt;code&gt;\&lt;/code&gt;. The &lt;code&gt;\&lt;/code&gt; will be trimmed along with all whitespace (including
newlines) up to the next non-whitespace character or closing delimiter. If the
first characters after the opening delimiter are a backslash and a newline, then
they will both be trimmed along with all whitespace and newlines up to the next
non-whitespace character or closing delimiter. All of the escape sequences that
are valid for basic strings are also valid for multi-line basic strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# The following strings are byte-for-byte equivalent:
key1 = &amp;quot;The quick brown fox jumps over the lazy dog.&amp;quot;

key2 = &amp;quot;&amp;quot;&amp;quot;
The quick brown \


  fox jumps over \
    the lazy dog.&amp;quot;&amp;quot;&amp;quot;

key3 = &amp;quot;&amp;quot;&amp;quot;\
       The quick brown \
       fox jumps over \
       the lazy dog.\
       &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any Unicode character may be used except those that must be escaped: backslash
and the control characters (U+0000 to U+001F). Quotation marks need not be
escaped unless their presence would create a premature closing delimiter.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a frequent specifier of Windows paths or regular expressions, then
having to escape backslashes quickly becomes tedious and error prone. To help,
TOML supports literal strings where there is no escaping allowed at all.
&lt;strong&gt;Literal strings&lt;/strong&gt; are surrounded by single quotes. Like basic strings, they
must appear on a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# What you see is what you get.
winpath  = &#39;C:\Users\nodejs\templates&#39;
winpath2 = &#39;\\ServerX\admin$\system32\&#39;
quoted   = &#39;Tom &amp;quot;Dubs&amp;quot; Preston-Werner&#39;
regex    = &#39;&amp;lt;\i\c*\s*&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since there is no escaping, there is no way to write a single quote inside a
literal string enclosed by single quotes. Luckily, TOML supports a multi-line
version of literal strings that solves this problem. &lt;strong&gt;Multi-line literal
strings&lt;/strong&gt; are surrounded by three single quotes on each side and allow newlines.
Like literal strings, there is no escaping whatsoever. A newline immediately
following the opening delimiter will be trimmed. All other content between the
delimiters is interpreted as-is without modification.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;regex2 = &#39;&#39;&#39;I [dw]on&#39;t need \d{2} apples&#39;&#39;&#39;
lines  = &#39;&#39;&#39;
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For binary data it is recommended that you use Base64 or another suitable ASCII
or UTF-8 encoding. The handling of that encoding will be application specific.&lt;/p&gt;

&lt;h2 id=&#34;integer:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Integer&lt;/h2&gt;

&lt;p&gt;Integers are whole numbers. Positive numbers may be prefixed with a plus sign.
Negative numbers are prefixed with a minus sign.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;+99
42
0
-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For large numbers, you may use underscores to enhance readability. Each
underscore must be surrounded by at least one digit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1_000
5_349_221
1_2_3_4_5     # valid but inadvisable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leading zeros are not allowed. Hex, octal, and binary forms are not allowed.
Values such as &amp;ldquo;infinity&amp;rdquo; and &amp;ldquo;not a number&amp;rdquo; that cannot be expressed as a
series of digits are not allowed.&lt;/p&gt;

&lt;p&gt;64 bit (signed long) range expected (âˆ’9,223,372,036,854,775,808 to
9,223,372,036,854,775,807).&lt;/p&gt;

&lt;h2 id=&#34;float:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Float&lt;/h2&gt;

&lt;p&gt;A float consists of an integer part (which may be prefixed with a plus or minus
sign) followed by a fractional part and/or an exponent part. If both a
fractional part and exponent part are present, the fractional part must precede
the exponent part.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# fractional
+1.0
3.1415
-0.01

# exponent
5e+22
1e6
-2E-2

# both
6.626e-34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A fractional part is a decimal point followed by one or more digits.&lt;/p&gt;

&lt;p&gt;An exponent part is an E (upper or lower case) followed by an integer part
(which may be prefixed with a plus or minus sign).&lt;/p&gt;

&lt;p&gt;Similar to integers, you may use underscores to enhance readability. Each
underscore must be surrounded by at least one digit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;9_224_617.445_991_228_313
1e1_000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;64-bit (double) precision expected.&lt;/p&gt;

&lt;h2 id=&#34;boolean:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Boolean&lt;/h2&gt;

&lt;p&gt;Booleans are just the tokens you&amp;rsquo;re used to. Always lowercase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;datetime:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Datetime&lt;/h2&gt;

&lt;p&gt;Datetimes are &lt;a href=&#34;http://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1979-05-27T07:32:00Z
1979-05-27T00:32:00-07:00
1979-05-27T00:32:00.999999-07:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Array&lt;/h2&gt;

&lt;p&gt;Arrays are square brackets with other primitives inside. Whitespace is ignored.
Elements are separated by commas. Data types may not be mixed (though all string
types should be considered the same type).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[ 1, 2, 3 ]
[ &amp;quot;red&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;green&amp;quot; ]
[ [ 1, 2 ], [3, 4, 5] ]
[ &amp;quot;all&amp;quot;, &#39;strings&#39;, &amp;quot;&amp;quot;&amp;quot;are the same&amp;quot;&amp;quot;&amp;quot;, &#39;&#39;&#39;type&#39;&#39;&#39;] # this is ok
[ [ 1, 2 ], [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] ] # this is ok
[ 1, 2.0 ] # note: this is NOT ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays can also be multiline. So in addition to ignoring whitespace, arrays also
ignore newlines between the brackets. Terminating commas are ok before the
closing bracket.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key = [
  1, 2, 3
]

key = [
  1,
  2, # this is ok
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;table:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Table&lt;/h2&gt;

&lt;p&gt;Tables (also known as hash tables or dictionaries) are collections of key/value
pairs. They appear in square brackets on a line by themselves. You can tell them
apart from arrays because arrays are only ever values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[table]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under that, and until the next table or EOF are the key/values of that table.
Keys are on the left of the equals sign and values are on the right. Whitespace
is ignored around key names and values. The key, equals sign, and value must
be on the same line (though some values can be broken over multiple lines).&lt;/p&gt;

&lt;p&gt;Keys may be either bare or quoted. &lt;strong&gt;Bare keys&lt;/strong&gt; may only contain letters,
numbers, underscores, and dashes (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;). &lt;strong&gt;Quoted keys&lt;/strong&gt; follow the
exact same rules as basic strings and allow you to use a much broader set of key
names. Best practice is to use bare keys except when absolutely necessary.&lt;/p&gt;

&lt;p&gt;Key/value pairs within tables are not guaranteed to be in any specific order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[table]
key = &amp;quot;value&amp;quot;
bare_key = &amp;quot;value&amp;quot;
bare-key = &amp;quot;value&amp;quot;

&amp;quot;127.0.0.1&amp;quot; = &amp;quot;value&amp;quot;
&amp;quot;character encoding&amp;quot; = &amp;quot;value&amp;quot;
&amp;quot;ÊŽÇÊž&amp;quot; = &amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dots are prohibited in bare keys because dots are used to signify nested tables!
Naming rules for each dot separated part are the same as for keys (see above).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dog.&amp;quot;tater.man&amp;quot;]
type = &amp;quot;pug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JSON land, that would give you the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;dog&amp;quot;: { &amp;quot;tater.man&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;pug&amp;quot; } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whitespace around dot-separated parts is ignored, however, best practice is to
not use any extraneous whitespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[a.b.c]          # this is best practice
[ d.e.f ]        # same as [d.e.f]
[ g .  h  . i ]  # same as [g.h.i]
[ j . &amp;quot;Êž&amp;quot; . l ]  # same as [j.&amp;quot;Êž&amp;quot;.l]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need to specify all the super-tables if you don&amp;rsquo;t want to. TOML knows
how to do it for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# [x] you
# [x.y] don&#39;t
# [x.y.z] need these
[x.y.z.w] # for this to work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empty tables are allowed and simply have no key/value pairs within them.&lt;/p&gt;

&lt;p&gt;As long as a super-table hasn&amp;rsquo;t been directly defined and hasn&amp;rsquo;t defined a
specific key, you may still write to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[a.b]
c = 1

[a]
d = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You cannot define any key or table more than once. Doing so is invalid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# DO NOT DO THIS

[a]
b = 1

[a]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# DO NOT DO THIS EITHER

[a]
b = 1

[a.b]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All table names and keys must be non-empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# NOT VALID TOML
[]
[a.]
[a..b]
[.b]
[.]
 = &amp;quot;no key name&amp;quot; # not allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inline-table:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Inline Table&lt;/h2&gt;

&lt;p&gt;Inline tables provide a more compact syntax for expressing tables. They are
especially useful for grouped data that can otherwise quickly become verbose.
Inline tables are enclosed in curly braces &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. Within the braces, zero
or more comma separated key/value pairs may appear. Key/value pairs take the
same form as key/value pairs in standard tables. All value types are allowed,
including inline tables.&lt;/p&gt;

&lt;p&gt;Inline tables are intended to appear on a single line. No newlines are allowed
between the curly braces unless they are valid within a value. Even so, it is
strongly discouraged to break an inline table onto multiples lines. If you find
yourself gripped with this desire, it means you should be using standard tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;name = { first = &amp;quot;Tom&amp;quot;, last = &amp;quot;Preston-Werner&amp;quot; }
point = { x = 1, y = 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The inline tables above are identical to the following standard table
definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[name]
first = &amp;quot;Tom&amp;quot;
last = &amp;quot;Preston-Werner&amp;quot;

[point]
x = 1
y = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array-of-tables:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Array of Tables&lt;/h2&gt;

&lt;p&gt;The last type that has not yet been expressed is an array of tables. These can
be expressed by using a table name in double brackets. Each table with the same
double bracketed name will be an element in the array. The tables are inserted
in the order encountered. A double bracketed table without any key/value pairs
will be considered an empty table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[products]]
name = &amp;quot;Hammer&amp;quot;
sku = 738594937

[[products]]

[[products]]
name = &amp;quot;Nail&amp;quot;
sku = 284758393
color = &amp;quot;gray&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JSON land, that would give you the following structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;products&amp;quot;: [
    { &amp;quot;name&amp;quot;: &amp;quot;Hammer&amp;quot;, &amp;quot;sku&amp;quot;: 738594937 },
    { },
    { &amp;quot;name&amp;quot;: &amp;quot;Nail&amp;quot;, &amp;quot;sku&amp;quot;: 284758393, &amp;quot;color&amp;quot;: &amp;quot;gray&amp;quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create nested arrays of tables as well. Just use the same double bracket
syntax on sub-tables. Each double-bracketed sub-table will belong to the most
recently defined table element above it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [fruit.physical]
    color = &amp;quot;red&amp;quot;
    shape = &amp;quot;round&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;granny smith&amp;quot;

[[fruit]]
  name = &amp;quot;banana&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;plantain&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above TOML maps to the following JSON.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;fruit&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;apple&amp;quot;,
      &amp;quot;physical&amp;quot;: {
        &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
        &amp;quot;shape&amp;quot;: &amp;quot;round&amp;quot;
      },
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;red delicious&amp;quot; },
        { &amp;quot;name&amp;quot;: &amp;quot;granny smith&amp;quot; }
      ]
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;banana&amp;quot;,
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;plantain&amp;quot; }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attempting to define a normal table with the same name as an already established
array must produce an error at parse time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# INVALID TOML DOC
[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  # This table conflicts with the previous table
  [fruit.variety]
    name = &amp;quot;granny smith&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also use inline tables where appropriate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;points = [ { x = 1, y = 2, z = 3 },
           { x = 7, y = 8, z = 9 },
           { x = 2, y = 4, z = 8 } ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;seriously:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Seriously?&lt;/h2&gt;

&lt;p&gt;Yep.&lt;/p&gt;

&lt;h2 id=&#34;but-why:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;But why?&lt;/h2&gt;

&lt;p&gt;Because we need a decent human-readable format that unambiguously maps to a hash
table and the YAML spec is like 80 pages long and gives me rage. No, JSON
doesn&amp;rsquo;t count. You know why.&lt;/p&gt;

&lt;h2 id=&#34;oh-god-you-re-right:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Oh god, you&amp;rsquo;re right&lt;/h2&gt;

&lt;p&gt;Yuuuup. Wanna help? Send a pull request. Or write a parser. BE BRAVE.&lt;/p&gt;

&lt;h2 id=&#34;projects-using-toml:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Projects using TOML&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.crates.io/&#34;&gt;Cargo&lt;/a&gt; - The Rust language&amp;rsquo;s package manager.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt; - Distributed time series database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hekad.readthedocs.org&#34;&gt;Heka&lt;/a&gt; - Stream processing system by Mozilla.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; - Static site generator in Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implementations:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;If you have an implementation, send a pull request adding to this list. Please
note the commit SHA1 or version tag that your parser supports in your Readme.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/LBreedlove/Toml.net&#34;&gt;https://github.com/LBreedlove/Toml.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/rossipedia/toml-net&#34;&gt;https://github.com/rossipedia/toml-net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/RichardVasquez/TomlDotNet&#34;&gt;https://github.com/RichardVasquez/TomlDotNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/azyobuzin/HyperTomlProcessor&#34;&gt;https://github.com/azyobuzin/HyperTomlProcessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C (@ajwans) - &lt;a href=&#34;https://github.com/ajwans/libtoml&#34;&gt;https://github.com/ajwans/libtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C (@mzgoddard) - &lt;a href=&#34;https://github.com/mzgoddard/tomlc&#34;&gt;https://github.com/mzgoddard/tomlc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@evilncrazy) - &lt;a href=&#34;https://github.com/evilncrazy/ctoml&#34;&gt;https://github.com/evilncrazy/ctoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@skystrife) - &lt;a href=&#34;https://github.com/skystrife/cpptoml&#34;&gt;https://github.com/skystrife/cpptoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@mayah) - &lt;a href=&#34;https://github.com/mayah/tinytoml&#34;&gt;https://github.com/mayah/tinytoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure (@lantiga) - &lt;a href=&#34;https://github.com/lantiga/clj-toml&#34;&gt;https://github.com/lantiga/clj-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure (@manicolosi) - &lt;a href=&#34;https://github.com/manicolosi/clojoml&#34;&gt;https://github.com/manicolosi/clojoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CoffeeScript (@biilmann) - &lt;a href=&#34;https://github.com/biilmann/coffee-toml&#34;&gt;https://github.com/biilmann/coffee-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Common Lisp (@pnathan) - &lt;a href=&#34;https://github.com/pnathan/pp-toml&#34;&gt;https://github.com/pnathan/pp-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;D - &lt;a href=&#34;https://github.com/iccodegr/toml.d&#34;&gt;https://github.com/iccodegr/toml.d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart (@just95) - &lt;a href=&#34;https://github.com/just95/toml.dart&#34;&gt;https://github.com/just95/toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang - &lt;a href=&#34;https://github.com/kalta/etoml.git&#34;&gt;https://github.com/kalta/etoml.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang - &lt;a href=&#34;https://github.com/kaos/tomle&#34;&gt;https://github.com/kaos/tomle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs Lisp (@gongoZ) - &lt;a href=&#34;https://github.com/gongo/emacs-toml&#34;&gt;https://github.com/gongo/emacs-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@thompelletier) - &lt;a href=&#34;https://github.com/pelletier/go-toml&#34;&gt;https://github.com/pelletier/go-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@laurent22) - &lt;a href=&#34;https://github.com/laurent22/toml-go&#34;&gt;https://github.com/laurent22/toml-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go w/ Reflection (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@achun) - &lt;a href=&#34;https://github.com/achun/tom-toml&#34;&gt;https://github.com/achun/tom-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@naoina) - &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;https://github.com/naoina/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell (@seliopou) - &lt;a href=&#34;https://github.com/seliopou/toml&#34;&gt;https://github.com/seliopou/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haxe (@raincole) - &lt;a href=&#34;https://github.com/raincole/haxetoml&#34;&gt;https://github.com/raincole/haxetoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@agrison) - &lt;a href=&#34;https://github.com/agrison/jtoml&#34;&gt;https://github.com/agrison/jtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@johnlcox) - &lt;a href=&#34;https://github.com/johnlcox/toml4j&#34;&gt;https://github.com/johnlcox/toml4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@mwanji) - &lt;a href=&#34;https://github.com/mwanji/toml4j&#34;&gt;https://github.com/mwanji/toml4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java - &lt;a href=&#34;https://github.com/asafh/jtoml&#34;&gt;https://github.com/asafh/jtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java w/ ANTLR (@MatthiasSchuetz) - &lt;a href=&#34;https://github.com/mschuetz/toml&#34;&gt;https://github.com/mschuetz/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Julia (@pygy) - &lt;a href=&#34;https://github.com/pygy/TOML.jl&#34;&gt;https://github.com/pygy/TOML.jl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Literate CoffeeScript (@JonathanAbrams) - &lt;a href=&#34;https://github.com/JonAbrams/tomljs&#34;&gt;https://github.com/JonAbrams/tomljs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nim (@ziotom78) - &lt;a href=&#34;https://github.com/ziotom78/parsetoml&#34;&gt;https://github.com/ziotom78/parsetoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;node.js/browser - &lt;a href=&#34;https://github.com/ricardobeat/toml.js&#34;&gt;https://github.com/ricardobeat/toml.js&lt;/a&gt; (npm install tomljs)&lt;/li&gt;
&lt;li&gt;node.js - &lt;a href=&#34;https://github.com/BinaryMuse/toml-node&#34;&gt;https://github.com/BinaryMuse/toml-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;node.js/browser (@redhotvengeance) - &lt;a href=&#34;https://github.com/redhotvengeance/topl&#34;&gt;https://github.com/redhotvengeance/topl&lt;/a&gt; (topl npm package)&lt;/li&gt;
&lt;li&gt;node.js/browser (@alexanderbeletsky) - &lt;a href=&#34;https://github.com/alexanderbeletsky/toml-js&#34;&gt;https://github.com/alexanderbeletsky/toml-js&lt;/a&gt; (npm browser amd)&lt;/li&gt;
&lt;li&gt;Objective C (@mneorr) - &lt;a href=&#34;https://github.com/mneorr/toml-objc.git&#34;&gt;https://github.com/mneorr/toml-objc.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Objective-C (@SteveStreza) - &lt;a href=&#34;https://github.com/amazingsyco/TOML&#34;&gt;https://github.com/amazingsyco/TOML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OCaml (@mackwic) &lt;a href=&#34;https://github.com/mackwic/to.ml&#34;&gt;https://github.com/mackwic/to.ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl (@alexkalderimis) - &lt;a href=&#34;https://github.com/alexkalderimis/config-toml.pl&#34;&gt;https://github.com/alexkalderimis/config-toml.pl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl - &lt;a href=&#34;https://github.com/dlc/toml&#34;&gt;https://github.com/dlc/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@leonelquinteros) - &lt;a href=&#34;https://github.com/leonelquinteros/php-toml.git&#34;&gt;https://github.com/leonelquinteros/php-toml.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@jimbomoss) - &lt;a href=&#34;https://github.com/jamesmoss/toml&#34;&gt;https://github.com/jamesmoss/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@coop182) - &lt;a href=&#34;https://github.com/coop182/toml-php&#34;&gt;https://github.com/coop182/toml-php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@checkdomain) - &lt;a href=&#34;https://github.com/checkdomain/toml&#34;&gt;https://github.com/checkdomain/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@zidizei) - &lt;a href=&#34;https://github.com/zidizei/toml-php&#34;&gt;https://github.com/zidizei/toml-php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@yosymfony) - &lt;a href=&#34;https://github.com/yosymfony/toml&#34;&gt;https://github.com/yosymfony/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@f03lipe) - &lt;a href=&#34;https://github.com/f03lipe/toml-python&#34;&gt;https://github.com/f03lipe/toml-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@uiri) - &lt;a href=&#34;https://github.com/uiri/toml&#34;&gt;https://github.com/uiri/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python - &lt;a href=&#34;https://github.com/bryant/pytoml&#34;&gt;https://github.com/bryant/pytoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@elssar) - &lt;a href=&#34;https://github.com/elssar/tomlgun&#34;&gt;https://github.com/elssar/tomlgun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@marksteve) - &lt;a href=&#34;https://github.com/marksteve/toml-ply&#34;&gt;https://github.com/marksteve/toml-ply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@hit9) - &lt;a href=&#34;https://github.com/hit9/toml.py&#34;&gt;https://github.com/hit9/toml.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Racket (@greghendershott) - &lt;a href=&#34;https://github.com/greghendershott/toml&#34;&gt;https://github.com/greghendershott/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby (@jm) - &lt;a href=&#34;https://github.com/jm/toml&#34;&gt;https://github.com/jm/toml&lt;/a&gt; (toml gem)&lt;/li&gt;
&lt;li&gt;Ruby (@eMancu) - &lt;a href=&#34;https://github.com/eMancu/toml-rb&#34;&gt;https://github.com/eMancu/toml-rb&lt;/a&gt; (toml-rb gem)&lt;/li&gt;
&lt;li&gt;Ruby (@charliesome) - &lt;a href=&#34;https://github.com/charliesome/toml2&#34;&gt;https://github.com/charliesome/toml2&lt;/a&gt; (toml2 gem)&lt;/li&gt;
&lt;li&gt;Ruby (@sandeepravi) - &lt;a href=&#34;https://github.com/sandeepravi/tomlp&#34;&gt;https://github.com/sandeepravi/tomlp&lt;/a&gt; (tomlp gem)&lt;/li&gt;
&lt;li&gt;Rust (@mneumann) - &lt;a href=&#34;https://github.com/mneumann/rust-toml&#34;&gt;https://github.com/mneumann/rust-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust (@alexcrichton) - &lt;a href=&#34;https://github.com/alexcrichton/toml-rs&#34;&gt;https://github.com/alexcrichton/toml-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scala - &lt;a href=&#34;https://github.com/axelarge/tomelette&#34;&gt;https://github.com/axelarge/tomelette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;validators:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Validators&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml/tree/master/cmd/tomlv&#34;&gt;https://github.com/BurntSushi/toml/tree/master/cmd/tomlv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-agnostic-test-suite-for-toml-decoders-and-encoders:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Language agnostic test suite for TOML decoders and encoders&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;toml-test (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml-test&#34;&gt;https://github.com/BurntSushi/toml-test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;editor-support:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Editor support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atom - &lt;a href=&#34;https://github.com/atom/language-toml&#34;&gt;https://github.com/atom/language-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs (@dryman) - &lt;a href=&#34;https://github.com/dryman/toml-mode.el&#34;&gt;https://github.com/dryman/toml-mode.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Notepad++ (@fireforge) - &lt;a href=&#34;https://github.com/fireforge/toml-notepadplusplus&#34;&gt;https://github.com/fireforge/toml-notepadplusplus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sublime Text 2 &amp;amp; 3 (@Gakai) - &lt;a href=&#34;https://github.com/Gakai/sublime_toml_highlighting&#34;&gt;https://github.com/Gakai/sublime_toml_highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Synwrite - &lt;a href=&#34;http://uvviewsoft.com/synwrite/download.html&#34;&gt;http://uvviewsoft.com/synwrite/download.html&lt;/a&gt; ; call Options/ Addons manager/ Install&lt;/li&gt;
&lt;li&gt;TextMate (@infininight) - &lt;a href=&#34;https://github.com/textmate/toml.tmbundle&#34;&gt;https://github.com/textmate/toml.tmbundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim (@cespare) - &lt;a href=&#34;https://github.com/cespare/vim-toml&#34;&gt;https://github.com/cespare/vim-toml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;encoder:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Encoder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dart (@just95) - &lt;a href=&#34;https://github.com/just95/toml.dart&#34;&gt;https://github.com/just95/toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go w/ Reflection (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@ayushchd) - &lt;a href=&#34;https://github.com/ayushchd/php-toml-encoder&#34;&gt;https://github.com/ayushchd/php-toml-encoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;converters:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Converters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;remarshal (@dbohdan) - &lt;a href=&#34;https://github.com/dbohdan/remarshal&#34;&gt;https://github.com/dbohdan/remarshal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yaml2toml (@jtyr) - &lt;a href=&#34;https://github.com/jtyr/yaml2toml-converter&#34;&gt;https://github.com/jtyr/yaml2toml-converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yaml2toml.dart (@just95) - &lt;a href=&#34;https://github.com/just95/yaml2toml.dart&#34;&gt;https://github.com/just95/yaml2toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;organization:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Organization&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;toml-lang (@BurntSushi) - &lt;a href=&#34;https://github.com/toml-lang&#34;&gt;https://github.com/toml-lang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016年的第一天</title>
      <link>http://alimy.me/post/day_201601010000/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/day_201601010000/</guid>
      <description>&lt;p&gt;2016年，很好。
&lt;img src=&#34;http://alimy.me/images/post/20160101121200.webp&#34; alt=&#34;请使用支持Webp的浏览器(最新版Chrome/FireFox)查看&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年的最后一天</title>
      <link>http://alimy.me/post/day_201512312359/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/day_201512312359/</guid>
      <description>

&lt;p&gt;今天是2015年的最后一天，天气晴，我决定去 &lt;em&gt;逛一逛&lt;/em&gt; 。&lt;/p&gt;

&lt;h3 id=&#34;途经:22576a18f5aa298b2614bdd5a9867184&#34;&gt;途经&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;北高峰&lt;/li&gt;
&lt;li&gt;西湖&lt;/li&gt;
&lt;li&gt;太子湾&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
