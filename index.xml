<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>北 野 on 北 野 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/</link>
    
    
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <updated>Sun, 05 Jan 2020 00:47:00 CST</updated>
    
    <item>
      <title>简单使用docker部署Tars</title>
      <link>http://alimy.me/post/dev_202001050047/</link>
      <pubDate>Sun, 05 Jan 2020 00:47:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_202001050047/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/TarsCloud/Tars&#34;&gt;Tars&lt;/a&gt;是腾讯从2008年到今天一直在使用的后台逻辑层的统一应用框架TAF（Total Application Framework），目前支持C++,Java,PHP,Nodejs,Go语言。该框架为用户提供了涉及到开发、运维、以及测试的一整套解决方案，帮助一个产品或者服务快速开发、部署、测试、上线。 它集可扩展协议编解码、高性能RPC通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体，通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理，非参Nice。本文简单介绍通过docker部署一套用于开发测试的Tars尝尝滋味。&lt;/p&gt;

&lt;h4 id=&#34;配置清单&#34;&gt;配置清单&lt;/h4&gt;

&lt;p&gt;单节点部署Tars：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作系统: CentOS 7&lt;/li&gt;
&lt;li&gt;MySQL: 5.7&lt;/li&gt;
&lt;li&gt;Tars: v1.0.1 (bitbus/tars:latest)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;docker安装&#34;&gt;Docker安装&lt;/h4&gt;

&lt;p&gt;安装CentOS官方版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo yum install -y docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者 安装Docker官方版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo su
% yum install -y yum-utils device-mapper-persistent-data lvm2
% yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
% yum install -y docker-ce 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动Docker服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo systemctl enable docker
% sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker启动mysql-5-7&#34;&gt;Docker启动MySQL 5.7&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;% mkdir mysql-data
% sudo docker pull mysql:5.7
% sudo docker run -d --restart always --name tars-mysql \
            --net=host \
            -e MYSQL_ROOT_PASSWORD=&#39;root@appinside&#39; \
            -v ${PWD}/mysql-data:/var/lib/mysql  \
            -v /etc/localtime:/etc/localtime:ro \
            mysql:5.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里&lt;code&gt;--net=host&lt;/code&gt;让docker使用本地网络。&lt;/p&gt;

&lt;h4 id=&#34;docker启动tars-master&#34;&gt;Docker启动Tars master&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;% sudo docker pull bitbus/tars:latest
% sudo docker run -d --restart always --name tars-master \
        --net=host \
        -e INET=eth0 \
        -e REBUILD=false \
        -e SLAVE=false \
        -e MYSQL_HOST=172.21.0.6 \
        -e MYSQL_ROOT_PASSWORD=root@appinside \
        -v /etc/localtime:/etc/localtime:ro \
        bitbus/tars:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--net=host&lt;/code&gt; 让docker使用本地网络&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e INET=etho&lt;/code&gt; 本地网卡接口名,这里替换成对应系统环境的接口名字，比如这里就是eth0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_HOST=172.21.0.6&lt;/code&gt; 对应上面网卡接口(eth0)网络地址&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;效果展示&#34;&gt;效果展示&lt;/h4&gt;

&lt;p&gt;在浏览器访问&lt;a href=&#34;http://172.21.0.6:3000&#34;&gt;http://172.21.0.6:3000&lt;/a&gt; 或 &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; 如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20200105004700.png&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20200105004700.png&#34; alt=&#34;图片加载中...&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;结语&#34;&gt;结语&lt;/h4&gt;

&lt;p&gt;Tars非常非常Nice，是一个非常完备的多语言支持RPC框架，自带一整套运维。目前相关可以搜到的使用文档非常少，本人是一个go开发，边看TarsGo源码边做开发然后熟悉Tars的细节，虽然有点累但很coding.后续再写文章描述Tars应用的开发流程与细节。Happy enjoy your heart from coding。&lt;/p&gt;

&lt;h4 id=&#34;参考文档&#34;&gt;参考文档&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TarsCloud/TarsDocker&#34;&gt;TarsDocker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffers Messages Encoding</title>
      <link>http://alimy.me/post/dev_201909211645/</link>
      <pubDate>Sat, 21 Sep 2019 16:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211645/</guid>
      <description>&lt;p&gt;This document describes the binary wire format for protocol buffer messages. You don&amp;rsquo;t need to understand this to use protocol buffers in your applications, but it can be very useful to know how different protocol buffer formats affect the size of your encoded messages.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-message&#34;&gt;A Simple Message&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you have the following very simple message definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Test1 {
  optional int32 a = 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In an application, you create a &lt;code&gt;Test1&lt;/code&gt; message and set &lt;code&gt;a&lt;/code&gt; to 150. You then serialize the message to an output stream. If you were able to examine the encoded message, you&amp;rsquo;d see three bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;08 96 01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so small and numeric – but what does it mean? Read on&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;base-128-varints&#34;&gt;Base 128 Varints&lt;/h3&gt;

&lt;p&gt;To understand your simple protocol buffer encoding, you first need to understand varints. Varints are a method of serializing integers using one or more bytes. Smaller numbers take a smaller number of bytes.&lt;/p&gt;

&lt;p&gt;Each byte in a varint, except the last byte, has the most significant bit (msb) set – this indicates that there are further bytes to come. The lower 7 bits of each byte are used to store the two&amp;rsquo;s complement representation of the number in groups of 7 bits, &lt;strong&gt;least significant group first&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, for example, here is the number 1 – it&amp;rsquo;s a single byte, so the msb is not set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0000 0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is 300 – this is a bit more complicated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1010 1100 0000 0010
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do you figure out that this is 300? First you drop the msb from each byte, as this is just there to tell us whether we&amp;rsquo;ve reached the end of the number (as you can see, it&amp;rsquo;s set in the first byte as there is more than one byte in the varint):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1010 1100 0000 0010
→ 010 1100  000 0010
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You reverse the two groups of 7 bits because, as you remember, varints store numbers with the least significant group first. Then you concatenate them to get your final value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000 0010  010 1100
→  000 0010 ++ 010 1100
→  100101100
→  256 + 32 + 8 + 4 = 300
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;message-structure&#34;&gt;Message Structure&lt;/h3&gt;

&lt;p&gt;As you know, a protocol buffer message is a series of key-value pairs. The binary version of a message just uses the field&amp;rsquo;s number as the key – the name and declared type for each field can only be determined on the decoding end by referencing the message type&amp;rsquo;s definition (i.e. the .proto file).&lt;/p&gt;

&lt;p&gt;When a message is encoded, the keys and values are concatenated into a byte stream. When the message is being decoded, the parser needs to be able to skip fields that it doesn&amp;rsquo;t recognize. This way, new fields can be added to a message without breaking old programs that do not know about them. To this end, the &amp;ldquo;key&amp;rdquo; for each pair in a wire-format message is actually two values – the field number from your .proto file, plus a wire type that provides just enough information to find the length of the following value. In most language implementations this key is referred to as a tag.&lt;/p&gt;

&lt;p&gt;The available wire types are as follows:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Used For&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Varint&lt;/td&gt;
&lt;td&gt;int32, int64, uint32, uint64, sint32, sint64, bool, enum&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;64-bit&lt;/td&gt;
&lt;td&gt;fixed64, sfixed64, double&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Length-delimited&lt;/td&gt;
&lt;td&gt;string, bytes, embedded messages, packed repeated fields&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Start group&lt;/td&gt;
&lt;td&gt;groups (deprecated)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;End group&lt;/td&gt;
&lt;td&gt;groups (deprecated)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;32-bit&lt;/td&gt;
&lt;td&gt;fixed32, sfixed32, float&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each key in the streamed message is a varint with the value &lt;code&gt;(field_number &amp;lt;&amp;lt; 3) | wire_type&lt;/code&gt; – in other words, the last three bits of the number store the wire type.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at our simple example again. You now know that the first number in the stream is always a varint key, and here it&amp;rsquo;s 08, or (dropping the msb):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You take the last three bits to get the wire type (0) and then right-shift by three to get the field number (1). So you now know that the field number is 1 and the following value is a varint. Using your varint-decoding knowledge from the previous section, you can see that the next two bytes store the value 150.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;96 01 = 1001 0110  0000 0001
       → 000 0001  ++  001 0110 (drop the msb and reverse the groups of 7 bits)
       → 10010110
       → 128 + 16 + 4 + 2 = 150
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-value-types&#34;&gt;More Value Types&lt;/h3&gt;

&lt;h4 id=&#34;signed-integers&#34;&gt;Signed Integers&lt;/h4&gt;

&lt;p&gt;As you saw in the previous section, all the protocol buffer types associated with wire type 0 are encoded as varints. However, there is an important difference between the signed int types (sint32 and sint64) and the &amp;ldquo;standard&amp;rdquo; int types (int32 and int64) when it comes to encoding negative numbers. If you use int32 or int64 as the type for a negative number, the resulting varint is always ten bytes long – it is, effectively, treated like a very large unsigned integer. If you use one of the signed types, the resulting varint uses ZigZag encoding, which is much more efficient.&lt;/p&gt;

&lt;p&gt;ZigZag encoding maps signed integers to unsigned integers so that numbers with a small absolute value (for instance, -1) have a small varint encoded value too. It does this in a way that &amp;ldquo;zig-zags&amp;rdquo; back and forth through the positive and negative integers, so that -1 is encoded as 1, 1 is encoded as 2, -2 is encoded as 3, and so on, as you can see in the following table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Signed Original&lt;/th&gt;
&lt;th&gt;Encoded As&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2147483647&lt;/td&gt;
&lt;td&gt;4294967294&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-2147483648&lt;/td&gt;
&lt;td&gt;4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In other words, each value &lt;code&gt;n&lt;/code&gt; is encoded using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(n &amp;lt;&amp;lt; 1) ^ (n &amp;gt;&amp;gt; 31)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for &lt;code&gt;sint32s&lt;/code&gt;, or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(n &amp;lt;&amp;lt; 1) ^ (n &amp;gt;&amp;gt; 63)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for the 64-bit version.&lt;/p&gt;

&lt;p&gt;Note that the second shift – the &lt;code&gt;(n &amp;gt;&amp;gt; 31)&lt;/code&gt; part – is an arithmetic shift. So, in other words, the result of the shift is either a number that is all zero bits (if &lt;code&gt;n&lt;/code&gt; is positive) or all one bits (if &lt;code&gt;n&lt;/code&gt; is negative).&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;sint32&lt;/code&gt; or &lt;code&gt;sint64&lt;/code&gt; is parsed, its value is decoded back to the original, signed version.&lt;/p&gt;

&lt;h3 id=&#34;non-varint-numbers&#34;&gt;Non-varint Numbers&lt;/h3&gt;

&lt;p&gt;Non-varint numeric types are simple – double and fixed64 have wire type 1, which tells the parser to expect a fixed 64-bit lump of data; similarly float and fixed32 have wire type 5, which tells it to expect 32 bits. In both cases the values are stored in little-endian byte order.&lt;/p&gt;

&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;

&lt;p&gt;A wire type of 2 (length-delimited) means that the value is a varint encoded length followed by the specified number of bytes of data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Test2 {
  optional string b = 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the value of b to &amp;ldquo;testing&amp;rdquo; gives you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12 07 74 65 73 74 69 6e 67
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The red bytes are the UTF8 of &amp;ldquo;testing&amp;rdquo;. The key here is 0x12 → field number = 2, type = 2. The length varint in the value is 7 and lo and behold, we find seven bytes following it – our string.&lt;/p&gt;

&lt;h3 id=&#34;embedded-messages&#34;&gt;Embedded Messages&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a message definition with an embedded message of our example type, Test1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Test3 {
  optional Test1 c = 3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s the encoded version, again with the Test1&amp;rsquo;s a field set to 150:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1a 03 08 96 01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the last three bytes are exactly the same as our first example (08 96 01), and they&amp;rsquo;re preceded by the number 3 – embedded messages are treated in exactly the same way as strings (wire type = 2).&lt;/p&gt;

&lt;h3 id=&#34;optional-and-repeated-elements&#34;&gt;Optional And Repeated Elements&lt;/h3&gt;

&lt;p&gt;If a proto2 message definition has repeated elements (without the [packed=true] option), the encoded message has zero or more key-value pairs with the same field number. These repeated values do not have to appear consecutively; they may be interleaved with other fields. The order of the elements with respect to each other is preserved when parsing, though the ordering with respect to other fields is lost. In proto3, repeated fields use &lt;strong&gt;packed encoding&lt;/strong&gt;, which you can read about below.&lt;/p&gt;

&lt;p&gt;For any non-repeated fields in proto3, or optional fields in proto2, the encoded message may or may not have a key-value pair with that field number.&lt;/p&gt;

&lt;p&gt;Normally, an encoded message would never have more than one instance of a non-repeated field. However, parsers are expected to handle the case in which they do. For numeric types and strings, if the same field appears multiple times, the parser accepts the last value it sees. For embedded message fields, the parser merges multiple instances of the same field, as if with the Message::MergeFrom method – that is, all singular scalar fields in the latter instance replace those in the former, singular embedded messages are merged, and repeated fields are concatenated. The effect of these rules is that parsing the concatenation of two encoded messages produces exactly the same result as if you had parsed the two messages separately and merged the resulting objects. That is, this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MyMessage message;
message.ParseFromString(str1 + str2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MyMessage message, message2;
message.ParseFromString(str1);
message2.ParseFromString(str2);
message.MergeFrom(message2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This property is occasionally useful, as it allows you to merge two messages even if you do not know their types.&lt;/p&gt;

&lt;h3 id=&#34;packed-repeated-fields&#34;&gt;Packed Repeated Fields&lt;/h3&gt;

&lt;p&gt;Version 2.1.0 introduced packed repeated fields, which in proto2 are declared like repeated fields but with the special &lt;code&gt;[packed=true]&lt;/code&gt; option. In proto3, repeated fields of scalar numeric types are packed by default. These function like repeated fields, but are encoded differently. A packed repeated field containing zero elements does not appear in the encoded message. Otherwise, all of the elements of the field are packed into a single key-value pair with wire type 2 (length-delimited). Each element is encoded the same way it would be normally, except without a key preceding it.&lt;/p&gt;

&lt;p&gt;For example, imagine you have the message type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Test4 {
  repeated int32 d = 4 [packed=true];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s say you construct a Test4, providing the values 3, 270, and 86942 for the repeated field d. Then, the encoded form would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;22        // key (field number 4, wire type 2)
06        // payload size (6 bytes)
03        // first element (varint 3)
8E 02     // second element (varint 270)
9E A7 05  // third element (varint 86942)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared &amp;ldquo;packed&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Note that although there&amp;rsquo;s usually no reason to encode more than one key-value pair for a packed repeated field, encoders must be prepared to accept multiple key-value pairs. In this case, the payloads should be concatenated. Each pair must contain a whole number of elements.&lt;/p&gt;

&lt;p&gt;Protocol buffer parsers must be able to parse repeated fields that were compiled as &lt;code&gt;packed&lt;/code&gt; as if they were not packed, and vice versa. This permits adding &lt;code&gt;[packed=true]&lt;/code&gt; to existing fields in a forward- and backward-compatible way.&lt;/p&gt;

&lt;h3 id=&#34;field-order&#34;&gt;Field Order&lt;/h3&gt;

&lt;p&gt;Field numbers may be used in any order in a &lt;code&gt;.proto&lt;/code&gt; file. The order chosen has no effect on how the messages are serialized.&lt;/p&gt;

&lt;p&gt;When a message is serialized, there is no guaranteed order for how its known or &lt;strong&gt;unknown fields&lt;/strong&gt; should be written. Serialization order is an implementation detail and the details of any particular implementation may change in the future. Therefore, protocol buffer parsers must be able to parse fields in any order.&lt;/p&gt;

&lt;h3 id=&#34;implications&#34;&gt;Implications&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do not assume the byte output of a serialized message is stable. This is especially true for messages with transitive bytes fields representing other serialized protocol buffer messages.&lt;/li&gt;
&lt;li&gt;By default, repeated invocations of serialization methods on the same protocol buffer message instance may not return the same byte output; i.e. the default serialization is not deterministic.

&lt;ul&gt;
&lt;li&gt;Deterministic serialization only guarantees the same byte output for a particular binary. The byte output may change across different versions of the binary.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following checks may fail for a protocol buffer message instance foo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo.SerializeAsString() == foo.SerializeAsString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hash(foo.SerializeAsString()) == Hash(foo.SerializeAsString())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CRC(foo.SerializeAsString()) == CRC(foo.SerializeAsString())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FingerPrint(foo.SerializeAsString()) == FingerPrint(foo.SerializeAsString())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Here&amp;rsquo;re a few example scenarios where logically equivalent protocol buffer messages foo and bar may serialize to different byte outputs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is serialized by an old server that treats some fields as unknown.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is serialized by a server that is implemented in a different programming language and serializes fields in different order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; has a field that serializes in non-deterministic manner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; has a field that stores a serialized byte output of a protocol buffer message which is serialized differently.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is serialized by a new server that serializes fields in different order due to an implementation change.&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;foo&lt;/code&gt; and bar are concatenation of individual messages but with different order.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/encoding&#34; title=&#34;protocol-buffers encoding&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cap&#39;n Proto Encoding Spec</title>
      <link>http://alimy.me/post/dev_201909211630/</link>
      <pubDate>Sat, 21 Sep 2019 16:30:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211630/</guid>
      <description>&lt;h3 id=&#34;sect-organization&#34;&gt;&amp;sect;Organization&lt;/h3&gt;

&lt;h4 id=&#34;64-bit-words&#34;&gt;64-bit Words&lt;/h4&gt;

&lt;p&gt;For the purpose of Cap’n Proto, a “word” is defined as 8 bytes, or 64 bits. Since alignment of data is important, all objects (structs, lists, and blobs) are aligned to word boundaries, and sizes are usually expressed in terms of words. (Primitive values are aligned to a multiple of their size within a struct or list.)&lt;/p&gt;

&lt;h4 id=&#34;messages&#34;&gt;Messages&lt;/h4&gt;

&lt;p&gt;The unit of communication in Cap’n Proto is a “message”. A message is a tree of objects, with the root always being a struct.&lt;/p&gt;

&lt;p&gt;Physically, messages may be split into several “segments”, each of which is a flat blob of bytes. Typically, a segment must be loaded into a contiguous block of memory before it can be accessed, so that the relative pointers within the segment can be followed quickly. However, when a message has multiple segments, it does not matter where those segments are located in memory relative to each other; inter-segment pointers are encoded differently, as we’ll see later.&lt;/p&gt;

&lt;p&gt;Ideally, every message would have only one segment. However, there are a few reasons why splitting a message into multiple segments may be convenient:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can be difficult to predict how large a message might be until you start writing it, and you can’t start writing it until you have a segment to write to. If it turns out the segment you allocated isn’t big enough, you can allocate additional segments without the need to relocate the data you’ve already written.&lt;/li&gt;
&lt;li&gt;Allocating excessively large blocks of memory can make life difficult for memory allocators, especially on 32-bit systems with limited address space.
The first word of the first segment of the message is always a pointer pointing to the message’s root struct.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;objects&#34;&gt;Objects&lt;/h4&gt;

&lt;p&gt;Each segment in a message contains a series of objects. For the purpose of Cap’n Proto, an “object” is any value which may have a pointer pointing to it. Pointers can only point to the beginning of objects, not into the middle, and no more than one pointer can point at each object. Thus, objects and the pointers connecting them form a tree, not a graph. An object is itself composed of primitive data values and pointers, in a layout that depends on the kind of object.&lt;/p&gt;

&lt;p&gt;At the moment, there are three kinds of objects: structs, lists, and far-pointer landing pads. Blobs might also be considered to be a kind of object, but are encoded identically to lists of bytes.&lt;/p&gt;

&lt;h3 id=&#34;sect-value-encoding&#34;&gt;&amp;sect;Value Encoding&lt;/h3&gt;

&lt;h4 id=&#34;primitive-values&#34;&gt;Primitive Values&lt;/h4&gt;

&lt;p&gt;The built-in primitive types are encoded as follows:&lt;/p&gt;

&lt;p&gt;Void: Not encoded at all. It has only one possible value thus carries no information.
Bool: One bit. 1 = true, 0 = false.
Integers: Encoded in little-endian format. Signed integers use two’s complement.
Floating-points: Encoded in little-endian IEEE-754 format.
Primitive types must always be aligned to a multiple of their size. Note that since the size of a Bool is one bit, this means eight Bool values can be encoded in a single byte – this differs from C++, where the bool type takes a whole byte.&lt;/p&gt;

&lt;h4 id=&#34;enums&#34;&gt;Enums&lt;/h4&gt;

&lt;p&gt;Enums are encoded the same as UInt16.&lt;/p&gt;

&lt;h3 id=&#34;sect-object-encoding&#34;&gt;&amp;sect;Object Encoding&lt;/h3&gt;

&lt;h4 id=&#34;blobs&#34;&gt;Blobs&lt;/h4&gt;

&lt;p&gt;The built-in blob types are encoded as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Data&lt;/code&gt;: Encoded as a pointer, identical to List(UInt8).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;: Like &lt;code&gt;Data&lt;/code&gt;, but the content must be valid UTF-8, and the last byte of the content must be zero. The encoding allows bytes other than the last to be zero, but some applications (especially ones written in languages that use NUL-terminated strings) may truncate at the first zero. If a particular text field is explicitly intended to support zero bytes, it should document this, but otherwise senders should assume that zero bytes are not allowed to be safe. Note that the NUL terminator is included in the size sent on the wire, but the runtime library should not count it in any size reported to the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;structs&#34;&gt;Structs&lt;/h4&gt;

&lt;p&gt;A struct value is encoded as a pointer to its content. The content is split into two sections: data and pointers, with the pointer section appearing immediately after the data section. This split allows structs to be traversed (e.g., copied) without knowing their type.&lt;/p&gt;

&lt;p&gt;A struct pointer looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsb                      struct pointer                       msb
+-+-----------------------------+---------------+---------------+
|A|             B               |       C       |       D       |
+-+-----------------------------+---------------+---------------+

A (2 bits) = 0, to indicate that this is a struct pointer.
B (30 bits) = Offset, in words, from the end of the pointer to the
    start of the struct&#39;s data section.  Signed.
C (16 bits) = Size of the struct&#39;s data section, in words.
D (16 bits) = Size of the struct&#39;s pointer section, in words.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fields are positioned within the struct according to an algorithm with the following principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The position of each field depends only on its definition and the definitions of lower-numbered fields, never on the definitions of higher-numbered fields. This ensures backwards-compatibility when new fields are added.&lt;/li&gt;
&lt;li&gt;Due to alignment requirements, fields in the data section may be separated by padding. However, later-numbered fields may be positioned into the padding left between earlier-numbered fields. Because of this, a struct will never contain more than 63 bits of padding. Since objects are rounded up to a whole number of words anyway, padding never ends up wasting space.&lt;/li&gt;
&lt;li&gt;Unions and groups need not occupy contiguous memory. Indeed, they may have to be split into multiple slots if new fields are added later on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Field offsets are computed by the Cap’n Proto compiler. The precise algorithm is too complicated to describe here, but you need not implement it yourself, as the compiler can produce a compiled schema format which includes offset information.&lt;/p&gt;

&lt;h4 id=&#34;default-values&#34;&gt;Default Values&lt;/h4&gt;

&lt;p&gt;A default struct is always all-zeros. To achieve this, fields in the data section are stored xor’d with their defined default values. An all-zero pointer is considered “null”; accessor methods for pointer fields check for null and return a pointer to their default value in this case.&lt;/p&gt;

&lt;p&gt;There are several reasons why this is desirable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cap’n Proto messages are often “packed” with a simple compression algorithm that deflates zero-value bytes.&lt;/li&gt;
&lt;li&gt;Newly-allocated structs only need to be zero-initialized, which is fast and requires no knowledge of the struct type except its size.&lt;/li&gt;
&lt;li&gt;If a newly-added field is placed in space that was previously padding, messages written by old binaries that do not know about this field will still have its default value set correctly – because it is always zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;zero-sized-structs&#34;&gt;Zero-sized structs.&lt;/h4&gt;

&lt;p&gt;As stated above, a pointer whose bits are all zero is considered a null pointer, not a struct of zero size. To encode a struct of zero size, set A, C, and D to zero, and set B (the offset) to -1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Historical explanation:&lt;/strong&gt; A null pointer is intended to be treated as equivalent to the field’s default value. Early on, it was thought that a zero-sized struct was a suitable synonym for null, since interpreting an empty struct as any struct type results in a struct whose fields are all default-valued. So, the pointer encoding was designed such that a zero-sized struct’s pointer would be all-zero, so that it could conveniently be overloaded to mean “null”.&lt;/p&gt;

&lt;p&gt;However, it turns out there are two important differences between a zero-sized struct and a null pointer. First, applications often check for null explicitly when implementing optional fields. Second, an empty struct is technically equivalent to the default value for the struct type, whereas a null pointer is equivalent to the default value for the particular field. These are not necessarily the same.&lt;/p&gt;

&lt;p&gt;It therefore became necessary to find a different encoding for zero-sized structs. Since the struct has zero size, the pointer’s offset can validly point to any location so long as it is in-bounds. Since an offset of -1 points to the beginning of the pointer itself, it is known to be in-bounds. So, we use an offset of -1 when the struct has zero size.&lt;/p&gt;

&lt;h4 id=&#34;lists&#34;&gt;Lists&lt;/h4&gt;

&lt;p&gt;A list value is encoded as a pointer to a flat array of values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsb                       list pointer                        msb
+-+-----------------------------+--+----------------------------+
|A|             B               |C |             D              |
+-+-----------------------------+--+----------------------------+

A (2 bits) = 1, to indicate that this is a list pointer.
B (30 bits) = Offset, in words, from the end of the pointer to the
    start of the first element of the list.  Signed.
C (3 bits) = Size of each element:
    0 = 0 (e.g. List(Void))
    1 = 1 bit
    2 = 1 byte
    3 = 2 bytes
    4 = 4 bytes
    5 = 8 bytes (non-pointer)
    6 = 8 bytes (pointer)
    7 = composite (see below)
D (29 bits) = Size of the list:
    when C &amp;lt;&amp;gt; 7: Number of elements in the list.
    when C = 7: Number of words in the list, not counting the tag word
    (see below).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pointed-to values are tightly-packed. In particular, &lt;code&gt;Bools&lt;/code&gt; are packed bit-by-bit in little-endian order (the first bit is the least-significant bit of the first byte).&lt;/p&gt;

&lt;p&gt;When C = 7, the elements of the list are fixed-width composite values – usually, structs. In this case, the list content is prefixed by a “tag” word that describes each individual element. The tag has the same layout as a struct pointer, except that the pointer offset (B) instead indicates the number of elements in the list. Meanwhile, section (D) of the list pointer – which normally would store this element count – instead stores the total number of words in the list (not counting the tag word). The reason we store a word count in the pointer rather than an element count is to ensure that the extents of the list’s location can always be determined by inspecting the pointer alone, without having to look at the tag; this may allow more-efficient prefetching in some use cases. The reason we don’t store struct lists as a list of pointers is because doing so would take significantly more space (an extra pointer per element) and may be less cache-friendly.&lt;/p&gt;

&lt;p&gt;In the future, we could consider implementing matrixes using the “composite” element type, with the elements being fixed-size lists rather than structs. In this case, the tag would look like a list pointer rather than a struct pointer. As of this writing, no such feature has been implemented.&lt;/p&gt;

&lt;p&gt;A struct list must always be written using C = 7. However, a list of any element size (except C = 1, i.e. 1-bit) may be decoded as a struct list, with each element being interpreted as being a prefix of the struct data. For instance, a list of 2-byte values (C = 3) can be decoded as a struct list where each struct has 2 bytes in their “data” section (and an empty pointer section). A list of pointer values (C = 6) can be decoded as a struct list where each struct has a pointer section with one pointer (and an empty data section). The purpose of this rule is to make it possible to upgrade a list of primitives to a list of structs, as described under the protocol evolution rules. (We make a special exception that boolean lists cannot be upgraded in this way due to the unreasonable implementation burden.) Note that even though struct lists can be decoded from any element size (except C = 1), it is NOT permitted to encode a struct list using any type other than C = 7 because doing so would interfere with the canonicalization algorithm.&lt;/p&gt;

&lt;h4 id=&#34;inter-segment-pointers&#34;&gt;Inter-Segment Pointers&lt;/h4&gt;

&lt;p&gt;When a pointer needs to point to a different segment, offsets no longer work. We instead encode the pointer as a “far pointer”, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsb                        far pointer                        msb
+-+-+---------------------------+-------------------------------+
|A|B|            C              |               D               |
+-+-+---------------------------+-------------------------------+

A (2 bits) = 2, to indicate that this is a far pointer.
B (1 bit) = 0 if the landing pad is one word, 1 if it is two words.
    See explanation below.
C (29 bits) = Offset, in words, from the start of the target segment
    to the location of the far-pointer landing-pad within that
    segment.  Unsigned.
D (32 bits) = ID of the target segment.  (Segments are numbered
    sequentially starting from zero.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If B == 0, then the “landing pad” of a far pointer is normally just another pointer, which in turn points to the actual object.&lt;/p&gt;

&lt;p&gt;If B == 1, then the “landing pad” is itself another far pointer that is interpreted differently: This far pointer (which always has B = 0) points to the start of the object’s content, located in some other segment. The landing pad is itself immediately followed by a tag word. The tag word looks exactly like an intra-segment pointer to the target object would look, except that the offset is always zero.&lt;/p&gt;

&lt;p&gt;The reason for the convoluted double-far convention is to make it possible to form a new pointer to an object in a segment that is full. If you can’t allocate even one word in the segment where the target resides, then you will need to allocate a landing pad in some other segment, and use this double-far approach. This should be exceedingly rare in practice since pointers are normally set to point to new objects, not existing ones.&lt;/p&gt;

&lt;h4 id=&#34;capabilities-interfaces&#34;&gt;Capabilities (Interfaces)&lt;/h4&gt;

&lt;p&gt;When using Cap’n Proto for RPC, every message has an associated “capability table” which is a flat list of all capabilities present in the message body. The details of what this table contains and where it is stored are the responsibility of the RPC system; in some cases, the table may not even be part of the message content.&lt;/p&gt;

&lt;p&gt;A capability pointer, then, simply contains an index into the separate capability table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsb                    capability pointer                     msb
+-+-----------------------------+-------------------------------+
|A|              B              |               C               |
+-+-----------------------------+-------------------------------+

A (2 bits) = 3, to indicate that this is an &amp;quot;other&amp;quot; pointer.
B (30 bits) = 0, to indicate that this is a capability pointer.
    (All other values are reserved for future use.)
C (32 bits) = Index of the capability in the message&#39;s capability
    table.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;em&gt;rpc.capnp&lt;/em&gt;, the capability table is encoded as a list of &lt;code&gt;CapDescriptors&lt;/code&gt;, appearing along-side the message content in the &lt;code&gt;Payload&lt;/code&gt; struct. However, some use cases may call for different approaches. A message that is built and consumed within the same process need not encode the capability table at all (it can just keep the table as a separate array). A message that is going to be stored to disk would need to store a table of &lt;code&gt;SturdyRefs&lt;/code&gt; instead of &lt;code&gt;CapDescriptors&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;serialization-over-a-stream&#34;&gt;Serialization Over a Stream&lt;/h4&gt;

&lt;p&gt;When transmitting a message, the segments must be framed in some way, i.e. to communicate the number of segments and their sizes before communicating the actual data. The best framing approach may differ depending on the medium – for example, messages read via mmap or shared memory may call for a different approach than messages sent over a socket or a pipe. Cap’n Proto does not attempt to specify a framing format for every situation. However, since byte streams are by far the most common transmission medium, Cap’n Proto does define and implement a recommended framing format for them.&lt;/p&gt;

&lt;p&gt;When transmitting over a stream, the following should be sent. All integers are unsigned and little-endian.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(4 bytes) The number of segments, minus one (since there is always at least one segment).&lt;/li&gt;
&lt;li&gt;(N * 4 bytes) The size of each segment, in words.&lt;/li&gt;
&lt;li&gt;(0 or 4 bytes) Padding up to the next word boundary.&lt;/li&gt;
&lt;li&gt;The content of each segment, in order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;packing&#34;&gt;Packing&lt;/h4&gt;

&lt;p&gt;For cases where bandwidth usage matters, Cap’n Proto defines a simple compression scheme called “packing”. This scheme is based on the observation that Cap’n Proto messages contain lots of zero bytes: padding bytes, unset fields, and high-order bytes of small-valued integers.&lt;/p&gt;

&lt;p&gt;In packed format, each word of the message is reduced to a tag byte followed by zero to eight content bytes. The bits of the tag byte correspond to the bytes of the unpacked word, with the least-significant bit corresponding to the first byte. Each zero bit indicates that the corresponding byte is zero. The non-zero bytes are packed following the tag.&lt;/p&gt;

&lt;p&gt;For example, here is some typical Cap’n Proto data (a struct pointer (offset = 2, data size = 3, pointer count = 2) followed by a text pointer (offset = 6, length = 53)) and its packed form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unpacked (hex):  08 00 00 00 03 00 02 00   19 00 00 00 aa 01 00 00
packed (hex):  51 08 03 02   31 19 aa 01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the above, there are two tag values which are treated specially: 0x00 and 0xff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0x00: The tag is followed by a single byte which indicates a count of consecutive zero-valued words, minus 1. E.g. if the tag 0x00 is followed by 0x05, the sequence unpacks to 6 words of zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, put another way: the tag is first decoded as if it were not special. Since none of the bits are set, it is followed by no bytes and expands to a word full of zeros. After that, the next byte is interpreted as a count of additional words that are also all-zero.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0xff: The tag is followed by the bytes of the word (as if it weren’t special), but after those bytes is another byte with value N. Following that byte is N unpacked words that should be copied directly. These unpacked words may or may not contain zeros – it is up to the compressor to decide when to end the unpacked span and return to packing each word. The purpose of this rule is to minimize the impact of packing on data that doesn’t contain any zeros – in particular, long text blobs. Because of this rule, the worst-case space overhead of packing is 2 bytes per 2 KiB of input (256 words = 2KiB).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unpacked (hex):  00 (x 32 bytes)
packed (hex):  00 03

unpacked (hex):  8a (x 32 bytes)
packed (hex):  ff 8a (x 8 bytes) 03 8a (x 24 bytes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that both of the special cases begin by treating the tag as if it weren’t special. This is intentionally designed to make encoding faster: you can compute the tag value and encode the bytes in a single pass through the input word. Only after you’ve finished with that word do you need to check whether the tag ended up being 0x00 or 0xff.&lt;/p&gt;

&lt;p&gt;It is possible to write both an encoder and a decoder which only branch at the end of each word, and only to handle the two special tags. It is not necessary to branch on every byte. See the C++ reference implementation for an example.&lt;/p&gt;

&lt;p&gt;Packing is normally applied on top of the standard stream framing described in the previous section.&lt;/p&gt;

&lt;h4 id=&#34;compression&#34;&gt;Compression&lt;/h4&gt;

&lt;p&gt;When Cap’n Proto messages may contain repetitive data (especially, large text blobs), it makes sense to apply a standard compression algorithm in addition to packing. When CPU time is scarce, we recommend &lt;a href=&#34;https://code.google.com/p/lz4/&#34;&gt;LZ4 compression&lt;/a&gt;. Otherwise, &lt;a href=&#34;http://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; is slower but will compress more.&lt;/p&gt;

&lt;h3 id=&#34;sect-canonicalization&#34;&gt;&amp;sect;Canonicalization&lt;/h3&gt;

&lt;p&gt;Cap’n Proto messages have a well-defined canonical form. Cap’n Proto encoders are NOT required to output messages in canonical form, and in fact they will almost never do so by default. However, it is possible to write code which canonicalizes a Cap’n Proto message without knowing its schema.&lt;/p&gt;

&lt;p&gt;A canonical Cap’n Proto message must adhere to the following rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The object tree must be encoded in preorder (with respect to the order of the pointers within each object).&lt;/li&gt;
&lt;li&gt;The message must be encoded as a single segment. (When signing or hashing a canonical Cap’n Proto message, the segment table shall not be included, because it would be redundant.)&lt;/li&gt;
&lt;li&gt;Trailing zero-valued words in a struct’s data or pointer segments must be truncated. Since zero represents a default value, this does not change the struct’s meaning. This rule is important to ensure that adding a new field to a struct does not affect the canonical encoding of messages that do not set that field.&lt;/li&gt;
&lt;li&gt;Similarly, for a struct list, if a trailing word in a section of all structs in the list is zero, then it must be truncated from all structs in the list. (All structs in a struct list must have equal sizes, hence a trailing zero can only be removed if it is zero in all elements.)&lt;/li&gt;
&lt;li&gt;Any struct pointer pointing to a zero-sized struct should have an offset of -1.&lt;/li&gt;
&lt;li&gt;Canonical messages are not packed. However, packing can still be applied for transmission purposes; the message must simply be unpacked before checking signatures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that Cap’n Proto 0.5 introduced the rule that struct lists must always be encoded using C = 7 in the list pointer. Prior versions of Cap’n Proto allowed struct lists to be encoded using any element size, so that small structs could be compacted to take less than a word per element, and many encoders in fact implemented this. Unfortunately, this “optimization” made canonicalization impossible without knowing the schema, which is a significant obstacle. Therefore, the rules have been changed in 0.5, but data written by previous versions may not be possible to canonicalize.&lt;/p&gt;

&lt;h3 id=&#34;sect-security-considerations&#34;&gt;&amp;sect;Security Considerations&lt;/h3&gt;

&lt;p&gt;A naive implementation of a Cap’n Proto reader may be vulnerable to attacks based on various kinds of malicious input. Implementations MUST guard against these.&lt;/p&gt;

&lt;h4 id=&#34;pointer-validation&#34;&gt;Pointer Validation&lt;/h4&gt;

&lt;p&gt;Cap’n Proto readers must validate pointers, e.g. to check that the target object is within the bounds of its segment. To avoid an upfront scan of the message (which would defeat Cap’n Proto’s O(1) parsing performance), validation should occur lazily when the getter method for a pointer is called, throwing an exception or returning a default value if the pointer is invalid.&lt;/p&gt;

&lt;h4 id=&#34;amplification-attack&#34;&gt;Amplification attack&lt;/h4&gt;

&lt;p&gt;A message containing cyclic (or even just overlapping) pointers can cause the reader to go into an infinite loop while traversing the content.&lt;/p&gt;

&lt;p&gt;To defend against this, as the application traverses the message, each time a pointer is dereferenced, a counter should be incremented by the size of the data to which it points. If this counter goes over some limit, an error should be raised, and/or default values should be returned. We call this limit the “traversal limit” (or, sometimes, the “read limit”).&lt;/p&gt;

&lt;p&gt;The C++ implementation currently defaults to a limit of 64MiB, but allows the caller to set a different limit if desired. Another reasonable strategy is to set the limit to some multiple of the original message size; however, most applications should place limits on overall message sizes anyway, so it makes sense to have one check cover both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List amplification:&lt;/strong&gt; A list of Void values or zero-size structs can have a very large element count while taking constant space on the wire. If the receiving application expects a list of structs, it will see these zero-sized elements as valid structs set to their default values. If it iterates through the list processing each element, it could spend a large amount of CPU time or other resources despite the message being small. To defend against this, the “traversal limit” should count a list of zero-sized elements as if each element were one word instead. This rule was introduced in the C++ implementation in commit 1048706.&lt;/p&gt;

&lt;h4 id=&#34;stack-overflow-dos-attack&#34;&gt;Stack overflow DoS attack&lt;/h4&gt;

&lt;p&gt;A message with deeply-nested objects can cause a stack overflow in typical code which processes messages recursively.&lt;/p&gt;

&lt;p&gt;To defend against this, as the application traverses the message, the pointer depth should be tracked. If it goes over some limit, an error should be raised. The C++ implementation currently defaults to a limit of 64 pointers, but allows the caller to set a different limit.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://capnproto.org/encoding.html&#34; title=&#34;Cap&#39;n Proto Encoding Spec&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tars语言与协议</title>
      <link>http://alimy.me/post/dev_201909211556/</link>
      <pubDate>Sat, 21 Sep 2019 15:56:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211556/</guid>
      <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#main-chapter-1&#34;&gt;Tars语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#main-chapter-2&#34;&gt;Tars协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-tars语言-a-id-main-chapter-1-a&#34;&gt;1. Tars语言 &lt;a id=&#34;main-chapter-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-接口文件&#34;&gt;1.1. 接口文件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tars语言是一种类c++标识符的语言，用于生成具体的服务接口文件&lt;/li&gt;
&lt;li&gt;Tars文件是Tars框架中客户端和服务端的通信接口，通过Tars的映射实现远程对象调用&lt;/li&gt;
&lt;li&gt;Tars文件的扩展名必须以.tars为扩展名&lt;/li&gt;
&lt;li&gt;对于结构定义，可以支持扩展字段，即可以增加字段而不影响原有结构的解析，可以在存储/协议等地方单独使用&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-2-词法规则&#34;&gt;1.2. 词法规则&lt;/h3&gt;

&lt;h4 id=&#34;1-2-1-注释&#34;&gt;1.2.1. 注释&lt;/h4&gt;

&lt;p&gt;采用c++的注释规范。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//表示注释一行，/**/表示注释范围中的所有代码。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-2-2-关键字&#34;&gt;1.2.2. 关键字&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;void&lt;/code&gt;  &lt;code&gt;struct&lt;/code&gt;  &lt;code&gt;bool&lt;/code&gt;  &lt;code&gt;byte&lt;/code&gt;  &lt;code&gt;short&lt;/code&gt;  &lt;code&gt;int&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;double&lt;/code&gt;  &lt;code&gt;float&lt;/code&gt;  &lt;code&gt;long&lt;/code&gt;  &lt;code&gt;string&lt;/code&gt;  &lt;code&gt;vector&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;map&lt;/code&gt;  &lt;code&gt;key&lt;/code&gt;  &lt;code&gt;routekey&lt;/code&gt;  &lt;code&gt;module&lt;/code&gt;  &lt;code&gt;interface&lt;/code&gt;  &lt;code&gt;out&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;require&lt;/code&gt;  &lt;code&gt;optional&lt;/code&gt;  &lt;code&gt;false&lt;/code&gt;  &lt;code&gt;true&lt;/code&gt;  &lt;code&gt;enum&lt;/code&gt;  &lt;code&gt;const&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-标识符&#34;&gt;1.2.3. 标识符&lt;/h4&gt;

&lt;p&gt;所有标识符不能带有&amp;rsquo;tars_’符号，且必须以字母开头，同时不能和关键字冲突。&lt;/p&gt;

&lt;h3 id=&#34;1-3-基本类型&#34;&gt;1.3. 基本类型&lt;/h3&gt;

&lt;p&gt;支持的基本类型包括以下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;void&lt;/code&gt;  ：只能在函数的返回值表示&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bool&lt;/code&gt;  ：布尔类型，映射到 &lt;code&gt;tars::Bool&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;byte&lt;/code&gt;  ：有符号字符，映射到 &lt;code&gt;tars::Char&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;short&lt;/code&gt; ：有符号短整型，映射到 &lt;code&gt;tars::Short&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int&lt;/code&gt;   ：有符号整型，映射到 &lt;code&gt;tars::Int32&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;long&lt;/code&gt;  ：有符号长整型，映射到 &lt;code&gt;tars::Int64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;float&lt;/code&gt; ：映射到 &lt;code&gt;tars::Float&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;double&lt;/code&gt;：映射到 &lt;code&gt;tars::Double&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;string&lt;/code&gt;：映射到 &lt;code&gt;std::string，java:String&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unsigned byte&lt;/code&gt;：无符号字符,c++映射到 &lt;code&gt;unsigend char&lt;/code&gt; 其它版本 &lt;code&gt;tars::Short&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unsigned short&lt;/code&gt;：无符号短整形c++映射到 &lt;code&gt;unsigned short&lt;/code&gt; 其它版本 &lt;code&gt;tars::Int32&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Unsigned int&lt;/code&gt;:无符号整形c++映射到 &lt;code&gt;unsigned int&lt;/code&gt;其它版本 &lt;code&gt;tars::Int64&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-4-复杂类型&#34;&gt;1.4. 复杂类型&lt;/h3&gt;

&lt;h4 id=&#34;1-4-1-枚举&#34;&gt;1.4.1. 枚举&lt;/h4&gt;

&lt;p&gt;枚举类型的定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum TE
{
    E1,
    E2,
    E3
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;枚举类型支持在指定枚举变量的值，例如支持：E1 = 1这种定义方式；&lt;/li&gt;
&lt;li&gt;第一个定义的枚举类型值为0，这里E1的值为0；&lt;/li&gt;
&lt;li&gt;枚举类型在tars文件定义后，通过tars2cpp生成以后，除了会生成相应的enum定义之外，会生成etos和stoe函数，将枚举值转换成字符串，以及将字符串转换成枚举值，在代码调试时会非常方便。&lt;/li&gt;
&lt;li&gt;建议在c++的tars文件中，所有接口都以int返回，且返回值在tars文件中以枚举来定义。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-4-2-常量&#34;&gt;1.4.2. 常量&lt;/h4&gt;

&lt;p&gt;Tars文件中可以定义常量，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const int a = 0;

const string s = “abc”;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;由于map，vector没有描述常量的值，因此不支持map，vector的定义；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-4-3-结构&#34;&gt;1.4.3. 结构&lt;/h4&gt;

&lt;p&gt;结构定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Test
{
    0  require  string s;
    1  optional int  i = 23;
};

key[Test, s, i];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一列数字表示该字段的标识（tag），无论结构增减字段，该字段得值都不变，必须和响应的字段对应；&lt;/li&gt;
&lt;li&gt;Tag的值必须要&amp;gt;=0且&amp;lt;=255；&lt;/li&gt;
&lt;li&gt;require表示该字段必选；&lt;/li&gt;
&lt;li&gt;optional表示该字段可选；&lt;/li&gt;
&lt;li&gt;对于optional字段，可以有一个缺省值，缺省值在编码时默认不打包；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;key说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表示结构的小于比较符号，缺省时Struct是没有小于操作的，如果定义了key，则生成小于比较符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;key详细说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key[Stuct, member…]：&lt;/li&gt;
&lt;li&gt;Struct：表示结构的名称&lt;/li&gt;
&lt;li&gt;Member：表示该结构的成员变量，可以有多个；&lt;/li&gt;
&lt;li&gt;生成的小于比较操作符，按照key中成员变量定义的顺序进行优先&amp;lt;比较；&lt;/li&gt;
&lt;li&gt;生成小于比较操作符以后，该结构就可以作为map的key；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在Tars的c++语言中，对于结构而言，提供两个成员函数用于直接打印出结构的内容，可以用于调试和记录日志：&lt;/li&gt;
&lt;li&gt;ostream&amp;amp; display(ostream&amp;amp; _os, int _level=0)：直接打印结构的详细内容，主要用于调试；&lt;/li&gt;
&lt;li&gt;ostream&amp;amp; displaySimple(ostream&amp;amp; _os, int _level=0)：所有成员变量自动按照顺序以|分隔打印出来，用于记录日志；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-4-4-序列&#34;&gt;1.4.4. 序列&lt;/h4&gt;

&lt;p&gt;序列用vector来定义，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; vi;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-4-5-字典&#34;&gt;1.4.5. 字典&lt;/h4&gt;

&lt;p&gt;字典用map来定义，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map&amp;lt;int, string&amp;gt; m;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于struct，通常不能作为map的key，因此struct没有大小比较符号；&lt;/li&gt;
&lt;li&gt;如果需要struct能够作为map的key，需要用less定义struct中成员的比较顺序；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-4-6-数组&#34;&gt;1.4.6. 数组&lt;/h4&gt;

&lt;p&gt;结构中可以定义数组类型，数组用[]来定义，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte m[5];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：
* 对数组类型，在C++生成代码中会同时生成数组长度&lt;code&gt;mLen&lt;/code&gt;
* 对数组赋值后必须同时对数组长度赋值
* 在非c++版本中数组类型将翻译为&lt;code&gt;vector&amp;lt;类型&amp;gt;&lt;/code&gt;
* &lt;code&gt;byte m[5]&lt;/code&gt; 等价于定义&lt;code&gt;vector&amp;lt;byte&amp;gt;:5&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-4-7-指针&#34;&gt;1.4.7 指针&lt;/h4&gt;

&lt;p&gt;结构中可以定义byte指针类型，指针用*来定义，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte *m;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指针类型使用时需要提前预分配内存块，指针需要内存时通过偏移指向预分配内存块，减少解码过程中的内存申请。&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于指针类型，在c++代码中会同时生成mLen，用来指定指针长度。&lt;/li&gt;
&lt;li&gt;对指针赋值后必须对长度mLen赋值&lt;/li&gt;
&lt;li&gt;在非c++版本中指针类型将翻译为&lt;code&gt;vector&amp;lt;类型&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;含有指针类型的数据读取时BufferReader必须用MapBufferReader,同时需要提前设定指针指向内存的buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-4-8-嵌套&#34;&gt;1.4.8 嵌套&lt;/h4&gt;

&lt;p&gt;任何&lt;code&gt;struct&lt;/code&gt;，&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;vector&lt;/code&gt;都可以嵌套；&lt;/p&gt;

&lt;h3 id=&#34;1-5-接口&#34;&gt;1.5. 接口&lt;/h3&gt;

&lt;p&gt;接口定义如下，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface Demo
{
    int get(out vector&amp;lt;map&amp;lt;int, string&amp;gt;&amp;gt; v);
    
    int set(vector&amp;lt;map&amp;lt;int, string&amp;gt;&amp;gt; v);
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：
* 表示输出参数
* 接口定义后，通过自动代码生成工具（如：tars2cpp)会生成同步接口和异步接口等代码&lt;/p&gt;

&lt;h3 id=&#34;1-6-名字空间&#34;&gt;1.6. 名字空间&lt;/h3&gt;

&lt;p&gt;所有的struct，interface必须在名字空间中，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module MemCache
{
    struct Key
    {
        0 require string s;
    };

    struct Value
    {
        0 require string s;
    };

    interface MemCacheI
    {
        int get(Key k, out Value v);

        int set(Key k, Value v);
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：
* 名字空间不能嵌套;
* 可以引用其他名字空间,例如:Demo1::Key&lt;/p&gt;

&lt;h2 id=&#34;2-tars协议-a-id-main-chapter-2-a&#34;&gt;2. Tars协议 &lt;a id=&#34;main-chapter-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;2-1-数据编码&#34;&gt;2.1. 数据编码&lt;/h3&gt;

&lt;h4 id=&#34;2-1-1-基本结构&#34;&gt;2.1.1. 基本结构&lt;/h4&gt;

&lt;p&gt;每一个数据由两个部分组成，如下图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| 头信息 | 实际数据 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而其中头信息包括以下几个部分：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| Type(4 bits) | Tag 1(4 bits) | Tag 2(1 byte) |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Tag 2&lt;/code&gt;是可选的，当&lt;code&gt;Tag&lt;/code&gt;的值不超过14时，只需要用&lt;code&gt;Tag 1&lt;/code&gt;就可以表示；当&lt;code&gt;Tag&lt;/code&gt;的值超过14而小于256时，&lt;code&gt;Tag 1&lt;/code&gt;固定为15，而用&lt;code&gt;Tag 2&lt;/code&gt;表示&lt;code&gt;Tag&lt;/code&gt;的值。&lt;code&gt;Tag&lt;/code&gt;不允许大于255。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type&lt;/code&gt;表示类型，用4个二进制位表示，取值范围是0~15，用来标识该数据的类型。不同类型的数据，其后紧跟着的实际数据的长度和格式都是不一样的，详见一下的类型表。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tag&lt;/code&gt;由&lt;code&gt;Tag 1&lt;/code&gt;和&lt;code&gt;Tag 2&lt;/code&gt;一起表示。取值范围是0~255，即该数据在结构中的字段ID，用来区分不同的字段。&lt;/p&gt;

&lt;h4 id=&#34;2-1-2-编码类型表&#34;&gt;2.1.2. 编码类型表&lt;/h4&gt;

&lt;p&gt;注意，这里的类型与tars文件定义的类型是两个不同的概念，这里的类型只是标识数据存储的类型，而不是数据定义的类型。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;取值&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;int1&lt;/td&gt;
&lt;td&gt;紧跟1个字节整型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;td&gt;紧跟2个字节整型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;紧跟4个字节整型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;紧跟8个字节整型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;紧跟4个字节浮点型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;紧跟8个字节浮点型数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;String1&lt;/td&gt;
&lt;td&gt;紧跟1个字节长度，再跟内容&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;String4&lt;/td&gt;
&lt;td&gt;紧跟4个字节长度，再跟内容&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Map&lt;/td&gt;
&lt;td&gt;紧跟一个整型数据表示Map的大小，再跟[key, value]对列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;紧跟一个整型数据表示List的大小，再跟元素列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;自定义结构开始&lt;/td&gt;
&lt;td&gt;自定义结构开始标志&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;自定义结构结束&lt;/td&gt;
&lt;td&gt;自定义结构结束标志，Tag为0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;数字0&lt;/td&gt;
&lt;td&gt;表示数字0，后面不跟数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;SimpleList&lt;/td&gt;
&lt;td&gt;简单列表（目前用在byte数组），紧跟一个类型字段（目前只支持byte），紧跟一个整型数据表示长度，再跟byte数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;2-1-3-各类型详细描述&#34;&gt;2.1.3. 各类型详细描述&lt;/h4&gt;

&lt;p&gt;1.基本类型（包括&lt;code&gt;int1&lt;/code&gt;、&lt;code&gt;int2&lt;/code&gt;、&lt;code&gt;int4&lt;/code&gt;、&lt;code&gt;int8&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;头信息后紧跟数值数据。char、bool也被看作整型。所有的整型数据之间不做区分，也就是说一个short的值可以赋值给一个int。&lt;/p&gt;

&lt;p&gt;2.数字0&lt;/p&gt;

&lt;p&gt;头信息后不跟数据，表示数值0。所有基本类型的0值都可以这样来表示。&lt;/p&gt;

&lt;p&gt;这是考虑到数字0出现的概率比较大，所以单独提一个类型，以节省空间。&lt;/p&gt;

&lt;p&gt;3.字符串（包括String1、String4）&lt;/p&gt;

&lt;p&gt;String1跟一个字节的长度（该长度数据不包括头信息），接着紧跟内容。&lt;/p&gt;

&lt;p&gt;String4与之类似。&lt;/p&gt;

&lt;p&gt;4.Map&lt;/p&gt;

&lt;p&gt;紧跟一个整形数据（包括头信息）表示Map的大小，然后紧跟[Key数据（Tag为0），Value数据（Tag为1）]对列表。&lt;/p&gt;

&lt;p&gt;5.List&lt;/p&gt;

&lt;p&gt;紧跟一个整形数据（包括头信息）表示&lt;code&gt;List&lt;/code&gt;的大小，然后紧跟元素列表（&lt;code&gt;Tag&lt;/code&gt;为0）&lt;/p&gt;

&lt;p&gt;6.自定义结构开始&lt;/p&gt;

&lt;p&gt;自定义结构开始标志，后面紧跟字段数据，字段按照tag升序顺序排列&lt;/p&gt;

&lt;p&gt;7.自定义结构结束&lt;/p&gt;

&lt;p&gt;自定义结构结束标志，Tag为0&lt;/p&gt;

&lt;h4 id=&#34;2-1-4-对象持久化&#34;&gt;2.1.4 对象持久化&lt;/h4&gt;

&lt;p&gt;对于自定义结构的持久化，由开始标志与结束标志来标识。&lt;/p&gt;

&lt;p&gt;比如如下结构定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct TestInfo
{
    1  require  int    ii  = 34;
    2  optional string s   = &amp;quot;abc&amp;quot;;
};

struct TestInfo2
{
    1  require TestInfo  t;
    2  require int       a = 12345;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，默认的TestInfo2结构编码后结果为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20190921155601.png&#34; alt=&#34;tars&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-2-消息格式&#34;&gt;2.2. 消息格式&lt;/h3&gt;

&lt;p&gt;TUP底层协议完全采用Tars定义，与Tars的底层数据包定义一致，其中&lt;code&gt;require&lt;/code&gt;的字段为TUP必须的字段，&lt;code&gt;optional&lt;/code&gt;为访问Tars服务时额外需要用到的字段。&lt;/p&gt;

&lt;h4 id=&#34;2-2-1-请求包&#34;&gt;2.2.1. 请求包&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//请求包体
struct RequestPacket
{
    1  require short        iVersion;         //版本号
    2  optional byte        cPacketType;      //包类型
    3  optional int         iMessageType;     //消息类型
    4  require int          iRequestId;       //请求ID
    5  require string       sServantName;     //servant名字
    6  require string       sFuncName;        //函数名称
    7  require vector&amp;lt;byte&amp;gt; sBuffer;          //二进制buffer
    8  optional int         iTimeout;         //超时时间（毫秒）
    9  optional map&amp;lt;string, string&amp;gt; context;  //业务上下文
    10 optional map&amp;lt;string, string&amp;gt; status;   //框架协议上下文
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-2-2-响应包&#34;&gt;2.2.2. 响应包&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//响应包体
struct ResponsePacket
{
    1 require short         iVersion;       //版本号
    2 optional byte         cPacketType;    //包类型
    3 require int           iRequestId;     //请求ID
    4 optional int          iMessageType;   //消息类型
    5 optional int          iRet;           //返回值
    6 require vector&amp;lt;byte&amp;gt;  sBuffer;        //二进制流
    7 optional map&amp;lt;string, string&amp;gt; status;  //协议上下文
    8 optional string       sResultDesc;    //结果描述
};

//返回值
const int TAFSERVERSUCCESS       = 0;       //服务器端处理成功
const int TAFSERVERDECODEERR     = -1;      //服务器端解码异常
const int TAFSERVERENCODEERR     = -2;      //服务器端编码异常
const int TAFSERVERNOFUNCERR     = -3;      //服务器端没有该函数
const int TAFSERVERNOSERVANTERR  = -4;      //服务器端没有该Servant对象
const int TAFSERVERRESETGRID     = -5;      //服务器端灰度状态不一致
const int TAFSERVERQUEUETIMEOUT  = -6;      //服务器队列超过限制
const int TAFASYNCCALLTIMEOUT    = -7;      //异步调用超时
const int TAFINVOKETIMEOUT       = -7;      //调用超时
const int TAFPROXYCONNECTERR     = -8;      //proxy链接异常
const int TAFSERVEROVERLOAD      = -9;      //服务器端超负载,超过队列长度
const int TAFADAPTERNULL         = -10;     //客户端选路为空，服务不存在或者所有服务down掉了
const int TAFINVOKEBYINVALIDESET = -11;     //客户端按set规则调用非法
const int TAFCLIENTDECODEERR     = -12;     //客户端解码异常
const int TAFSERVERUNKNOWNERR    = -99;     //服务器端位置异常
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://github.com/TarsCloud/TarsProtocol/blob/master/docs/tars_protocol.md&#34; title=&#34;tars protocol&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffers Version 3 Language Specification</title>
      <link>http://alimy.me/post/dev_201909211536/</link>
      <pubDate>Sat, 21 Sep 2019 15:36:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211536/</guid>
      <description>&lt;p&gt;This is a language specification reference for version 3 of the Protocol Buffers language (proto3). The syntax is specified using Extended &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form&#34; title=&#34;EBNF in WIKI&#34;&gt;Backus-Naur Form (EBNF)&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (zero or one time)
{}  repetition (any number of times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using proto3, see the language guide.&lt;/p&gt;

&lt;h3 id=&#34;lexical-elements&#34;&gt;Lexical elements&lt;/h3&gt;

&lt;h4 id=&#34;letters-and-digits&#34;&gt;Letters and digits&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;letter = &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;z&amp;quot;
decimalDigit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot;
octalDigit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot;
hexDigit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;identifiers&#34;&gt;Identifiers&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ident = letter { letter | decimalDigit | &amp;quot;_&amp;quot; }
fullIdent = ident { &amp;quot;.&amp;quot; ident }
messageName = ident
enumName = ident
fieldName = ident
oneofName = ident
mapName = ident
serviceName = ident
rpcName = ident
messageType = [ &amp;quot;.&amp;quot; ] { ident &amp;quot;.&amp;quot; } messageName
enumType = [ &amp;quot;.&amp;quot; ] { ident &amp;quot;.&amp;quot; } enumName
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;integer-literals&#34;&gt;Integer literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;intLit     = decimalLit | octalLit | hexLit
decimalLit = ( &amp;quot;1&amp;quot; … &amp;quot;9&amp;quot; ) { decimalDigit }
octalLit   = &amp;quot;0&amp;quot; { octalDigit }
hexLit     = &amp;quot;0&amp;quot; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hexDigit { hexDigit } 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;floating-point-literals&#34;&gt;Floating-point literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;floatLit = ( decimals &amp;quot;.&amp;quot; [ decimals ] [ exponent ] | decimals exponent | &amp;quot;.&amp;quot;decimals [ exponent ] ) | &amp;quot;inf&amp;quot; | &amp;quot;nan&amp;quot;
decimals  = decimalDigit { decimalDigit }
exponent  = ( &amp;quot;e&amp;quot; | &amp;quot;E&amp;quot; ) [ &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; ] decimals 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;boolean&#34;&gt;Boolean&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;boolLit = &amp;quot;true&amp;quot; | &amp;quot;false&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;string-literals&#34;&gt;String literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;strLit = ( &amp;quot;&#39;&amp;quot; { charValue } &amp;quot;&#39;&amp;quot; ) |  ( &#39;&amp;quot;&#39; { charValue } &#39;&amp;quot;&#39; )
charValue = hexEscape | octEscape | charEscape | /[^\0\n\\]/
hexEscape = &#39;\&#39; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hexDigit hexDigit
octEscape = &#39;\&#39; octalDigit octalDigit octalDigit
charEscape = &#39;\&#39; ( &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; | &amp;quot;f&amp;quot; | &amp;quot;n&amp;quot; | &amp;quot;r&amp;quot; | &amp;quot;t&amp;quot; | &amp;quot;v&amp;quot; | &#39;\&#39; | &amp;quot;&#39;&amp;quot; | &#39;&amp;quot;&#39; )
quote = &amp;quot;&#39;&amp;quot; | &#39;&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;emptystatement&#34;&gt;EmptyStatement&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;emptyStatement = &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;constant&#34;&gt;Constant&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;constant = fullIdent | ( [ &amp;quot;-&amp;quot; | &amp;quot;+&amp;quot; ] intLit ) | ( [ &amp;quot;-&amp;quot; | &amp;quot;+&amp;quot; ] floatLit ) | strLit | boolLit 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;

&lt;p&gt;The syntax statement is used to define the protobuf version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;syntax&amp;quot; &amp;quot;=&amp;quot; quote &amp;quot;proto3&amp;quot; quote &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;import-statement&#34;&gt;Import Statement&lt;/h4&gt;

&lt;p&gt;The import statement is used to import another .proto&amp;rsquo;s definitions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import = &amp;quot;import&amp;quot; [ &amp;quot;weak&amp;quot; | &amp;quot;public&amp;quot; ] strLit &amp;quot;;&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import public &amp;quot;other.proto&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;package&#34;&gt;Package&lt;/h4&gt;

&lt;p&gt;The package specifier can be used to prevent name clashes between protocol message types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package = &amp;quot;package&amp;quot; fullIdent &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package foo.bar;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;option&#34;&gt;Option&lt;/h4&gt;

&lt;p&gt;Options can be used in proto files, messages, enums and services. An option can be a protobuf defined option or a custom option. For more information, see Options in the language guide.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;option = &amp;quot;option&amp;quot; optionName  &amp;quot;=&amp;quot; constant &amp;quot;;&amp;quot;
optionName = ( ident | &amp;quot;(&amp;quot; fullIdent &amp;quot;)&amp;quot; ) { &amp;quot;.&amp;quot; ident }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;option java_package = &amp;quot;com.example.foo&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fields&#34;&gt;Fields&lt;/h4&gt;

&lt;p&gt;Fields are the basic elements of a protocol buffer message. Fields can be normal fields, oneof fields, or map fields. A field has a type and field number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type = &amp;quot;double&amp;quot; | &amp;quot;float&amp;quot; | &amp;quot;int32&amp;quot; | &amp;quot;int64&amp;quot; | &amp;quot;uint32&amp;quot; | &amp;quot;uint64&amp;quot;
      | &amp;quot;sint32&amp;quot; | &amp;quot;sint64&amp;quot; | &amp;quot;fixed32&amp;quot; | &amp;quot;fixed64&amp;quot; | &amp;quot;sfixed32&amp;quot; | &amp;quot;sfixed64&amp;quot;
      | &amp;quot;bool&amp;quot; | &amp;quot;string&amp;quot; | &amp;quot;bytes&amp;quot; | messageType | enumType
fieldNumber = intLit;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;normal-field&#34;&gt;Normal field&lt;/h4&gt;

&lt;p&gt;Each field has type, name and field number. It may have field options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field = [ &amp;quot;repeated&amp;quot; ] type fieldName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
fieldOptions = fieldOption { &amp;quot;,&amp;quot;  fieldOption }
fieldOption = optionName &amp;quot;=&amp;quot; constant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo.bar nested_message = 2;
repeated int32 samples = 4 [packed=true];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oneof-and-oneof-field&#34;&gt;Oneof and oneof field&lt;/h4&gt;

&lt;p&gt;A oneof consists of oneof fields and a oneof name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oneof = &amp;quot;oneof&amp;quot; oneofName &amp;quot;{&amp;quot; { oneofField | emptyStatement } &amp;quot;}&amp;quot;
oneofField = type fieldName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oneof foo {
    string name = 4;
    SubMessage sub_message = 9;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map-field&#34;&gt;Map field&lt;/h4&gt;

&lt;p&gt;A map field has a key type, value type, name, and field number. The key type can be any integral or string type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mapField = &amp;quot;map&amp;quot; &amp;quot;&amp;lt;&amp;quot; keyType &amp;quot;,&amp;quot; type &amp;quot;&amp;gt;&amp;quot; mapName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
keyType = &amp;quot;int32&amp;quot; | &amp;quot;int64&amp;quot; | &amp;quot;uint32&amp;quot; | &amp;quot;uint64&amp;quot; | &amp;quot;sint32&amp;quot; | &amp;quot;sint64&amp;quot; |
          &amp;quot;fixed32&amp;quot; | &amp;quot;fixed64&amp;quot; | &amp;quot;sfixed32&amp;quot; | &amp;quot;sfixed64&amp;quot; | &amp;quot;bool&amp;quot; | &amp;quot;string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map&amp;lt;string, Project&amp;gt; projects = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;reserved&#34;&gt;Reserved&lt;/h4&gt;

&lt;p&gt;Reserved statements declare a range of field numbers or field names that cannot be used in this message.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reserved = &amp;quot;reserved&amp;quot; ( ranges | fieldNames ) &amp;quot;;&amp;quot;
ranges = range { &amp;quot;,&amp;quot; range }
range =  intLit [ &amp;quot;to&amp;quot; ( intLit | &amp;quot;max&amp;quot; ) ]
fieldNames = fieldName { &amp;quot;,&amp;quot; fieldName }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reserved 2, 15, 9 to 11;
reserved &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-level-definitions&#34;&gt;Top Level definitions&lt;/h3&gt;

&lt;h4 id=&#34;enum-definition&#34;&gt;Enum definition&lt;/h4&gt;

&lt;p&gt;The enum definition consists of a name and an enum body. The enum body can have options and enum fields. Enum definitions must start with enum value zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum = &amp;quot;enum&amp;quot; enumName enumBody
enumBody = &amp;quot;{&amp;quot; { option | enumField | emptyStatement } &amp;quot;}&amp;quot;
enumField = ident &amp;quot;=&amp;quot; intLit [ &amp;quot;[&amp;quot; enumValueOption { &amp;quot;,&amp;quot;  enumValueOption } &amp;quot;]&amp;quot; ]&amp;quot;;&amp;quot;
enumValueOption = optionName &amp;quot;=&amp;quot; constant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 2 [(custom_option) = &amp;quot;hello world&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;message-definition&#34;&gt;Message definition&lt;/h4&gt;

&lt;p&gt;A message consists of a message name and a message body. The message body can have fields, nested enum definitions, nested message definitions, options, oneofs, map fields, and reserved statements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message = &amp;quot;message&amp;quot; messageName messageBody
messageBody = &amp;quot;{&amp;quot; { field | enum | message | option | oneof | mapField |
reserved | emptyStatement } &amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Outer {
  option (my_option).a = true;
  message Inner {   // Level 2
    int64 ival = 1;
  }
  map&amp;lt;int32, string&amp;gt; my_map = 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;service-definition&#34;&gt;Service definition&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;service = &amp;quot;service&amp;quot; serviceName &amp;quot;{&amp;quot; { option | rpc | emptyStatement } &amp;quot;}&amp;quot;
rpc = &amp;quot;rpc&amp;quot; rpcName &amp;quot;(&amp;quot; [ &amp;quot;stream&amp;quot; ] messageType &amp;quot;)&amp;quot; &amp;quot;returns&amp;quot; &amp;quot;(&amp;quot; [ &amp;quot;stream&amp;quot; ]
messageType &amp;quot;)&amp;quot; (( &amp;quot;{&amp;quot; {option | emptyStatement } &amp;quot;}&amp;quot; ) | &amp;quot;;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service SearchService {
  rpc Search (SearchRequest) returns (SearchResponse);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;proto-file&#34;&gt;Proto file&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;proto = syntax { import | package | option | topLevelDef | emptyStatement }
topLevelDef = message | enum | service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example .proto file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

import public &amp;quot;other.proto&amp;quot;;
option java_package = &amp;quot;com.example.foo&amp;quot;;

enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 2 [(custom_option) = &amp;quot;hello world&amp;quot;];
}

message outer {
  option (my_option).a = true;
  message inner {   // Level 2
    int64 ival = 1;
  }
  repeated inner inner_message = 2;
  EnumAllowingAlias enum_field =3;
  map&amp;lt;int32, string&amp;gt; my_map = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/proto3-spec&#34; title=&#34;proto3-spec&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffers Version 2 Language Specification</title>
      <link>http://alimy.me/post/dev_201909211516/</link>
      <pubDate>Sat, 21 Sep 2019 15:16:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211516/</guid>
      <description>&lt;p&gt;This is a language specification reference for version 2 of the Protocol Buffers language (proto2). The syntax is specified using Extended &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form&#34; title=&#34;EBNF in WIKI&#34;&gt;Backus-Naur Form (EBNF)&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (zero or one time)
{}  repetition (any number of times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using proto2, see the language guide.&lt;/p&gt;

&lt;h3 id=&#34;lexical-elements&#34;&gt;Lexical elements&lt;/h3&gt;

&lt;h4 id=&#34;letters-and-digits&#34;&gt;Letters and digits&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;letter = &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;z&amp;quot;
capitalLetter =  &amp;quot;A&amp;quot; … &amp;quot;Z&amp;quot;
decimalDigit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot;
octalDigit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot;
hexDigit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;identifiers&#34;&gt;Identifiers&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ident = letter { letter | decimalDigit | &amp;quot;_&amp;quot; }
fullIdent = ident { &amp;quot;.&amp;quot; ident }
messageName = ident
enumName = ident
fieldName = ident
oneofName = ident
mapName = ident
serviceName = ident
rpcName = ident
streamName = ident
messageType = [ &amp;quot;.&amp;quot; ] { ident &amp;quot;.&amp;quot; } messageName
enumType = [ &amp;quot;.&amp;quot; ] { ident &amp;quot;.&amp;quot; } enumName
groupName = capitalLetter { letter | decimalDigit | &amp;quot;_&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;integer-literals&#34;&gt;Integer literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;intLit     = decimalLit | octalLit | hexLit
decimalLit = ( &amp;quot;1&amp;quot; … &amp;quot;9&amp;quot; ) { decimalDigit }
octalLit   = &amp;quot;0&amp;quot; { octalDigit }
hexLit     = &amp;quot;0&amp;quot; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hexDigit { hexDigit } 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;floating-point-literals&#34;&gt;Floating-point literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;floatLit = ( decimals &amp;quot;.&amp;quot; [ decimals ] [ exponent ] | decimals exponent | &amp;quot;.&amp;quot;decimals [ exponent ] ) | &amp;quot;inf&amp;quot; | &amp;quot;nan&amp;quot;
decimals  = decimalDigit { decimalDigit }
exponent  = ( &amp;quot;e&amp;quot; | &amp;quot;E&amp;quot; ) [ &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; ] decimals 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;boolean&#34;&gt;Boolean&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;boolLit = &amp;quot;true&amp;quot; | &amp;quot;false&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;string-literals&#34;&gt;String literals&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;strLit = ( &amp;quot;&#39;&amp;quot; { charValue } &amp;quot;&#39;&amp;quot; ) | ( &#39;&amp;quot;&#39; { charValue } &#39;&amp;quot;&#39; )
charValue = hexEscape | octEscape | charEscape | /[^\0\n\\]/
hexEscape = &#39;\&#39; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hexDigit hexDigit
octEscape = &#39;\&#39; octalDigit octalDigit octalDigit
charEscape = &#39;\&#39; ( &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; | &amp;quot;f&amp;quot; | &amp;quot;n&amp;quot; | &amp;quot;r&amp;quot; | &amp;quot;t&amp;quot; | &amp;quot;v&amp;quot; | &#39;\&#39; | &amp;quot;&#39;&amp;quot; | &#39;&amp;quot;&#39; )
quote = &amp;quot;&#39;&amp;quot; | &#39;&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;emptystatement&#34;&gt;EmptyStatement&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;emptyStatement = &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;constant&#34;&gt;Constant&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;constant = fullIdent | ( [ &amp;quot;-&amp;quot; | &amp;quot;+&amp;quot; ] intLit ) | ( [ &amp;quot;-&amp;quot; | &amp;quot;+&amp;quot; ] floatLit ) |
                strLit | boolLit 

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;

&lt;p&gt;The syntax statement is used to define the protobuf version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;syntax&amp;quot; &amp;quot;=&amp;quot; quote &amp;quot;proto2&amp;quot; quote &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;import-statement&#34;&gt;Import Statement&lt;/h4&gt;

&lt;p&gt;The import statement is used to import another .proto&amp;rsquo;s definitions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import = &amp;quot;import&amp;quot; [ &amp;quot;weak&amp;quot; | &amp;quot;public&amp;quot; ] strLit &amp;quot;;&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import public &amp;quot;other.proto&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;package&#34;&gt;Package&lt;/h4&gt;

&lt;p&gt;The package specifier can be used to prevent name clashes between protocol message types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package = &amp;quot;package&amp;quot; fullIdent &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package foo.bar;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;option&#34;&gt;Option&lt;/h4&gt;

&lt;p&gt;Options can be used in proto files, messages, enums and services. An option can be a protobuf defined option or a custom option. For more information, see Options in the language guide.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;option = &amp;quot;option&amp;quot; optionName  &amp;quot;=&amp;quot; constant &amp;quot;;&amp;quot;
optionName = ( ident | &amp;quot;(&amp;quot; fullIdent &amp;quot;)&amp;quot; ) { &amp;quot;.&amp;quot; ident }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;option java_package = &amp;quot;com.example.foo&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fields&#34;&gt;Fields&lt;/h4&gt;

&lt;p&gt;Fields are the basic elements of a protocol buffer message. Fields can be normal fields, group fields, oneof fields, or map fields. A field has a label, type and field number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;label = &amp;quot;required&amp;quot; | &amp;quot;optional&amp;quot; | &amp;quot;repeated&amp;quot;
type = &amp;quot;double&amp;quot; | &amp;quot;float&amp;quot; | &amp;quot;int32&amp;quot; | &amp;quot;int64&amp;quot; | &amp;quot;uint32&amp;quot; | &amp;quot;uint64&amp;quot;
      | &amp;quot;sint32&amp;quot; | &amp;quot;sint64&amp;quot; | &amp;quot;fixed32&amp;quot; | &amp;quot;fixed64&amp;quot; | &amp;quot;sfixed32&amp;quot; | &amp;quot;sfixed64&amp;quot;
      | &amp;quot;bool&amp;quot; | &amp;quot;string&amp;quot; | &amp;quot;bytes&amp;quot; | messageType | enumType
fieldNumber = intLit;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;normal-field&#34;&gt;Normal field&lt;/h4&gt;

&lt;p&gt;Each field has label, type, name and field number. It may have field options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field = label type fieldName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
fieldOptions = fieldOption { &amp;quot;,&amp;quot;  fieldOption }
fieldOption = optionName &amp;quot;=&amp;quot; constant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;optional foo.bar nested_message = 2;
repeated int32 samples = 4 [packed=true];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;group-field&#34;&gt;Group field&lt;/h4&gt;

&lt;p&gt;Note that this feature is deprecated and should not be used when creating new message types – use nested message types instead.&lt;/p&gt;

&lt;p&gt;Groups are one way to nest information in message definitions. The group name must begin with capital letter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group = label &amp;quot;group&amp;quot; groupName &amp;quot;=&amp;quot; fieldNumber messageBody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repeated group Result = 1 {
    required string url = 2;
    optional string title = 3;
    repeated string snippets = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oneof-and-oneof-field&#34;&gt;Oneof and oneof field&lt;/h4&gt;

&lt;p&gt;A oneof consists of oneof fields and a oneof name. Oneof fields do not have labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oneof = &amp;quot;oneof&amp;quot; oneofName &amp;quot;{&amp;quot; { oneofField | emptyStatement } &amp;quot;}&amp;quot;
oneofField = type fieldName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oneof foo {
    string name = 4;
    SubMessage sub_message = 9;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;map-field&#34;&gt;Map field&lt;/h4&gt;

&lt;p&gt;A map field has a key type, value type, name, and field number. The key type can be any integral or string type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mapField = &amp;quot;map&amp;quot; &amp;quot;&amp;lt;&amp;quot; keyType &amp;quot;,&amp;quot; type &amp;quot;&amp;gt;&amp;quot; mapName &amp;quot;=&amp;quot; fieldNumber [ &amp;quot;[&amp;quot; fieldOptions &amp;quot;]&amp;quot; ] &amp;quot;;&amp;quot;
keyType = &amp;quot;int32&amp;quot; | &amp;quot;int64&amp;quot; | &amp;quot;uint32&amp;quot; | &amp;quot;uint64&amp;quot; | &amp;quot;sint32&amp;quot; | &amp;quot;sint64&amp;quot; |
          &amp;quot;fixed32&amp;quot; | &amp;quot;fixed64&amp;quot; | &amp;quot;sfixed32&amp;quot; | &amp;quot;sfixed64&amp;quot; | &amp;quot;bool&amp;quot; | &amp;quot;string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map&amp;lt;string, Project&amp;gt; projects = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;extensions-and-reserved&#34;&gt;Extensions and Reserved&lt;/h3&gt;

&lt;p&gt;Extensions and reserved are message elements that declare a range of field numbers or field names.&lt;/p&gt;

&lt;h4 id=&#34;extensions&#34;&gt;Extensions&lt;/h4&gt;

&lt;p&gt;Extensions declare that a range of field numbers in a message are available for third-party extensions. Other people can declare new fields for your message type with those numeric tags in their own .proto files without having to edit the original file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions = &amp;quot;extensions&amp;quot; ranges &amp;quot;;&amp;quot;
ranges = range { &amp;quot;,&amp;quot; range }
range =  intLit [ &amp;quot;to&amp;quot; ( intLit | &amp;quot;max&amp;quot; ) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions 100 to 199;
extensions 4, 20 to max;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;reserved&#34;&gt;Reserved&lt;/h4&gt;

&lt;p&gt;Reserved declares a range of field numbers or field names in a message that can not be used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reserved = &amp;quot;reserved&amp;quot; ( ranges | fieldNames ) &amp;quot;;&amp;quot;
fieldNames = fieldName { &amp;quot;,&amp;quot; fieldName }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reserved 2, 15, 9 to 11;
reserved &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-level-definitions&#34;&gt;Top Level definitions&lt;/h3&gt;

&lt;h4 id=&#34;enum-definition&#34;&gt;Enum definition&lt;/h4&gt;

&lt;p&gt;The enum definition consists of a name and an enum body. The enum body can have options and enum fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum = &amp;quot;enum&amp;quot; enumName enumBody
enumBody = &amp;quot;{&amp;quot; { option | enumField | emptyStatement } &amp;quot;}&amp;quot;
enumField = ident &amp;quot;=&amp;quot; intLit [ &amp;quot;[&amp;quot; enumValueOption { &amp;quot;,&amp;quot;  enumValueOption } &amp;quot;]&amp;quot; ]&amp;quot;;&amp;quot;
enumValueOption = optionName &amp;quot;=&amp;quot; constant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 2 [(custom_option) = &amp;quot;hello world&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;message-definition&#34;&gt;Message definition&lt;/h4&gt;

&lt;p&gt;A message consists of a message name and a message body. The message body can have fields, nested enum definitions, nested message definitions, extend statements, extensions, groups, options, oneofs, map fields, and reserved statements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message = &amp;quot;message&amp;quot; messageName messageBody
messageBody = &amp;quot;{&amp;quot; { field | enum | message | extend | extensions | group |
option | oneof | mapField | reserved | emptyStatement } &amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Outer {
  option (my_option).a = true;
  message Inner {   // Level 2
    required int64 ival = 1;
  }
  map&amp;lt;int32, string&amp;gt; my_map = 2;
  extensions 20 to 30;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;extend&#34;&gt;Extend&lt;/h4&gt;

&lt;p&gt;If a message in the same or imported .proto file has reserved a range for extensions, the message can be extended.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extend = &amp;quot;extend&amp;quot; messageType &amp;quot;{&amp;quot; {field | group | emptyStatement} &amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extend Foo {
  optional int32 bar = 126;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;service-definition&#34;&gt;Service definition&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;service = &amp;quot;service&amp;quot; serviceName &amp;quot;{&amp;quot; { option | rpc | stream | emptyStatement } &amp;quot;}&amp;quot;
rpc = &amp;quot;rpc&amp;quot; rpcName &amp;quot;(&amp;quot; [ &amp;quot;stream&amp;quot; ] messageType &amp;quot;)&amp;quot; &amp;quot;returns&amp;quot; &amp;quot;(&amp;quot; [ &amp;quot;stream&amp;quot; ]
messageType &amp;quot;)&amp;quot; (( &amp;quot;{&amp;quot; { option | emptyStatement } &amp;quot;}&amp;quot; ) | &amp;quot;;&amp;quot; )
stream = &amp;quot;stream&amp;quot; streamName &amp;quot;(&amp;quot; messageType &amp;quot;,&amp;quot; messageType &amp;quot;)&amp;quot; (( &amp;quot;{&amp;quot;
{ option | emptyStatement } &amp;quot;}&amp;quot;) | &amp;quot;;&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service SearchService {
  rpc Search (SearchRequest) returns (SearchResponse);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;proto-file&#34;&gt;Proto file&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;proto = syntax { import | package | option | topLevelDef | emptyStatement }
topLevelDef = message | enum | extend | service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example .proto file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto2&amp;quot;;
import public &amp;quot;other.proto&amp;quot;;
option java_package = &amp;quot;com.example.foo&amp;quot;;
enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 2 [(custom_option) = &amp;quot;hello world&amp;quot;];
}
message outer {
  option (my_option).a = true;
  message inner {   // Level 2
    required int64 ival = 1;
  }
  repeated inner inner_message = 2;
  optional EnumAllowingAlias enum_field = 3;
  map&amp;lt;int32, string&amp;gt; my_map = 4;
  extensions 20 to 30;
}
message foo {
  optional group GroupMessage {
    optional a = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/proto2-spec&#34; title=&#34;proto2-spec&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cap&#39;n Proto Schema Language</title>
      <link>http://alimy.me/post/dev_201909211159/</link>
      <pubDate>Sat, 21 Sep 2019 11:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211159/</guid>
      <description>&lt;h2 id=&#34;schema-language&#34;&gt;Schema Language&lt;/h2&gt;

&lt;p&gt;Like Protocol Buffers and Thrift (but unlike JSON or MessagePack), Cap’n Proto messages are strongly-typed and not self-describing. You must define your message structure in a special language, then invoke the Cap’n Proto compiler (&lt;code&gt;capnp compile&lt;/code&gt;) to generate source code to manipulate that message type in your desired language.&lt;/p&gt;

&lt;h4 id=&#34;for-example&#34;&gt;For example:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@0xdbb9ad1f14bf0b36;  # unique file ID, generated by `capnp id`

struct Person {
  name @0 :Text;
  birthdate @3 :Date;

  email @1 :Text;
  phones @2 :List(PhoneNumber);

  struct PhoneNumber {
    number @0 :Text;
    type @1 :Type;

    enum Type {
      mobile @0;
      home @1;
      work @2;
    }
  }
}

struct Date {
  year @0 :Int16;
  month @1 :UInt8;
  day @2 :UInt8;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Types come after names. The name is by far the most important thing to see, especially when quickly skimming, so we put it up front where it is most visible. Sorry, C got it wrong.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;@N&lt;/code&gt; annotations show how the protocol evolved over time, so that the system can make sure to maintain compatibility with older versions. Fields (and enumerants, and interface methods) must be numbered consecutively starting from zero in the order in which they were added. In this example, it looks like the &lt;code&gt;birthdate&lt;/code&gt; field was added to the &lt;code&gt;Person&lt;/code&gt; structure recently – its number is higher than the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;phones&lt;/code&gt; fields. Unlike Protobufs, you cannot skip numbers when defining fields – but there was never any reason to do so anyway.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-reference&#34;&gt;Language Reference&lt;/h2&gt;

&lt;h3 id=&#34;comments&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;Comments are indicated by hash signs and extend to the end of the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This is a comment.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comments meant as documentation should appear after the declaration, either on the same line, or on a subsequent line. Doc comments for aggregate definitions should appear on the line after the opening brace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Date {
  # A standard Gregorian calendar date.

  year @0 :Int16;
  # The year.  Must include the century.
  # Negative value indicates BC.

  month @1 :UInt8;   # Month number, 1-12.
  day @2 :UInt8;     # Day number, 1-30.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Placing the comment after the declaration rather than before makes the code more readable, especially when doc comments grow long. You almost always need to see the declaration before you can start reading the comment.&lt;/p&gt;

&lt;h3 id=&#34;built-in-types&#34;&gt;Built-in Types&lt;/h3&gt;

&lt;p&gt;The following types are automatically defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Void:&lt;/strong&gt; &lt;code&gt;Void&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean:&lt;/strong&gt; &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integers:&lt;/strong&gt; &lt;code&gt;Int8&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unsigned integers:&lt;/strong&gt; &lt;code&gt;UInt8&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;,&lt;code&gt;UInt64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floating-point:&lt;/strong&gt; &lt;code&gt;Float32&lt;/code&gt;, &lt;code&gt;Float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blobs:&lt;/strong&gt; &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lists:&lt;/strong&gt; &lt;code&gt;List(T)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Void&lt;/code&gt; type has exactly one possible value, and thus can be encoded in zero bits. It is rarely used, but can be useful as a union member.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text&lt;/code&gt; is always UTF-8 encoded and NUL-terminated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data&lt;/code&gt; is a completely arbitrary sequence of bytes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; is a parameterized type, where the parameter is the element type. For example, &lt;code&gt;List(Int32)&lt;/code&gt;, &lt;code&gt;List(Person)&lt;/code&gt;, and &lt;code&gt;List(List(Text))&lt;/code&gt; are all valid.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;structs&#34;&gt;Structs&lt;/h3&gt;

&lt;p&gt;A struct has a set of named, typed fields, numbered consecutively starting from zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Person {
  name @0 :Text;
  email @1 :Text;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fields can have default values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo @0 :Int32 = 123;
bar @1 :Text = &amp;quot;blah&amp;quot;;
baz @2 :List(Bool) = [ true, false, false, true ];
qux @3 :Person = (name = &amp;quot;Bob&amp;quot;, email = &amp;quot;bob@example.com&amp;quot;);
corge @4 :Void = void;
grault @5 :Data = 0x&amp;quot;a1 40 33&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unions&#34;&gt;Unions&lt;/h3&gt;

&lt;p&gt;A union is two or more fields of a struct which are stored in the same location. Only one of these fields can be set at a time, and a separate tag is maintained to track which one is currently set. Unlike in C, unions are not types, they are simply properties of fields, therefore union declarations do not look like types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Person {
  # ...

  employment :union {
    # We assume that a person is only one of these.
    unemployed @4 :Void;
    employer @5 :Company;
    school @6 :School;
    selfEmployed @7 :Void;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, unions can be unnamed. Each struct can contain no more than one unnamed union. Use unnamed unions in cases where you would struggle to think of an appropriate name for the union, because the union represents the main body of the struct.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Shape {
  area @0 :Float64;

  union {
    circle @1 :Float64;      # radius
    square @2 :Float64;      # width
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unions members are numbered in the same number space as fields of the containing struct. Remember that the purpose of the numbers is to indicate the evolution order of the struct. The system needs to know when the union fields were declared relative to the non-union fields.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Notice that we used the “useless” &lt;code&gt;Void&lt;/code&gt; type here. We don’t have any extra information to store for the &lt;code&gt;unemployed&lt;/code&gt; or &lt;code&gt;selfEmployed&lt;/code&gt; cases, but we still want the union to distinguish these states from others.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By default, when a struct is initialized, the lowest-numbered field in the union is “set”. If you do not want any field set by default, simply declare a field called “unset” and make it the lowest-numbered field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can move an existing field into a new union without breaking compatibility with existing data, as long as all of the other fields in the union are new. Since the existing field is necessarily the lowest-numbered in the union, it will be the union’s default field.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Wait, why aren’t unions first-class types?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requiring unions to be declared inside a struct, rather than living as free-standing types, has some important advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If unions were first-class types, then union members would clearly have to be numbered separately from the containing type’s fields. This means that the compiler, when deciding how to position the union in its containing struct, would have to conservatively assume that any kind of new field might be added to the union in the future. To support this, all unions would have to be allocated as separate objects embedded by pointer, wasting space.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A free-standing union would be a liability for protocol evolution, because no additional data can be attached to it later on. Consider, for example, a type which represents a parser token. This type is naturally a union: it may be a keyword, identifier, numeric literal, quoted string, etc. So the author defines it as a union, and the type is used widely. Later on, the developer wants to attach information to the token indicating its line and column number in the source file. Unfortunately, this is impossible without updating all users of the type, because the new information ought to apply to all token instances, not just specific members of the union. On the other hand, if unions must be embedded within structs, it is always possible to add new fields to the struct later on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When evolving a protocol it is common to discover that some existing field really should have been enclosed in a union, because new fields being added are mutually exclusive with it. With Cap’n Proto’s unions, it is actually possible to “retroactively unionize” such a field without changing its layout. This allows you to continue being able to read old data without wasting space when writing new data. This is only possible when unions are declared within their containing struct.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cap’n Proto’s unconventional approach to unions provides these advantages without any real down side: where you would conventionally define a free-standing union type, in Cap’n Proto you may simply define a struct type that contains only that union (probably unnamed), and you have achieved the same effect. Thus, aside from being slightly unintuitive, it is strictly superior.&lt;/p&gt;

&lt;h3 id=&#34;groups&#34;&gt;Groups&lt;/h3&gt;

&lt;p&gt;A group is a set of fields that are encapsulated in their own scope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Person {
  # ...

  address :group {
    # Note:  This is a terrible way to use groups, and meant
    #        only to demonstrate the syntax.
    houseNumber @8 :UInt32;
    street @9 :Text;
    city @10 :Text;
    country @11 :Text;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interface-wise, the above group behaves as if you had defined a nested struct called &lt;code&gt;Address&lt;/code&gt; and then a field &lt;code&gt;address :Address&lt;/code&gt;. However, a group is not a separate object from its containing struct: the fields are numbered in the same space as the containing struct’s fields, and are laid out exactly the same as if they hadn’t been grouped at all. Essentially, a group is just a namespace.&lt;/p&gt;

&lt;p&gt;Groups on their own (as in the above example) are useless, almost as much so as the &lt;code&gt;Void&lt;/code&gt; type. They become interesting when used together with unions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Shape {
  area @0 :Float64;

  union {
    circle :group {
      radius @1 :Float64;
    }
    rectangle :group {
      width @2 :Float64;
      height @3 :Float64;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two main reason to use groups with unions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They are often more self-documenting. Notice that &lt;code&gt;radius&lt;/code&gt; is now a member of &lt;code&gt;circle&lt;/code&gt;, so we don’t need a comment to explain that the value of circle is its radius.&lt;/li&gt;
&lt;li&gt;You can add additional members later on, without breaking compatibility. Notice how we upgraded &lt;code&gt;square&lt;/code&gt; to &lt;code&gt;rectangle&lt;/code&gt; above, adding a &lt;code&gt;height&lt;/code&gt; field. This definition is actually wire-compatible with the previous version of the &lt;code&gt;Shape&lt;/code&gt; example from the “union” section (aside from the fact that &lt;code&gt;height&lt;/code&gt; will always be zero when reading old data – hey, it’s not a perfect example). In real-world use, it is common to realize after the fact that you need to add some information to a struct that only applies when one particular union field is set. Without the ability to upgrade to a group, you would have to define the new field separately, and have it waste space when not relevant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that a named union is actually exactly equivalent to a named group containing an unnamed union.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, weren’t groups considered a misfeature in Protobufs? Why did you do this again?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are useful in unions, which Protobufs did not have. Meanwhile, you cannot have a “repeated group” in Cap’n Proto, which was the case that got into the most trouble with Protobufs.&lt;/p&gt;

&lt;h3 id=&#34;dynamically-typed-fields&#34;&gt;Dynamically-typed Fields&lt;/h3&gt;

&lt;p&gt;A struct may have a field with type AnyPointer. This field’s value can be of any pointer type – i.e. any struct, interface, list, or blob. This is essentially like a void* in C.&lt;/p&gt;

&lt;p&gt;See also &lt;strong&gt;generics&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;enums&#34;&gt;Enums&lt;/h3&gt;

&lt;p&gt;An enum is a type with a small finite set of symbolic values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Rfc3092Variable {
  foo @0;
  bar @1;
  baz @2;
  qux @3;
  # ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like fields, enumerants must be numbered sequentially starting from zero. In languages where enums have numeric values, these numbers will be used, but in general Cap’n Proto enums should not be considered numeric.&lt;/p&gt;

&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;

&lt;p&gt;An interface has a collection of methods, each of which takes some parameters and return some results. Like struct fields, methods are numbered. Interfaces support inheritance, including multiple inheritance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface Node {
  isDirectory @0 () -&amp;gt; (result :Bool);
}

interface Directory extends(Node) {
  list @0 () -&amp;gt; (list :List(Entry));
  struct Entry {
    name @0 :Text;
    node @1 :Node;
  }

  create @1 (name :Text) -&amp;gt; (file :File);
  mkdir @2 (name :Text) -&amp;gt; (directory :Directory);
  open @3 (name :Text) -&amp;gt; (node :Node);
  delete @4 (name :Text);
  link @5 (name :Text, node :Node);
}

interface File extends(Node) {
  size @0 () -&amp;gt; (size :UInt64);
  read @1 (startAt :UInt64 = 0, amount :UInt64 = 0xffffffffffffffff)
       -&amp;gt; (data :Data);
  # Default params = read entire file.

  write @2 (startAt :UInt64, data :Data);
  truncate @3 (size :UInt64);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice something interesting here: &lt;code&gt;Node&lt;/code&gt;, &lt;code&gt;Directory&lt;/code&gt;, and &lt;code&gt;File&lt;/code&gt; are interfaces, but several methods take these types as parameters or return them as results. &lt;code&gt;Directory.Entry&lt;/code&gt; is a struct, but it contains a Node, which is an interface. Structs (and primitive types) are passed over RPC by value, but interfaces are passed by reference. So when &lt;code&gt;Directory.list&lt;/code&gt; is called remotely, the content of a List(Entry) (including the text of each name) is transmitted back, but for the node field, only a reference to some remote Node object is sent.&lt;/p&gt;

&lt;p&gt;When an address of an object is transmitted, the RPC system automatically manages making sure that the recipient gets permission to call the addressed object – because if the recipient wasn’t meant to have access, the sender shouldn’t have sent the reference in the first place. This makes it very easy to develop secure protocols with Cap’n Proto – you almost don’t need to think about access control at all. This feature is what makes Cap’n Proto a “capability-based” RPC system – a reference to an object inherently represents a “capability” to access it.&lt;/p&gt;

&lt;h3 id=&#34;generic-types&#34;&gt;Generic Types&lt;/h3&gt;

&lt;p&gt;A struct or interface type may be parameterized, making it “generic”. For example, this is useful for defining type-safe containers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Map(Key, Value) {
  entries @0 :List(Entry);
  struct Entry {
    key @0 :Key;
    value @1 :Value;
  }
}

struct People {
  byName @0 :Map(Text, Person);
  # Maps names to Person instances.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cap’n Proto generics work very similarly to Java generics or C++ templates. Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Only pointer types (structs, lists, blobs, and interfaces) can be used as generic parameters, much like in Java. This is a pragmatic limitation: allowing parameters to have non-pointer types would mean that different parameterizations of a struct could have completely different layouts, which would excessively complicate the Cap’n Proto implementation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A type declaration nested inside a generic type may use the type parameters of the outer type, as you can see in the example above. This differs from Java, but matches C++. If you want to refer to a nested type from outside the outer type, you must specify the parameters on the outer type, not the inner. For example, &lt;code&gt;Map(Text, Person).Entry&lt;/code&gt; is a valid type; &lt;code&gt;Map.Entry(Text, Person)&lt;/code&gt; is NOT valid. (Of course, an inner type may declare additional generic parameters.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you refer to a generic type but omit its parameters (e.g. declare a field of type &lt;code&gt;Map&lt;/code&gt; rather than &lt;code&gt;Map(T, U)&lt;/code&gt;), it is as if you specified &lt;code&gt;AnyPointer&lt;/code&gt; for each parameter. Note that such a type is wire-compatible with any specific parameterization, so long as you interpret the &lt;code&gt;AnyPointers&lt;/code&gt; as the correct type at runtime.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Relatedly, it is safe to cast an generic interface of a specific parameterization to a generic interface where all parameters are &lt;code&gt;AnyPointer&lt;/code&gt; and vice versa, as long as the &lt;code&gt;AnyPointers&lt;/code&gt; are treated as the correct type at runtime. This means that e.g. you can implement a server in a generic way that is correct for all parameterizations but call it from clients using a specific parameterization.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The encoding of a generic type is exactly the same as the encoding of a type produced by substituting the type parameters manually. For example, &lt;code&gt;Map(Text, Person)&lt;/code&gt; is encoded exactly the same as:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  struct PersonMap {
    # Encoded the same as Map(Text, Person).
    entries @0 :List(Entry);
    struct Entry {
      key @0 :Text;
      value @1 :Person;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, it is possible to upgrade non-generic types to generic types while retaining backwards-compatibility.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Similarly, a generic interface’s protocol is exactly the same as the interface obtained by manually substituting the generic parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;generic-methods&#34;&gt;Generic Methods&lt;/h3&gt;

&lt;p&gt;Interface methods may also have “implicit” generic parameters that apply to a particular method call. This commonly applies to “factory” methods. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface Assignable(T) {
  # A generic interface, with non-generic methods.
  get @0 () -&amp;gt; (value :T);
  set @1 (value :T) -&amp;gt; ();
}

interface AssignableFactory {
  newAssignable @0 [T] (initialValue :T)
      -&amp;gt; (assignable :Assignable(T));
  # A generic method.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the method &lt;code&gt;newAssignable()&lt;/code&gt; is generic. The return type of the method depends on the input type.&lt;/p&gt;

&lt;p&gt;Ideally, calls to a generic method should not have to explicitly specify the method’s type parameters, because they should be inferred from the types of the method’s regular parameters. However, this may not always be possible; it depends on the programming language and API details.&lt;/p&gt;

&lt;p&gt;Note that if a method’s generic parameter is used only in its returns, not its parameters, then this implies that the returned value is appropriate for any parameterization. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newUnsetAssignable @1 [T] () -&amp;gt; (assignable :Assignable(T));
# Create a new assignable. `get()` on the returned object will
# throw an exception until `set()` has been called at least once.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of the way this method is designed, the returned &lt;code&gt;Assignable&lt;/code&gt; is initially valid for any &lt;code&gt;T&lt;/code&gt;. Effectively, it doesn’t take on a type until the first time &lt;code&gt;set()&lt;/code&gt; is called, and then T retroactively becomes the type of value passed to &lt;code&gt;set()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In contrast, if it’s the case that the returned type is unknown, then you should NOT declare it as generic. Instead, use &lt;code&gt;AnyPointer&lt;/code&gt;, or omit a type’s parameters (since they default to &lt;code&gt;AnyPointer&lt;/code&gt;). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getNamedAssignable @2 (name :Text) -&amp;gt; (assignable :Assignable);
# Get the `Assignable` with the given name. It is the
# responsibility of the caller to keep track of the type of each
# named `Assignable` and cast the returned object appropriately.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we omitted the parameters to &lt;code&gt;Assignable&lt;/code&gt; in the return type, because the returned object has a specific type parameterization but it is not locally knowable.&lt;/p&gt;

&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;

&lt;p&gt;You can define constants in Cap’n Proto. These don’t affect what is sent on the wire, but they will be included in the generated code, and can be evaluated using the &lt;code&gt;capnp&lt;/code&gt; tool.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const pi :Float32 = 3.14159;
const bob :Person = (name = &amp;quot;Bob&amp;quot;, email = &amp;quot;bob@example.com&amp;quot;);
const secret :Data = 0x&amp;quot;9f98739c2b53835e 6720a00907abd42f&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you may refer to a constant inside another value (e.g. another constant, or a default value of a field).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const foo :Int32 = 123;
const bar :Text = &amp;quot;Hello&amp;quot;;
const baz :SomeStruct = (id = .foo, message = .bar);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that when substituting a constant into another value, the constant’s name must be qualified with its scope. E.g. if a constant &lt;code&gt;qux&lt;/code&gt; is declared nested in a type &lt;code&gt;Corge&lt;/code&gt;, it would need to be referenced as &lt;code&gt;Corge.qux&lt;/code&gt; rather than just &lt;code&gt;qux&lt;/code&gt;, even when used within the &lt;code&gt;Corge&lt;/code&gt; scope. Constants declared at the top-level scope are prefixed just with &lt;code&gt;.&lt;/code&gt;. This rule helps to make it clear that the name refers to a user-defined constant, rather than a literal value (like &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;inf&lt;/code&gt;) or an enum value.&lt;/p&gt;

&lt;h3 id=&#34;nesting-scope-and-aliases&#34;&gt;Nesting, Scope, and Aliases&lt;/h3&gt;

&lt;p&gt;You can nest constant, alias, and type definitions inside structs and interfaces (but not enums). This has no effect on any definition involved except to define the scope of its name. So in Java terms, inner classes are always “static”. To name a nested type from another scope, separate the path with  &lt;code&gt;.&lt;/code&gt;s.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Foo {
  struct Bar {
    #...
  }
  bar @0 :Bar;
}

struct Baz {
  bar @0 :Foo.Bar;
}
If typing long scopes becomes cumbersome, you can use `using` to declare an alias.

struct Qux {
  using Foo.Bar;
  bar @0 :Bar;
}

struct Corge {
  using T = Foo.Bar;
  bar @0 :T;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;imports&#34;&gt;Imports&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;import&lt;/code&gt; expression names the scope of some other file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Foo {
  baz @0 :import &amp;quot;bar.capnp&amp;quot;.Baz;
  # Use type &amp;quot;Baz&amp;quot; defined in bar.capnp.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, typically it’s more readable to define an alias:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bar = import &amp;quot;bar.capnp&amp;quot;;

struct Foo {
  baz @0 :Bar.Baz;
  # Use type &amp;quot;Baz&amp;quot; defined in bar.capnp.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or even:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using import &amp;quot;bar.capnp&amp;quot;.Baz;

struct Foo {
  baz @0 :Baz;
  # Use type &amp;quot;Baz&amp;quot; defined in bar.capnp.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above imports specify relative paths. If the path begins with a &lt;code&gt;/&lt;/code&gt;, it is absolute – in this case, the &lt;code&gt;capnp&lt;/code&gt; tool searches for the file in each of the search path directories specified with &lt;code&gt;-I&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;annotations&#34;&gt;Annotations&lt;/h3&gt;

&lt;p&gt;Sometimes you want to attach extra information to parts of your protocol that isn’t part of the Cap’n Proto language. This information might control details of a particular code generator, or you might even read it at run time to assist in some kind of dynamic message processing. For example, you might create a field annotation which means “hide from the public”, and when you send a message to an external user, you might invoke some code first that iterates over your message and removes all of these hidden fields.&lt;/p&gt;

&lt;p&gt;You may declare annotations and use them like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;annotation foo(struct, enum) :Text;
# Declare an annotation &#39;foo&#39; which applies to struct and enum types.

struct MyType $foo(&amp;quot;bar&amp;quot;) {
  # Apply &#39;foo&#39; to to MyType.

  # ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The possible targets for an annotation are: &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;enumerant&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;parameter&lt;/code&gt;, &lt;code&gt;annotation&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;. You may also specify &lt;code&gt;*&lt;/code&gt; to cover them all.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;annotation baz(*) :Int32;
# &#39;baz&#39; can annotate anything!

$baz(1);  # Annotate the file.

struct MyStruct $baz(2) {
  myField @0 :Text = &amp;quot;default&amp;quot; $baz(3);
  myUnion :union $baz(4) {
    # ...
  }
}

enum MyEnum $baz(5) {
  myEnumerant @0 $baz(6);
}

interface MyInterface $baz(7) {
  myMethod @0 (myParam :Text $baz(9)) -&amp;gt; () $baz(8);
}

annotation myAnnotation(struct) :Int32 $baz(10);
const myConst :Int32 = 123 $baz(11);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Void&lt;/code&gt; annotations can omit the value. Struct-typed annotations are also allowed. Tip: If you want an annotation to have a default value, declare it as a struct with a single field with a default value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;annotation qux(struct, field) :Void;

struct MyStruct $qux {
  string @0 :Text $qux;
  number @1 :Int32 $qux;
}

annotation corge(file) :MyStruct;

$corge(string = &amp;quot;hello&amp;quot;, number = 123);

struct Grault {
  value @0 :Int32 = 123;
}

annotation grault(file) :Grault;

$grault();  # value defaults to 123
$grault(value = 456);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unique-ids&#34;&gt;Unique IDs&lt;/h3&gt;

&lt;p&gt;A Cap’n Proto file must have a unique 64-bit ID, and each type and annotation defined therein may also have an ID. Use &lt;code&gt;capnp id&lt;/code&gt; to generate a new ID randomly. ID specifications begin with &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@0xdbb9ad1f14bf0b36;
# file ID

struct Foo @0x8db435604d0d3723 {
  # ...
}

enum Bar @0xb400f69b5334aab3 {
  # ...
}

interface Baz @0xf7141baba3c12691 {
  # ...
}

annotation qux @0xf8a1bedf44c89f00 (field) :Text;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit the ID for a type or annotation, one will be assigned automatically. This default ID is derived by taking the first 8 bytes of the MD5 hash of the parent scope’s ID concatenated with the declaration’s name (where the “parent scope” is the file for top-level declarations, or the outer type for nested declarations). You can see the automatically-generated IDs by “compiling” your file with the &lt;code&gt;-ocapnp&lt;/code&gt; flag, which echos the schema back to the terminal annotated with extra information, e.g. &lt;code&gt;capnp compile -ocapnp myschema.capnp&lt;/code&gt;. In general, you would only specify an explicit ID for a declaration if that declaration has been renamed or moved and you want the ID to stay the same for backwards-compatibility.&lt;/p&gt;

&lt;p&gt;IDs exist to provide a relatively short yet unambiguous way to refer to a type or annotation from another context. They may be used for representing schemas, for tagging dynamically-typed fields, etc. Most languages prefer instead to define a symbolic global namespace e.g. full of “packages”, but this would have some important disadvantages in the context of Cap’n Proto:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programmers often feel the need to change symbolic names and organization in order to make their code cleaner, but the renamed code should still work with existing encoded data.&lt;/li&gt;
&lt;li&gt;It’s easy for symbolic names to collide, and these collisions could be hard to detect in a large distributed system with many different binaries using different versions of protocols.&lt;/li&gt;
&lt;li&gt;Fully-qualified type names may be large and waste space when transmitted on the wire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that IDs are 64-bit (actually, 63-bit, as the first bit is always 1). Random collisions are possible, but unlikely – there would have to be on the order of a billion types before this becomes a real concern. Collisions from misuse (e.g. copying an example without changing the ID) are much more likely.&lt;/p&gt;

&lt;h2 id=&#34;evolving-your-protocol&#34;&gt;Evolving Your Protocol&lt;/h2&gt;

&lt;p&gt;A protocol can be changed in the following ways without breaking backwards-compatibility, and without changing the &lt;strong&gt;canonical&lt;/strong&gt; encoding of a message:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;New types, constants, and aliases can be added anywhere, since they obviously don’t affect the encoding of any existing type.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;New fields, enumerants, and methods may be added to structs, enums, and interfaces, respectively, as long as each new member’s number is larger than all previous members. Similarly, new fields may be added to existing groups and unions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;New parameters may be added to a method. The new parameters must be added to the end of the parameter list and must have default values.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Members can be re-arranged in the source code, so long as their numbers stay the same.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Any symbolic name can be changed, as long as the type ID / ordinal numbers stay the same. Note that type declarations have an implicit ID generated based on their name and parent’s ID, but you can use capnp compile -ocapnp myschema.capnp to find out what that number is, and then declare it explicitly after your rename.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type definitions can be moved to different scopes, as long as the type ID is declared explicitly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A field can be moved into a group or a union, as long as the group/union and all other fields within it are new. In other words, a field can be replaced with a group or union containing an equivalent field and some new fields.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A non-generic type can be made generic, and new generic parameters may be added to an existing generic type. Other types used inside the body of the newly-generic type can be replaced with the new generic parameter so long as all existing users of the type are updated to bind that generic parameter to the type it replaced. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Map {
entries @0 :List(Entry);
struct Entry {
  key @0 :Text;
  value @1 :Text;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can change to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  struct Map(Key, Value) {
    entries @0 :List(Entry);
    struct Entry {
      key @0 :Key;
      value @1 :Value;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as all existing uses of &lt;code&gt;Map&lt;/code&gt; are replaced with &lt;code&gt;Map(Text, Text)&lt;/code&gt; (and any uses of &lt;code&gt;Map.Entry&lt;/code&gt; are replaced with &lt;code&gt;Map(Text, Text).Entry&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;(This rule applies analogously to generic methods.)&lt;/p&gt;

&lt;p&gt;The following changes are backwards-compatible but may change the canonical encoding of a message. Apps that rely on canonicalization (such as some cryptographic protocols) should avoid changes in this list, but most apps can safely use them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A field of type &lt;code&gt;List(T)&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a primitive type, blob, or list, may be changed to type &lt;code&gt;List(U)&lt;/code&gt;, where &lt;code&gt;U&lt;/code&gt; is a struct type whose &lt;code&gt;@0&lt;/code&gt; field is of type &lt;code&gt;T&lt;/code&gt;. This rule is useful when you realize too late that you need to attach some extra data to each element of your list. Without this rule, you would be stuck defining parallel lists, which are ugly and error-prone. As a special exception to this rule, &lt;code&gt;List(Bool)&lt;/code&gt; may &lt;strong&gt;not&lt;/strong&gt; be upgraded to a list of structs, because implementing this for bit lists has proven unreasonably expensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any change not listed above should be assumed &lt;strong&gt;NOT&lt;/strong&gt; to be safe. In particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot change a field, method, or enumerant’s number.&lt;/li&gt;
&lt;li&gt;You cannot change a field or method parameter’s type or default value.&lt;/li&gt;
&lt;li&gt;You cannot change a type’s ID.&lt;/li&gt;
&lt;li&gt;You cannot change the name of a type that doesn’t have an explicit ID, as the implicit ID is generated based in part on the type name.&lt;/li&gt;
&lt;li&gt;You cannot move a type to a different scope or file unless it has an explicit ID, as the implicit ID is based in part on the scope’s ID.&lt;/li&gt;
&lt;li&gt;You cannot move an existing field into or out of an existing union, nor can you form a new union containing more than one existing field.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, these rules only apply to the Cap’n Proto native encoding. It is sometimes useful to transcode Cap’n Proto types to other formats, like JSON, which may have different rules (e.g., field names cannot change in JSON).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://capnproto.org/language.html&#34; title=&#34;cap&#39;n proto schema language&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tus Resumable Upload Protocol</title>
      <link>http://alimy.me/post/dev_201904141055/</link>
      <pubDate>Sun, 14 Apr 2019 10:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201904141055/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt; 1.0.0 (&lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;)&lt;br&gt;
&lt;strong&gt;Date:&lt;/strong&gt; 2016-03-25&lt;br&gt;
&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/felixge&#34;&gt;Felix Geisendörfer&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/kvz&#34;&gt;Kevin van
Zonneveld&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/tim_kos&#34;&gt;Tim Koschützki&lt;/a&gt;,
&lt;a href=&#34;https://github.com/vayam&#34;&gt;Naren Venkataraman&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Acconut_&#34;&gt;Marius
Kleidl&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Collaborators&lt;/strong&gt;:
&lt;a href=&#34;https://github.com/biasedbit&#34;&gt;Bruno de Carvalho&lt;/a&gt;,
&lt;a href=&#34;https://github.com/sandfox&#34;&gt;James Butler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/cybic&#34;&gt;Øystein Steimler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/srijs&#34;&gt;Sam Rijs&lt;/a&gt;,
&lt;a href=&#34;https://github.com/khangtoh&#34;&gt;Khang Toh&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Amodio&#34;&gt;Jacques Boscq&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jerefrer&#34;&gt;Jérémy FRERE&lt;/a&gt;,
&lt;a href=&#34;https://github.com/hintjens&#34;&gt;Pieter Hintjens&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ehd&#34;&gt;Stephan Seidt&lt;/a&gt;,
&lt;a href=&#34;https://github.com/aranw&#34;&gt;Aran Wilkinson&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Baughn&#34;&gt;Svein Ove Aas&lt;/a&gt;,
&lt;a href=&#34;https://github.com/noptic&#34;&gt;Oliver Anan&lt;/a&gt;,
&lt;a href=&#34;https://github.com/schmerg&#34;&gt;Tim&lt;/a&gt;,
&lt;a href=&#34;https://github.com/j4james&#34;&gt;j4james&lt;/a&gt;,
&lt;a href=&#34;https://github.com/reschke&#34;&gt;Julian Reschke&lt;/a&gt;,
&lt;a href=&#34;https://github.com/evert&#34;&gt;Evert Pot&lt;/a&gt;,
&lt;a href=&#34;https://github.com/homeworkprod&#34;&gt;Jochen Kupperschmidt&lt;/a&gt;,
&lt;a href=&#34;https://github.com/andrewfenn&#34;&gt;Andrew Fenn&lt;/a&gt;,
&lt;a href=&#34;https://github.com/kevinswiber&#34;&gt;Kevin Swiber&lt;/a&gt;,
&lt;a href=&#34;https://github.com/0x20h&#34;&gt;Jan Kohlhof&lt;/a&gt;,
&lt;a href=&#34;https://github.com/radiospiel&#34;&gt;eno&lt;/a&gt;,
&lt;a href=&#34;https://github.com/luk-&#34;&gt;Luke Arduini&lt;/a&gt;,
&lt;a href=&#34;https://github.com/sheeep&#34;&gt;Jim Schmid&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jf&#34;&gt;Jeffrey &amp;lsquo;jf&amp;rsquo; Lim&lt;/a&gt;,
&lt;a href=&#34;https://github.com/timemachine3030&#34;&gt;Daniel Lopretto&lt;/a&gt;,
&lt;a href=&#34;https://github.com/MarkMurphy&#34;&gt;Mark Murphy&lt;/a&gt;,
&lt;a href=&#34;https://github.com/pmdarrow&#34;&gt;Peter Darrow&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Gargaj&#34;&gt;Gargaj&lt;/a&gt;,
&lt;a href=&#34;https://github.com/qsorix&#34;&gt;Tomasz Rydzyński&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tino&#34;&gt;Tino de Bruijn&lt;/a&gt;,
&lt;a href=&#34;https://github.com/kless&#34;&gt;Jonas mg&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ChristianUlbrich&#34;&gt;Christian Ulbrich&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jonhoo&#34;&gt;Jon Gjengset&lt;/a&gt;,
&lt;a href=&#34;https://github.com/wronglink&#34;&gt;Michael Elovskikh&lt;/a&gt;,
&lt;a href=&#34;https://github.com/technoweenie&#34;&gt;Rick Olson&lt;/a&gt;,
&lt;a href=&#34;https://convolv.es&#34;&gt;J. Ryan Stinnett&lt;/a&gt;,
&lt;a href=&#34;https://github.com/ifedapoolarewaju&#34;&gt;Ifedapo Olarewaju&lt;/a&gt;
&lt;a href=&#34;https://github.com/ronag&#34;&gt;Robert Nagy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;,
&amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be
interpreted as described in &lt;a href=&#34;http://www.ietf.org/rfc/rfc2119.txt&#34;&gt;RFC 2119&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;

&lt;p&gt;Following &lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;, as of 1.0.0 tus is ready for general
adoption. We don&amp;rsquo;t expect to make breaking changes, but if we do, those will
have to be in a 2.0.0. Introducing a new extension or any backwards-compatible
change adding new functionality will result in a bumped MINOR version.&lt;/p&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;This protocol is authored and owned by the tus community. We welcome patches
and feedback via
&lt;a href=&#34;https://github.com/tus/tus-resumable-upload-protocol&#34;&gt;GitHub&lt;/a&gt;. All authors and
collaborators will be listed as such in the protocol header.&lt;/p&gt;

&lt;p&gt;Please also &lt;a href=&#34;https://github.com/tus/tus.io/issues/new&#34;&gt;let us know&lt;/a&gt; about any
implementations (open source or commercial) if you&amp;rsquo;d like to be listed on the
&lt;a href=&#34;https://www.tus.io/implementations.html&#34;&gt;implementations&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;The protocol provides a mechanism for resumable file uploads via HTTP/1.1 (&lt;a href=&#34;https://tools.ietf.org/html/rfc7230&#34;&gt;RFC
7230&lt;/a&gt;) and HTTP/2 (&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;RFC
7540&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;

&lt;p&gt;Characters enclosed by square brackets indicate a placeholder (e.g. &lt;code&gt;[size]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The terms space, comma, and semicolon refer to their ASCII representations.&lt;/p&gt;

&lt;h2 id=&#34;core-protocol&#34;&gt;Core Protocol&lt;/h2&gt;

&lt;p&gt;The core protocol describes how to resume an interrupted upload. It assumes that
you already have a URL for the upload, usually created via the
&lt;a href=&#34;#creation&#34;&gt;Creation&lt;/a&gt; extension.&lt;/p&gt;

&lt;p&gt;All Clients and Servers MUST implement the core protocol.&lt;/p&gt;

&lt;p&gt;This specification does not describe the structure of URLs, as that is left for
the specific implementation to decide.  All URLs shown in this document are
meant for example purposes only.&lt;/p&gt;

&lt;p&gt;In addition, the implementation of authentication and authorization is left for
the Server to decide.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;HEAD&lt;/code&gt; request is used to determine the offset at which the upload should be
continued.&lt;/p&gt;

&lt;p&gt;The example below shows the continuation of a 100 byte upload that was
interrupted after 70 bytes were transferred.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HEAD /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1
Host: tus.example.org
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Upload-Offset: 70
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the offset, the Client uses the &lt;code&gt;PATCH&lt;/code&gt; method to resume the upload:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1
Host: tus.example.org
Content-Type: application/offset+octet-stream
Content-Length: 30
Upload-Offset: 70
Tus-Resumable: 1.0.0

[remaining 30 bytes]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Tus-Resumable: 1.0.0
Upload-Offset: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;headers&#34;&gt;Headers&lt;/h3&gt;

&lt;h4 id=&#34;upload-offset&#34;&gt;Upload-Offset&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Upload-Offset&lt;/code&gt; request and response header indicates a byte offset within a
resource. The value MUST be a non-negative integer.&lt;/p&gt;

&lt;h4 id=&#34;upload-length&#34;&gt;Upload-Length&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Upload-Length&lt;/code&gt; request and response header indicates the size of the entire
upload in bytes. The value MUST be a non-negative integer.&lt;/p&gt;

&lt;h4 id=&#34;tus-version&#34;&gt;Tus-Version&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Tus-Version&lt;/code&gt; response header MUST be a comma-separated list of protocol versions
supported by the Server. The list MUST be sorted by Server&amp;rsquo;s preference
where the first one is the most preferred one.&lt;/p&gt;

&lt;h4 id=&#34;tus-resumable&#34;&gt;Tus-Resumable&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Tus-Resumable&lt;/code&gt; header MUST be included in every request and response except
for &lt;code&gt;OPTIONS&lt;/code&gt; requests. The value MUST be the version of the protocol used by
the Client or the Server.&lt;/p&gt;

&lt;p&gt;If the the version specified by the Client is not supported by the Server, it
MUST respond with the &lt;code&gt;412 Precondition Failed&lt;/code&gt; status and MUST include the
&lt;code&gt;Tus-Version&lt;/code&gt; header into the response.
In addition, the Server MUST NOT process the request.&lt;/p&gt;

&lt;h4 id=&#34;tus-extension&#34;&gt;Tus-Extension&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Tus-Extension&lt;/code&gt; response header MUST be a comma-separated list of the extensions
supported by the Server. If no extensions are supported, the &lt;code&gt;Tus-Extension&lt;/code&gt;
header MUST be omitted.&lt;/p&gt;

&lt;h4 id=&#34;tus-max-size&#34;&gt;Tus-Max-Size&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Tus-Max-Size&lt;/code&gt; response header MUST be a non-negative integer indicating the maximum
allowed size of an entire upload in bytes. The Server SHOULD set this header if
there is a known hard limit.&lt;/p&gt;

&lt;h4 id=&#34;x-http-method-override&#34;&gt;X-HTTP-Method-Override&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; request header MUST be a string which MUST be
interpreted as the request&amp;rsquo;s method by the Server, if the header is presented.
The actual method of the request MUST be ignored. The Client SHOULD use this
header if its environment does not support the PATCH or DELETE methods.&lt;/p&gt;

&lt;h3 id=&#34;requests&#34;&gt;Requests&lt;/h3&gt;

&lt;h4 id=&#34;head&#34;&gt;HEAD&lt;/h4&gt;

&lt;p&gt;The Server MUST always include the &lt;code&gt;Upload-Offset&lt;/code&gt; header in the response for a
&lt;code&gt;HEAD&lt;/code&gt; request, even if the offset is &lt;code&gt;0&lt;/code&gt;, or the upload is already considered
completed. If the size of the upload is known, the Server MUST include the
&lt;code&gt;Upload-Length&lt;/code&gt; header in the response. If the resource is not found, the Server
SHOULD return either the &lt;code&gt;404 Not Found&lt;/code&gt;, &lt;code&gt;410 Gone&lt;/code&gt; or &lt;code&gt;403 Forbidden&lt;/code&gt; status
without the &lt;code&gt;Upload-Offset&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The Server MUST prevent the client and/or proxies from caching the response by
adding the &lt;code&gt;Cache-Control: no-store&lt;/code&gt; header to the response.&lt;/p&gt;

&lt;h4 id=&#34;patch&#34;&gt;PATCH&lt;/h4&gt;

&lt;p&gt;The Server SHOULD accept &lt;code&gt;PATCH&lt;/code&gt; requests against any upload URL and apply the
bytes contained in the message at the given offset specified by the
&lt;code&gt;Upload-Offset&lt;/code&gt; header. All &lt;code&gt;PATCH&lt;/code&gt; requests MUST use
&lt;code&gt;Content-Type: application/offset+octet-stream&lt;/code&gt;, otherwise the server SHOULD
return a &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Upload-Offset&lt;/code&gt; header&amp;rsquo;s value MUST be equal to the current offset of the
resource. In order to achieve parallel upload the
&lt;a href=&#34;#concatenation&#34;&gt;Concatenation&lt;/a&gt; extension MAY be used. If the offsets do not
match, the Server MUST respond with the &lt;code&gt;409 Conflict&lt;/code&gt; status without modifying
the upload resource.&lt;/p&gt;

&lt;p&gt;The Client SHOULD send all the remaining bytes of an upload in a single &lt;code&gt;PATCH&lt;/code&gt;
request, but MAY also use multiple small requests successively for scenarios
where this is desirable. One example for these situations is when the
&lt;a href=&#34;#checksum&#34;&gt;Checksum&lt;/a&gt; extension is used.&lt;/p&gt;

&lt;p&gt;The Server MUST acknowledge successful &lt;code&gt;PATCH&lt;/code&gt; requests with the
&lt;code&gt;204 No Content&lt;/code&gt; status. It MUST include the &lt;code&gt;Upload-Offset&lt;/code&gt; header containing
the new offset. The new offset MUST be the sum of the offset before the &lt;code&gt;PATCH&lt;/code&gt;
request and the number of bytes received and processed or stored during the
current &lt;code&gt;PATCH&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;If the servers receives a &lt;code&gt;PATCH&lt;/code&gt; request against a non-existent resource
it SHOULD return a &lt;code&gt;404 Not Found&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;Both, Client and Server, SHOULD attempt to detect and handle network errors
predictably. They MAY do so by checking for read/write socket errors, as well
as setting read/write timeouts. A timeout SHOULD be handled by closing the underlying connection.&lt;/p&gt;

&lt;p&gt;The Server SHOULD always attempt to store as much of the received data as possible.&lt;/p&gt;

&lt;h4 id=&#34;options&#34;&gt;OPTIONS&lt;/h4&gt;

&lt;p&gt;An &lt;code&gt;OPTIONS&lt;/code&gt; request MAY be used to gather information about the Server&amp;rsquo;s current
configuration. A successful response indicated by the &lt;code&gt;204 No Content&lt;/code&gt; or &lt;code&gt;200 OK&lt;/code&gt; status
MUST contain the &lt;code&gt;Tus-Version&lt;/code&gt; header. It MAY include the &lt;code&gt;Tus-Extension&lt;/code&gt; and
&lt;code&gt;Tus-Max-Size&lt;/code&gt; headers.&lt;/p&gt;

&lt;p&gt;The Client SHOULD NOT include the &lt;code&gt;Tus-Resumable&lt;/code&gt; header in the request and the
Server MUST ignore the header.&lt;/p&gt;

&lt;h5 id=&#34;example-1&#34;&gt;Example&lt;/h5&gt;

&lt;p&gt;This example clarifies the response for an &lt;code&gt;OPTIONS&lt;/code&gt; request. The version used
in both, request and response, is &lt;code&gt;1.0.0&lt;/code&gt; while the Server is also capable of
handling &lt;code&gt;0.2.2&lt;/code&gt; and &lt;code&gt;0.2.1&lt;/code&gt;. Uploads with a total size of up to 1GB are
allowed and the extensions for &lt;a href=&#34;#creation&#34;&gt;Creation&lt;/a&gt; and
&lt;a href=&#34;#expiration&#34;&gt;Expiration&lt;/a&gt; are enabled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OPTIONS /files HTTP/1.1
Host: tus.example.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Tus-Resumable: 1.0.0
Tus-Version: 1.0.0,0.2.2,0.2.1
Tus-Max-Size: 1073741824
Tus-Extension: creation,expiration
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;protocol-extensions&#34;&gt;Protocol Extensions&lt;/h2&gt;

&lt;p&gt;Clients and Servers are encouraged to implement as many of the extensions
as possible. Feature detection SHOULD be achieved by the Client sending an
&lt;code&gt;OPTIONS&lt;/code&gt; request and the Server responding with the &lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;h3 id=&#34;creation&#34;&gt;Creation&lt;/h3&gt;

&lt;p&gt;The Client and the Server SHOULD implement the upload creation extension. If
the Server supports this extension, it MUST add &lt;code&gt;creation&lt;/code&gt; to the &lt;code&gt;Tus-Extension&lt;/code&gt;
header.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;An empty &lt;code&gt;POST&lt;/code&gt; request is used to create a new upload resource. The
&lt;code&gt;Upload-Length&lt;/code&gt; header indicates the size of entire upload in bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /files HTTP/1.1
Host: tus.example.org
Content-Length: 0
Upload-Length: 100
Tus-Resumable: 1.0.0
Upload-Metadata: filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 201 Created
Location: https://tus.example.org/files/24e533e02ec3bc40c387f1a0e460e216
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new resource has an implicit offset of &lt;code&gt;0&lt;/code&gt; allowing the Client to use the
core protocol for performing the actual upload.&lt;/p&gt;

&lt;h4 id=&#34;headers-1&#34;&gt;Headers&lt;/h4&gt;

&lt;h5 id=&#34;upload-defer-length&#34;&gt;Upload-Defer-Length&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Upload-Defer-Length&lt;/code&gt; request and response header indicates that the size of
the upload is not known currently and will be transferred later. Its value MUST
be &lt;code&gt;1&lt;/code&gt;. If the length of an upload is not deferred, this header MUST be omitted.&lt;/p&gt;

&lt;h5 id=&#34;upload-metadata&#34;&gt;Upload-Metadata&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Upload-Metadata&lt;/code&gt; request and response header MUST consist of one or more comma-separated
key-value pairs. The key and value MUST be separated by a space. The key
MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be
ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique.&lt;/p&gt;

&lt;h4 id=&#34;requests-1&#34;&gt;Requests&lt;/h4&gt;

&lt;h5 id=&#34;post&#34;&gt;POST&lt;/h5&gt;

&lt;p&gt;The Client MUST send a &lt;code&gt;POST&lt;/code&gt; request against a known upload creation URL to
request a new upload resource. The request MUST include one of the following headers:&lt;/p&gt;

&lt;p&gt;a) &lt;code&gt;Upload-Length&lt;/code&gt; to indicate the size of an entire upload in bytes.&lt;/p&gt;

&lt;p&gt;b) &lt;code&gt;Upload-Defer-Length: 1&lt;/code&gt; if upload size is not known at the time. Once it is
known the Client MUST set the &lt;code&gt;Upload-Length&lt;/code&gt; header in the next &lt;code&gt;PATCH&lt;/code&gt; request.
Once set the length MUST NOT be changed. As long as the length of the upload is
not known, the Server MUST set &lt;code&gt;Upload-Defer-Length: 1&lt;/code&gt; in all responses to
&lt;code&gt;HEAD&lt;/code&gt; requests. If the &lt;code&gt;Upload-Defer-Length&lt;/code&gt; header contains any other value
than &lt;code&gt;1&lt;/code&gt; the server should return a &lt;code&gt;400 Bad Request&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;If the Server supports deferring length, it MUST add &lt;code&gt;creation-defer-length&lt;/code&gt; to
the &lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The Client MAY supply the &lt;code&gt;Upload-Metadata&lt;/code&gt; header to add additional metadata to the
upload creation request. The Server MAY decide to ignore or use this information to
further process the request or to reject it. If an upload contains additional
metadata, responses to &lt;code&gt;HEAD&lt;/code&gt; requests MUST include the &lt;code&gt;Upload-Metadata&lt;/code&gt; header
and its value as specified by the Client during the creation.&lt;/p&gt;

&lt;p&gt;If the length of the upload exceeds the maximum, which MAY be specified using
the &lt;code&gt;Tus-Max-Size&lt;/code&gt; header, the Server MUST respond with the
&lt;code&gt;413 Request Entity Too Large&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;The Server MUST acknowledge a successful upload creation with the &lt;code&gt;201 Created&lt;/code&gt;
status. The Server MUST set the &lt;code&gt;Location&lt;/code&gt; header to the URL of the created
resource. This URL MAY be absolute or relative.&lt;/p&gt;

&lt;p&gt;The Client MUST perform the actual upload using the core protocol.&lt;/p&gt;

&lt;h3 id=&#34;expiration&#34;&gt;Expiration&lt;/h3&gt;

&lt;p&gt;The Server MAY remove unfinished uploads once they expire. In order to indicate
this behavior to the Client, the Server MUST add &lt;code&gt;expiration&lt;/code&gt; to the
&lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The unfinished upload is available until the time specified in &lt;code&gt;Upload-Expires&lt;/code&gt;.
After this date the upload can not be resumed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1
Host: tus.example.org
Content-Type: application/offset+octet-stream
Content-Length: 30
Upload-Offset: 70
Tus-Resumable: 1.0.0

[remaining 30 bytes]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Upload-Expires: Wed, 25 Jun 2014 16:00:00 GMT
Tus-Resumable: 1.0.0
Upload-Offset: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;headers-2&#34;&gt;Headers&lt;/h4&gt;

&lt;h5 id=&#34;upload-expires&#34;&gt;Upload-Expires&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Upload-Expires&lt;/code&gt; response header indicates the time after which the unfinished upload
expires. A Server MAY wish to remove incomplete uploads after a given
period of time to prevent abandoned uploads from taking up extra storage. The
Client SHOULD use this header to determine if an upload is still valid before
attempting to resume the upload.&lt;/p&gt;

&lt;p&gt;This header MUST be included in every &lt;code&gt;PATCH&lt;/code&gt; response if the upload is going
to expire. If the expiration is known at the creation, the &lt;code&gt;Upload-Expires&lt;/code&gt;
header MUST be included in the response to the initial &lt;code&gt;POST&lt;/code&gt; request.
Its value MAY change over time.&lt;/p&gt;

&lt;p&gt;If a Client does attempt to resume an upload which has since been removed by the
Server, the Server SHOULD respond with the&lt;code&gt;404 Not Found&lt;/code&gt; or &lt;code&gt;410 Gone&lt;/code&gt; status.
The latter one SHOULD be used if the Server is keeping track of expired uploads.
In both cases the Client SHOULD start a new upload.&lt;/p&gt;

&lt;p&gt;The value of the &lt;code&gt;Upload-Expires&lt;/code&gt; header MUST be in
&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-7.1.1.1&#34;&gt;RFC 7231&lt;/a&gt; datetime format.&lt;/p&gt;

&lt;h3 id=&#34;checksum&#34;&gt;Checksum&lt;/h3&gt;

&lt;p&gt;The Client and the Server MAY implement and use this extension to verify data
integrity of each &lt;code&gt;PATCH&lt;/code&gt; request. If supported, the Server MUST add &lt;code&gt;checksum&lt;/code&gt;
to the &lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;A Client MAY include the &lt;code&gt;Upload-Checksum&lt;/code&gt; header in a &lt;code&gt;PATCH&lt;/code&gt; request.
Once the entire request has been received, the Server MUST verify the uploaded
chunk against the provided checksum using the specified algorithm. Depending on
the result the Server MAY respond with one of the following status code:
1) &lt;code&gt;400 Bad Request&lt;/code&gt; if the checksum algorithm is not supported by the server,
2) &lt;code&gt;460 Checksum Mismatch&lt;/code&gt; if the checksums mismatch or
3) &lt;code&gt;204 No Content&lt;/code&gt; if the checksums match and the processing of the data
succeeded.
In the first two cases the uploaded chunk MUST be discarded, and the upload and
its offset MUST NOT be updated.&lt;/p&gt;

&lt;p&gt;The Server MUST support at least the SHA1 checksum algorithm identified
by &lt;code&gt;sha1&lt;/code&gt;. The names of the checksum algorithms MUST only consist of ASCII
characters with the modification that uppercase characters are excluded.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Tus-Checksum-Algorithm&lt;/code&gt; header MUST be included in the response to an
&lt;code&gt;OPTIONS&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;If the hash cannot be calculated at the beginning of the upload, it MAY be
included as a trailer. If the Server can handle trailers, this behavior MUST be
announced by adding &lt;code&gt;checksum-trailer&lt;/code&gt; to the &lt;code&gt;Tus-Extension&lt;/code&gt; header.
Trailers, also known as trailing headers, are headers which are sent after the
request&amp;rsquo;s body has been transmitted already. Following
&lt;a href=&#34;https://tools.ietf.org/html/rfc7230#section-4.1.2&#34;&gt;RFC 7230&lt;/a&gt; they
MUST be announced using the &lt;code&gt;Trailer&lt;/code&gt; header and are only allowed in chunked
transfers.&lt;/p&gt;

&lt;h4 id=&#34;headers-3&#34;&gt;Headers&lt;/h4&gt;

&lt;h5 id=&#34;tus-checksum-algorithm&#34;&gt;Tus-Checksum-Algorithm&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Tus-Checksum-Algorithm&lt;/code&gt; response header MUST be a comma-separated list of
the checksum algorithms supported by the server.&lt;/p&gt;

&lt;h5 id=&#34;upload-checksum&#34;&gt;Upload-Checksum&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Upload-Checksum&lt;/code&gt; request header contains information about the checksum of
the current body payload. The header MUST consist of the name of the used
checksum algorithm and the Base64 encoded checksum separated by a space.&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OPTIONS /files HTTP/1.1
Host: tus.example.org
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Tus-Resumable: 1.0.0
Tus-Version: 1.0.0
Tus-Extension: checksum
Tus-Checksum-Algorithm: md5,sha1,crc32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /files/17f44dbe1c4bace0e18ab850cf2b3a83 HTTP/1.1
Content-Length: 11
Upload-Offset: 0
Tus-Resumable: 1.0.0
Upload-Checksum: sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=

hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Tus-Resumable: 1.0.0
Upload-Offset: 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;termination&#34;&gt;Termination&lt;/h3&gt;

&lt;p&gt;This extension defines a way for the Client to terminate completed and unfinished
uploads allowing the Server to free up used resources.&lt;/p&gt;

&lt;p&gt;If this extension is supported by the Server, it MUST be announced by adding
&lt;code&gt;termination&lt;/code&gt; to the &lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;h4 id=&#34;requests-2&#34;&gt;Requests&lt;/h4&gt;

&lt;h5 id=&#34;delete&#34;&gt;DELETE&lt;/h5&gt;

&lt;p&gt;When receiving a &lt;code&gt;DELETE&lt;/code&gt; request for an existing upload the Server SHOULD free
associated resources and MUST respond with the &lt;code&gt;204 No Content&lt;/code&gt; status
confirming that the upload was terminated. For all future requests to this URL
the Server SHOULD respond with the &lt;code&gt;404 Not Found&lt;/code&gt; or &lt;code&gt;410 Gone&lt;/code&gt; status.&lt;/p&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /files/24e533e02ec3bc40c387f1a0e460e216 HTTP/1.1
Host: tus.example.org
Content-Length: 0
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Tus-Resumable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;

&lt;p&gt;This extension can be used to concatenate multiple uploads into a single one enabling
Clients to perform parallel uploads and to upload non-contiguous chunks. If the
Server supports this extension, it MUST add &lt;code&gt;concatenation&lt;/code&gt; to the
&lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;A partial upload represents a chunk of a file. It is constructed by including the
&lt;code&gt;Upload-Concat: partial&lt;/code&gt; header while creating a new upload using the
&lt;a href=&#34;#creation&#34;&gt;Creation&lt;/a&gt; extension. Multiple partial uploads are concatenated
into a final upload in the specified order. The Server SHOULD NOT process these
partial uploads until they are concatenated to form a final upload. The length of the
final upload MUST be the sum of the length of all partial uploads.&lt;/p&gt;

&lt;p&gt;In order to create a new final upload the Client MUST add the &lt;code&gt;Upload-Concat&lt;/code&gt; header
to the upload creation request. The value MUST be &lt;code&gt;final&lt;/code&gt; followed by a semicolon
and a space-separated list of the partial upload URLs that need to be concatenated.
The partial uploads MUST be concatenated as per the order specified in the list.
This concatenation request SHOULD happen after all of the corresponding partial uploads
are completed. The Client MUST NOT include the &lt;code&gt;Upload-Length&lt;/code&gt; header in the final
upload creation.&lt;/p&gt;

&lt;p&gt;The Client MAY send the concatenation request while the partial uploads are still
in progress. This feature MUST be explicitly announced by the Server by adding
&lt;code&gt;concatenation-unfinished&lt;/code&gt; to the &lt;code&gt;Tus-Extension&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;When creating a new final upload the partial uploads&amp;rsquo; metadata SHALL NOT be
transferred to the new final upload. All metadata SHOULD be included in the
concatenation request using the &lt;code&gt;Upload-Metadata&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The Server MAY delete partial uploads after concatenation. They MAY however be
used multiple times to form a final resource.&lt;/p&gt;

&lt;p&gt;The Server MUST respond with the &lt;code&gt;403 Forbidden&lt;/code&gt; status to &lt;code&gt;PATCH&lt;/code&gt; requests against
a final upload URL and MUST NOT modify the final or its partial uploads.&lt;/p&gt;

&lt;p&gt;The response to a HEAD request for a final upload SHOULD NOT contain the &lt;code&gt;Upload-Offset&lt;/code&gt;
header unless the concatenation has been successfully finished. After successful
concatenation, the &lt;code&gt;Upload-Offset&lt;/code&gt; and &lt;code&gt;Upload-Length&lt;/code&gt; MUST be set and their values MUST be
equal. The value of the &lt;code&gt;Upload-Offset&lt;/code&gt; header before concatenation is not defined for a
final upload.&lt;/p&gt;

&lt;p&gt;The response to a HEAD request for a partial upload MUST contain the &lt;code&gt;Upload-Offset&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Upload-Length&lt;/code&gt; header MUST be included if the length of the final resource can
be calculated at the time of the request. Response to &lt;code&gt;HEAD&lt;/code&gt; request against partial
or final upload MUST include the &lt;code&gt;Upload-Concat&lt;/code&gt; header and its value as received in
the upload creation request.&lt;/p&gt;

&lt;h4 id=&#34;headers-4&#34;&gt;Headers&lt;/h4&gt;

&lt;h5 id=&#34;upload-concat&#34;&gt;Upload-Concat&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;Upload-Concat&lt;/code&gt; request and response header MUST be set in both partial and final upload creation
requests. It indicates whether the upload is either a partial
or final upload. If the upload is a partial one, the header value MUST be &lt;code&gt;partial&lt;/code&gt;.
In the case of a final upload, its value MUST be &lt;code&gt;final&lt;/code&gt; followed by a
semicolon and a space-separated list of partial upload URLs that will be
concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain
spaces as defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;In the following example the &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Tus-Resumable&lt;/code&gt; headers are omitted for
readability although they are required by the specification.
In the beginning two partial uploads are created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /files HTTP/1.1
Upload-Concat: partial
Upload-Length: 5

HTTP/1.1 201 Created
Location: https://tus.example.org/files/a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;POST /files HTTP/1.1
Upload-Concat: partial
Upload-Length: 6

HTTP/1.1 201 Created
Location: https://tus.example.org/files/b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now able to upload data to the two partial resources using &lt;code&gt;PATCH&lt;/code&gt;
requests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /files/a HTTP/1.1
Upload-Offset: 0
Content-Length: 5

hello

HTTP/1.1 204 No Content
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;PATCH /files/b HTTP/1.1
Upload-Offset: 0
Content-Length: 6

 world

HTTP/1.1 204 No Content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first request the string &lt;code&gt;hello&lt;/code&gt; was uploaded while the second file now
contains &lt;code&gt;world&lt;/code&gt; with a leading space.&lt;/p&gt;

&lt;p&gt;The next step is to create the final upload consisting of the two earlier
generated partial uploads. In following request no &lt;code&gt;Upload-Length&lt;/code&gt; header is
presented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /files HTTP/1.1
Upload-Concat: final;/files/a /files/b

HTTP/1.1 201 Created
Location: https://tus.example.org/files/ab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The length of the final resource is now 11 bytes consisting of the string
&lt;code&gt;hello world&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HEAD /files/ab HTTP/1.1

HTTP/1.1 200 OK
Upload-Length: 11
Upload-Concat: final;/files/a /files/b
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&#34;why-is-the-protocol-using-custom-headers&#34;&gt;Why is the protocol using custom headers?&lt;/h3&gt;

&lt;p&gt;We have carefully investigated the use of existing headers such as &lt;code&gt;Range&lt;/code&gt; and
&lt;code&gt;Content-Range&lt;/code&gt;, but unfortunately they are defined in a way that makes them
unsuitable for resumable file uploads.&lt;/p&gt;

&lt;p&gt;We also considered using existing &lt;code&gt;PATCH&lt;/code&gt; payload formats such as
&lt;a href=&#34;http://greenbytes.de/tech/webdav/draft-ietf-httpbis-p5-range-latest.html#internet.media.type.multipart.byteranges&#34;&gt;multipart/byteranges&lt;/a&gt;,
but unfortunately the XHR2 &lt;a href=&#34;http://www.w3.org/TR/XMLHttpRequest/#interface-formdata&#34;&gt;FormData
interface&lt;/a&gt; does not
support custom headers for multipart parts, and the &lt;a href=&#34;http://www.w3.org/TR/XMLHttpRequest/#the-send-method&#34;&gt;send()
method&lt;/a&gt; does not allow
streaming arbitrary data without loading all of it into memory.&lt;/p&gt;

&lt;p&gt;That being said, custom headers also allowed us to greatly simplify the
Client and Server implementations, so we&amp;rsquo;re quite happy with them.&lt;/p&gt;

&lt;h3 id=&#34;why-are-you-not-using-the-x-prefix-for-your-headers&#34;&gt;Why are you not using the &amp;ldquo;X-&amp;rdquo; prefix for your headers?&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;X-&amp;rdquo; prefix for headers has been deprecated, see &lt;a href=&#34;http://tools.ietf.org/html/rfc6648&#34;&gt;RFC
6648&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-deal-with-bad-http-proxies&#34;&gt;How can I deal with bad HTTP proxies?&lt;/h3&gt;

&lt;p&gt;If you are dealing with HTTP proxies that strip/modify HTTP headers or can&amp;rsquo;t
handle &lt;code&gt;PATCH&lt;/code&gt; requests properly, you should consider using HTTPS which will
make it impossible for proxies to modify your requests and use the
&lt;a href=&#34;#x-http-method-override&#34;&gt;&lt;code&gt;X-HTTP-Method-Override&lt;/code&gt;&lt;/a&gt; header which allows you to use
&lt;code&gt;POST&lt;/code&gt; requests.&lt;/p&gt;

&lt;p&gt;If that is not an option for you, please reach out to us, we are open to
defining a compatibility protocol extension.&lt;/p&gt;

&lt;h3 id=&#34;how-are-pause-resume-handled-when-should-i-delete-partial-uploads&#34;&gt;How are pause/resume handled? When should I delete partial uploads?&lt;/h3&gt;

&lt;p&gt;The tus protocol is built upon the principles of simple pausing and resuming. In
order to pause an upload you are allowed to end the current open request. The
Server will store the uploaded data as long as no violations against other
constraints (e.g. checksums) or internal errors occur. Once you are ready to
resume an upload, send a &lt;code&gt;HEAD&lt;/code&gt; request to the corresponding upload URL in order to
obtain the available offset. After receiving a valid response you can upload
more data using &lt;code&gt;PATCH&lt;/code&gt; requests. You should keep in mind that the Server may
delete an unfinished upload if it is not continued for a longer time period (see
&lt;a href=&#34;#expiration&#34;&gt;Expiration&lt;/a&gt; extension).&lt;/p&gt;

&lt;p&gt;Before deleting an outstanding upload the Server should give the Client enough
time to resolve potential networking issues. Since this duration depends heavily
on the underlying application model, the protocol does not contain a specific
number, but we recommend one week for a general use case.&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-get-the-file-name-or-file-type-for-an-upload&#34;&gt;How can I get the file name or file type for an upload?&lt;/h3&gt;

&lt;p&gt;For itself, the tus protocol does not have a direct mechanism to obtain the type or
filename of an upload as the specification does not have the principle of a disk-based
file, allowing you to upload arbitrary data using tus. However, the wanted
functionality can be achieved by utilizing metadata. A Client can attach the file&amp;rsquo;s
name and type to an upload when it&amp;rsquo;s being created by setting the &lt;code&gt;Upload-Metadata&lt;/code&gt;
header. On the other side, the Server can read these values and determine the name and
type of the upload.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Licensed under the MIT license, see
&lt;a href=&#34;https://github.com/tus/tus-resumable-upload-protocol/blob/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2013-2016 Transloadit Ltd and Contributors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://tus.io/protocols/resumable-upload.html&#34; title=&#34;tus resumable upload protocol&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>熊猫人</title>
      <link>http://alimy.me/post/art_201903151200/</link>
      <pubDate>Fri, 15 Mar 2019 12:00:00 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201903151200/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20190315120000.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20190315120000.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;熊猫人（&lt;a href=&#34;http://alimy.me/images/post/20190315120000.jpg&#34; title=&#34;jpeg格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Toyota GT86</title>
      <link>http://alimy.me/post/art_201903101706/</link>
      <pubDate>Sun, 10 Mar 2019 17:06:00 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201903101706/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20190310170600.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20190310170600.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toyota GT86（&lt;a href=&#34;http://alimy.me/images/post/20190310170600.jpeg&#34; title=&#34;jpeg格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>http://alimy.me/post/dev_201901101804/</link>
      <pubDate>Thu, 10 Jan 2019 18:04:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201901101804/</guid>
      <description>&lt;h4 id=&#34;version-3-0-2&#34;&gt;Version 3.0.2&lt;/h4&gt;

&lt;p&gt;The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;NOT RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be interpreted as described in &lt;a href=&#34;https://tools.ietf.org/html/bcp14&#34;&gt;BCP 14&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc2119&#34;&gt;RFC2119&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc8174&#34;&gt;RFC8174&lt;/a&gt; when, and only when, they appear in all capitals, as shown here.&lt;/p&gt;

&lt;p&gt;This document is licensed under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;The Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.&lt;/p&gt;

&lt;p&gt;An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definitions&#34;&gt;Definitions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#oasDocument&#34;&gt;OpenAPI Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mediaTypes&#34;&gt;Media Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#httpCodes&#34;&gt;HTTP Status Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specification&#34;&gt;Specification&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#documentStructure&#34;&gt;Document Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataTypes&#34;&gt;Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#richText&#34;&gt;Rich Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relativeReferences&#34;&gt;Relative References In URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#schema&#34;&gt;Schema&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#oasObject&#34;&gt;OpenAPI Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contactObject&#34;&gt;Contact Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#licenseObject&#34;&gt;License Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#serverVariableObject&#34;&gt;Server Variable Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#encodingObject&#34;&gt;Encoding Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#responsesObject&#34;&gt;Responses Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tagObject&#34;&gt;Tag Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discriminatorObject&#34;&gt;Discriminator Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oauthFlowsObject&#34;&gt;OAuth Flows Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securityFiltering&#34;&gt;Security Filtering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#revisionHistory&#34;&gt;Appendix A: Revision History&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;h5 id=&#34;a-name-oasdocument-a-openapi-document&#34;&gt;&lt;a name=&#34;oasDocument&#34;&gt;&lt;/a&gt;OpenAPI Document&lt;/h5&gt;

&lt;p&gt;A document (or set of documents) that defines or describes an API. An OpenAPI definition uses and conforms to the OpenAPI Specification.&lt;/p&gt;

&lt;h5 id=&#34;a-name-pathtemplating-a-path-templating&#34;&gt;&lt;a name=&#34;pathTemplating&#34;&gt;&lt;/a&gt;Path Templating&lt;/h5&gt;

&lt;p&gt;Path templating refers to the usage of curly braces ({}) to mark a section of a URL path as replaceable using path parameters.&lt;/p&gt;

&lt;h5 id=&#34;a-name-mediatypes-a-media-types&#34;&gt;&lt;a name=&#34;mediaTypes&#34;&gt;&lt;/a&gt;Media Types&lt;/h5&gt;

&lt;p&gt;Media type definitions are spread across several resources.
The media type definitions SHOULD be in compliance with &lt;a href=&#34;https://tools.ietf.org/html/rfc6838&#34;&gt;RFC6838&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some examples of possible media type definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  text/plain; charset=utf-8
  application/json
  application/vnd.github+json
  application/vnd.github.v3+json
  application/vnd.github.v3.raw+json
  application/vnd.github.v3.text+json
  application/vnd.github.v3.html+json
  application/vnd.github.v3.full+json
  application/vnd.github.v3.diff
  application/vnd.github.v3.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;a-name-httpcodes-a-http-status-codes&#34;&gt;&lt;a name=&#34;httpCodes&#34;&gt;&lt;/a&gt;HTTP Status Codes&lt;/h5&gt;

&lt;p&gt;The HTTP Status Codes are used to indicate the status of the executed operation.
The available status codes are defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6&#34;&gt;RFC7231&lt;/a&gt; and registered status codes are listed in the &lt;a href=&#34;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&#34;&gt;IANA Status Code Registry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;specification&#34;&gt;Specification&lt;/h2&gt;

&lt;h3 id=&#34;versions&#34;&gt;Versions&lt;/h3&gt;

&lt;p&gt;The OpenAPI Specification is versioned using &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt; (semver) and follows the semver specification.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;major&lt;/code&gt;.&lt;code&gt;minor&lt;/code&gt; portion of the semver (for example &lt;code&gt;3.0&lt;/code&gt;) SHALL designate the OAS feature set. Typically, &lt;em&gt;&lt;code&gt;.patch&lt;/code&gt;&lt;/em&gt; versions address errors in this document, not the feature set. Tooling which supports OAS 3.0 SHOULD be compatible with all OAS 3.0.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between &lt;code&gt;3.0.0&lt;/code&gt; and &lt;code&gt;3.0.1&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Subsequent minor version releases of the OpenAPI Specification (incrementing the &lt;code&gt;minor&lt;/code&gt; version number) SHOULD NOT interfere with tooling developed to a lower minor version and same major version.  Thus a hypothetical &lt;code&gt;3.1.0&lt;/code&gt; specification SHOULD be usable with tooling designed for &lt;code&gt;3.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An OpenAPI document compatible with OAS 3.*.* contains a required &lt;a href=&#34;#oasVersion&#34;&gt;&lt;code&gt;openapi&lt;/code&gt;&lt;/a&gt; field which designates the semantic version of the OAS that it uses. (OAS 2.0 documents contain a top-level version field named &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#swaggerObject&#34;&gt;&lt;code&gt;swagger&lt;/code&gt;&lt;/a&gt; and value &lt;code&gt;&amp;quot;2.0&amp;quot;&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;format&#34;&gt;Format&lt;/h3&gt;

&lt;p&gt;An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.&lt;/p&gt;

&lt;p&gt;For example, if a field has an array value, the JSON array representation will be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   &amp;quot;field&amp;quot;: [ 1, 2, 3 ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All field names in the specification are &lt;strong&gt;case sensitive&lt;/strong&gt;.
This includes all fields that are used as keys in a map, except where explicitly noted that keys are &lt;strong&gt;case insensitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.&lt;/p&gt;

&lt;p&gt;Patterned fields MUST have unique names within the containing object.&lt;/p&gt;

&lt;p&gt;In order to preserve the ability to round-trip between YAML and JSON formats, YAML version &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html&#34;&gt;1.2&lt;/a&gt; is RECOMMENDED along with some additional constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tags MUST be limited to those allowed by the &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#id2803231&#34;&gt;JSON Schema ruleset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keys used in YAML maps MUST be limited to a scalar string, as defined by the &lt;a href=&#34;http://yaml.org/spec/1.2/spec.html#id2802346&#34;&gt;YAML Failsafe schema ruleset&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.&lt;/p&gt;

&lt;h3 id=&#34;a-name-documentstructure-a-document-structure&#34;&gt;&lt;a name=&#34;documentStructure&#34;&gt;&lt;/a&gt;Document Structure&lt;/h3&gt;

&lt;p&gt;An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the user. In the latter case, &lt;code&gt;$ref&lt;/code&gt; fields MUST be used in the specification to reference those parts as follows from the &lt;a href=&#34;http://json-schema.org&#34;&gt;JSON Schema&lt;/a&gt; definitions.&lt;/p&gt;

&lt;p&gt;It is RECOMMENDED that the root OpenAPI document be named: &lt;code&gt;openapi.json&lt;/code&gt; or &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-datatypes-a-data-types&#34;&gt;&lt;a name=&#34;dataTypes&#34;&gt;&lt;/a&gt;Data Types&lt;/h3&gt;

&lt;p&gt;Primitive data types in the OAS are based on the types supported by the &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-00#section-4.2&#34;&gt;JSON Schema Specification Wright Draft 00&lt;/a&gt;.
Note that &lt;code&gt;integer&lt;/code&gt; as a type is also supported and is defined as a JSON number without a fraction or exponent part.
&lt;code&gt;null&lt;/code&gt; is not supported as a type (see &lt;a href=&#34;#schemaNullable&#34;&gt;&lt;code&gt;nullable&lt;/code&gt;&lt;/a&gt; for an alternative solution).
Models are defined using the &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;, which is an extended subset of JSON Schema Specification Wright Draft 00.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dataTypeFormat&#34;&gt;&lt;/a&gt;Primitives have an optional modifier property: &lt;code&gt;format&lt;/code&gt;.
OAS uses several known formats to define in fine detail the data type being used.
However, to support documentation needs, the &lt;code&gt;format&lt;/code&gt; property is an open &lt;code&gt;string&lt;/code&gt;-valued property, and can have any value.
Formats such as &lt;code&gt;&amp;quot;email&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;uuid&amp;quot;&lt;/code&gt;, and so on, MAY be used even though undefined by this specification.
Types that are not accompanied by a &lt;code&gt;format&lt;/code&gt; property follow the type definition in the JSON Schema. Tools that do not recognize a specific &lt;code&gt;format&lt;/code&gt; MAY default back to the &lt;code&gt;type&lt;/code&gt; alone, as if the &lt;code&gt;format&lt;/code&gt; is not specified.&lt;/p&gt;

&lt;p&gt;The formats defined by the OAS are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypes&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeFormat&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;signed 32 bits&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;signed 64 bits (a.k.a long)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;base64 encoded characters&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any sequence of octets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;As defined by &lt;code&gt;full-date&lt;/code&gt; - &lt;a href=&#34;https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date-time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;As defined by &lt;code&gt;date-time&lt;/code&gt; - &lt;a href=&#34;https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A hint to UIs to obscure input.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;a-name-richtext-a-rich-text-formatting&#34;&gt;&lt;a name=&#34;richText&#34;&gt;&lt;/a&gt;Rich Text Formatting&lt;/h3&gt;

&lt;p&gt;Throughout the specification &lt;code&gt;description&lt;/code&gt; fields are noted as supporting CommonMark markdown formatting.
Where OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by &lt;a href=&#34;http://spec.commonmark.org/0.27/&#34;&gt;CommonMark 0.27&lt;/a&gt;. Tooling MAY choose to ignore some CommonMark features to address security concerns.&lt;/p&gt;

&lt;h3 id=&#34;a-name-relativereferences-a-relative-references-in-urls&#34;&gt;&lt;a name=&#34;relativeReferences&#34;&gt;&lt;/a&gt;Relative References in URLs&lt;/h3&gt;

&lt;p&gt;Unless specified otherwise, all properties that are URLs MAY be relative references as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-4.2&#34;&gt;RFC3986&lt;/a&gt;.
Relative references are resolved using the URLs defined in the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt; as a Base URI.&lt;/p&gt;

&lt;p&gt;Relative references used in &lt;code&gt;$ref&lt;/code&gt; are processed as per &lt;a href=&#34;https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&#34;&gt;JSON Reference&lt;/a&gt;, using the URL of the current document as the base URI. See also the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;schema&#34;&gt;Schema&lt;/h3&gt;

&lt;p&gt;In the following description, if a field is not explicitly &lt;strong&gt;REQUIRED&lt;/strong&gt; or described with a MUST or SHALL, it can be considered OPTIONAL.&lt;/p&gt;

&lt;h4 id=&#34;a-name-oasobject-a-openapi-object&#34;&gt;&lt;a name=&#34;oasObject&#34;&gt;&lt;/a&gt;OpenAPI Object&lt;/h4&gt;

&lt;p&gt;This is the root document object of the &lt;a href=&#34;#oasDocument&#34;&gt;OpenAPI document&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasVersion&#34;&gt;&lt;/a&gt;openapi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. This string MUST be the &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;semantic version number&lt;/a&gt; of the &lt;a href=&#34;#versions&#34;&gt;OpenAPI Specification version&lt;/a&gt; that the OpenAPI document uses. The &lt;code&gt;openapi&lt;/code&gt; field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is &lt;em&gt;not&lt;/em&gt; related to the API &lt;a href=&#34;#infoVersion&#34;&gt;&lt;code&gt;info.version&lt;/code&gt;&lt;/a&gt; string.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasInfo&#34;&gt;&lt;/a&gt;info&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. Provides metadata about the API. The metadata MAY be used by tooling as required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An array of Server Objects, which provide connectivity information to a target server. If the &lt;code&gt;servers&lt;/code&gt; property is not provided, or is an empty array, the default value would be a &lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt; with a &lt;a href=&#34;#serverUrl&#34;&gt;url&lt;/a&gt; value of &lt;code&gt;/&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasPaths&#34;&gt;&lt;/a&gt;paths&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The available paths and operations for the API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasComponents&#34;&gt;&lt;/a&gt;components&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An element to hold various schemas for the specification.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#tagObject&#34;&gt;Tag Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; must be declared. The tags that are not declared MAY be organized randomly or based on the tools&amp;rsquo; logic. Each tag name in the list MUST be unique.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-infoobject-a-info-object&#34;&gt;&lt;a name=&#34;infoObject&#34;&gt;&lt;/a&gt;Info Object&lt;/h4&gt;

&lt;p&gt;The object provides metadata about the API.
The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-1&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTitle&#34;&gt;&lt;/a&gt;title&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The title of the application.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the application. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTermsOfService&#34;&gt;&lt;/a&gt;termsOfService&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL to the Terms of Service for the API. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoContact&#34;&gt;&lt;/a&gt;contact&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#contactObject&#34;&gt;Contact Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The contact information for the exposed API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoLicense&#34;&gt;&lt;/a&gt;license&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#licenseObject&#34;&gt;License Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The license information for the exposed API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoVersion&#34;&gt;&lt;/a&gt;version&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The version of the OpenAPI document (which is distinct from the &lt;a href=&#34;#oasVersion&#34;&gt;OpenAPI Specification version&lt;/a&gt; or the API implementation version).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;info-object-example&#34;&gt;Info Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;Sample Pet Store App&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;This is a sample server for a pet store.&amp;quot;,
  &amp;quot;termsOfService&amp;quot;: &amp;quot;http://example.com/terms/&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://www.example.com/support&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;support@example.com&amp;quot;
  },
  &amp;quot;license&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
  },
  &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;title: Sample Pet Store App
description: This is a sample server for a pet store.
termsOfService: http://example.com/terms/
contact:
  name: API Support
  url: http://www.example.com/support
  email: support@example.com
license:
  name: Apache 2.0
  url: https://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-contactobject-a-contact-object&#34;&gt;&lt;a name=&#34;contactObject&#34;&gt;&lt;/a&gt;Contact Object&lt;/h4&gt;

&lt;p&gt;Contact information for the exposed API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-2&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The identifying name of the contact person/organization.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URL pointing to the contact information. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactEmail&#34;&gt;&lt;/a&gt;email&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The email address of the contact person/organization. MUST be in the format of an email address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;contact-object-example&#34;&gt;Contact Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;http://www.example.com/support&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;support@example.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: API Support
url: http://www.example.com/support
email: support@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-licenseobject-a-license-object&#34;&gt;&lt;a name=&#34;licenseObject&#34;&gt;&lt;/a&gt;License Object&lt;/h4&gt;

&lt;p&gt;License information for the exposed API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-3&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The license name used for the API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL to the license used for the API. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;license-object-example&#34;&gt;License Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Apache 2.0
url: https://www.apache.org/licenses/LICENSE-2.0.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-serverobject-a-server-object&#34;&gt;&lt;a name=&#34;serverObject&#34;&gt;&lt;/a&gt;Server Object&lt;/h4&gt;

&lt;p&gt;An object representing a Server.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-4&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in &lt;code&gt;{&lt;/code&gt;brackets&lt;code&gt;}&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional string describing the host designated by the URL. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariables&#34;&gt;&lt;/a&gt;variables&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#serverVariableObject&#34;&gt;Server Variable Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map between a variable name and its value.  The value is used for substitution in the server&amp;rsquo;s URL template.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;server-object-example&#34;&gt;Server Object Example&lt;/h5&gt;

&lt;p&gt;A single server would be described as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;url&amp;quot;: &amp;quot;https://development.gigantic-server.com/v1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Development server&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;url: https://development.gigantic-server.com/v1
description: Development server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows how multiple servers can be described, for example, at the OpenAPI Object&amp;rsquo;s &lt;a href=&#34;#oasServers&#34;&gt;&lt;code&gt;servers&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;servers&amp;quot;: [
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://development.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Development server&amp;quot;
    },
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://staging.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Staging server&amp;quot;
    },
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://api.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Production server&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows how variables can be used for a server configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;servers&amp;quot;: [
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://{username}.gigantic-server.com:{port}/{basePath}&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;The production API server&amp;quot;,
      &amp;quot;variables&amp;quot;: {
        &amp;quot;username&amp;quot;: {
          &amp;quot;default&amp;quot;: &amp;quot;demo&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;this value is assigned by the service provider, in this example `gigantic-server.com`&amp;quot;
        },
        &amp;quot;port&amp;quot;: {
          &amp;quot;enum&amp;quot;: [
            &amp;quot;8443&amp;quot;,
            &amp;quot;443&amp;quot;
          ],
          &amp;quot;default&amp;quot;: &amp;quot;8443&amp;quot;
        },
        &amp;quot;basePath&amp;quot;: {
          &amp;quot;default&amp;quot;: &amp;quot;v2&amp;quot;
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - &#39;8443&#39;
        - &#39;443&#39;
      default: &#39;8443&#39;
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-servervariableobject-a-server-variable-object&#34;&gt;&lt;a name=&#34;serverVariableObject&#34;&gt;&lt;/a&gt;Server Variable Object&lt;/h4&gt;

&lt;p&gt;An object representing a Server Variable for server URL template substitution.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-5&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableEnum&#34;&gt;&lt;/a&gt;enum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;An enumeration of string values to be used if the substitution options are from a limited set.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The default value to use for substitution, which SHALL be sent if an alternate value is &lt;em&gt;not&lt;/em&gt; supplied. Note this behavior is different than the &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&amp;rsquo;s&lt;/a&gt; treatment of default values, because in those cases parameter values are optional.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional description for the server variable. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-componentsobject-a-components-object&#34;&gt;&lt;a name=&#34;componentsObject&#34;&gt;&lt;/a&gt;Components Object&lt;/h4&gt;

&lt;p&gt;Holds a set of reusable objects for different aspects of the OAS.
All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-6&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsSchemas&#34;&gt;&lt;/a&gt; schemas&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#schemaObject&#34;&gt;Schema Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsResponses&#34;&gt;&lt;/a&gt; responses&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#responseObject&#34;&gt;Response Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsParameters&#34;&gt;&lt;/a&gt; parameters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsExamples&#34;&gt;&lt;/a&gt; examples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#exampleObject&#34;&gt;Example Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsRequestBodies&#34;&gt;&lt;/a&gt; requestBodies&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsHeaders&#34;&gt;&lt;/a&gt; headers&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#headerObject&#34;&gt;Header Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsSecuritySchemes&#34;&gt;&lt;/a&gt; securitySchemes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsLinks&#34;&gt;&lt;/a&gt; links&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#linkObject&#34;&gt;Link Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsCallbacks&#34;&gt;&lt;/a&gt; callbacks&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#callbackObject&#34;&gt;Callback Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the fixed fields declared above are objects that MUST use keys that match the regular expression: &lt;code&gt;^[a-zA-Z0-9\.\-_]+$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Field Name Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User
User_1
User_Name
user-name
my.org.User
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;components-object-example&#34;&gt;Components Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;components&amp;quot;: {
  &amp;quot;schemas&amp;quot;: {
    &amp;quot;GeneralError&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;code&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
        },
        &amp;quot;message&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    },
    &amp;quot;Category&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;id&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
        },
        &amp;quot;name&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    },
    &amp;quot;Tag&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;id&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
        },
        &amp;quot;name&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    }
  },
  &amp;quot;parameters&amp;quot;: {
    &amp;quot;skipParam&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;skip&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;number of items to skip&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
      }
    },
    &amp;quot;limitParam&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;limit&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;max records to return&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot; : {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
      }
    }
  },
  &amp;quot;responses&amp;quot;: {
    &amp;quot;NotFound&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Entity not found.&amp;quot;
    },
    &amp;quot;IllegalInput&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Illegal input for operation.&amp;quot;
    },
    &amp;quot;GeneralError&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;General Error&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {
          &amp;quot;schema&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/GeneralError&amp;quot;
          }
        }
      }
    }
  },
  &amp;quot;securitySchemes&amp;quot;: {
    &amp;quot;api_key&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
    },
    &amp;quot;petstore_auth&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
      &amp;quot;flows&amp;quot;: {
        &amp;quot;implicit&amp;quot;: {
          &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://example.org/api/oauth/dialog&amp;quot;,
          &amp;quot;scopes&amp;quot;: {
            &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
            &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: &#39;#/components/schemas/GeneralError&#39;
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows: 
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathsobject-a-paths-object&#34;&gt;&lt;a name=&#34;pathsObject&#34;&gt;&lt;/a&gt;Paths Object&lt;/h4&gt;

&lt;p&gt;Holds the relative paths to the individual endpoints and their operations.
The path is appended to the URL from the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt; in order to construct the full URL.  The Paths MAY be empty, due to &lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathsPath&#34;&gt;&lt;/a&gt;/{path}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A relative path to an individual endpoint. The field name MUST begin with a slash. The path is &lt;strong&gt;appended&lt;/strong&gt; (no relative URL resolution) to the expanded URL from the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;url&lt;/code&gt; field in order to construct the full URL. &lt;a href=&#34;#pathTemplating&#34;&gt;Path templating&lt;/a&gt; is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it&amp;rsquo;s up to the tooling to decide which one to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;path-templating-matching&#34;&gt;Path Templating Matching&lt;/h5&gt;

&lt;p&gt;Assuming the following paths, the concrete definition, &lt;code&gt;/pets/mine&lt;/code&gt;, will be matched first if used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /pets/{petId}
  /pets/mine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following paths are considered identical and invalid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /pets/{petId}
  /pets/{name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following may lead to ambiguous resolution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /{entity}/me
  /books/{id}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;paths-object-example&#34;&gt;Paths Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;/pets&amp;quot;: {
    &amp;quot;get&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Returns all pets from the system that the user has access to&amp;quot;,
      &amp;quot;responses&amp;quot;: {
        &amp;quot;200&amp;quot;: {          
          &amp;quot;description&amp;quot;: &amp;quot;A list of pets.&amp;quot;,
          &amp;quot;content&amp;quot;: {
            &amp;quot;application/json&amp;quot;: {
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/pet&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/pets:
  get:
    description: Returns all pets from the system that the user has access to
    responses:
      &#39;200&#39;:
        description: A list of pets.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: &#39;#/components/schemas/pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathitemobject-a-path-item-object&#34;&gt;&lt;a name=&#34;pathItemObject&#34;&gt;&lt;/a&gt;Path Item Object&lt;/h4&gt;

&lt;p&gt;Describes the operations available on a single path.
A Path Item MAY be empty, due to &lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;.
The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-7&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows for an external definition of this path item. The referenced structure MUST be in the format of a &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;. If there are conflicts between the referenced definition and this Path Item&amp;rsquo;s definition, the behavior is &lt;em&gt;undefined&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional, string summary, intended to apply to all operations in this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional, string description, intended to apply to all operations in this path. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemGet&#34;&gt;&lt;/a&gt;get&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a GET operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPut&#34;&gt;&lt;/a&gt;put&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a PUT operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPost&#34;&gt;&lt;/a&gt;post&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a POST operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemDelete&#34;&gt;&lt;/a&gt;delete&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a DELETE operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemOptions&#34;&gt;&lt;/a&gt;options&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a OPTIONS operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemHead&#34;&gt;&lt;/a&gt;head&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a HEAD operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPatch&#34;&gt;&lt;/a&gt;patch&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a PATCH operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemTrace&#34;&gt;&lt;/a&gt;trace&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a TRACE operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An alternative &lt;code&gt;server&lt;/code&gt; array to service all operations in this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;. The list can use the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; to link to parameters that are defined at the &lt;a href=&#34;#componentsParameters&#34;&gt;OpenAPI Object&amp;rsquo;s components/parameters&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;path-item-object-example&#34;&gt;Path Item Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;get&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Returns pets based on ID&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;Find pets by ID&amp;quot;,
    &amp;quot;operationId&amp;quot;: &amp;quot;getPetsById&amp;quot;,
    &amp;quot;responses&amp;quot;: {
      &amp;quot;200&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;pet response&amp;quot;,
        &amp;quot;content&amp;quot;: {
          &amp;quot;*/*&amp;quot;: {
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
              }
            }
          }
        }
      },
      &amp;quot;default&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;error payload&amp;quot;,
        &amp;quot;content&amp;quot;: {
          &amp;quot;text/html&amp;quot;: {
            &amp;quot;schema&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
            }
          }
        }
      }
    }
  },
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet to use&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      },
      &amp;quot;style&amp;quot;: &amp;quot;simple&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;get:
  description: Returns pets based on ID
  summary: Find pets by ID
  operationId: getPetsById
  responses:
    &#39;200&#39;:
      description: pet response
      content:
        &#39;*/*&#39; :
          schema:
            type: array
            items:
              $ref: &#39;#/components/schemas/Pet&#39;
    default:
      description: error payload
      content:
        &#39;text/html&#39;:
          schema:
            $ref: &#39;#/components/schemas/ErrorModel&#39;
parameters:
- name: id
  in: path
  description: ID of pet to use
  required: true
  schema:
    type: array
    style: simple
    items:
      type: string  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-operationobject-a-operation-object&#34;&gt;&lt;a name=&#34;operationObject&#34;&gt;&lt;/a&gt;Operation Object&lt;/h4&gt;

&lt;p&gt;Describes a single API operation on a path.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-8&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short summary of what the operation does.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A verbose explanation of the operation behavior. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationId&#34;&gt;&lt;/a&gt;operationId&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is &lt;strong&gt;case-sensitive&lt;/strong&gt;. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of parameters that are applicable for this operation. If a parameter is already defined at the &lt;a href=&#34;#pathItemParameters&#34;&gt;Path Item&lt;/a&gt;, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;. The list can use the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; to link to parameters that are defined at the &lt;a href=&#34;#componentsParameters&#34;&gt;OpenAPI Object&amp;rsquo;s components/parameters&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationRequestBody&#34;&gt;&lt;/a&gt;requestBody&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The request body applicable for this operation.  The &lt;code&gt;requestBody&lt;/code&gt; is only supported in HTTP methods where the HTTP 1.1 specification &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-4.3.1&#34;&gt;RFC7231&lt;/a&gt; has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague, &lt;code&gt;requestBody&lt;/code&gt; SHALL be ignored by consumers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationResponses&#34;&gt;&lt;/a&gt;responses&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responsesObject&#34;&gt;Responses Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The list of possible responses as they are returned from executing this operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationCallbacks&#34;&gt;&lt;/a&gt;callbacks&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; that describes a request that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDeprecated&#34;&gt;&lt;/a&gt;deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. This definition overrides any declared top-level &lt;a href=&#34;#oasSecurity&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/a&gt;. To remove a top-level security declaration, an empty array can be used.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An alternative &lt;code&gt;server&lt;/code&gt; array to service this operation. If an alternative &lt;code&gt;server&lt;/code&gt; object is specified at the Path Item Object or Root level, it will be overridden by this value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;operation-object-example&#34;&gt;Operation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;tags&amp;quot;: [
    &amp;quot;pet&amp;quot;
  ],
  &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
  &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  ],
  &amp;quot;requestBody&amp;quot;: {
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/x-www-form-urlencoded&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
           &amp;quot;properties&amp;quot;: {
              &amp;quot;name&amp;quot;: { 
                &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;status&amp;quot;: {
                &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
             }
           },
        &amp;quot;required&amp;quot;: [&amp;quot;status&amp;quot;] 
        }
      }
    }
  },
  &amp;quot;responses&amp;quot;: {
    &amp;quot;200&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Pet updated.&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {},
        &amp;quot;application/xml&amp;quot;: {}
      }
    },
    &amp;quot;405&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Method Not Allowed&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {},
        &amp;quot;application/xml&amp;quot;: {}
      }
    }
  },
  &amp;quot;security&amp;quot;: [
    {
      &amp;quot;petstore_auth&amp;quot;: [
        &amp;quot;write:pets&amp;quot;,
        &amp;quot;read:pets&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tags:
- pet
summary: Updates a pet in the store with form data
operationId: updatePetWithForm
parameters:
- name: petId
  in: path
  description: ID of pet that needs to be updated
  required: true
  schema:
    type: string
requestBody:
  content:
    &#39;application/x-www-form-urlencoded&#39;:
      schema:
       properties:
          name: 
            description: Updated name of the pet
            type: string
          status:
            description: Updated status of the pet
            type: string
       required:
         - status
responses:
  &#39;200&#39;:
    description: Pet updated.
    content: 
      &#39;application/json&#39;: {}
      &#39;application/xml&#39;: {}
  &#39;405&#39;:
    description: Method Not Allowed
    content: 
      &#39;application/json&#39;: {}
      &#39;application/xml&#39;: {}
security:
- petstore_auth:
  - write:pets
  - read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-externaldocumentationobject-a-external-documentation-object&#34;&gt;&lt;a name=&#34;externalDocumentationObject&#34;&gt;&lt;/a&gt;External Documentation Object&lt;/h4&gt;

&lt;p&gt;Allows referencing an external resource for extended documentation.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-9&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the target documentation. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The URL for the target documentation. Value MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;external-documentation-object-example&#34;&gt;External Documentation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Find more info here&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://example.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: Find more info here
url: https://example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-parameterobject-a-parameter-object&#34;&gt;&lt;a name=&#34;parameterObject&#34;&gt;&lt;/a&gt;Parameter Object&lt;/h4&gt;

&lt;p&gt;Describes a single operation parameter.&lt;/p&gt;

&lt;p&gt;A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;parameter-locations&#34;&gt;Parameter Locations&lt;/h5&gt;

&lt;p&gt;There are four possible parameter locations specified by the &lt;code&gt;in&lt;/code&gt; field:
* path - Used together with &lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt;, where the parameter value is actually part of the operation&amp;rsquo;s URL. This does not include the host or base path of the API. For example, in &lt;code&gt;/items/{itemId}&lt;/code&gt;, the path parameter is &lt;code&gt;itemId&lt;/code&gt;.
* query - Parameters that are appended to the URL. For example, in &lt;code&gt;/items?id=###&lt;/code&gt;, the query parameter is &lt;code&gt;id&lt;/code&gt;.
* header - Custom headers that are expected as part of the request. Note that &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#page-22&#34;&gt;RFC7230&lt;/a&gt; states header names are case insensitive.
* cookie - Used to pass a specific cookie value to the API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-10&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the parameter. Parameter names are &lt;em&gt;case sensitive&lt;/em&gt;. &lt;ul&gt;&lt;li&gt;If &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&amp;quot;path&amp;quot;&lt;/code&gt;, the &lt;code&gt;name&lt;/code&gt; field MUST correspond to the associated path segment from the &lt;a href=&#34;#pathsPath&#34;&gt;path&lt;/a&gt; field in the &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;. See &lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt; for further information.&lt;li&gt;If &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&amp;quot;header&amp;quot;&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; field is &lt;code&gt;&amp;quot;Accept&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Content-Type&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;Authorization&amp;quot;&lt;/code&gt;, the parameter definition SHALL be ignored.&lt;li&gt;For all other cases, the &lt;code&gt;name&lt;/code&gt; corresponds to the parameter name used by the &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; property.&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The location of the parameter. Possible values are &amp;ldquo;query&amp;rdquo;, &amp;ldquo;header&amp;rdquo;, &amp;ldquo;path&amp;rdquo; or &amp;ldquo;cookie&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A brief description of the parameter. This could contain examples of use.  &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterRequired&#34;&gt;&lt;/a&gt;required&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether this parameter is mandatory. If the &lt;a href=&#34;#parameterIn&#34;&gt;parameter location&lt;/a&gt; is &amp;ldquo;path&amp;rdquo;, this property is &lt;strong&gt;REQUIRED&lt;/strong&gt; and its value MUST be &lt;code&gt;true&lt;/code&gt;. Otherwise, the property MAY be included and its default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDeprecated&#34;&gt;&lt;/a&gt; deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterAllowEmptyValue&#34;&gt;&lt;/a&gt; allowEmptyValue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the ability to pass empty-valued parameters. This is valid only for &lt;code&gt;query&lt;/code&gt; parameters and allows sending a parameter with an empty value. Default value is &lt;code&gt;false&lt;/code&gt;. If &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is used, and if behavior is &lt;code&gt;n/a&lt;/code&gt; (cannot be serialized), the value of &lt;code&gt;allowEmptyValue&lt;/code&gt; SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The rules for serialization of the parameter are specified in one of two ways.
For simpler scenarios, a &lt;a href=&#34;#parameterSchema&#34;&gt;&lt;code&gt;schema&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; can describe the structure and syntax of the parameter.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterStyle&#34;&gt;&lt;/a&gt;style&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of &lt;code&gt;in&lt;/code&gt;): for &lt;code&gt;query&lt;/code&gt; - &lt;code&gt;form&lt;/code&gt;; for &lt;code&gt;path&lt;/code&gt; - &lt;code&gt;simple&lt;/code&gt;; for &lt;code&gt;header&lt;/code&gt; - &lt;code&gt;simple&lt;/code&gt;; for &lt;code&gt;cookie&lt;/code&gt; - &lt;code&gt;form&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExplode&#34;&gt;&lt;/a&gt;explode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When this is true, parameter values of type &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt; generate separate parameters for each value of the array or key-value pair of the map.  For other types of parameters this property has no effect. When &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;form&lt;/code&gt;, the default value is &lt;code&gt;true&lt;/code&gt;. For all other styles, the default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterAllowReserved&#34;&gt;&lt;/a&gt;allowReserved&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the parameter value SHOULD allow reserved characters, as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.2&#34;&gt;RFC3986&lt;/a&gt; &lt;code&gt;:/?#[]@!$&amp;amp;&#39;()*+,;=&lt;/code&gt; to be included without percent-encoding. This property only applies to parameters with an &lt;code&gt;in&lt;/code&gt; value of &lt;code&gt;query&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The schema defining the type used for the parameter.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Example of the media type.  The example SHOULD match the specified schema and encoding properties if present.  The &lt;code&gt;example&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;examples&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;example&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExamples&#34;&gt;&lt;/a&gt;examples&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[ &lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Examples of the media type.  Each example SHOULD contain a value in the correct format as specified in the parameter encoding.  The &lt;code&gt;examples&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;example&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;examples&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more complex scenarios, the &lt;a href=&#34;#parameterContent&#34;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property can define the media type and schema of the parameter.
A parameter MUST contain either a &lt;code&gt;schema&lt;/code&gt; property, or a &lt;code&gt;content&lt;/code&gt; property, but not both.
When &lt;code&gt;example&lt;/code&gt; or &lt;code&gt;examples&lt;/code&gt; are provided in conjunction with the &lt;code&gt;schema&lt;/code&gt; object, the example MUST follow the prescribed serialization strategy for the parameter.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map containing the representations for the parameter. The key is the media type and the value describes it.  The map MUST only contain one entry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;style-values&#34;&gt;Style Values&lt;/h5&gt;

&lt;p&gt;In order to support common ways of serializing simple parameters, a set of &lt;code&gt;style&lt;/code&gt; values are defined.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;style&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypes&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;in&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path-style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.7&#34;&gt;RFC6570&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Label style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.5&#34;&gt;RFC6570&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;, &lt;code&gt;cookie&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Form style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.8&#34;&gt;RFC6570&lt;/a&gt;. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; with a &lt;code&gt;csv&lt;/code&gt; (when &lt;code&gt;explode&lt;/code&gt; is false) or &lt;code&gt;multi&lt;/code&gt; (when &lt;code&gt;explode&lt;/code&gt; is true) value from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Simple style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.2&#34;&gt;RFC6570&lt;/a&gt;.  This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; with a &lt;code&gt;csv&lt;/code&gt; value from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;spaceDelimited&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Space separated array values. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; equal to &lt;code&gt;ssv&lt;/code&gt; from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pipeDelimited&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pipe separated array values. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; equal to &lt;code&gt;pipes&lt;/code&gt; from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;deepObject&lt;/td&gt;
&lt;td&gt;&lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Provides a simple way of rendering nested objects using form parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;style-examples&#34;&gt;Style Examples&lt;/h5&gt;

&lt;p&gt;Assume a parameter named &lt;code&gt;color&lt;/code&gt; has one of the following values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   string -&amp;gt; &amp;quot;blue&amp;quot;
   array -&amp;gt; [&amp;quot;blue&amp;quot;,&amp;quot;black&amp;quot;,&amp;quot;brown&amp;quot;]
   object -&amp;gt; { &amp;quot;R&amp;quot;: 100, &amp;quot;G&amp;quot;: 200, &amp;quot;B&amp;quot;: 150 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following table shows examples of rendering differences for each value.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeFormat&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;explode&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;string&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;array&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;object&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;;color&lt;/td&gt;
&lt;td&gt;;color=blue&lt;/td&gt;
&lt;td&gt;;color=blue,black,brown&lt;/td&gt;
&lt;td&gt;;color=R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;;color&lt;/td&gt;
&lt;td&gt;;color=blue&lt;/td&gt;
&lt;td&gt;;color=blue;color=black;color=brown&lt;/td&gt;
&lt;td&gt;;R=100;G=200;B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.blue&lt;/td&gt;
&lt;td&gt;.blue.black.brown&lt;/td&gt;
&lt;td&gt;.R.100.G.200.B.150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.blue&lt;/td&gt;
&lt;td&gt;.blue.black.brown&lt;/td&gt;
&lt;td&gt;.R=100.G=200.B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;color=&lt;/td&gt;
&lt;td&gt;color=blue&lt;/td&gt;
&lt;td&gt;color=blue,black,brown&lt;/td&gt;
&lt;td&gt;color=R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;color=&lt;/td&gt;
&lt;td&gt;color=blue&lt;/td&gt;
&lt;td&gt;color=blue&amp;amp;color=black&amp;amp;color=brown&lt;/td&gt;
&lt;td&gt;R=100&amp;amp;G=200&amp;amp;B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;td&gt;blue,black,brown&lt;/td&gt;
&lt;td&gt;R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;td&gt;blue,black,brown&lt;/td&gt;
&lt;td&gt;R=100,G=200,B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;spaceDelimited&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue%20black%20brown&lt;/td&gt;
&lt;td&gt;R%20100%20G%20200%20B%20150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pipeDelimited&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue|black|brown&lt;/td&gt;
&lt;td&gt;R|100|G|200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;deepObject&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;color[R]=100&amp;amp;color[G]=200&amp;amp;color[B]=150&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;parameter-object-examples&#34;&gt;Parameter Object Examples&lt;/h5&gt;

&lt;p&gt;A header parameter with an array of 64 bit integer numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;token&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;token to be passed as a header&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
    }
  },
  &amp;quot;style&amp;quot;: &amp;quot;simple&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: token
in: header
description: token to be passed as a header
required: true
schema:
  type: array
  items:
    type: integer
    format: int64
style: simple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A path parameter of a string value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;username to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: username
in: path
description: username to fetch
required: true
schema:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An optional query parameter of a string value, allowing multiple values by repeating the query parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;ID of the object to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: false,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  },
  &amp;quot;style&amp;quot;: &amp;quot;form&amp;quot;,
  &amp;quot;explode&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: id
in: query
description: ID of the object to fetch
required: false
schema:
  type: array
  items:
    type: string
style: form
explode: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A free-form query parameter, allowing undefined parameters of a specific type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;freeForm&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;additionalProperties&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
  },
  &amp;quot;style&amp;quot;: &amp;quot;form&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in: query
name: freeForm
schema:
  type: object
  additionalProperties:
    type: integer
style: form
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A complex parameter using &lt;code&gt;content&lt;/code&gt; to define serialization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;coordinates&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;lat&amp;quot;,
          &amp;quot;long&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;lat&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;
          },
          &amp;quot;long&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in: query
name: coordinates
content:
  application/json:
    schema:
      type: object
      required:
        - lat
        - long
      properties:
        lat:
          type: number
        long:
          type: number
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-requestbodyobject-a-request-body-object&#34;&gt;&lt;a name=&#34;requestBodyObject&#34;&gt;&lt;/a&gt;Request Body Object&lt;/h4&gt;

&lt;p&gt;Describes a single request body.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-11&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A brief description of the request body. This could contain examples of use.  &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The content of the request body. The key is a media type or &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#appendix-D&#34;&gt;media type range&lt;/a&gt; and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyRequired&#34;&gt;&lt;/a&gt;required&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines if the request body is required in the request. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;request-body-examples&#34;&gt;Request Body Examples&lt;/h5&gt;

&lt;p&gt;A request body with a referenced model definition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/User&amp;quot;
      },
      &amp;quot;examples&amp;quot;: {
          &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User Example&amp;quot;, 
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.json&amp;quot;
          } 
        }
    },
    &amp;quot;application/xml&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/User&amp;quot;
      },
      &amp;quot;examples&amp;quot;: {
          &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in XML&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.xml&amp;quot;
          }
        }
    },
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;examples&amp;quot;: {
        &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in Plain text&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.txt&amp;quot; 
        }
      } 
    },
    &amp;quot;*/*&amp;quot;: {
      &amp;quot;examples&amp;quot;: {
        &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in other format&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.whatever&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: user to add to the system
content: 
  &#39;application/json&#39;:
    schema:
      $ref: &#39;#/components/schemas/User&#39;
    examples:
      user:
        summary: User Example
        externalValue: &#39;http://foo.bar/examples/user-example.json&#39;
  &#39;application/xml&#39;:
    schema:
      $ref: &#39;#/components/schemas/User&#39;
    examples:
      user:
        summary: User Example in XML
        externalValue: &#39;http://foo.bar/examples/user-example.xml&#39;
  &#39;text/plain&#39;:
    examples:
      user:
        summary: User example in text plain format
        externalValue: &#39;http://foo.bar/examples/user-example.txt&#39;
  &#39;*/*&#39;:
    examples:
      user: 
        summary: User example in other format
        externalValue: &#39;http://foo.bar/examples/user-example.whatever&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A body parameter that is an array of string values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: user to add to the system
required: true
content:
  text/plain:
    schema:
      type: array
      items:
        type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-mediatypeobject-a-media-type-object&#34;&gt;&lt;a name=&#34;mediaTypeObject&#34;&gt;&lt;/a&gt;Media Type Object&lt;/h4&gt;

&lt;p&gt;Each Media Type Object provides schema and examples for the media type identified by its key.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-12&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The schema defining the content of the request, response, or parameter.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The &lt;code&gt;example&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;examples&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;example&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeExamples&#34;&gt;&lt;/a&gt;examples&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[ &lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The &lt;code&gt;examples&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;example&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;examples&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeEncoding&#34;&gt;&lt;/a&gt;encoding&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#encodingObject&#34;&gt;Encoding Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to &lt;code&gt;requestBody&lt;/code&gt; objects when the media type is &lt;code&gt;multipart&lt;/code&gt; or &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;media-type-examples&#34;&gt;Media Type Examples&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;application/json&amp;quot;: {
    &amp;quot;schema&amp;quot;: {
         &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
    },
    &amp;quot;examples&amp;quot;: {
      &amp;quot;cat&amp;quot; : {
        &amp;quot;summary&amp;quot;: &amp;quot;An example of a cat&amp;quot;,
        &amp;quot;value&amp;quot;: 
          {
            &amp;quot;name&amp;quot;: &amp;quot;Fluffy&amp;quot;,
            &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;,
            &amp;quot;color&amp;quot;: &amp;quot;White&amp;quot;,
            &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;,
            &amp;quot;breed&amp;quot;: &amp;quot;Persian&amp;quot;
          }
      },
      &amp;quot;dog&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;An example of a dog with a cat&#39;s name&amp;quot;,
        &amp;quot;value&amp;quot; :  { 
          &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
          &amp;quot;petType&amp;quot;: &amp;quot;Dog&amp;quot;,
          &amp;quot;color&amp;quot;: &amp;quot;Black&amp;quot;,
          &amp;quot;gender&amp;quot;: &amp;quot;Female&amp;quot;,
          &amp;quot;breed&amp;quot;: &amp;quot;Mixed&amp;quot;
        },
      &amp;quot;frog&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/examples/frog-example&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;application/json: 
  schema:
    $ref: &amp;quot;#/components/schemas/Pet&amp;quot;
  examples:
    cat:
      summary: An example of a cat
      value:
        name: Fluffy
        petType: Cat
        color: White
        gender: male
        breed: Persian
    dog:
      summary: An example of a dog with a cat&#39;s name
      value:
        name: Puma
        petType: Dog
        color: Black
        gender: Female
        breed: Mixed
    frog:
      $ref: &amp;quot;#/components/examples/frog-example&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;considerations-for-file-uploads&#34;&gt;Considerations for File Uploads&lt;/h5&gt;

&lt;p&gt;In contrast with the 2.0 specification, &lt;code&gt;file&lt;/code&gt; input/output content in OpenAPI is described with the same semantics as any other schema type. Specifically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# content transferred with base64 encoding
schema:
  type: string
  format: base64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# content transferred in binary (octet-stream):
schema:
  type: string
  format: binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These examples apply to either input payloads of file uploads or response payloads.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;requestBody&lt;/code&gt; for submitting a file in a &lt;code&gt;POST&lt;/code&gt; operation may look like the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    application/octet-stream:
      # any media type is accepted, functionally equivalent to `*/*`
      schema:
        # a binary file of any type
        type: string
        format: binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, specific media types MAY be specified:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# multiple, specific media types may be specified:
requestBody:
  content:
      # a binary file of type png or jpeg
    &#39;image/jpeg&#39;:
      schema:
        type: string
        format: binary
    &#39;image/png&#39;:
      schema:
        type: string
        format: binary        
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upload multiple files, a &lt;code&gt;multipart&lt;/code&gt; media type MUST be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/form-data:
      schema:
        properties:
          # The property name &#39;file&#39; will be used for all files.
          file:
            type: array
            items:
              type: string
              format: binary

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;support-for-x-www-form-urlencoded-request-bodies&#34;&gt;Support for x-www-form-urlencoded Request Bodies&lt;/h5&gt;

&lt;p&gt;To submit content using form url encoding via &lt;a href=&#34;https://tools.ietf.org/html/rfc1866&#34;&gt;RFC1866&lt;/a&gt;, the following
definition may be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    application/x-www-form-urlencoded:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # complex types are stringified to support RFC 1866
            type: object
            properties: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the contents in the &lt;code&gt;requestBody&lt;/code&gt; MUST be stringified per &lt;a href=&#34;https://tools.ietf.org/html/rfc1866/&#34;&gt;RFC1866&lt;/a&gt; when passed to the server.  In addition, the &lt;code&gt;address&lt;/code&gt; field complex object will be stringified.&lt;/p&gt;

&lt;p&gt;When passing complex objects in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; content type, the default serialization strategy of such properties is described in the &lt;a href=&#34;#encodingObject&#34;&gt;&lt;code&gt;Encoding Object&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;#encodingStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property as &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;special-considerations-for-multipart-content&#34;&gt;Special Considerations for &lt;code&gt;multipart&lt;/code&gt; Content&lt;/h5&gt;

&lt;p&gt;It is common to use &lt;code&gt;multipart/form-data&lt;/code&gt; as a &lt;code&gt;Content-Type&lt;/code&gt; when transferring request bodies to operations.  In contrast to 2.0, a &lt;code&gt;schema&lt;/code&gt; is REQUIRED to define the input parameters to the operation when using &lt;code&gt;multipart&lt;/code&gt; content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.&lt;/p&gt;

&lt;p&gt;When passing in &lt;code&gt;multipart&lt;/code&gt; types, boundaries MAY be used to separate sections of the content being transferred — thus, the following default &lt;code&gt;Content-Type&lt;/code&gt;s are defined for &lt;code&gt;multipart&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the property is a primitive, or an array of primitive values, the default Content-Type is &lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the property is complex, or an array of complex values, the default Content-Type is &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the property is a &lt;code&gt;type: string&lt;/code&gt; with &lt;code&gt;format: binary&lt;/code&gt; or &lt;code&gt;format: base64&lt;/code&gt; (aka a file object), the default Content-Type is &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # default Content-Type for objects is `application/json`
            type: object
            properties: {}
          profileImage:
            # default Content-Type for string/binary is `application/octet-stream`
            type: string
            format: binary
          children:
            # default Content-Type for arrays is based on the `inner` type (text/plain here)
            type: array
            items:
              type: string
          addresses:
            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)
            type: array
            items:
              type: &#39;#/components/schemas/Address&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;code&gt;encoding&lt;/code&gt; attribute is introduced to give you control over the serialization of parts of &lt;code&gt;multipart&lt;/code&gt; request bodies.  This attribute is &lt;em&gt;only&lt;/em&gt; applicable to &lt;code&gt;multipart&lt;/code&gt; and &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; request bodies.&lt;/p&gt;

&lt;h4 id=&#34;a-name-encodingobject-a-encoding-object&#34;&gt;&lt;a name=&#34;encodingObject&#34;&gt;&lt;/a&gt;Encoding Object&lt;/h4&gt;

&lt;p&gt;A single encoding definition applied to a single schema property.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-13&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingContentType&#34;&gt;&lt;/a&gt;contentType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The Content-Type for encoding a specific property. Default value depends on the property type: for &lt;code&gt;string&lt;/code&gt; with &lt;code&gt;format&lt;/code&gt; being &lt;code&gt;binary&lt;/code&gt; – &lt;code&gt;application/octet-stream&lt;/code&gt;; for other primitive types – &lt;code&gt;text/plain&lt;/code&gt;; for &lt;code&gt;object&lt;/code&gt; - &lt;code&gt;application/json&lt;/code&gt;; for &lt;code&gt;array&lt;/code&gt; – the default is defined based on the inner type. The value can be a specific media type (e.g. &lt;code&gt;application/json&lt;/code&gt;), a wildcard media type (e.g. &lt;code&gt;image/*&lt;/code&gt;), or a comma-separated list of the two types.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingHeaders&#34;&gt;&lt;/a&gt;headers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map allowing additional information to be provided as headers, for example &lt;code&gt;Content-Disposition&lt;/code&gt;.  &lt;code&gt;Content-Type&lt;/code&gt; is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a &lt;code&gt;multipart&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingStyle&#34;&gt;&lt;/a&gt;style&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Describes how a specific property value will be serialized depending on its type.  See &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; for details on the &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property. The behavior follows the same values as &lt;code&gt;query&lt;/code&gt; parameters, including default values. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingExplode&#34;&gt;&lt;/a&gt;explode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When this is true, property values of type &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt; generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When &lt;a href=&#34;#encodingStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;form&lt;/code&gt;, the default value is &lt;code&gt;true&lt;/code&gt;. For all other styles, the default value is &lt;code&gt;false&lt;/code&gt;. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingAllowReserved&#34;&gt;&lt;/a&gt;allowReserved&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the parameter value SHOULD allow reserved characters, as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.2&#34;&gt;RFC3986&lt;/a&gt; &lt;code&gt;:/?#[]@!$&amp;amp;&#39;()*+,;=&lt;/code&gt; to be included without percent-encoding. The default value is &lt;code&gt;false&lt;/code&gt;. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;encoding-object-example&#34;&gt;Encoding Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/mixed:
      schema:
        type: object
        properties:
          id:
            # default is text/plain
            type: string
            format: uuid
          address:
            # default is application/json
            type: object
            properties: {}
          historyMetadata:
            # need to declare XML format!
            description: metadata in XML format
            type: object
            properties: {}
          profileImage:
            # default is application/octet-stream, need to declare an image type only!
            type: string
            format: binary
      encoding:
        historyMetadata:
          # require XML Content-Type in utf-8 encoding
          contentType: application/xml; charset=utf-8
        profileImage:
          # only accept png/jpeg
          contentType: image/png, image/jpeg
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responsesobject-a-responses-object&#34;&gt;&lt;a name=&#34;responsesObject&#34;&gt;&lt;/a&gt;Responses Object&lt;/h4&gt;

&lt;p&gt;A container for the expected responses of an operation.
The container maps a HTTP response code to the expected response.&lt;/p&gt;

&lt;p&gt;The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.
However, documentation is expected to cover a successful operation response and any known errors.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; MAY be used as a default response object for all HTTP codes
that are not covered individually by the specification.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Responses Object&lt;/code&gt; MUST contain at least one response code, and it
SHOULD be the response for a successful operation call.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-14&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can link to a response that the &lt;a href=&#34;#componentsResponses&#34;&gt;OpenAPI Object&amp;rsquo;s components/responses&lt;/a&gt; section defines.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-1&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesCode&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#httpCodes&#34;&gt;HTTP Status Code&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Any &lt;a href=&#34;#httpCodes&#34;&gt;HTTP status code&lt;/a&gt; can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code.  A &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can link to a response that is defined in the &lt;a href=&#34;#componentsResponses&#34;&gt;OpenAPI Object&amp;rsquo;s components/responses&lt;/a&gt; section. This field MUST be enclosed in quotation marks (for example, &amp;ldquo;200&amp;rdquo;) for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character &lt;code&gt;X&lt;/code&gt;. For example, &lt;code&gt;2XX&lt;/code&gt; represents all response codes between &lt;code&gt;[200-299]&lt;/code&gt;. Only the following range definitions are allowed: &lt;code&gt;1XX&lt;/code&gt;, &lt;code&gt;2XX&lt;/code&gt;, &lt;code&gt;3XX&lt;/code&gt;, &lt;code&gt;4XX&lt;/code&gt;, and &lt;code&gt;5XX&lt;/code&gt;. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;responses-object-example&#34;&gt;Responses Object Example&lt;/h5&gt;

&lt;p&gt;A 200 response for a successful operation and a default response for others (implying an error):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;a pet to be returned&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
        }
      }
    }
  },
  &amp;quot;default&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unexpected error&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#39;200&#39;:
  description: a pet to be returned
  content: 
    application/json:
      schema:
        $ref: &#39;#/components/schemas/Pet&#39;
default:
  description: Unexpected error
  content:
    application/json:
      schema:
        $ref: &#39;#/components/schemas/ErrorModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responseobject-a-response-object&#34;&gt;&lt;a name=&#34;responseObject&#34;&gt;&lt;/a&gt;Response Object&lt;/h4&gt;

&lt;p&gt;Describes a single response from an API Operation, including design-time, static
&lt;code&gt;links&lt;/code&gt; to operations based on the response.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-15&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. A short description of the response. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseHeaders&#34;&gt;&lt;/a&gt;headers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt;  | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Maps a header name to its definition. &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#page-22&#34;&gt;RFC7230&lt;/a&gt; states header names are case insensitive. If a response header is defined with the name &lt;code&gt;&amp;quot;Content-Type&amp;quot;&lt;/code&gt;, it SHALL be ignored.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map containing descriptions of potential response payloads. The key is a media type or &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#appendix-D&#34;&gt;media type range&lt;/a&gt; and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseLinks&#34;&gt;&lt;/a&gt;links&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for &lt;a href=&#34;#componentsObject&#34;&gt;Component Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;response-object-examples&#34;&gt;Response Object Examples&lt;/h5&gt;

&lt;p&gt;Response of an array of a complex type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A complex object array response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/VeryComplexType&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A complex object array response
content: 
  application/json:
    schema: 
      type: array
      items:
        $ref: &#39;#/components/schemas/VeryComplexType&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response with a string type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
content:
  text/plain:
    schema:
      type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plain text response with headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  },
  &amp;quot;headers&amp;quot;: {
    &amp;quot;X-Rate-Limit-Limit&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    },
    &amp;quot;X-Rate-Limit-Remaining&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of remaining requests in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    },
    &amp;quot;X-Rate-Limit-Reset&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of seconds left in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
content:
  text/plain:
    schema:
      type: string
    example: &#39;whoa!&#39;
headers:
  X-Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Reset:
    description: The number of seconds left in the current period
    schema:
      type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response with no return value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;object created&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: object created
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-callbackobject-a-callback-object&#34;&gt;&lt;a name=&#34;callbackObject&#34;&gt;&lt;/a&gt;Callback Object&lt;/h4&gt;

&lt;p&gt;A map of possible out-of band callbacks related to the parent operation.
Each value in the map is a &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; that describes a set of requests that may be initiated by the API provider and the expected responses.
The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-2&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;callbackExpression&#34;&gt;&lt;/a&gt;{expression}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A Path Item Object used to define a callback request and expected responses.  A &lt;a href=&#34;../examples/v3.0/callback-example.yaml&#34;&gt;complete example&lt;/a&gt; is available.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;key-expression&#34;&gt;Key Expression&lt;/h5&gt;

&lt;p&gt;The key that identifies the &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; is a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.
A simple example might be &lt;code&gt;$request.body#/url&lt;/code&gt;.
However, using a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; the complete HTTP message can be accessed.
This includes accessing any part of a body that a JSON Pointer &lt;a href=&#34;https://tools.ietf.org/html/rfc6901&#34;&gt;RFC6901&lt;/a&gt; can reference.&lt;/p&gt;

&lt;p&gt;For example, given the following HTTP request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1
Host: example.org
Content-Type: application/json
Content-Length: 187

{
  &amp;quot;failedUrl&amp;quot; : &amp;quot;http://clientdomain.com/failed&amp;quot;,
  &amp;quot;successUrls&amp;quot; : [
    &amp;quot;http://clientdomain.com/fast&amp;quot;,
    &amp;quot;http://clientdomain.com/medium&amp;quot;,
    &amp;quot;http://clientdomain.com/slow&amp;quot;
  ] 
}

201 Created
Location: http://example.org/subscription/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named &lt;code&gt;eventType&lt;/code&gt; and a query parameter named &lt;code&gt;queryUrl&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$url&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning&#34;&gt;http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POST&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.path.eventType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;myevent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.query.queryUrl&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/stillrunning&#34;&gt;http://clientdomain.com/stillrunning&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.header.content-Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;application/json&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.body#/failedUrl&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/failed&#34;&gt;http://clientdomain.com/failed&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.body#/successUrls/2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/medium&#34;&gt;http://clientdomain.com/medium&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$response.header.Location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://example.org/subscription/1&#34;&gt;http://example.org/subscription/1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;callback-object-example&#34;&gt;Callback Object Example&lt;/h5&gt;

&lt;p&gt;The following example shows a callback to the URL specified by the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; property in the request body.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;myWebhook:
  &#39;http://notificationServer.com?transactionId={$request.body#/id}&amp;amp;email={$request.body#/email}&#39;:
    post:
      requestBody:
        description: Callback payload
        content: 
          &#39;application/json&#39;:
            schema:
              $ref: &#39;#/components/schemas/SomePayload&#39;
      responses:
        &#39;200&#39;:
          description: webhook successfully processed and no retries will be performed
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-exampleobject-a-example-object&#34;&gt;&lt;a name=&#34;exampleObject&#34;&gt;&lt;/a&gt;Example Object&lt;/h4&gt;

&lt;h5 id=&#34;fixed-fields-16&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Short description for the example.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Long description for the example. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleValue&#34;&gt;&lt;/a&gt;value&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Embedded literal example. The &lt;code&gt;value&lt;/code&gt; field and &lt;code&gt;externalValue&lt;/code&gt; field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleExternalValue&#34;&gt;&lt;/a&gt;externalValue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The &lt;code&gt;value&lt;/code&gt; field and &lt;code&gt;externalValue&lt;/code&gt; field are mutually exclusive.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all cases, the example value is expected to be compatible with the type schema
of its associated value.  Tooling implementations MAY choose to
validate compatibility automatically, and reject the example value(s) if incompatible.&lt;/p&gt;

&lt;h5 id=&#34;example-object-examples&#34;&gt;Example Object Examples&lt;/h5&gt;

&lt;p&gt;In a model:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schemas:
  properties:
    name:
      type: string
      examples:
        name:
          $ref: http://example.org/petapi-examples/openapi.json#/components/examples/name-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a request body:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    &#39;application/json&#39;:
      schema:
        $ref: &#39;#/components/schemas/Address&#39;
      examples: 
        foo:
          summary: A foo example
          value: {&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;}
        bar:
          summary: A bar example
          value: {&amp;quot;bar&amp;quot;: &amp;quot;baz&amp;quot;}
    &#39;application/xml&#39;:
      examples: 
        xmlExample:
          summary: This is an example in XML
          externalValue: &#39;http://example.org/examples/address-example.xml&#39;
    &#39;text/plain&#39;:
      examples:
        textExample: 
          summary: This is a text example
          externalValue: &#39;http://foo.bar/examples/address-example.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parameters:
  - name: &#39;zipCode&#39;
    in: &#39;query&#39;
    schema:
      type: &#39;string&#39;
      format: &#39;zip-code&#39;
      examples:
        zip-example: 
          $ref: &#39;#/components/examples/zip-example&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;responses:
  &#39;200&#39;:
    description: your car appointment has been booked
    content: 
      application/json:
        schema:
          $ref: &#39;#/components/schemas/SuccessResponse&#39;
        examples:
          confirmation-success:
            $ref: &#39;#/components/examples/confirmation-success&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-linkobject-a-link-object&#34;&gt;&lt;a name=&#34;linkObject&#34;&gt;&lt;/a&gt;Link Object&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Link object&lt;/code&gt; represents a possible design-time link for a response.
The presence of a link does not guarantee the caller&amp;rsquo;s ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.&lt;/p&gt;

&lt;p&gt;Unlike &lt;em&gt;dynamic&lt;/em&gt; links (i.e. links provided &lt;strong&gt;in&lt;/strong&gt; the response payload), the OAS linking mechanism does not require link information in the runtime response.&lt;/p&gt;

&lt;p&gt;For computing links, and providing instructions to execute them, a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; is used for accessing values in an operation and using them as parameters while invoking the linked operation.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-17&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkOperationRef&#34;&gt;&lt;/a&gt;operationRef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A relative or absolute reference to an OAS operation. This field is mutually exclusive of the &lt;code&gt;operationId&lt;/code&gt; field, and MUST point to an &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;. Relative &lt;code&gt;operationRef&lt;/code&gt; values MAY be used to locate an existing &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; in the OpenAPI definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkOperationId&#34;&gt;&lt;/a&gt;operationId&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of an &lt;em&gt;existing&lt;/em&gt;, resolvable OAS operation, as defined with a unique &lt;code&gt;operationId&lt;/code&gt;.  This field is mutually exclusive of the &lt;code&gt;operationRef&lt;/code&gt; field.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, Any | &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map representing parameters to pass to an operation as specified with &lt;code&gt;operationId&lt;/code&gt; or identified via &lt;code&gt;operationRef&lt;/code&gt;. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the &lt;a href=&#34;#parameterIn&#34;&gt;parameter location&lt;/a&gt; &lt;code&gt;[{in}.]{name}&lt;/code&gt; for operations that use the same parameter name in different locations (e.g. path.id).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkRequestBody&#34;&gt;&lt;/a&gt;requestBody&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any | &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A literal value or &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt; to use as a request body when calling the target operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A description of the link. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkServer&#34;&gt;&lt;/a&gt;server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A server object to be used by the target operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A linked operation MUST be identified using either an &lt;code&gt;operationRef&lt;/code&gt; or &lt;code&gt;operationId&lt;/code&gt;.
In the case of an &lt;code&gt;operationId&lt;/code&gt;, it MUST be unique and resolved in the scope of the OAS document.
Because of the potential for name clashes, the &lt;code&gt;operationRef&lt;/code&gt; syntax is preferred
for specifications with external references.&lt;/p&gt;

&lt;h5 id=&#34;examples&#34;&gt;Examples&lt;/h5&gt;

&lt;p&gt;Computing a link from a request operation where the &lt;code&gt;$request.path.id&lt;/code&gt; is used to pass a request parameter to the linked operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;paths:
  /users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: the user identifier, as userId 
      schema:
        type: string
    get:
      responses:
        &#39;200&#39;:
          description: the user being returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid: # the unique user id
                    type: string
                    format: uuid
          links:
            address:
              # the target link operationId
              operationId: getUserAddress
              parameters:
                # get the `id` field from the request path parameter named `id`
                userId: $request.path.id
  # the path item of the linked operation
  /users/{userid}/address:
    parameters:
    - name: userid
      in: path
      required: true
      description: the user identifier, as userId 
      schema:
        type: string
    # linked operation
    get:
      operationId: getUserAddress
      responses:
        &#39;200&#39;:
          description: the user&#39;s address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a runtime expression fails to evaluate, no parameter value is passed to the target operation.&lt;/p&gt;

&lt;p&gt;Values from the response body can be used to drive a linked operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  address:
    operationId: getUserAddressByUUID
    parameters:
      # get the `uuid` field from the `uuid` field in the response body
      userUuid: $response.body#/uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clients follow all links at their discretion.
Neither permissions, nor the capability to make a successful call to that link, is guaranteed
solely by the existence of a relationship.&lt;/p&gt;

&lt;h5 id=&#34;operationref-examples&#34;&gt;OperationRef Examples&lt;/h5&gt;

&lt;p&gt;As references to &lt;code&gt;operationId&lt;/code&gt; MAY NOT be possible (the &lt;code&gt;operationId&lt;/code&gt; is an optional
value), references MAY also be made through a relative &lt;code&gt;operationRef&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  UserRepositories:
    # returns array of &#39;#/components/schemas/repository&#39;
    operationRef: &#39;#/paths/~12.0~1repositories~1{username}/get&#39;
    parameters:
      username: $response.body#/username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or an absolute &lt;code&gt;operationRef&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  UserRepositories:
    # returns array of &#39;#/components/schemas/repository&#39;
    operationRef: &#39;https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get&#39;
    parameters:
      username: $response.body#/username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the use of &lt;code&gt;operationRef&lt;/code&gt;, the &lt;em&gt;escaped forward-slash&lt;/em&gt; is necessary when
using JSON references.&lt;/p&gt;

&lt;h5 id=&#34;a-name-runtimeexpression-a-runtime-expressions&#34;&gt;&lt;a name=&#34;runtimeExpression&#34;&gt;&lt;/a&gt;Runtime Expressions&lt;/h5&gt;

&lt;p&gt;Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.
This mechanism is used by &lt;a href=&#34;#linkObject&#34;&gt;Link Objects&lt;/a&gt; and &lt;a href=&#34;#callbackObject&#34;&gt;Callback Objects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The runtime expression is defined by the following &lt;a href=&#34;https://tools.ietf.org/html/rfc5234&#34;&gt;ABNF&lt;/a&gt; syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      expression = ( &amp;quot;$url&amp;quot; | &amp;quot;$method&amp;quot; | &amp;quot;$statusCode&amp;quot; | &amp;quot;$request.&amp;quot; source | &amp;quot;$response.&amp;quot; source )
      source = ( header-reference | query-reference | path-reference | body-reference )  
      header-reference = &amp;quot;header.&amp;quot; token
      query-reference = &amp;quot;query.&amp;quot; name  
      path-reference = &amp;quot;path.&amp;quot; name
      body-reference = &amp;quot;body&amp;quot; [&amp;quot;#&amp;quot; fragment]
      fragment = a JSON Pointer [RFC 6901](https://tools.ietf.org/html/rfc6901)  
      name = *( char )
      char = as per RFC [7159](https://tools.ietf.org/html/rfc7159#section-7)
      token = as per RFC [7230](https://tools.ietf.org/html/rfc7230#section-3.2.6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; identifier is case-sensitive, whereas &lt;code&gt;token&lt;/code&gt; is not.&lt;/p&gt;

&lt;p&gt;The table below provides examples of runtime expressions and examples of their use in a value:&lt;/p&gt;

&lt;h5 id=&#34;a-name-runtimeexpressionexamples-a-examples&#34;&gt;&lt;a name=&#34;runtimeExpressionExamples&#34;&gt;&lt;/a&gt;Examples&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source Location&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;example expression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP Method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$method&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The allowable values for the &lt;code&gt;$method&lt;/code&gt; will be those for the HTTP operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Requested media type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.header.accept&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request parameter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.path.id&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Request parameters MUST be declared in the &lt;code&gt;parameters&lt;/code&gt; section of the parent operation or they cannot be evaluated. This includes request headers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request body property&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.body#/user/uuid&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In operations which accept payloads, references may be made to portions of the &lt;code&gt;requestBody&lt;/code&gt; or the entire body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request URL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$url&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Response value&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$response.body#/status&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In operations which return payloads, references may be made to portions of the response body or the entire body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Response header&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$response.header.Server&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Single header values only are available&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Runtime expressions preserve the type of the referenced value.
Expressions can be embedded into string values by surrounding the expression with &lt;code&gt;{}&lt;/code&gt; curly braces.&lt;/p&gt;

&lt;h4 id=&#34;a-name-headerobject-a-header-object&#34;&gt;&lt;a name=&#34;headerObject&#34;&gt;&lt;/a&gt;Header Object&lt;/h4&gt;

&lt;p&gt;The Header Object follows the structure of the &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; with the following changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; MUST NOT be specified, it is given in the corresponding &lt;code&gt;headers&lt;/code&gt; map.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; MUST NOT be specified, it is implicitly in &lt;code&gt;header&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All traits that are affected by the location MUST be applicable to a location of &lt;code&gt;header&lt;/code&gt; (for example, &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;header-object-example&#34;&gt;Header Object Example&lt;/h5&gt;

&lt;p&gt;A simple header of type &lt;code&gt;integer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: The number of allowed requests in the current period
schema:
  type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-tagobject-a-tag-object&#34;&gt;&lt;a name=&#34;tagObject&#34;&gt;&lt;/a&gt;Tag Object&lt;/h4&gt;

&lt;p&gt;Adds metadata to a single tag that is used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;.
It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-18&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the tag.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description for the tag. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;tag-object-example&#34;&gt;Tag Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
	&amp;quot;description&amp;quot;: &amp;quot;Pets operations&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: pet
description: Pets operations
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-referenceobject-a-reference-object&#34;&gt;&lt;a name=&#34;referenceObject&#34;&gt;&lt;/a&gt;Reference Object&lt;/h4&gt;

&lt;p&gt;A simple object to allow referencing other components in the specification, internally and externally.&lt;/p&gt;

&lt;p&gt;The Reference Object is defined by &lt;a href=&#34;https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&#34;&gt;JSON Reference&lt;/a&gt; and follows the same structure, behavior and rules.&lt;/p&gt;

&lt;p&gt;For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-19&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;referenceRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The reference string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object cannot be extended with additional properties and any properties added SHALL be ignored.&lt;/p&gt;

&lt;h5 id=&#34;reference-object-example&#34;&gt;Reference Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: &#39;#/components/schemas/Pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-schema-document-example&#34;&gt;Relative Schema Document Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;Pet.json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: Pet.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-documents-with-embedded-schema-example&#34;&gt;Relative Documents With Embedded Schema Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;definitions.json#/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: definitions.yaml#/Pet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-schemaobject-a-schema-object&#34;&gt;&lt;a name=&#34;schemaObject&#34;&gt;&lt;/a&gt;Schema Object&lt;/h4&gt;

&lt;p&gt;The Schema Object allows the definition of input and output data types.
These types can be objects, but also primitives and arrays.
This object is an extended subset of the &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON Schema Specification Wright Draft 00&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information about the properties, see &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-00&#34;&gt;JSON Schema Core&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-validation-00&#34;&gt;JSON Schema Validation&lt;/a&gt;.
Unless stated otherwise, the property definitions follow the JSON Schema.&lt;/p&gt;

&lt;h5 id=&#34;properties&#34;&gt;Properties&lt;/h5&gt;

&lt;p&gt;The following properties are taken directly from the JSON Schema definition and follow the same specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;multipleOf&lt;/li&gt;
&lt;li&gt;maximum&lt;/li&gt;
&lt;li&gt;exclusiveMaximum&lt;/li&gt;
&lt;li&gt;minimum&lt;/li&gt;
&lt;li&gt;exclusiveMinimum&lt;/li&gt;
&lt;li&gt;maxLength&lt;/li&gt;
&lt;li&gt;minLength&lt;/li&gt;
&lt;li&gt;pattern (This string SHOULD be a valid regular expression, according to the &lt;a href=&#34;https://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5&#34;&gt;ECMA 262 regular expression&lt;/a&gt; dialect)&lt;/li&gt;
&lt;li&gt;maxItems&lt;/li&gt;
&lt;li&gt;minItems&lt;/li&gt;
&lt;li&gt;uniqueItems&lt;/li&gt;
&lt;li&gt;maxProperties&lt;/li&gt;
&lt;li&gt;minProperties&lt;/li&gt;
&lt;li&gt;required&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following properties are taken from the JSON Schema definition but their definitions were adjusted to the OpenAPI Specification.
- type - Value MUST be a string. Multiple types via an array are not supported.
- allOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- oneOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- anyOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- not - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- items - Value MUST be an object and not an array. Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema. &lt;code&gt;items&lt;/code&gt; MUST be present if the &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;array&lt;/code&gt;.
- properties - Property definitions MUST be a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema (inline or referenced).
- additionalProperties - Value can be boolean or object. Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema. Consistent with JSON Schema, &lt;code&gt;additionalProperties&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;.
- description - &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.
- format - See &lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt; for further details. While relying on JSON Schema&amp;rsquo;s defined formats, the OAS offers a few additional predefined formats.
- default - The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object defined at the same level. For example, if &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt;, then &lt;code&gt;default&lt;/code&gt; can be &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; but cannot be &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, any time a Schema Object can be used, a &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can be used in its place. This allows referencing definitions instead of defining them inline.&lt;/p&gt;

&lt;p&gt;Additional properties defined by the JSON Schema specification that are not mentioned here are strictly unsupported.&lt;/p&gt;

&lt;p&gt;Other than the JSON Schema subset fields, the following fields MAY be used for further schema documentation:&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-20&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaNullable&#34;&gt;&lt;/a&gt;nullable&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows sending a &lt;code&gt;null&lt;/code&gt; value for the defined schema. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaDiscriminator&#34;&gt;&lt;/a&gt;discriminator&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#discriminatorObject&#34;&gt;Discriminator Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See &lt;a href=&#34;#schemaComposition&#34;&gt;Composition and Inheritance&lt;/a&gt; for more details.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaReadOnly&#34;&gt;&lt;/a&gt;readOnly&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Relevant only for Schema &lt;code&gt;&amp;quot;properties&amp;quot;&lt;/code&gt; definitions. Declares the property as &amp;ldquo;read only&amp;rdquo;. This means that it MAY be sent as part of a response but SHOULD NOT be sent as part of the request. If the property is marked as &lt;code&gt;readOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt; and is in the &lt;code&gt;required&lt;/code&gt; list, the &lt;code&gt;required&lt;/code&gt; will take effect on the response only. A property MUST NOT be marked as both &lt;code&gt;readOnly&lt;/code&gt; and &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaWriteOnly&#34;&gt;&lt;/a&gt;writeOnly&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Relevant only for Schema &lt;code&gt;&amp;quot;properties&amp;quot;&lt;/code&gt; definitions. Declares the property as &amp;ldquo;write only&amp;rdquo;. Therefore, it MAY be sent as part of a request but SHOULD NOT be sent as part of the response. If the property is marked as &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt; and is in the &lt;code&gt;required&lt;/code&gt; list, the &lt;code&gt;required&lt;/code&gt; will take effect on the request only. A property MUST NOT be marked as both &lt;code&gt;readOnly&lt;/code&gt; and &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaXml&#34;&gt;&lt;/a&gt;xml&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaDeprecated&#34;&gt;&lt;/a&gt; deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies that a schema is deprecated and SHOULD be transitioned out of usage. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h6 id=&#34;a-name-schemacomposition-a-composition-and-inheritance-polymorphism&#34;&gt;&lt;a name=&#34;schemaComposition&#34;&gt;&lt;/a&gt;Composition and Inheritance (Polymorphism)&lt;/h6&gt;

&lt;p&gt;The OpenAPI Specification allows combining and extending model definitions using the &lt;code&gt;allOf&lt;/code&gt; property of JSON Schema, in effect offering model composition.
&lt;code&gt;allOf&lt;/code&gt; takes an array of object definitions that are validated &lt;em&gt;independently&lt;/em&gt; but together compose a single object.&lt;/p&gt;

&lt;p&gt;While composition offers model extensibility, it does not imply a hierarchy between the models.
To support polymorphism, the OpenAPI Specification adds the &lt;code&gt;discriminator&lt;/code&gt; field.
When used, the &lt;code&gt;discriminator&lt;/code&gt; will be the name of the property that decides which schema definition validates the structure of the model.
As such, the &lt;code&gt;discriminator&lt;/code&gt; field MUST be a required field.
There are two ways to define the value of a discriminator for an inheriting instance.
- Use the schema name.
- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.
As such, inline schema definitions, which do not have a given id, &lt;em&gt;cannot&lt;/em&gt; be used in polymorphism.&lt;/p&gt;

&lt;h6 id=&#34;xml-modeling&#34;&gt;XML Modeling&lt;/h6&gt;

&lt;p&gt;The &lt;a href=&#34;#schemaXml&#34;&gt;xml&lt;/a&gt; property allows extra definitions when translating the JSON definition to XML.
The &lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt; contains additional information about the available options.&lt;/p&gt;

&lt;h5 id=&#34;schema-object-examples&#34;&gt;Schema Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;primitive-sample&#34;&gt;Primitive Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: string
format: email
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;simple-model&#34;&gt;Simple Model&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;properties&amp;quot;: {
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;address&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Address&amp;quot;
    },
    &amp;quot;age&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
      &amp;quot;minimum&amp;quot;: 0
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
required:
- name
properties:
  name:
    type: string
  address:
    $ref: &#39;#/components/schemas/Address&#39;
  age:
    type: integer
    format: int32
    minimum: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-map-dictionary-properties&#34;&gt;Model with Map/Dictionary Properties&lt;/h6&gt;

&lt;p&gt;For a simple string to string mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a string to model mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ComplexModel&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  $ref: &#39;#/components/schemas/ComplexModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-example&#34;&gt;Model with Example&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;id&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
    },
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  },
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;example&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
    &amp;quot;id&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
properties:
  id:
    type: integer
    format: int64
  name:
    type: string
required:
- name
example:
  name: Puma
  id: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-composition&#34;&gt;Models with Composition&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;components&amp;quot;: {
    &amp;quot;schemas&amp;quot;: {
      &amp;quot;ErrorModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;message&amp;quot;,
          &amp;quot;code&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;message&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;code&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;minimum&amp;quot;: 100,
            &amp;quot;maximum&amp;quot;: 600
          }
        }
      },
      &amp;quot;ExtendedErrorModel&amp;quot;: {
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;required&amp;quot;: [
              &amp;quot;rootCause&amp;quot;
            ],
            &amp;quot;properties&amp;quot;: {
              &amp;quot;rootCause&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              }
            }
          }
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf:
      - $ref: &#39;#/components/schemas/ErrorModel&#39;
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-polymorphism-support&#34;&gt;Models with Polymorphism Support&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;components&amp;quot;: {
    &amp;quot;schemas&amp;quot;: {
      &amp;quot;Pet&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;discriminator&amp;quot;: {
          &amp;quot;propertyName&amp;quot;: &amp;quot;petType&amp;quot;
        },
        &amp;quot;properties&amp;quot;: {
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;petType&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;required&amp;quot;: [
          &amp;quot;name&amp;quot;,
          &amp;quot;petType&amp;quot;
        ]
      },
      &amp;quot;Cat&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;A representation of a cat. Note that `Cat` will be used as the discriminator value.&amp;quot;,
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;properties&amp;quot;: {
              &amp;quot;huntingSkill&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The measured skill for hunting&amp;quot;,
                &amp;quot;default&amp;quot;: &amp;quot;lazy&amp;quot;,
                &amp;quot;enum&amp;quot;: [
                  &amp;quot;clueless&amp;quot;,
                  &amp;quot;lazy&amp;quot;,
                  &amp;quot;adventurous&amp;quot;,
                  &amp;quot;aggressive&amp;quot;
                ]
              }
            },
            &amp;quot;required&amp;quot;: [
              &amp;quot;huntingSkill&amp;quot;
            ]
          }
        ]
      },
      &amp;quot;Dog&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;A representation of a dog. Note that `Dog` will be used as the discriminator value.&amp;quot;,
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;properties&amp;quot;: {
              &amp;quot;packSize&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;the size of the pack the dog is from&amp;quot;,
                &amp;quot;default&amp;quot;: 0,
                &amp;quot;minimum&amp;quot;: 0
              }
            },
            &amp;quot;required&amp;quot;: [
              &amp;quot;packSize&amp;quot;
            ]
          }
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    Pet:
      type: object
      discriminator:
        propertyName: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:  ## &amp;quot;Cat&amp;quot; will be used as the discriminator value
      description: A representation of a cat
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        properties:
          huntingSkill:
            type: string
            description: The measured skill for hunting
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:  ## &amp;quot;Dog&amp;quot; will be used as the discriminator value
      description: A representation of a dog
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        properties:
          packSize:
            type: integer
            format: int32
            description: the size of the pack the dog is from
            default: 0
            minimum: 0
        required:
        - packSize
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-discriminatorobject-a-discriminator-object&#34;&gt;&lt;a name=&#34;discriminatorObject&#34;&gt;&lt;/a&gt;Discriminator Object&lt;/h4&gt;

&lt;p&gt;When request bodies or response payloads may be one of a number of different schemas, a &lt;code&gt;discriminator&lt;/code&gt; object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.&lt;/p&gt;

&lt;p&gt;When using the discriminator, &lt;em&gt;inline&lt;/em&gt; schemas will not be considered.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-21&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;propertyName&#34;&gt;&lt;/a&gt;propertyName&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the property in the payload that will hold the discriminator value.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;discriminatorMapping&#34;&gt;&lt;/a&gt; mapping&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold mappings between payload values and schema names or references.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The discriminator object is legal only when using one of the composite keywords &lt;code&gt;oneOf&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which means the payload &lt;em&gt;MUST&lt;/em&gt;, by validation, match exactly one of the schemas described by &lt;code&gt;Cat&lt;/code&gt;, &lt;code&gt;Dog&lt;/code&gt;, or &lt;code&gt;Lizard&lt;/code&gt;.  In this case, a discriminator MAY act as a &amp;ldquo;hint&amp;rdquo; to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
  discriminator:
    propertyName: petType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expectation now is that a property with name &lt;code&gt;petType&lt;/code&gt; &lt;em&gt;MUST&lt;/em&gt; be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;id&amp;quot;: 12345,
  &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will indicate that the &lt;code&gt;Cat&lt;/code&gt; schema be used in conjunction with this payload.&lt;/p&gt;

&lt;p&gt;In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional &lt;code&gt;mapping&lt;/code&gt; definition MAY be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
  - $ref: &#39;https://gigantic-server.com/schemas/Monster/schema.json&#39;
  discriminator:
    propertyName: petType
    mapping:
      dog: &#39;#/components/schemas/Dog&#39;
      monster: &#39;https://gigantic-server.com/schemas/Monster/schema.json&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the discriminator &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;dog&lt;/code&gt; will map to the schema &lt;code&gt;#/components/schemas/Dog&lt;/code&gt;, rather than the default (implicit) value of &lt;code&gt;Dog&lt;/code&gt;.  If the discriminator &lt;em&gt;value&lt;/em&gt; does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.&lt;/p&gt;

&lt;p&gt;When used in conjunction with the &lt;code&gt;anyOf&lt;/code&gt; construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.&lt;/p&gt;

&lt;p&gt;In both the &lt;code&gt;oneOf&lt;/code&gt; and &lt;code&gt;anyOf&lt;/code&gt; use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an &lt;code&gt;allOf&lt;/code&gt; construct may be used as an alternate schema.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    Pet:
      type: object
      required:
      - petType
      properties:
        petType:
          type: string
      discriminator:
        propertyName: petType
        mapping:
          dog: Dog
    Cat:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Cat`
        properties:
          name:
            type: string
    Dog:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: string
    Lizard:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Lizard`
        properties:
          lovesRocks:
            type: boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a payload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;misty&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will indicate that the &lt;code&gt;Cat&lt;/code&gt; schema be used.  Likewise this schema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petType&amp;quot;: &amp;quot;dog&amp;quot;,
  &amp;quot;bark&amp;quot;: &amp;quot;soft&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will map to &lt;code&gt;Dog&lt;/code&gt; because of the definition in the &lt;code&gt;mappings&lt;/code&gt; element.&lt;/p&gt;

&lt;h4 id=&#34;a-name-xmlobject-a-xml-object&#34;&gt;&lt;a name=&#34;xmlObject&#34;&gt;&lt;/a&gt;XML Object&lt;/h4&gt;

&lt;p&gt;A metadata object that allows for more fine-tuned XML model definitions.&lt;/p&gt;

&lt;p&gt;When using arrays, XML element names are &lt;em&gt;not&lt;/em&gt; inferred (for singular/plural forms) and the &lt;code&gt;name&lt;/code&gt; property SHOULD be used to add that information.
See examples for expected behavior.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-22&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replaces the name of the element/attribute used for the described schema property. When defined within &lt;code&gt;items&lt;/code&gt;, it will affect the name of the individual XML elements within the list. When defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;), it will affect the wrapping element and only if &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it will be ignored.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlNamespace&#34;&gt;&lt;/a&gt;namespace&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URI of the namespace definition. Value MUST be in the form of an absolute URI.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlPrefix&#34;&gt;&lt;/a&gt;prefix&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The prefix to be used for the &lt;a href=&#34;#xmlName&#34;&gt;name&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlAttribute&#34;&gt;&lt;/a&gt;attribute&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the property definition translates to an attribute instead of an element. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlWrapped&#34;&gt;&lt;/a&gt;wrapped&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MAY be used only for an array definition. Signifies whether the array is wrapped (for example, &lt;code&gt;&amp;lt;books&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;/books&amp;gt;&lt;/code&gt;) or unwrapped (&lt;code&gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&lt;/code&gt;). Default value is &lt;code&gt;false&lt;/code&gt;. The definition takes effect only when defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;xml-object-examples&#34;&gt;XML Object Examples&lt;/h5&gt;

&lt;p&gt;The examples of the XML object definitions are included inside a property definition of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; with a sample of the XML representation of it.&lt;/p&gt;

&lt;h6 id=&#34;no-xml-element&#34;&gt;No XML Element&lt;/h6&gt;

&lt;p&gt;Basic string property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basic string array property (&lt;a href=&#34;#xmlWrapped&#34;&gt;&lt;code&gt;wrapped&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; by default):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-name-replacement&#34;&gt;XML Name Replacement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
  xml:
    name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;...&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-attribute-prefix-and-namespace&#34;&gt;XML Attribute, Prefix and Namespace&lt;/h6&gt;

&lt;p&gt;In this example, a full model definition is shown.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Person&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;id&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;attribute&amp;quot;: true
        }
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;namespace&amp;quot;: &amp;quot;http://example.com/schema/sample&amp;quot;,
          &amp;quot;prefix&amp;quot;: &amp;quot;sample&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Person:
  type: object
  properties:
    id:
      type: integer
      format: int32
      xml:
        attribute: true
    name:
      type: string
      xml:
        namespace: http://example.com/schema/sample
        prefix: sample
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Person id=&amp;quot;123&amp;quot;&amp;gt;
    &amp;lt;sample:name xmlns:sample=&amp;quot;http://example.com/schema/sample&amp;quot;&amp;gt;example&amp;lt;/sample:name&amp;gt;
&amp;lt;/Person&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-arrays&#34;&gt;XML Arrays&lt;/h6&gt;

&lt;p&gt;Changing the element names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The external &lt;code&gt;name&lt;/code&gt; property has no effect on the XML:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To overcome the naming problem in the example above, the following definition can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Affecting both internal and external names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we change the external element but not the internal ones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityschemeobject-a-security-scheme-object&#34;&gt;&lt;a name=&#34;securitySchemeObject&#34;&gt;&lt;/a&gt;Security Scheme Object&lt;/h4&gt;

&lt;p&gt;Defines a security scheme that can be used by the operations.
Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2&amp;rsquo;s common flows (implicit, password, application and access code) as defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;RFC6749&lt;/a&gt;, and &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-oauth-discovery-06&#34;&gt;OpenID Connect Discovery&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-23&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Applies To&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The type of the security scheme. Valid values are &lt;code&gt;&amp;quot;apiKey&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;http&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;openIdConnect&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;A short description for security scheme. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the header, query or cookie parameter to be used.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The location of the API key. Valid values are &lt;code&gt;&amp;quot;query&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;header&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;cookie&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeScheme&#34;&gt;&lt;/a&gt;scheme&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the HTTP Authorization scheme to be used in the &lt;a href=&#34;https://tools.ietf.org/html/rfc7235#section-5.1&#34;&gt;Authorization header as defined in RFC7235&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeBearerFormat&#34;&gt;&lt;/a&gt;bearerFormat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http&lt;/code&gt; (&lt;code&gt;&amp;quot;bearer&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeFlows&#34;&gt;&lt;/a&gt;flows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowsObject&#34;&gt;OAuth Flows Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. An object containing configuration information for the flow types supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeOpenIdConnectUrl&#34;&gt;&lt;/a&gt;openIdConnectUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;openIdConnect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;security-scheme-object-example&#34;&gt;Security Scheme Object Example&lt;/h5&gt;

&lt;h6 id=&#34;basic-authentication-sample&#34;&gt;Basic Authentication Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;http&amp;quot;,
  &amp;quot;scheme&amp;quot;: &amp;quot;basic&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: http
scheme: basic
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;api-key-sample&#34;&gt;API Key Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: apiKey
name: api_key
in: header
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;jwt-bearer-sample&#34;&gt;JWT Bearer Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;http&amp;quot;,
  &amp;quot;scheme&amp;quot;: &amp;quot;bearer&amp;quot;,
  &amp;quot;bearerFormat&amp;quot;: &amp;quot;JWT&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: http
scheme: bearer
bearerFormat: JWT
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;implicit-oauth2-sample&#34;&gt;Implicit OAuth2 Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
  &amp;quot;flows&amp;quot;: {
    &amp;quot;implicit&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: oauth2
flows: 
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-oauthflowsobject-a-oauth-flows-object&#34;&gt;&lt;a name=&#34;oauthFlowsObject&#34;&gt;&lt;/a&gt;OAuth Flows Object&lt;/h4&gt;

&lt;p&gt;Allows configuration of the supported OAuth Flows.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-24&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsImplicit&#34;&gt;&lt;/a&gt;implicit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Implicit flow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsPassword&#34;&gt;&lt;/a&gt;password&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Resource Owner Password flow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsClientCredentials&#34;&gt;&lt;/a&gt;clientCredentials&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Client Credentials flow.  Previously called &lt;code&gt;application&lt;/code&gt; in OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsAuthorizationCode&#34;&gt;&lt;/a&gt;authorizationCode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Authorization Code flow.  Previously called &lt;code&gt;accessCode&lt;/code&gt; in OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-oauthflowobject-a-oauth-flow-object&#34;&gt;&lt;a name=&#34;oauthFlowObject&#34;&gt;&lt;/a&gt;OAuth Flow Object&lt;/h4&gt;

&lt;p&gt;Configuration details for a supported OAuth Flow&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-25&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Applies To&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowAuthorizationUrl&#34;&gt;&lt;/a&gt;authorizationUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;implicit&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;authorizationCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The authorization URL to be used for this flow. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowTokenUrl&#34;&gt;&lt;/a&gt;tokenUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;password&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;clientCredentials&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;authorizationCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The token URL to be used for this flow. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowRefreshUrl&#34;&gt;&lt;/a&gt;refreshUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowScopes&#34;&gt;&lt;/a&gt;scopes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;oauth-flow-object-examples&#34;&gt;OAuth Flow Object Examples&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
  &amp;quot;flows&amp;quot;: {
    &amp;quot;implicit&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    },
    &amp;quot;authorizationCode&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;tokenUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/token&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: oauth2
flows: 
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  authorizationCode:
    authorizationUrl: https://example.com/api/oauth/dialog
    tokenUrl: https://example.com/api/oauth/token
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityrequirementobject-a-security-requirement-object&#34;&gt;&lt;a name=&#34;securityRequirementObject&#34;&gt;&lt;/a&gt;Security Requirement Object&lt;/h4&gt;

&lt;p&gt;Lists the required security schemes to execute this operation.
The name used for each property MUST correspond to a security scheme declared in the &lt;a href=&#34;#componentsSecuritySchemes&#34;&gt;Security Schemes&lt;/a&gt; under the &lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.
This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.&lt;/p&gt;

&lt;p&gt;When a list of Security Requirement Objects is defined on the &lt;a href=&#34;#oasObject&#34;&gt;OpenAPI Object&lt;/a&gt; or &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-3&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securityRequirementsName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;Each name MUST correspond to a security scheme which is declared in the &lt;a href=&#34;#componentsSecuritySchemes&#34;&gt;Security Schemes&lt;/a&gt; under the &lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;. If the security scheme is of type &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;openIdConnect&amp;quot;&lt;/code&gt;, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;security-requirement-object-examples&#34;&gt;Security Requirement Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;non-oauth2-security-requirement&#34;&gt;Non-OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;api_key&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_key: []
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;oauth2-security-requirement&#34;&gt;OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petstore_auth&amp;quot;: [
    &amp;quot;write:pets&amp;quot;,
    &amp;quot;read:pets&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;petstore_auth:
- write:pets
- read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-specificationextensions-a-specification-extensions&#34;&gt;&lt;a name=&#34;specificationExtensions&#34;&gt;&lt;/a&gt;Specification Extensions&lt;/h3&gt;

&lt;p&gt;While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;/p&gt;

&lt;p&gt;The extensions properties are implemented as patterned fields that are always prefixed by &lt;code&gt;&amp;quot;x-&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the OpenAPI Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. Can have any valid JSON format value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).&lt;/p&gt;

&lt;h3 id=&#34;a-name-securityfiltering-a-security-filtering&#34;&gt;&lt;a name=&#34;securityFiltering&#34;&gt;&lt;/a&gt;Security Filtering&lt;/h3&gt;

&lt;p&gt;Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation.&lt;/p&gt;

&lt;p&gt;The reasoning is to allow an additional layer of access control over the documentation.
While not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.&lt;/p&gt;

&lt;p&gt;Two examples of this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt; MAY be empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can&amp;rsquo;t access any documentation. They&amp;rsquo;d still have access to the &lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt; which may contain additional information regarding authentication.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different than hiding the path itself from the &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;, so the user will not be aware of its existence. This allows the documentation provider to finely control what the viewer can see.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;a-name-revisionhistory-a-appendix-a-revision-history&#34;&gt;&lt;a name=&#34;revisionHistory&#34;&gt;&lt;/a&gt;Appendix A: Revision History&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3.0.2&lt;/td&gt;
&lt;td&gt;2018-10-08&lt;/td&gt;
&lt;td&gt;Patch release of the OpenAPI Specification 3.0.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.1&lt;/td&gt;
&lt;td&gt;2017-12-06&lt;/td&gt;
&lt;td&gt;Patch release of the OpenAPI Specification 3.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0&lt;/td&gt;
&lt;td&gt;2017-07-26&lt;/td&gt;
&lt;td&gt;Release of the OpenAPI Specification 3.0.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc2&lt;/td&gt;
&lt;td&gt;2017-06-16&lt;/td&gt;
&lt;td&gt;rc2 of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc1&lt;/td&gt;
&lt;td&gt;2017-04-27&lt;/td&gt;
&lt;td&gt;rc1 of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc0&lt;/td&gt;
&lt;td&gt;2017-02-28&lt;/td&gt;
&lt;td&gt;Implementer&amp;rsquo;s Draft of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2015-12-31&lt;/td&gt;
&lt;td&gt;Donation of Swagger 2.0 to the Open API Initiative&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2014-09-08&lt;/td&gt;
&lt;td&gt;Release of Swagger 2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;td&gt;2014-03-14&lt;/td&gt;
&lt;td&gt;Initial release of the formal document.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;2012-08-22&lt;/td&gt;
&lt;td&gt;Release of Swagger 1.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;2011-08-10&lt;/td&gt;
&lt;td&gt;First release of the Swagger Specification&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md&#34; title=&#34;OpenAPI in GitHub&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAML 简明参考</title>
      <link>http://alimy.me/post/dev_201901091450/</link>
      <pubDate>Wed, 09 Jan 2019 14:50:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201901091450/</guid>
      <description>&lt;h3 id=&#34;sect-语法说明&#34;&gt;&amp;sect;语法说明&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&#34;https://yaml.org&#34;&gt;yaml.org（英文）&lt;/a&gt;可以找到轻巧而好用的&lt;a href=&#34;https://yaml.org/refcard.html&#34;&gt;小抄（亦是用YAML表示）&lt;/a&gt;及&lt;a href=&#34;https://yaml.org/spec/&#34;&gt;格式说明&lt;/a&gt;。下面的内容，是关于基本组件的摘要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YAML使用可打印的Unicode字符，可使用UTF-8或UTF-16。&lt;/li&gt;
&lt;li&gt;使用空白字符为文件缩进来表示结构；不过不能使用跳格字符(TAB)。&lt;/li&gt;
&lt;li&gt;注解由井字号（ # ）开始，可以出现在一行中的任何位置，而且范围只有一行（也就是一般所谓的单行注解）&lt;/li&gt;
&lt;li&gt;每个清单成员以单行表示，并用短杠+空白（ -   ）起始。或使用方括号（ [ ] ），并用逗号+空白（ ,   ）分开成员。&lt;/li&gt;
&lt;li&gt;每个散列表的成员用冒号+空白（ :   ）分开键值和内容。或使用大括号（ {   } ），并用逗号+空白（ ,   ）分开。

&lt;ul&gt;
&lt;li&gt;散列表的键值可以用问号 ( ? )起始，用来明确的表示多个词汇组成的键值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符串平常并不使用引号，但必要的时候可以用双引号 ( &amp;ldquo; )或单引号 ( &amp;lsquo; )框住。

&lt;ul&gt;
&lt;li&gt;使用双引号表示字符串时，可用倒斜线（ \ ）开始的转义字符（这跟C语言类似）表示特殊字符。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;区块的字符串用缩进和修饰符（非必要）来和其他数据分隔，有新行保留（preserve）（使用符号 | ）或新行折叠（flod）（使用符号 &amp;gt; ）两种方式。&lt;/li&gt;
&lt;li&gt;在单一文件中，可用连续三个连字号（&amp;mdash;）区分多个文件。

&lt;ul&gt;
&lt;li&gt;另外，还有选择性的连续三个点号（ &amp;hellip; ）用来表示文件结尾。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重复的内容可使从参考标记星号 ( * )复制到锚点标记（ &amp;amp; ）。&lt;/li&gt;
&lt;li&gt;指定格式可以使用两个惊叹号 ( !! )，后面接上名称。&lt;/li&gt;
&lt;li&gt;文件中的单一文件可以使用指导指令，使用方法是百分比符号( % )。有两个指导指令在YAML1.1版中被定义：

&lt;ul&gt;
&lt;li&gt;%YAML 指导指令，用来识别文件的YAML版本。&lt;/li&gt;
&lt;li&gt;%TAG 指导指令，被用在URI的前缀标记。这个方法在标记节点的类型时相当有用。
YAML在使用逗号及冒号时，后面都必须接一个空白字符，所以可以在字符串或数值中自由加入分隔符号( 例如：5,280 或 &lt;a href=&#34;http://www.wikipedia.org&#34;&gt;http://www.wikipedia.org&lt;/a&gt; ) 而不需要使用引号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有两个特殊符号在YAML中被保留，有可能在未来的版本被使用&amp;ndash;（ @ ）和（ ` ）。&lt;/p&gt;

&lt;h3 id=&#34;sect-参考小抄&#34;&gt;&amp;sect;参考小抄&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;%YAML 1.1   # Reference card
---
Collection indicators:
    &#39;? &#39; : Key indicator.
    &#39;: &#39; : Value indicator.
    &#39;- &#39; : Nested series entry indicator.
    &#39;, &#39; : Separate in-line branch entries.
    &#39;[]&#39; : Surround in-line series branch.
    &#39;{}&#39; : Surround in-line keyed branch.
Scalar indicators:
    &#39;&#39;&#39;&#39; : Surround in-line unescaped scalar (&#39;&#39; escaped &#39;).
    &#39;&amp;quot;&#39;  : Surround in-line escaped scalar (see escape codes below).
    &#39;|&#39;  : Block scalar indicator.
    &#39;&amp;gt;&#39;  : Folded scalar indicator.
    &#39;-&#39;  : Strip chomp modifier (&#39;|-&#39; or &#39;&amp;gt;-&#39;).
    &#39;+&#39;  : Keep chomp modifier (&#39;|+&#39; or &#39;&amp;gt;+&#39;).
    1-9  : Explicit indentation modifier (&#39;|1&#39; or &#39;&amp;gt;2&#39;).
           # Modifiers can be combined (&#39;|2-&#39;, &#39;&amp;gt;+1&#39;).
Alias indicators:
    &#39;&amp;amp;&#39;  : Anchor property.
    &#39;*&#39;  : Alias indicator.
Tag property: # Usually unspecified.
    none    : Unspecified tag (automatically resolved by application).
    &#39;!&#39;     : Non-specific tag (by default, &amp;quot;!!map&amp;quot;/&amp;quot;!!seq&amp;quot;/&amp;quot;!!str&amp;quot;).
    &#39;!foo&#39;  : Primary (by convention, means a local &amp;quot;!foo&amp;quot; tag).
    &#39;!!foo&#39; : Secondary (by convention, means &amp;quot;tag:yaml.org,2002:foo&amp;quot;).
    &#39;!h!foo&#39;: Requires &amp;quot;%TAG !h! &amp;lt;prefix&amp;gt;&amp;quot; (and then means &amp;quot;&amp;lt;prefix&amp;gt;foo&amp;quot;).
    &#39;!&amp;lt;foo&amp;gt;&#39;: Verbatim tag (always means &amp;quot;foo&amp;quot;).
Document indicators:
    &#39;%&#39;  : Directive indicator.
    &#39;---&#39;: Document header.
    &#39;...&#39;: Document terminator.
Misc indicators:
    &#39; #&#39; : Throwaway comment indicator.
    &#39;`@&#39; : Both reserved for future use.
Special keys:
    &#39;=&#39;  : Default &amp;quot;value&amp;quot; mapping key.
    &#39;&amp;lt;&amp;lt;&#39; : Merge keys from another mapping.
Core types: # Default automatic tags.
    &#39;!!map&#39; : { Hash table, dictionary, mapping }
    &#39;!!seq&#39; : { List, array, tuple, vector, sequence }
    &#39;!!str&#39; : Unicode string
More types:
    &#39;!!set&#39; : { cherries, plums, apples }
    &#39;!!omap&#39;: [ one: 1, two: 2 ]
Language Independent Scalar types:
    { ~, null }              : Null (no value).
    [ 1234, 0x4D2, 02333 ]   : [ Decimal int, Hexadecimal int, Octal int ]
    [ 1_230.15, 12.3015e+02 ]: [ Fixed float, Exponential float ]
    [ .inf, -.Inf, .NAN ]    : [ Infinity (float), Negative, Not a number ]
    { Y, true, Yes, ON  }    : Boolean true
    { n, FALSE, No, off }    : Boolean false
    ? !!binary &amp;gt;
        R0lG...BADS=
    : &amp;gt;-
        Base 64 binary value.
Escape codes:
 Numeric   : { &amp;quot;\x12&amp;quot;: 8-bit, &amp;quot;\u1234&amp;quot;: 16-bit, &amp;quot;\U00102030&amp;quot;: 32-bit }
 Protective: { &amp;quot;\\&amp;quot;: &#39;\&#39;, &amp;quot;\&amp;quot;&amp;quot;: &#39;&amp;quot;&#39;, &amp;quot;\ &amp;quot;: &#39; &#39;, &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;: TAB }
 C         : { &amp;quot;\0&amp;quot;: NUL, &amp;quot;\a&amp;quot;: BEL, &amp;quot;\b&amp;quot;: BS, &amp;quot;\f&amp;quot;: FF, &amp;quot;\n&amp;quot;: LF, &amp;quot;\r&amp;quot;: CR,
               &amp;quot;\t&amp;quot;: TAB, &amp;quot;\v&amp;quot;: VTAB }
 Additional: { &amp;quot;\e&amp;quot;: ESC, &amp;quot;\_&amp;quot;: NBSP, &amp;quot;\N&amp;quot;: NEL, &amp;quot;\L&amp;quot;: LS, &amp;quot;\P&amp;quot;: PS }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: YAML参考链接在 &lt;a href=&#34;https://yaml.org/refcard.html&#34; title=&#34;YAML Reference card&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;

&lt;!--more--&gt;</description>
    </item>
    
    <item>
      <title>FAQs: ssh</title>
      <link>http://alimy.me/post/dev_201811252059/</link>
      <pubDate>Sun, 25 Nov 2018 20:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811252059/</guid>
      <description>&lt;h4 id=&#34;sect-解决ssh登录后闲置时间过长而断开连接&#34;&gt;&amp;sect;解决ssh登录后闲置时间过长而断开连接&lt;/h4&gt;

&lt;p&gt;通过终端连接服务器时，当鼠标和键盘长时间不操作，服务器就会自动断开连接，解决此问题的方法如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一、
修改/etc/ssh/sshd_config配置文件，找到ClientAliveCountMax（单位为分钟）修改你想要的值，
执行service sshd reload&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法二、
找到所在用户的.ssh目录,如root用户该目录在：/root/.ssh/
在该目录创建config文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /root/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加入下面一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerAliveInterval 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，重新开启root用户的shell，则ssh远程服务器的时候，
不会因为长时间操作断开。应该是加入这句之后，ssh客户端会每隔一
段时间自动与ssh服务器通信一次，所以长时间操作不会断开。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法三、
修改/etc/profile配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增加：TMOUT=1800
这样30分钟没操作就自动LOGOUT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法四、
利用expect 模拟键盘动作，在闲置时间之内模拟地给个键盘响应,将下列代码保存为xxx，然后用expect执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect  
set timeout 60  
spawn ssh user@host   
  interact {          
        timeout 300 {send &amp;quot;\x20&amp;quot;}  
  } 
expect xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着按提示输入密码就可以了，这样每隔300秒就会自动打一个空格(\x20)，具体的时间间隔可以根据具体情况设置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法五、
如果你在windows下通过工具连接，可以设置为
secureCRT：选项&amp;mdash;终端&amp;mdash;反空闲 中设置每隔多少秒发送一个字符串，或者是NO-OP协议包
putty：putty -&amp;gt; Connection -&amp;gt; Seconds between keepalives ( 0 to turn off ), 默认为0, 改为300.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法六、&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务端配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/sshd_config
ClientAliveInterval 60     #服务端主动向客户端请求响应的间隔
ClientAliveCountMax 10    #服务器发出请求后客户端没有响应的次数达到一定值就自动断开
sudo restart ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端配置 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/ssh_config  #或~/.ssh/config

TCPKeepAlive=yes
ServerAliveInterval 60   #客户端主动向服务端请求响应的间隔
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i &amp;lt;key-file&amp;gt; -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveInterval=30 ubuntu@&amp;lt;ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-重用&#34;&gt;&amp;sect;重用&lt;/h4&gt;

&lt;p&gt;如果你用mac本的话，很不方便的是没有clone功能，新窗口时需要重新输入繁琐的用户名和密码，对于经常排查线上问题的程序猿来说是一件很悲催的事 情，同样幸运的是ssh提供了连接重用功能，这个功能的原理很简单，开一个ssh连接放在后台，以后再需要用ssh到同样的远程主机时，ssh会直接用这 个连接的socket文件，不再创建新的连接了，同理，也不需要进行用户身份验证了，是不是很happy，只需要新建文件~/.ssh/config并输 入如下命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-bad-owner-or-permissions-on-home-ssh-config&#34;&gt;&amp;sect;Bad owner or permissions on $HOME/.ssh/config&lt;/h4&gt;

&lt;p&gt;The ssh with RHEL 4 is a lot more anal about security checking. In my case, it was the fact that $HOME/.ssh/config was group-writable which was causing it to barf. To fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
$ chmod 600 *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this error message is kind of stupid, since $HOME/.ssh had permissions 700 on it, and $HOME had 750 permissions on it. If any process managed to evade those permissions, changing the permissions on the config file would be similarly defeated.&lt;/p&gt;

&lt;h4 id=&#34;sect-在那些没退出的-ssh-会话里用-优雅-的断开连接&#34;&gt;&amp;sect;在那些没退出的 ssh 会话里用 ~. “优雅” 的断开连接&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ ~.
$ man ssh
...
ESCAPE CHARACTERS
     ...

     The supported escapes (assuming the default `~&#39;) are:

     ~.      Disconnect.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>sshuttle：不需配置的 VPN</title>
      <link>http://alimy.me/post/dev_201811250757/</link>
      <pubDate>Sun, 25 Nov 2018 07:57:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811250757/</guid>
      <description>&lt;p&gt;sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle，按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。&lt;/p&gt;

&lt;p&gt;sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sshuttle/sshuttle
$ cd sshuttle
$ sudo ./setup.py install
$ sshuttle -r username@sshserver 0.0.0.0/0 -vv
Starting sshuttle proxy.
[local sudo] Password: 
firewall manager: Starting firewall with Python version 2.7.15
firewall manager: ready method name nat.
IPv6 enabled: False
UDP enabled: False
DNS enabled: False
User enabled: False
Binding redirector: 12300 12299
TCP redirector listening on (&#39;127.0.0.1&#39;, 12299).
TCP redirector listening with &amp;lt;socket._socketobject object at 0x7f5eb68b1c90&amp;gt;.
Starting client with Python version 2.7.15
c : connecting to server...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.vpsee.com/2011/05/sshuttle-a-simple-instant-vpn/&#34; title=&#34;sshuttle as vpn&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppArmor的前世今生和基本使用</title>
      <link>http://alimy.me/post/dev_201811171435/</link>
      <pubDate>Sat, 17 Nov 2018 14:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811171435/</guid>
      <description>&lt;h4 id=&#34;一-mac和dac-一些前置知识&#34;&gt;一：MAC和DAC (一些前置知识)&lt;/h4&gt;

&lt;p&gt;DAC(Discretionary Access Control)，自主访问控制，是最常用的一类访问控制机制，意思为主体（文件所有者）可以自主指定系统中其它用户对其文件的所有权，最典型的就是Linux的&amp;rdquo;拥有者/同组用户/其他&amp;rdquo;。这种方式虽然为用户提供了很大的灵活性，但是缺乏必要的安全性&lt;/p&gt;

&lt;p&gt;MAC(Mandatory Access Control)，强制访问控制,在这种机制下，系统中的每一个进程，每一个文件，每一个IPC主体都被管理员按照严格的规则设置了相应的安全属性，不能被用户和其它直接或间接的修改。&lt;/p&gt;

&lt;h4 id=&#34;二-apparmor-https-gitlab-com-apparmor-apparmor-apparmor-in-gitlab&#34;&gt;二：&lt;a href=&#34;https://gitlab.com/apparmor/apparmor&#34; title=&#34;AppArmor in GitLab&#34;&gt;AppArmor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由于SELinux使用复杂，适用于对安全要求特别高的企业或者组织，为了简化操作，就推出了AppArmor，所以可以说AppArmor脱胎于SELinux，但与SELinux基于角色的MAC不同的是，AppArmor是与程序绑定的基于路径的MAC，也就是说如果路径发生改变，策略就会失效。一般的Linux的系统，都会内置以上两种MAC其中的一种，这也意味着，你需要对文件（其它）进行操作，你需要同时通过DAC和 MAC的检测。&lt;/p&gt;

&lt;p&gt;AppArmor有两种工作模式：enforcement、complain/learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enforcement – 在这种模式下，配置文件里列出的限制条件都会得到执行，并且对于违反这些限制条件的程序会进行日志记录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Complain – 在这种模式下，配置文件里的限制条件不会得到执行，AppArmor只是对程序的行为进行记录。例如程序可以写一个在配置文件里注明只读的文件，但AppArmor不会对程序的行为进行限制，只是进行记录。这种模式也叫学习模式，如果某个程序的行为不符合其配置文件的限制，可以将其行为记录到系统日志，并且可以根据程序的行为，将日志转换成配置文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AppArmor可以对程序进行多方面的限制，详细可以看官方文档，这里只提供几个基本的例子：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文件系统的访问控制   例：  /home/Desktop/a.c rw 表示程序可以对/home/Desktop/a.c 进行读和写。&lt;/li&gt;
&lt;li&gt;资源限制   例： set rlimit as&amp;lt;=1M ，表示该程序可以使用的虚拟内存小于等于1M&lt;/li&gt;
&lt;li&gt;访问网络   例： network inet tcp ,表示该程序可以在IPV4的情况下使用TCP协议 　&lt;/li&gt;
&lt;li&gt;capability条目 例：capability setgid，表示程序进行setgid操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;三-基本使用&#34;&gt;三：基本使用&lt;/h4&gt;

&lt;p&gt;ubuntu自带AppArmor，所以以ubuntu14.04为例。
最好先安装了apparmor的管理工具套装：apt-get install apparmor-utils&lt;/p&gt;

&lt;p&gt;测试程序源码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
int main(int argc, char *argv[])  
{  
 　　FILE *f;  
 　　int nn, i;   char ch;   
 　　if(3 == argc){   
  　　　　f = fopen(argv[1], &amp;quot;w&amp;quot;);   
  　 if(f == NULL){                          printf(&amp;quot;Open file %s with write ERROR\n&amp;quot;, argv[1]);  
   　　return 2;  
　　　}   
  　nn = strlen(argv[2]);   
   i = 0;   
   while(i &amp;lt; nn){   
   　　fputc(argv[2][i], f);  
   　　++i; 
  　}  
  fclose(f); 
  }else if(argc == 2){  
  　　f = fopen(argv[1], &amp;quot;r&amp;quot;);  
  　　if(NULL == f){  
   　　　　printf(&amp;quot;Open file %s with read ERROR\n&amp;quot;, argv[1]);  
   　　　　return 2;  
  　　}   
  　　while((ch=fgetc(f)) != EOF){   
   　　　　printf(&amp;quot;%c&amp;quot;, ch);  
 　　 }   
  　　printf(&amp;quot;\n&amp;quot;); 
  　　fclose(f); 
 }else{ 
  　　printf(&amp;quot;Usage: test file **\n&amp;quot;);   
  　　return 3;  
 } 
 
　　 return 0;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本功能是对，文件进行读写，使用如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　$　./test a.c &amp;quot;hello,world&amp;quot;  #进行写
　$　./test a.c  #进行读
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以根据 aa-genprof 生成配置文件，生成的文件在/etc/apparmor.d下，文件名为home.jdchen.test&lt;/p&gt;

&lt;p&gt;生成的文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于apparmor采取类似于白名单的机制，所以不能进行任何操作。
现在给配置文件添加可写的权限并重新加载。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;
    /home/jdchen/a.c w，

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后介绍几个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ Start : sudo /etc/init.d/apparmor start   #启动
$ Stop : sudo /etc/init.d/apparmor stop   #停止
$ reload: sudo /etc/init.d/apparmor reload 重新加载
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在修改配置之后，需要重载：&lt;/p&gt;

&lt;p&gt;可以试着查看一下日志，节选：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ov 11 04:23:53 ubuntu kernel: [ 2419.881291] audit_printk_skb: 15 callbacks suppressed
Nov 11 04:23:53 ubuntu kernel: [ 2419.881306] audit: type=1400 audit(1478867033.872:204): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4108 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
Nov 11 04:24:07 ubuntu kernel: [ 2433.212034] audit: type=1400 audit(1478867047.204:205): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4111 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不需要配置，可以直接将配置文件删除。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.cnblogs.com/0xJDchen/p/6055531.html&#34; title=&#34;Apparmor的前世今生和基本使用&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
