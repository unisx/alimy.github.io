<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/</link>
    
    
    <copyright>&amp;copy;2016, Alimy; all rights reserved.</copyright>
    <updated>Sat, 19 Mar 2016 22:55:00 CST</updated>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>http://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;

&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;

&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;

&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.&lt;/p&gt;

&lt;p&gt;… that’s it. No, really, that’s it. Bolt is basically a bunch of nested maps. And this simplicity is what makes it so easy to use. There’s no tables to set up, no schemas, no complex querying language to struggle with. Let’s look at a bolt hello world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    “fmt”
    “log”

    “github.com/boltdb/bolt”
)

var world = []byte(“world”)

func main() {
    db, err := bolt.Open(“/home/nate/foo/bolt.db”, 0644, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    key := []byte(“hello”)
    value := []byte(“Hello World!”)

    // store some data
    err = db.Update(func(tx *bolt.Tx) error {
        bucket, err := tx.CreateBucketIfNotExists(world)
        if err != nil {
            return err
        }

        err = bucket.Put(key, value)
        if err != nil {
            return err
        }
        return nil
    })

    if err != nil {
        log.Fatal(err)
    }

    // retrieve the data
    err = db.View(func(tx *bolt.Tx) error {
        bucket := tx.Bucket(world)
        if bucket == nil {
            return fmt.Errorf(“Bucket %q not found!”, world)
        }

        val := bucket.Get(key)
        fmt.Println(string(val))

        return nil
    })

    if err != nil {
        log.Fatal(err)
    }
}

// output:
// Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know what you’re thinking - that seems kinda long. But keep in mind, I fully handled all errors in at least a semi-proper way, and we’re doing all this:&lt;/p&gt;

&lt;p&gt;1.) creating a database&lt;br /&gt;
2.) creating some structure (the “world” bucket)&lt;br /&gt;
3.) storing data to the structure&lt;br /&gt;
4.) retrieving data from the structure.&lt;/p&gt;

&lt;p&gt;I think that’s not too bad in 54 lines of code.&lt;/p&gt;

&lt;p&gt;So let’s look at what that example is really doing. First we call bolt.Open to get the database. This will create the file if necessary, or open it if it exists.&lt;/p&gt;

&lt;p&gt;All reads from or writes to the bolt database must be done within a transaction. You can have as many Readers in read-only transactions at the same time as you want, but only one Writer in a writable transaction at a time (readers maintain a consistent view of the DB while writers are writing).&lt;/p&gt;

&lt;p&gt;To begin, we call db.Update, which takes a function to which it’ll pass a bolt.Tx - bolt’s transaction object. We then create a Bucket (since all data in bolt lives in buckets), and add our key/value pair to it. After the write transaction finishes, we start a read- only transaction with DB.View, and get the values back out.&lt;/p&gt;

&lt;p&gt;What’s great about bolt’s transaction mechanism is that it’s super simple - the scope of the function is the scope of the transaction. If the function passed to Update returns nil, all updates from the transaction are atomically stored to the database. If the function passed to Update returns an error, the transaction is rolled back. This makes bolt’s transactions completely intuitive from a Go developer’s point of view. You just exit early out of your function by returning an error as usual, and bolt Does The Right Thing. No need to worry about manually rolling back updates or anything, just return an error.&lt;/p&gt;

&lt;p&gt;The only other basic thing you may need is to iterate over key/value pairs in a Bucket, in which case, you just call bucket.Cursor(), which returns a Cursor value, which has functions like Next(), Prev() etc that return a key/value pair and work like you’d expect.&lt;/p&gt;

&lt;p&gt;There’s a lot more to the bolt API, but most of the rest of it is more about database statistics and some stuff for more advanced usage scenarios… but the above is all you really need to know to start storing data in a bolt database.&lt;/p&gt;

&lt;p&gt;For a more complex application, just storing strings in the database may not be sufficient, but that’s ok, Go has your back there, too. You can easily use encoding/json or encoding/gob to serialize structs into the database, keyed by a unique name or id. This is what makes it easy for bolt to go from a key/value store to a document store - just have one bucket per document type. Again, the benefit of bolt is low barrier of entry. You don’t have to figure out a whole database schema or install anything to be able to just start dumping data to disk in a performant and manageable way.&lt;/p&gt;

&lt;p&gt;The main drawback of bolt is that there are no queries. You can’t say “give me all foo objects with a name that starts with bar”. You could make your own index in the database and keep it up to date manually. This could be as easy as a slice of IDs serialized into an “indices” bucket for a particular query. Obviously, this is where you start getting into the realm of developing your own relational database, but if you don’t go overboard, it can be nice that all this code is just that - code. It’s not queries in some external DSL, it’s just code like you’d write for an in-memory data store.&lt;/p&gt;

&lt;p&gt;Bolt is not for every application. You must understand your application’s needs and if bolt’s key/value style will be sufficient to fulfill those needs. If it is, I think you’ll be very happy to use such a simple data store with so little mental overhead.&lt;/p&gt;

&lt;p&gt;[edited to clarify reader/writer relationship] Bonus Gob vs. Json benchmark for storing structs in Bolt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkGobEncode  1000000       2191 ns/op
BenchmarkJsonEncode   500000       4738 ns/op
BenchmarkGobDecode  1000000       2019 ns/op
BenchmarkJsonDecode   200000      12993 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://npf.io/2014/07/intro-to-boltdb-painless-performant-persistence/&#34; title=&#34;Intro to BoltDB&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android: Volley&#43;OkHttp with https</title>
      <link>http://alimy.me/post/dev_201603192245/</link>
      <pubDate>Sat, 19 Mar 2016 22:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192245/</guid>
      <description>

&lt;h3 id=&#34;android-network-simple:03999fb0359803477bc987da56a0bc05&#34;&gt;Android Network Simple&lt;/h3&gt;

&lt;p&gt;This article shows how to use volley with OkHttp and security your api with https.
本文可以在&lt;a href=&#34;http://www.jianshu.com/p/e58161cbc3a4&#34; title=&#34;Android 网络--我是怎么做的: Volley+OkHttp+Https&#34;&gt;简书&lt;/a&gt;浏览。&lt;/p&gt;

&lt;h3 id=&#34;使用-okhttp-作为传输层的实现:03999fb0359803477bc987da56a0bc05&#34;&gt;使用 OkHttp 作为传输层的实现.&lt;/h3&gt;

&lt;p&gt;Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现. 3.0 以上使用HttpUrlConnection, 2.3 以下使用 ApacheHttpStack, 参考&lt;a href=&#34;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&#34;&gt;Android Http Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OkHttp 相较于其它的实现有以下的优点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;http://zh.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;，允许连接同一主机的所有请求分享一个socket。&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，会使用连接池减少请求延迟。&lt;/li&gt;
&lt;li&gt;使用GZIP压缩下载内容，且压缩操作对用户是透明的。&lt;/li&gt;
&lt;li&gt;利用响应缓存来避免重复的网络请求。&lt;/li&gt;
&lt;li&gt;当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。&lt;/li&gt;
&lt;li&gt;如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此使用 OkHttp 作为替代是好的选择.&lt;/p&gt;

&lt;p&gt;首先用 OkHttp 实现一个新的 &lt;code&gt;HurlStack&lt;/code&gt; 用于构建 Volley 的 requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OkHttpStack extends HurlStack {

    private OkHttpClient okHttpClient;

    /**
     * Create a OkHttpStack with default OkHttpClient.
     */
    public OkHttpStack() {
        this(new OkHttpClient());
    }

    /**
     * Create a OkHttpStack with a custom OkHttpClient
     * @param okHttpClient Custom OkHttpClient, NonNull
     */
    public OkHttpStack(OkHttpClient okHttpClient) {
        this.okHttpClient = okHttpClient;
    }

    @Override
    protected HttpURLConnection createConnection(URL url) throws IOException {
        OkUrlFactory okUrlFactory = new OkUrlFactory(okHttpClient);
        return okUrlFactory.open(url);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用 OkHttpStack 创建新的 Volley requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestQueue = Volley.newRequestQueue(getContext(), new OkHttpStack());
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就行了.&lt;/p&gt;

&lt;h3 id=&#34;使用-https:03999fb0359803477bc987da56a0bc05&#34;&gt;使用 Https&lt;/h3&gt;

&lt;p&gt;作为一个有节操的开发者应该使用 Https 来保护用户的数据, Android 开发者网站上文章&lt;a href=&#34;https://developer.android.com/training/articles/security-ssl.html&#34;&gt;Security with HTTPS and SSL&lt;/a&gt;做了详尽的阐述.&lt;/p&gt;

&lt;p&gt;OkHttp 自身是支持 Https 的. 参考文档 &lt;a href=&#34;https://github.com/square/okhttp/wiki/HTTPS&#34;&gt;OkHttp Https&lt;/a&gt;, 直接使用上面的 &lt;code&gt;OkHttpStack&lt;/code&gt; 就可以了, 但是如果遇到服务器开发哥哥使用了自签名的证书(不要问我为什么要用自签名的), 就无法正常访问了.&lt;/p&gt;

&lt;p&gt;网上有很多文章给出的方案是提供一个什么事情都不做的&lt;code&gt;TrustManager&lt;/code&gt; 跳过 &lt;code&gt;SSL&lt;/code&gt; 的验证, 这样做很容受到攻击, Https 也就形同虚设了.&lt;/p&gt;

&lt;p&gt;我采用的方案是将自签名的证书打包入 APK 加入信任.&lt;/p&gt;

&lt;p&gt;好处:
* 应用难以逆向, 应用不再依赖系统的 trust store, 使得 Charles 抓包等工具失效. 要分析应用 API 必须反编译 APK.
* 不用额外购买证书, 省钱&amp;hellip;.
缺点:
* 证书部署灵活性降低, 一旦变更证书必须升级程序.&lt;/p&gt;

&lt;h3 id=&#34;实现步骤:03999fb0359803477bc987da56a0bc05&#34;&gt;实现步骤&lt;/h3&gt;

&lt;p&gt;以最著名的自签名网站12306为例说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;导出证书&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo | openssl s_client -connect kyfw.12306.cn:443 2&amp;gt;&amp;amp;1 |  sed -ne &#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#39; &amp;gt; kyfw.12306.cn.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将证书转为 bks 格式
下载最新的bcprov-jdk, 执行下面的命令. storepass 是导出密钥文件的密码.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -importcert -v \
    -trustcacerts \
    -alias 0 \
    -file &amp;lt;(openssl x509 -in kyfw.12306.cn.pem) \
    -keystore kyfw.bks -storetype BKS \
    -providerclass     org.bouncycastle.jce.provider.BouncyCastleProvider \
    -providerpath ./bcprov-jdk16-1.46.jar \
    -storepass asdfqaz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将导出的 kyfw.bks 文件放入 res/raw 文件夹下.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建  &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // A HttpStack implement witch can verify specified self-signed certification.
public class SelfSignSslOkHttpStack extends HurlStack {


  private OkHttpClient okHttpClient;


  private Map&amp;lt;String, SSLSocketFactory&amp;gt; socketFactoryMap;


   // Create a OkHttpStack with default OkHttpClient.
  public SelfSignSslOkHttpStack(Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this(new OkHttpClient(), factoryMap);
  }


  // Create a OkHttpStack with a custom OkHttpClient
  // @param okHttpClient Custom OkHttpClient, NonNull
  public SelfSignSslOkHttpStack(OkHttpClient okHttpClient, Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this.okHttpClient = okHttpClient;
    this.socketFactoryMap = factoryMap;
  }


  @Override
  protected HttpURLConnection createConnection(URL url) throws IOException {
    if (&amp;quot;https&amp;quot;.equals(url.getProtocol()) &amp;amp;&amp;amp; socketFactoryMap.containsKey(url.getHost())) {
        HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(okHttpClient).open(url);
        connection.setSSLSocketFactory(socketFactoryMap.get(url.getHost()));
        return connection;
    } else {
        return  new OkUrlFactory(okHttpClient).open(url);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后用 &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt; 创建 Volley 的 RequestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String[] hosts = {&amp;quot;kyfw.12306.cn&amp;quot;};
int[] certRes = {R.raw.kyfw};
String[] certPass = {&amp;quot;asdfqaz&amp;quot;};
socketFactoryMap = new Hashtable&amp;lt;&amp;gt;(hosts.length);


for (int i = 0; i &amp;lt; certRes.length; i++) {
    int res = certRes[i];
    String password = certPass[i];
    SSLSocketFactory sslSocketFactory = createSSLSocketFactory(context, res, password);
    socketFactoryMap.put(hosts[i], sslSocketFactory);
}


HurlStack stack = new SelfSignSslOkHttpStack(socketFactoryMap);


requestQueue = Volley.newRequestQueue(context, stack);
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;done&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://github.com/dodocat/AndroidNetworkdemo&#34; title=&#34;android network demo&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>庆余年: 又一叶</title>
      <link>http://alimy.me/post/arc_201603192212/</link>
      <pubDate>Sat, 19 Mar 2016 22:12:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192212/</guid>
      <description>&lt;p&gt;当年的废话&lt;/p&gt;

&lt;p&gt;至于是如何和小眉认识的，已经有些记不清楚了，只记得那天太阳当空照，花儿对我笑，小鸟说操操操，喔，不对，那天好象国际上又出了件什么事儿，于是我们几个兄弟以此为由撮了一顿，中午我喝了太多的酒，头有些昏，腿有些沉，舌自然也有些笨了，一个人到街上的书铺借了本小说便直奔大南门外的烂草地，准备刮刮江风，冒充一下孤独；抽抽小烟，模仿一下绝望。&lt;/p&gt;

&lt;p&gt;只是有太久没有出门了，所以没想到七月的太阳竟然会这么毒。&lt;/p&gt;

&lt;p&gt;当然，这是一个常识，但现在我的问题就是缺乏常识。于是在石凳上坐了五分钟后，我便决定脱下满身汗臭的格子短袖，做个脱衣的俗人，脱俗之人。&lt;/p&gt;

&lt;p&gt;当我的手指伸向短袖的第三个扣子时，不期有一道很清凉，很清凉的声音从我的正前方响了起来：&lt;/p&gt;

&lt;p&gt;“天气还真是热呀！”&lt;/p&gt;

&lt;p&gt;甜甜的、酸酸的、有营养……我自顾自地笑了笑，第一个反应是，这绝对是一个雌性动物才能拥有的声音，而且一定是个小雌。&lt;/p&gt;

&lt;p&gt;我的第二个反应是，赶忙把第二个扣子给扣了起来。&lt;/p&gt;

&lt;p&gt;我的第三个反应是，脑袋嗡地一声……世界果然大不同，居然有女子主动找我搭讪。&lt;/p&gt;

&lt;p&gt;我把头深深地埋在怀里，用了半分钟的时间，猜度了种种可能，唯一把美女相约的可能排除掉后，勇敢地抬起头来，面对这个脸上可能涂了八层防晒霜的恐龙。&lt;/p&gt;

&lt;p&gt;若没有眼花的话，那是一个穿着平山绫那种式样裙子，像萧淑慎一样叉着腰，左手学徐熙媛那样用花手帕扇着风，长的酷似没发胖之前的深田恭子模样的女孩，在用李艳的招牌眼神望着我。&lt;/p&gt;

&lt;p&gt;一瞬间，我觉得喝酒之后的口好渴。&lt;/p&gt;

&lt;p&gt;由于自己生就是个衰命，于是我拼命地告诫自己，这绝对是个幻像。对！今天的阳光太过耀眼，而自己又是刚闻韶乐，数月不知肉味。所以这绝对是个幻像！&lt;/p&gt;

&lt;p&gt;可我的肋骨下方，肩胛骨前方，往往用来爱国的地方，常是酸酸的地方，怎突然一下感觉如此温柔。我一时失措，急忙用拇、食二指，曲成蟹螯之状，向腰后多肉处捏了下去……对，掐死你的温柔。&lt;/p&gt;

&lt;p&gt;一掐之下，始知今季并非春日，故眼前美景绝非chun梦。&lt;/p&gt;

&lt;p&gt;其实现在想起来，也不过是眉清目秀罢了。&lt;/p&gt;

&lt;p&gt;但当时我的嘴角险些亲吻我的耳垂。&lt;/p&gt;

&lt;p&gt;大约看我呆了太久，女孩子笑了，轻声道：“天好热啊！”&lt;/p&gt;

&lt;p&gt;我回她一个自认为最儒雅的呆鹅式笑容，貌似随意地用肥厚的手指梳理了一下油搭搭的乱发，再以一秒一合的速度眨了下眼，最后以两秒一字的速度缓缓应道：&lt;/p&gt;

&lt;p&gt;“对呀，好热的天啊。”&lt;/p&gt;

&lt;p&gt;女孩闻言一笑，烈烈夏日空气顿化作清风拂体。&lt;/p&gt;

&lt;p&gt;“这么热的天，还看书啊？”&lt;/p&gt;

&lt;p&gt;我很沉着地点点头，故作镇静道：“嘿……瞎看呗！”，此时我的手中正拿着一本《潇洒出阁》，闻佳人发问，心中不禁大窘，封面已然湿透矣。&lt;/p&gt;

&lt;p&gt;“我也挺喜欢看席娟的书的。”&lt;/p&gt;

&lt;p&gt;“是吗？”声调不由提高了几分。&lt;/p&gt;

&lt;p&gt;“你在哪儿上学了？”&lt;/p&gt;

&lt;p&gt;在嘴角和耳际又做了次亲密接触后，我从牙齿缝里憋出句话来：“加里敦大学。”&lt;/p&gt;

&lt;p&gt;“喔。”那女孩似觉诧异，又有些失望。&lt;/p&gt;

&lt;p&gt;我有些不甘心，生平第一次被美女主动搭讪，就这般无疾而终。于是使出我的撒手锏，用蒋昌建般浑厚的嗓音，缓缓吟道：“谁言人类的精神家园已然花果飘零，看这烈日当空，未料除闲人于此瞎逛，亦有如斯佳人未肯稍弃亲近自然之机。”&lt;/p&gt;

&lt;p&gt;不出我的意料，那女孩一愣之后，忽地掩嘴而笑。但出乎我的意料是，那是一串止不住的笑声，从她那纤细的手指间隙中汩汩而出。若纯以声音论，那笑声像银铃，像黄莺，像百灵（当然，我并不知道黄莺和百灵是不是一种鸟），像火锅旁的冰啤酒，像何伟炸的花生米旁的枝江大曲，像一中球场上那青青的草，还像什么来着……&lt;/p&gt;

&lt;p&gt;只是若这笑声是因我而发，那未免就有些难堪了。我皱了皱眉，以示我的不爽。却闻笑声不止，间有俏声道：&lt;/p&gt;

&lt;p&gt;“怎么你的声音忽上忽下，就像坏了的黑管一样。”&lt;/p&gt;

&lt;p&gt;提到黑管，不由想起了一位同学，听说他在大学里就学这个的。也因如此，我才知道黑管是个乐器。我一面想着，却未料一面就说了出来：&lt;/p&gt;

&lt;p&gt;“我知道黑管是件西洋乐器。”&lt;/p&gt;

&lt;p&gt;她一愣，又笑了起来。我也只好陪笑，但坚决不陪别的。&lt;/p&gt;

&lt;p&gt;她用双手把头发向后拢了拢，用那条花手帕扎了起来，坐了下来，饶有兴致地看着我。&lt;/p&gt;

&lt;p&gt;饶有兴致！我敢用我父亲的人格发誓，她只是觉得我很莫名其妙，绝不可能对我有什么意思。&lt;/p&gt;

&lt;p&gt;不过我并不反对在这样一个炎热的下午，有这样一个女孩陪我晒太阳，虽说这真的有些莫名其妙。&lt;/p&gt;

&lt;p&gt;她又向我手上的书饶有兴致的看了一眼。&lt;/p&gt;

&lt;p&gt;我强颜道：“我姐姐在医院住院，给她借去看，医生又不准。所以……”&lt;/p&gt;

&lt;p&gt;她做出一副恍然大悟的神情，眼神中却带着一抹俏皮的调笑之色。&lt;/p&gt;

&lt;p&gt;当我正要做进一步解释的时候，她笑着说：“其实席娟的书真的挺好看，风行两岸三地，清新可人，人称冰淇淋小说。”&lt;/p&gt;

&lt;p&gt;说话的神情，颇似江苏文艺出版社的发行商。&lt;/p&gt;

&lt;p&gt;于是，这下轮到我笑了。&lt;/p&gt;

&lt;p&gt;对了，冰淇淋小说。对了，她的笑，就像夏天里的冰淇淋&lt;/p&gt;

&lt;p&gt;正当我回味在冰淇淋的甜美中时，却忽然发现了一个危险的讯号。只见这女孩向我发出了一个蠢蠢的笑容。我心一紧，却听她甜甜道：&lt;/p&gt;

&lt;p&gt;“今天天真热，如果能吃上冰淇淋就好了！”&lt;/p&gt;

&lt;p&gt;我搔搔头，好生不解，只觉眼前这似乎应该是酒吧里的情节，而且女主角一般都会说：“嗨！能请我喝杯妈爹的吗？”&lt;/p&gt;

&lt;p&gt;虽说老爸，老妈的东西都挺贵，但毕竟气氛合宜，像这般在烈日之下的滨江公园，一个年轻娇俏的女孩子向一个认识不到五分钟的胖男人“强要”那不值钱的冰淇淋吃，悠悠苍天，此何人哉？&lt;/p&gt;

&lt;p&gt;不过看她的打扮，怎么也比我有钱啊。我想到了生命的真谛，不由困惑了。（扯淡，哪想的到那儿去。）&lt;/p&gt;

&lt;p&gt;虽说我不介意请美女吃吃冰淇淋，聊聊天，因为想像中那种感觉应该是好极了。但当我用手轻拍自己的腰包后，便不由学起那齐什么王来，用最自然的口气，最不自然地接了下去：“这么热的天，你一个女孩子跑到这儿来干吗，不怕晒黑了吗？”&lt;/p&gt;

&lt;p&gt;女孩子很执著地望着我。&lt;/p&gt;

&lt;p&gt;“能请我吃冰淇淋吗？”&lt;/p&gt;

&lt;p&gt;相信我，我从未遇到过这般不知头尾的事情。&lt;/p&gt;

&lt;p&gt;恰好在这时，一个卖冰棍的小贩吟唱着冰淇淋之歌从我们身边走过，他以军情局特务的敏锐嗅觉，觉察出了这看上去毫不般配的男女之间，似乎将要给他创造无限商机。&lt;/p&gt;

&lt;p&gt;面对着小贩饥渴的眼神，再回头看看她比小贩还饥渴的眼神，我在心中浩叹一声，认输了吧。&lt;/p&gt;

&lt;p&gt;“来个蛋卷！”&lt;/p&gt;

&lt;p&gt;小贩正色道：“美怡登的脆皮又出新品种了。！&lt;/p&gt;

&lt;p&gt;“来个蛋卷！”&lt;/p&gt;

&lt;p&gt;“新种脆皮，好吃的很！”一口四川腔。&lt;/p&gt;

&lt;p&gt;龟儿子！我暗骂一句，还是老乡哩，这点面子也不给。&lt;/p&gt;

&lt;p&gt;就当我和小贩以绝世内功透过凌厉眼神暗自拼杀之际，那清清的声音，懒扬扬地说了一句：&lt;/p&gt;

&lt;p&gt;“你个老子的烦不烦啦！说蛋卷，就蛋卷啦！”&lt;/p&gt;

&lt;p&gt;付钱，撕纸，送入嘴中。&lt;/p&gt;

&lt;p&gt;我目瞪口呆地看着她，实未料到美女也会说粗话。&lt;/p&gt;

&lt;p&gt;“喂！别这么看着我。”她一边从红樱桃之唇内吐出丁香之舌品味着如雪美味，一边递给我一个不屑的眼神。&lt;/p&gt;

&lt;p&gt;“你一个大男人，怎么做事这么拖沓。是你买他的东西耶！怎么搞的好象你欠他似的。”&lt;/p&gt;

&lt;p&gt;我这才注意到她说话，神情都干净俐落，吃冰淇淋的速度更是让人望而生畏，让人好生……佩服。而且说的话听上去似乎也有几分道理，不过我还在纳闷，凭什么我要请她吃冰淇淋。&lt;/p&gt;

&lt;p&gt;我搔搔脑袋，闷头闷脑地问道：“为什么……”&lt;/p&gt;

&lt;p&gt;“为什么请我吃冰淇淋？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;她擦了擦手，再擦了擦嘴，站起身来，原地转了一圈，以手支颌，对我眨了眨眼，似是用尽全身之力强忍住笑，问道：“你看我怎么样？”&lt;/p&gt;

&lt;p&gt;我老老实实答道：“生平未见之美女。”&lt;/p&gt;

&lt;p&gt;她很诚恳地点点头，道：“一来证明你近视的度数不是太高。二来说明美丽的东西总是不容易被掩盖的。”&lt;/p&gt;

&lt;p&gt;接着又是一串银铃似的笑声，笑声之下是有些失神的我。&lt;/p&gt;

&lt;p&gt;她坐在了我的身旁，满是笑意地望着我。我这才看清了她的容貌。在心里暗赞了一声：“真她妈生的漂亮！”&lt;/p&gt;

&lt;p&gt;她妈的确把她生的很漂亮。&lt;/p&gt;

&lt;p&gt;看着她那清亮的眼，俏直的眉，润红的唇，随风摇动的衣摆，阳光投射在草地上的细长的影子。我不知怎地，感到了一丝媚惑之意。此意与此女无干，纯是鄙人修行太低之故。&lt;/p&gt;

&lt;p&gt;“请你生平未见之美女吃个冰淇淋，有这么痛苦吗？”&lt;/p&gt;

&lt;p&gt;我回答的更老实了。&lt;/p&gt;

&lt;p&gt;“我缺钱花。”&lt;/p&gt;

&lt;p&gt;“你自己怎么不吃呢？”&lt;/p&gt;

&lt;p&gt;未待我回答，她已抢着大悟了。“真的是很缺钱花。”&lt;/p&gt;

&lt;p&gt;“好啦！看在你请我吃冰淇淋的份上，陪你聊会儿吧。”她以施舍的口气说道。接着伸了个懒腰，将双手合拢伸到裙后，肆意地伸展着身体，曲成了一个美丽的弧形，极具美感。&lt;/p&gt;

&lt;p&gt;我闻言本有些不悦，但看在她伸懒腰都伸地这么漂亮的份上，也就罢了。&lt;/p&gt;

&lt;p&gt;于是，开始聊天。&lt;/p&gt;

&lt;p&gt;本次聊天，从席娟的小说开始，说到台湾的言情市场，再哀叹武侠风潮的没落，亦悲于温瑞安的自我放荡，再到讥笑温瑞安，真的以为自己是个武功高手，还时常穿些功夫服，拍些恶照，损害我们的视网膜。再到痛骂成龙的崇洋媚外，又很痛心吴宇森地堕落，又一致同意发哥发福之后果然更有男人魅力，并共同声讨李安很是老土。&lt;/p&gt;

&lt;p&gt;说起李安曾导过理智与情感，就一同可惜没看过原著，便很有默契地认为外国小说实在是很乏趣味。&lt;/p&gt;

&lt;p&gt;当然也偶有分歧。她说初看废都时，兴奋地想找朋友来研讨。我说你那还不如去看往事回忆录。她问我那是什么，我愣了一愣，她又抢着大悟，脸红了一红。&lt;/p&gt;

&lt;p&gt;于是不谈小说了，说起了九九的鸭头很进味，又说九九九的鸭头大概是九九的徒弟做的。她说三十八块钱一斤的香辣蟹，只有果园路那家做的比较好。我说二十块钱一锅的肥肠，还是要到四零三底下去吃。她说看见桌上的男人喝酒时，她便很想喝鲜橙多，主要原因是因为看别人喝酒，她的胃也会跟着不舒服。我说我喝多了之后，也很想喝鲜橙多，并且主要的原因是因为做广告的那个女孩很吸引我。&lt;/p&gt;

&lt;p&gt;她说看见迪吧里的那些小女孩摇头晃脑，很恐怖。我摇头晃脑一番后说，其实迪吧我还没去过。她说海王星的咖啡馆里有钢琴，不过弹地很糟糕，我终于兴奋地说，海王星？我进去过，十几个人拼了两张方桌，准备喝啤酒，结果被一个小资情调高涨的女同学带着落荒而逃。&lt;/p&gt;

&lt;p&gt;本次聊天还聊了很多，最终结束于我的一句不合时宜的问话：&lt;/p&gt;

&lt;p&gt;“你这么漂亮的女孩子，居然和我一样，这么有空？”&lt;/p&gt;

&lt;p&gt;她抿着嘴笑了笑，笑应该是对着我笑的，眼神却像是漂到了别的地方。她说了最简单的六个字，也是最能说明问题的六个字：“&lt;/p&gt;

&lt;p&gt;“送一个朋友走了。”&lt;/p&gt;

&lt;p&gt;原来气氛的变化，远远迅疾过气温的变化。&lt;/p&gt;

&lt;p&gt;她站起来，给了我一个温柔的笑容，学着松隆子的模样，把脑袋微微一侧，轻声道：“我得走了，谢谢你的冰淇淋。”&lt;/p&gt;

&lt;p&gt;我也站了起来，给了她一个平生最温柔的笑容，用轻到听不到的声音说道：“谢谢你陪我这个无聊人聊天。”&lt;/p&gt;

&lt;p&gt;（对不起，平生最这三个字，似乎又有些滥用了。不过我经常就是这样的。）&lt;/p&gt;

&lt;p&gt;“再见！”&lt;/p&gt;

&lt;p&gt;古龙说过，再见的意思往往就是不再见面。这意思我懂，但从未遇到过，今天和这不知名的女孩，应该算是一例吧。我有些恼火地想着。&lt;/p&gt;

&lt;p&gt;已走出十几步的她，忽然转过身来，把手插在那大花裙子前面的大口袋里，侧着脑袋想了会儿，喊道：“请无聊人说出自己的三大优点。”&lt;/p&gt;

&lt;p&gt;我笑了笑，喊道：“穿花裙子的花姑娘请先。”&lt;/p&gt;

&lt;p&gt;“我的第一个优点是漂亮，妈妈生的；我的第二个优点是美丽，爸爸养的；我的第三个优点是可爱，自己装的。”&lt;/p&gt;

&lt;p&gt;“那么我的第一个优点是老实，姐姐打出来的；我的第二个优点是诚恳，妈妈教出来的；我的第三个优点是木讷，一个姓袁的混俅老师逼出来的。”&lt;/p&gt;

&lt;p&gt;“那好，无聊人，真的再见了哟！”&lt;/p&gt;

&lt;p&gt;“很好，花姑娘，可以再见了耶！”我从不知道，一旦面对美女，我的语调也可以这样肉麻。&lt;/p&gt;

&lt;p&gt;她回头走了，一边背着向后摆手，一边说道：“再说一句话，你长的有点儿像ＪＨＴ，就是胖一些。”&lt;/p&gt;

&lt;p&gt;ＪＨＴ是谁？我不知道，不过有人说自己跟帅哥的区别只是胖一些，我已是感激涕零了。&lt;/p&gt;

&lt;p&gt;不知是哪里来的灵感，我大声吼道：“83４８０６５！”&lt;/p&gt;

&lt;p&gt;她愣了一愣。&lt;/p&gt;

&lt;p&gt;“我的电话号码。”&lt;/p&gt;

&lt;p&gt;她回头看了我一眼，忍不住笑了起来，似乎觉得真的很好笑。不过细细想来的确很好笑，从未见过那个男人用我这般愚蠢的方式，进行这种工作，似乎有些乾坤易位的感觉。&lt;/p&gt;

&lt;p&gt;“陌生人的电话号码，我一般是记不住的。”&lt;/p&gt;

&lt;p&gt;我摊摊手，做洒脱状，道：“无所谓啦。记不住，是你的幸运。万一记住了，就是我的幸运。”&lt;/p&gt;

&lt;p&gt;她又笑了，真是个爱笑的人，而且抿着嘴笑的样子真的有点儿傻傻的……不过我喜欢。&lt;/p&gt;

&lt;p&gt;老天爷其实并不公平。&lt;/p&gt;

&lt;p&gt;比如说把人类生生地分成了两性，地位却有些悬殊。本来男人喜欢女人，女人喜欢男人是天公地道，若强要逆势而为，的确是有些糊涂。但我很不服气的是不喜欢女人的男人都被称作阴阳人，成为包龙星嘴下的烂腐。而不喜欢男人的女人，有个男人却给取个名字叫水母阴姬，笔下满是崇拜之情。另一个不喜欢男人的女人名字更夸张，居然叫什么日后。&lt;/p&gt;

&lt;p&gt;想当太阳吗？我一向以为女人在她的男人面前才可能成为太阳。&lt;/p&gt;

&lt;p&gt;还好，我是喜欢女人的。&lt;/p&gt;

&lt;p&gt;尤其喜欢美女。&lt;/p&gt;

&lt;p&gt;但只是远观而已。&lt;/p&gt;

&lt;p&gt;那时候的我，的确很无聊，曾经有一次坐二路车到九码头拜访亲友，却一直坐到了八一钢厂，只为了车厢前排坐着一个长相清秀的红衣少女。&lt;/p&gt;

&lt;p&gt;我更喜欢背着一个黑包，在晚上八点钟的时候，站在解放路的天桥上，看身边的红男绿女，看女人撒娇，看男人烦恼，自己还借着夜色的掩护傻笑。这虽有些病态，却也是消磨时光的好办法。&lt;/p&gt;

&lt;p&gt;看的人多了，自然难免有些伤心。不过伤心之后，还是照看不误，美其名曰：养眼。&lt;/p&gt;

&lt;p&gt;我一直以为那个冰淇淋女孩也只是偶尔出现的润洁滴眼露。唯一的区别是她曾和我说过几句话，虽说聊的很开心。&lt;/p&gt;

&lt;p&gt;虽然以无穷的勇气，无耻的决心告诉了她我的电话号码，但我并不以为会有什么后文，而且的确也没什么后文。&lt;/p&gt;

&lt;p&gt;于是这个美女就像钞票一样，从我的生活中消失了。&lt;/p&gt;

&lt;p&gt;我没有什么不甘心的，邂逅这种浪漫的桥段，我从未期待过。&lt;/p&gt;

&lt;p&gt;唯一有些放在心上的，是她说我和ＪＨＴ长的有些像。&lt;/p&gt;

&lt;p&gt;要知道，我的同学们都说我长的像尹相杰。&lt;/p&gt;

&lt;p&gt;ＪＨＴ是谁？莫不是亚洲第一美男元彬的英文名？&lt;/p&gt;

&lt;p&gt;于是在之后的十几天里，我拼命地向我那几个读高中的小侄女打听这位明星是谁，却未料到以明星当饭吃的她们也是一脸惘然。&lt;/p&gt;

&lt;p&gt;于是乎，我便产生了这样一个想法。&lt;/p&gt;

&lt;p&gt;这ＪＨＴ莫不是个商界年轻才俊？&lt;/p&gt;

&lt;p&gt;于是开始不顾书店老板的恶言恶语，拼命翻读商界，市场营销之类的书籍，每礼拜天晚上准时收看央视的夸富节目：对话。&lt;/p&gt;

&lt;p&gt;又是十几天过去了，仍是一无所获。&lt;/p&gt;

&lt;p&gt;现在已是八月的夏天，那个小资情调的女同学回来了。&lt;/p&gt;

&lt;p&gt;于是我到她家去了。&lt;/p&gt;

&lt;p&gt;用企望的眼光向她询问。&lt;/p&gt;

&lt;p&gt;“ＪＨＴ？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;她一面擦着滴水的头发，一面毫不避嫌地在我面前往脸上抹些不知名的白色流质体。&lt;/p&gt;

&lt;p&gt;“JHTisJackhatetitanic。”&lt;/p&gt;

&lt;p&gt;我把这句半通不通的洋文重复了一遍，杰克恨泰坦尼克。什么玩意？&lt;/p&gt;

&lt;p&gt;看到我犹自不醒的神情。&lt;/p&gt;

&lt;p&gt;她娇嗔一声道：“就是痞子蔡的网名啦！”&lt;/p&gt;

&lt;p&gt;“痞子蔡是谁？”我仍自不醒。&lt;/p&gt;

&lt;p&gt;只见这位小资同学愕然之后，将那涂的本有些小巧的唇，又张成了保龄球道的洞口，白森森的牙齿象那十个木瓶一样齐刷刷地站立着，向我示威。&lt;/p&gt;

&lt;p&gt;我忍住对她所用牙膏的好奇，以及将拳头送入她嘴中的冲动，仍是谦逊地又问了一遍。&lt;/p&gt;

&lt;p&gt;她深深地叹了口气，似是决定原谅我的无知。然后说出了以下的一段话：&lt;/p&gt;

&lt;p&gt;“当代窜红最快的男性非艺人。感情最为充沛的网络写手。他最后悔没有早读到席慕蓉的无怨的青春。最喜欢喝的是爱尔兰咖啡，最喜欢的香水是DolceVita，……喔，这是意大利文，中文意思是甜蜜的日子，他的室友叫阿泰，他的女友叫轻舞飞扬，可惜死了……”&lt;/p&gt;

&lt;p&gt;虽说可惜，但我明明在小资同学的脸上，看到了一丝幸灾乐祸。&lt;/p&gt;

&lt;p&gt;不等她说完，我已冲下楼，直奔新华书店。至于长的如何，更是不用问了，单看小资同学那崇拜的神情，我便已是成竹在胸。&lt;/p&gt;

&lt;p&gt;到了书店，请小姐帮忙，找到了痞子蔡的书，我瞄了瞄封页，洛阳神茶，爱尔兰咖啡。我笑着问那位小姐，这人是不是卖饮料的。&lt;/p&gt;

&lt;p&gt;小姐一愣，仍是很和蔼地用宜普说道：“先生，你儿可以看哈捏本。很有名的，第一次亲密接触。”（注：宜普即yc地区通用的，带有yc特色的普通话。）&lt;/p&gt;

&lt;p&gt;我笑了笑，感谢她的热诚服务，然后把手插入口袋，两爪清风地离开，留下错愕的她。&lt;/p&gt;

&lt;p&gt;待从另一个有利用价值的朋友处搞到了这本书后，我用了半小时的时间读完。读后深受感动。翻到前页，发现有痞子蔡的照片。&lt;/p&gt;

&lt;p&gt;我认真的看了几眼，私下里并不以为他和我长的有些相像。&lt;/p&gt;

&lt;p&gt;他长的的确不像尹相杰，他比尹相杰还丑。&lt;/p&gt;

&lt;p&gt;伤了会儿心，然后洗了个澡，抽了根烟，躺到床上。那时是凌晨一点，老妈被我吵醒后，很诧异地问我：“今天出什么事了，这么早就睡觉。”&lt;/p&gt;

&lt;p&gt;我总不能说自己很伤心吧，于是温柔地笑着问她：“儿子是不是长的不怎么帅？”&lt;/p&gt;

&lt;p&gt;老妈笑了笑，拍拍我的脸，道：“我儿子长的比哪个都帅。”&lt;/p&gt;

&lt;p&gt;这就是女性和伟大女性的区别。&lt;/p&gt;

&lt;p&gt;有个同学谈过很多次恋爱，但他在酒桌上讲的往往只有一桩，一桩因某个停电之夜雨电交加，而促成的一段孽缘。他认为那次才是真正的浪漫到了极点。&lt;/p&gt;

&lt;p&gt;什么叫浪漫呢？由他多次的谈话中我总结了一下，有这么几条。一要一个喝醉酒的男人。二要有一个孤独的女人。三天要下雨。四天若不下雨，就一定要刮风。五若天不下雨，天不刮风，则天下一定要有大太阳。六下雨的时候没有伞，或只有一把小伞。七刮风的时候，一定要呆在风最大的江岸上，以便把她刮倒在你的怀里。八日光最烈的时候，你可以有最充足的理由请她回自己家喝杯冷饮。九身上一定要带钱。若无钱，虽小说上也曾有贫贱夫妻的浪漫，只怕也是会打折的。&lt;/p&gt;

&lt;p&gt;综上所述，我就不打算浪漫了。&lt;/p&gt;

&lt;p&gt;那些天老姐把福山雅治和常盘贵子演的邂逅借回来看。由于我只喜欢木村和松隆子，所以在吃完饭后，坚决地背着黑包出了门。&lt;/p&gt;

&lt;p&gt;我是一个很执着的人。&lt;/p&gt;

&lt;p&gt;晚上八点钟，又是解放路天桥。&lt;/p&gt;

&lt;p&gt;我站在天桥上想着邂逅这种事情，忽然有些伤心地发现，若邂逅的意思是指早前认识的男女在某种机缘巧合的情况下忽然碰见，那在yc城内，我是不大有什么机会和从前的朋友们邂逅了。别人伤心邂逅的理由，是怕遇不到某个想遇到的人。我伤心的理由却是怕遇不到一个认识的人。&lt;/p&gt;

&lt;p&gt;想到此节，我不由悲从心来，往天桥下过往的车流吐了一口痰。&lt;/p&gt;

&lt;p&gt;“这样不太好吧？”&lt;/p&gt;

&lt;p&gt;一个女子杵到了我的旁边，全然未知我正在念天地之悠悠。&lt;/p&gt;

&lt;p&gt;我不耐烦地看了她一眼，心中得出一个结论：“居然又是一个美女。”&lt;/p&gt;

&lt;p&gt;不过由于当街吐痰被美女看到，所以我的心情不好，决定不去理她。&lt;/p&gt;

&lt;p&gt;“无聊人，不记得我啦？”&lt;/p&gt;

&lt;p&gt;我想到了生命的真谛，不由有些疑惑。（对不起，又想到那儿了。）晚上八点，天已有些黑了，自己又是个近视眼，所以难免有些……&lt;/p&gt;

&lt;p&gt;待看清楚是那个长的像深田恭子的那个女孩，不知为何我忽然松了一口气。&lt;/p&gt;

&lt;p&gt;“花姑娘今天又这么有空。”其实她今天穿的是一件淡蓝底子上印着深蓝碎花的吊带裙，看上去很漂亮，叫她花姑娘，是有些委屈她了。&lt;/p&gt;

&lt;p&gt;“怎么你皇军的口吻总是不改。”她转过身来，靠在天桥的栏杆上，微微地翘起右脚，似是在地上划着什么字。&lt;/p&gt;

&lt;p&gt;我不理她，径直问道：“你在这边看我多久了。”&lt;/p&gt;

&lt;p&gt;“一朵花开的时间。”&lt;/p&gt;

&lt;p&gt;“俗！”我做呕吐状。&lt;/p&gt;

&lt;p&gt;她好心地把手并拢，摊在我的嘴前。&lt;/p&gt;

&lt;p&gt;“最近忙什么呢？”&lt;/p&gt;

&lt;p&gt;“忙着赚钱，花钱。你呢？”&lt;/p&gt;

&lt;p&gt;“忙着睡觉，吃饭。”&lt;/p&gt;

&lt;p&gt;“这回答也挺俗。对了……差点儿忘了你是加大毕业的，只是成天忙这些不烦吗？”&lt;/p&gt;

&lt;p&gt;“哎，你很龟毛哎。”&lt;/p&gt;

&lt;p&gt;“少假仙啦，是不是很寂寞啊。”&lt;/p&gt;

&lt;p&gt;“……”&lt;/p&gt;

&lt;p&gt;我们学习着言情小说里的情节，用极烂的西门町国语，进行着一场惨不忍睹的对话。双方都极力想轻描淡写地当作熟人一样来交谈，可问题是……&lt;/p&gt;

&lt;p&gt;我们并不很熟。&lt;/p&gt;

&lt;p&gt;“哎……”&lt;/p&gt;

&lt;p&gt;两人同时长叹一声气后，大概发现了大家都没有这种本领，于是便选择了沉默。&lt;/p&gt;

&lt;p&gt;于是我在桥上看美女，她在我身旁看我看美女。&lt;/p&gt;

&lt;p&gt;不知站了多久，我笑了笑，道：“如果一直这么立着，别人会不会以为这是两个雕像。”&lt;/p&gt;

&lt;p&gt;她轻轻笑了声，用手拨拉一下额前的刘海儿，道：“对啊，雕像的名字就是美女与野兽。”&lt;/p&gt;

&lt;p&gt;我摇摇头。&lt;/p&gt;

&lt;p&gt;“我以为是巴黎圣母院。”&lt;/p&gt;

&lt;p&gt;看着她的头发在夜色中乱乱地拂着，我很想把它缠在自己的指尖上，不是因为别的，只是想让它安份一些。&lt;/p&gt;

&lt;p&gt;不知为何，她今天的话比那天下午要少许多。&lt;/p&gt;

&lt;p&gt;也许是心情不好？&lt;/p&gt;

&lt;p&gt;“今天又等人吗？”&lt;/p&gt;

&lt;p&gt;“等你啊！”她向我投以温柔一笑，我以傻然一笑化之。&lt;/p&gt;

&lt;p&gt;忽地想起这些天的忙碌，连忙向她报怨：“我似乎比痞子蔡长的要周整些吧？”&lt;/p&gt;

&lt;p&gt;“你也就头发长些，这样很丑。”&lt;/p&gt;

&lt;p&gt;“头发长些，遮住脸，看上去就没那么胖了。你是女人，一定比我清楚。”&lt;/p&gt;

&lt;p&gt;她看了看我衣服上的油渍，叹口气道：“头发长，身上脏，不是要饭，就开画廊。”&lt;/p&gt;

&lt;p&gt;“我在家里天天做饭，哪比得上你们这些千金。”我搔搔头。&lt;/p&gt;

&lt;p&gt;“你会做饭？”她露出不信的神色。&lt;/p&gt;

&lt;p&gt;我暗自在心里为自己这最后的资本得意了一下，点了点头，然后痛心说道：“只是水平太差。像今天炒苦瓜，我放了些干辣椒，再加上你知道的，我怕苦……哦……对了你不知道，不过无所谓……于是我问老妈，可不可以放些糖。结果老妈把我痛骂了一番，说苦瓜不苦，那就不对了。”&lt;/p&gt;

&lt;p&gt;她很轻易地站到我母亲那一边，用力点了点头，问道：“后来？”&lt;/p&gt;

&lt;p&gt;“于是我老老实实地站到了锅前，把准备加的一小勺糖，换成了两勺。”我把站着的两脚前后错开，伸手一挥，大有老毛让人去下乡的气魄。&lt;/p&gt;

&lt;p&gt;她捂着嘴，忍住笑道：“结果？”&lt;/p&gt;

&lt;p&gt;“结果，全家一致公认，比妈炒了三十年的苦瓜要好吃。”&lt;/p&gt;

&lt;p&gt;“得出什么结论？”&lt;/p&gt;

&lt;p&gt;“结论是人人都怕苦，但人人都不说。”&lt;/p&gt;

&lt;p&gt;两人又笑了笑，又不知道该说些什么了，这就是冷场吧，我在心里想着。&lt;/p&gt;

&lt;p&gt;于是我说：“看过痞子蔡的洛阳神茶吗？”心想她可能对这个感兴趣。&lt;/p&gt;

&lt;p&gt;她愣了会儿，侧着脑袋想了会儿，像是忽然明白过来了，反问道：“是洛神红茶吧？”&lt;/p&gt;

&lt;p&gt;我一窘，心想这人写的书名也这么难记。&lt;/p&gt;

&lt;p&gt;“洛阳神茶？”她笑了笑，“还印度神油哩。”&lt;/p&gt;

&lt;p&gt;我又一窘，心知她正在颠覆我心中对漂亮女子的一贯看法。&lt;/p&gt;

&lt;p&gt;“为什么他要叫ＪＨＴ呢？”&lt;/p&gt;

&lt;p&gt;“因为他讨厌泰坦尼克，他的英文名却恰恰叫做杰克。”&lt;/p&gt;

&lt;p&gt;“很好，我也讨厌这部戏，我的英文名叫做萧峰。”&lt;/p&gt;

&lt;p&gt;“阿朱他老公，我虽然喜欢痞子蔡，但我更喜欢泰坦尼克。”她直盯盯地看着我，看样子是指望我临阵变节。&lt;/p&gt;

&lt;p&gt;不过我只能说声报歉了，我对泰片之仇恨，不知其何所来，却知其永无终。&lt;/p&gt;

&lt;p&gt;我清了清喉咙道：“曾经有个朋友，看电影去晚了，去的时候刚刚看到这部电影放了一半的时候。”&lt;/p&gt;

&lt;p&gt;“什么时候？”&lt;/p&gt;

&lt;p&gt;“就是杰克和那个女的第一次zuo爱的时候。”&lt;/p&gt;

&lt;p&gt;她用疑惑的眼神看着我，不知道我接下来会说什么。&lt;/p&gt;

&lt;p&gt;“我朋友一进电影院，眼睛都还没有适应黑暗，就看见银屏上，一个沾满灰尘的汽车里，隐隐约约有人影蠕动。待下个镜头切过来时，却突然！……”我做了个夸张的手势。“……看见一只瘦小的手掌，啪的一声打在那汽车玻璃上，激起阵阵灰浪，同时诡秘的音乐响起。”&lt;/p&gt;

&lt;p&gt;“然后？”&lt;/p&gt;

&lt;p&gt;“然后他就在电影院里睡着了。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“结论是，他直到两个月后，才知道这是一部爱情片，而非他所想像的那样，是个恐怖片。”&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;不知什么时候从天桥上走下来了，一直走到了车站，足足有一百米的距离，我看了看天色，大概走了大半个小时。&lt;/p&gt;

&lt;p&gt;然后她就走了，并且坚决要坐计程车。&lt;/p&gt;

&lt;p&gt;我虽然不知道她家住在哪里，但我以为在yc这个小城的范围内，坐计程车本身就是一种罪过。&lt;/p&gt;

&lt;p&gt;但她说她每个月有几百块钱的交通费，不坐白不坐。于是我说能不能顺便搭我一脚。她笑着说在晚上和陌生男子一同搭车，是一件很危险的事情。于是我放弃。&lt;/p&gt;

&lt;p&gt;帮她关车门的时候，我对她说：“83４８０６５？”&lt;/p&gt;

&lt;p&gt;看她一脸惘然，我解释道：“这还是我家的电话号码。”&lt;/p&gt;

&lt;p&gt;她笑了笑，就让司机开车走了。&lt;/p&gt;

&lt;p&gt;于是我也走了，回到了离车站二百米远的家里。&lt;/p&gt;

&lt;p&gt;由于又碰见了美女，所以心情不错，于是便洗了个澡，抽了根烟，坐在电脑前，开始看木村和松隆子的恋爱世纪，看得自己一个劲傻笑。&lt;/p&gt;

&lt;p&gt;这时候电话铃响了。我没去接，因为一般没人打电话找我。&lt;/p&gt;

&lt;p&gt;但这个电话是打给我的。&lt;/p&gt;

&lt;p&gt;电话的那头是一个久违了的大学同学。他很熟练地和我交换了一套来电必用的客套话，接着便直入主题：&lt;/p&gt;

&lt;p&gt;“她下个星期就要去美国了。”&lt;/p&gt;

&lt;p&gt;我哈哈一笑，道：“真的吗？太好了，这样看来，真是塞翁失马，焉知非福。至少我不用跟着过去吃热狗了。”&lt;/p&gt;

&lt;p&gt;他在那头阴笑着说：“有人陪她吃热狗。”&lt;/p&gt;

&lt;p&gt;我哈哈哈一笑，道：“那就更好了，免得一个人太无聊，又想起我来了。”&lt;/p&gt;

&lt;p&gt;接着挂了电话。&lt;/p&gt;

&lt;p&gt;她是我大学时的同学，我曾经以为会和我在一起的人。&lt;/p&gt;

&lt;p&gt;于是我又洗了个澡，点了根烟，仍然是坐在电脑前面，开始放蓝色生死恋，让操着国语的宋慧乔把自己感动个半死。&lt;/p&gt;

&lt;p&gt;电话又响了。&lt;/p&gt;

&lt;p&gt;我一把抢过来，准备吼人，却没人说话。&lt;/p&gt;

&lt;p&gt;半响之后，有个女孩子怯生生地问道：“你是无聊人吗？”&lt;/p&gt;

&lt;p&gt;“你才无聊！”此时的我很愤怒。&lt;/p&gt;

&lt;p&gt;“我们刚见过面的。”&lt;/p&gt;

&lt;p&gt;“噢……”我大悟。&lt;/p&gt;

&lt;p&gt;“有什么事吗？”&lt;/p&gt;

&lt;p&gt;“没什么事，只是看这个电话是不是打的通。另外……”她在电话的那头笑了笑，“……我失恋了，想通知一下别人。”&lt;/p&gt;

&lt;p&gt;听她的口气是认真的，只是在电话的那头笑个不停。&lt;/p&gt;

&lt;p&gt;我压住自己的不耐烦，询着惯例问道：&lt;/p&gt;

&lt;p&gt;“他喜欢你吗？”&lt;/p&gt;

&lt;p&gt;“我想他什么都不知道吧。”&lt;/p&gt;

&lt;p&gt;“笨蛋！不可救药的笨蛋。”我在心底骂了一句，却不知道是在骂谁。“既然未曾恋过，何来失恋，你这叫单恋美梦的破碎。”&lt;/p&gt;

&lt;p&gt;“是吗？”她的声音一下变的空洞起来。&lt;/p&gt;

&lt;p&gt;我这个师兄教导道：“痴情绝对是一种浪废，而且是一种奢侈的浪废。”&lt;/p&gt;

&lt;p&gt;“好吧，我会振作起来的。”她学着那些弱智的日本女人的口气说道。接着又是一串笑声，只是不知道她是在哭着笑，还是在笑着哭。&lt;/p&gt;

&lt;p&gt;不知怎地，对她忽然有了一丝怜悯，我开解道：“哭一场吧。”&lt;/p&gt;

&lt;p&gt;“我哭不出来！”&lt;/p&gt;

&lt;p&gt;我在心底骂道：“死撑什么，声音都发酸了。”&lt;/p&gt;

&lt;p&gt;“去租些碟子回来看，别看喜剧。看到别人快乐，越发会觉得自己伤心的不像是个人了。”&lt;/p&gt;

&lt;p&gt;“那看什么？”&lt;/p&gt;

&lt;p&gt;“看悲剧。最好是那种没什么社会意义的，让你一看就知道女主角要死了的那一类。看完了之后，你就会觉得阳光依然灿烂了。”&lt;/p&gt;

&lt;p&gt;“师兄介绍一下吧。”&lt;/p&gt;

&lt;p&gt;我有些不服这个称谓，虽说生平情场战事，皆以失败告终。&lt;/p&gt;

&lt;p&gt;“你可以看蛋糕上的草莓，第四集。恋爱世纪，第二集。还有蓝色生死恋的全套，不过最好是第六集和最后一集。”&lt;/p&gt;

&lt;p&gt;“好的，我记一下。”接着听见电话的那头传来沙沙地写字声。&lt;/p&gt;

&lt;p&gt;我很欣赏她的这种认真，虽说认真的有些过分。&lt;/p&gt;

&lt;p&gt;过了一会儿，她又说话了。&lt;/p&gt;

&lt;p&gt;“你现在干什么了？”&lt;/p&gt;

&lt;p&gt;“我刚洗了澡，这时候正在看碟子。”&lt;/p&gt;

&lt;p&gt;“看什么呢？”&lt;/p&gt;

&lt;p&gt;我愣了愣，停了一会儿，对着话筒木然地说道：“我正看着俊熙背着将死的恩熙在海边散步……”&lt;/p&gt;

&lt;p&gt;那边也停了会儿，然后她的声音传了过来：&lt;/p&gt;

&lt;p&gt;“那是最后一集吧。”&lt;/p&gt;

&lt;p&gt;也许是因为天气太热的缘故，每天晚上我都不大喜欢早上chuang，所以总有机会守在电话的旁边。&lt;/p&gt;

&lt;p&gt;也许是因为像她说的那样，她的床头就有一架电话，而她也不喜欢一躺下，就想起了那个男人。&lt;/p&gt;

&lt;p&gt;也许是因为她知道我也看蓝色生死恋，便以为我也和她一样，是个伤心人。&lt;/p&gt;

&lt;p&gt;也许她以为很多事情都不大方便向她的朋友说。&lt;/p&gt;

&lt;p&gt;也许她以为向陌生人倾述一番，倒是不错的选择。而我就是那个陌生人吧。&lt;/p&gt;

&lt;p&gt;也许其实只是因为我们都很无聊。&lt;/p&gt;

&lt;p&gt;所以，时不时的，我会在凌晨一两点钟，接到她的电话，没来由地东拉西扯一番。&lt;/p&gt;

&lt;p&gt;我们聊一切可以聊的事情，这也就意味着聊一切事情。&lt;/p&gt;

&lt;p&gt;我们经常在电话的两头交流一下看暴力电影的心得，看武侠小说的体会。不能免俗的，也会提到自己的过往。&lt;/p&gt;

&lt;p&gt;不过，一般是她说她的过往，她与她的男人的过往。&lt;/p&gt;

&lt;p&gt;虽说那人只是她的一个好朋友，一个兄长式的人物，但她在给我打电话时，坚持称呼为她的男人。&lt;/p&gt;

&lt;p&gt;我想，这大概是在寻求一种生活中不能实现的东西，估计她有些心理上的问题。&lt;/p&gt;

&lt;p&gt;听了很多遍她的故事，总觉得很无聊。不过是女人爱上男人，男人不爱女人，男人爱上女人，女人不爱男人，或是某人爱某人，但某人甲不敢让某人乙知道，或是为了某人乙已有某人丙，于是某人甲便决定瞒某人乙一生，让某人乙很无辜地成为某人甲在背后念叼上数万遍，以至头疼而亡的人。或是这些事情同时发生在三个人乃至四个人身上，总之就是在男人和女人之间加上爱或不爱这两种程式，自由组合就是。&lt;/p&gt;

&lt;p&gt;我告诉她，全世界有六十亿人，那么至少就曾经有过三十亿个这种故事。&lt;/p&gt;

&lt;p&gt;或许还是算少了。&lt;/p&gt;

&lt;p&gt;不过好在我们确实还有许多可以聊的东西。&lt;/p&gt;

&lt;p&gt;她是我所知道的第一个“非常”喜欢当莎丽遇见哈利这部电影的女人。&lt;/p&gt;

&lt;p&gt;其它女人，总是有各种各样的理由来讨厌这部电影。我一向认为是她们嫉妒这种大巧无工的爱情。&lt;/p&gt;

&lt;p&gt;据她说，我也是她所知道的第一个喜欢这部电影的男人。&lt;/p&gt;

&lt;p&gt;她说，其它男人总认为这只是小资情调泛滥之下的产物。&lt;/p&gt;

&lt;p&gt;她也是我所认识的第一个能用很平淡口吻和我谈灯草和尚写的太差的女人。&lt;/p&gt;

&lt;p&gt;其实我在电话的这头早已听的面红耳赤了，后来我告诉她，实际上从来没有异性和我谈过这方面的话题。&lt;/p&gt;

&lt;p&gt;她说我是第一个听她说了若干遍单恋之路故事，而没挂电话的男人。&lt;/p&gt;

&lt;p&gt;其实我在心里早已斥骂她比祥林嫂还烦，只是我很懒，也不觉得有必要打断她那可怜兮兮的叙述。至少这会让我觉得，我不是太惨，尤其是想到她长的还挺不赖的。&lt;/p&gt;

&lt;p&gt;她后来说，实际上她也从来没对别人讲过自己的故事。&lt;/p&gt;

&lt;p&gt;于是我和她都成了彼此的第一人。&lt;/p&gt;

&lt;p&gt;于是在电话里，她会这样告诉我：&lt;/p&gt;

&lt;p&gt;“我的男人回来了。”&lt;/p&gt;

&lt;p&gt;过了几分钟。她补充道：&lt;/p&gt;

&lt;p&gt;“他带着女朋友回来了。”&lt;/p&gt;

&lt;p&gt;又过了几天，她打电话告诉我：&lt;/p&gt;

&lt;p&gt;“我的男人走了。”&lt;/p&gt;

&lt;p&gt;过了几分钟。&lt;/p&gt;

&lt;p&gt;“他居然真的带着他的女朋友走了。“&lt;/p&gt;

&lt;p&gt;她男人的女朋友是她的好朋友。&lt;/p&gt;

&lt;p&gt;我总以为她会很伤心，而且也有道理伤心。但她通常只是在电话的那头很好听的笑几声，然后开玩笑如常。&lt;/p&gt;

&lt;p&gt;只是声音会像专供学校的学生奶一样，变的淡淡的。&lt;/p&gt;

&lt;p&gt;在电话里，我也会告诉她很多事，比如我的外甥女幼儿园放学回来了，她带着她奶奶在街上买的酸奶回来了。然后是外甥女又走了，她去上幼儿园了，她又带了瓶她妈妈拿回来的酸奶走了。诸如此类。&lt;/p&gt;

&lt;p&gt;于是她说我没良心。&lt;/p&gt;

&lt;p&gt;我说自己的良心让她给吃了。&lt;/p&gt;

&lt;p&gt;后来她开始喜欢在电话里和我对对子，虽说她的中国话比我还糟糕。&lt;/p&gt;

&lt;p&gt;她起头总爱说：“我是倾国倾城貌。”一边笑着，一边告诉我，她正在顾影自怜。&lt;/p&gt;

&lt;p&gt;于是我回她：“那我就是多愁多病身。”这是实话，我妈经常骂我在家里玩都快玩出病来了。&lt;/p&gt;

&lt;p&gt;她说：“妾住长干里。”&lt;/p&gt;

&lt;p&gt;我回：“将出玉门外。”&lt;/p&gt;

&lt;p&gt;她说：“郎骑竹马来。”&lt;/p&gt;

&lt;p&gt;我回：“吏捉刀笔裁。”&lt;/p&gt;

&lt;p&gt;她说：“绕床弄青梅。”&lt;/p&gt;

&lt;p&gt;我回：“逾墙折金兰。”&lt;/p&gt;

&lt;p&gt;她说：“两小无嫌猜。”&lt;/p&gt;

&lt;p&gt;我回：“独夫有人爱。”&lt;/p&gt;

&lt;p&gt;她急气败坏，说：“我是兰心蕙质。”&lt;/p&gt;

&lt;p&gt;我在电话这边摇摇头，说：“你是作茧自缚。”&lt;/p&gt;

&lt;p&gt;她沉默了会儿，恨恨地道：“你很没情趣。”&lt;/p&gt;

&lt;p&gt;我以为她生气了，不料，过了会儿，她淡淡的声音又从话筒里传来：&lt;/p&gt;

&lt;p&gt;“前些天又看见他，想起以前暗恋他的日子，真是觉得像我一个同学写的一句诗，梦还身前疑入梦。”&lt;/p&gt;

&lt;p&gt;我在心里说，你应该把暗恋前的以前二字去掉，然后扮出同情的语调说：&lt;/p&gt;

&lt;p&gt;“对呀！这很像我一个同学写的，几人憔悴几人归呀？”&lt;/p&gt;

&lt;p&gt;电话安静了会儿，然后她纠正道：&lt;/p&gt;

&lt;p&gt;“这一句对得全不工整。”&lt;/p&gt;

&lt;p&gt;在电话里，她一直称呼我为师兄，因为她总认为，我失恋的经验比她丰富多许多。&lt;/p&gt;

&lt;p&gt;但我一直很纳闷，我从来没对她说过自己的那些伤心事，她是怎么得出这个结论的。&lt;/p&gt;

&lt;p&gt;在电话里，开始时我还是称呼她为花姑娘，后来由于小泉桑又去跪那座庙，于是便简称她为花。&lt;/p&gt;

&lt;p&gt;挺恶心的一个名字，她为此对我大为脾气。&lt;/p&gt;

&lt;p&gt;不过，虽然她的模样我都记不真切了，但我一直有个印象：&lt;/p&gt;

&lt;p&gt;她的笑颜，依稀如花。&lt;/p&gt;

&lt;p&gt;她总喜欢问我喜欢过什么样的生活。我用尽所有煽情的话语还是不能满足她的胃口，只好发恨似地说了声：&lt;/p&gt;

&lt;p&gt;“最好是一回家就是饭在桌上，你在床上。”&lt;/p&gt;

&lt;p&gt;我是个好人，从不跟异性开这种有些不雅的玩笑的。&lt;/p&gt;

&lt;p&gt;她也是个很乖的女子，可以和我探讨黄色小说的写法，内容，却绝不容许我的言语中有一星半点那种思想在里面。&lt;/p&gt;

&lt;p&gt;所以她有两天没给我打电话。&lt;/p&gt;

&lt;p&gt;两天之后，她来了个急电问我，说她的男人又要回来了，而她这些天又长胖了半公斤，该怎么办？&lt;/p&gt;

&lt;p&gt;虽然我每天饭后和上厕所后的体重之差就要多过数个半公斤，但我还是认真地告诉她，应该去中药店买些大黄，泡水喝，可以迅速减肥，又可去体内虚火，保证不生青春小包。并且还言之凿凿地告诉她，当年我暗恋的一个女同学要回来了，我一急之下就是这样在五天之内瘦了八斤。&lt;/p&gt;

&lt;p&gt;但我忘了告诉她，后来我坐在那个女孩家里，不住地捧起笑脸，往厕所里狂奔。&lt;/p&gt;

&lt;p&gt;她听后似乎颇信以为真。只不知她真喝了没有。&lt;/p&gt;

&lt;p&gt;这件事一直到现在我都不敢问她。&lt;/p&gt;

&lt;p&gt;必须承认，我们聊天聊的很开心，虽然我活了二十几年，唯一的开心事就是聊天。&lt;/p&gt;

&lt;p&gt;我在电话的这头看黑衣人，告诉她威尔史密斯长的很帅，绝对比她的男人要帅。&lt;/p&gt;

&lt;p&gt;她躺在床上看那部什么初恋感觉百分百，告诉我梁咏琪真的很内骚，绝对适合我。&lt;/p&gt;

&lt;p&gt;她的偶像就是那个小威，一个黑头青。&lt;/p&gt;

&lt;p&gt;我当时挺喜欢梁咏琪，虽说后来看了绝世好BRA之后，很是同意二姐说的，此人无胸无脑的评语。&lt;/p&gt;

&lt;p&gt;有一次我告诉她，我有个朋友，也曾经在很长一段日子里，每天深夜和一个女孩聊天，经常一聊就是通宵。&lt;/p&gt;

&lt;p&gt;她问我：“后来呢？”&lt;/p&gt;

&lt;p&gt;“三个月之后，他们结婚了。”&lt;/p&gt;

&lt;p&gt;她咕咕地笑着，显然在话筒旁边捂着嘴，似乎是不相信。&lt;/p&gt;

&lt;p&gt;“结果呢？”&lt;/p&gt;

&lt;p&gt;“两个月之后，他们离婚了。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“我那个朋友是个浑俅。”接着我加了一句：“我不是。”&lt;/p&gt;

&lt;p&gt;我们一直以为自己会像两个经常聊天的陌生人一样，只是聊天。&lt;/p&gt;

&lt;p&gt;但我们忘了，陌生人是不会经常聊天的。&lt;/p&gt;

&lt;p&gt;于是有一天她说，出来见个面吧。&lt;/p&gt;

&lt;p&gt;我坚决反对，誓死反对。&lt;/p&gt;

&lt;p&gt;她在电话那头，闻言轻笑。风动银铃之声不绝于耳。&lt;/p&gt;

&lt;p&gt;她说又不是搞网恋，大家相貌的状况又是一清二楚，绝无见光死的危险，何必如此固执。&lt;/p&gt;

&lt;p&gt;我说最近更穷了，连吃冰淇淋的钱都骗不到了。&lt;/p&gt;

&lt;p&gt;于是她说要请我吃饭。&lt;/p&gt;

&lt;p&gt;地球人都知道，若有人请客吃饭，我向来会保有一贯的激赏之情。&lt;/p&gt;

&lt;p&gt;我们约在桃花岭宾馆对门，那一片郁郁葱葱的林子里见面。&lt;/p&gt;

&lt;p&gt;说郁郁葱葱大概不准确，因为那片林子的树木种的有些稀疏，非常不适合情侣幽会。&lt;/p&gt;

&lt;p&gt;我在林子里呆至头顶结网时，一个美女走近了我，&lt;/p&gt;

&lt;p&gt;当时我们相隔半米之遥，我用了半柱香的时间，才认出她来。&lt;/p&gt;

&lt;p&gt;我说：“你来晚了。”&lt;/p&gt;

&lt;p&gt;她看了看表，笑道：“我还来早了一刻钟。”&lt;/p&gt;

&lt;p&gt;我也笑了笑。&lt;/p&gt;

&lt;p&gt;我身上向来无表，因为无用。而且由于时间多的快发霉了，所以约会一向早到，尤其是赴宴会之约。&lt;/p&gt;

&lt;p&gt;我细细地打量着她。&lt;/p&gt;

&lt;p&gt;一头过肩的直发随意地挽在脑后，发上扎着一条手绢？丝巾？我不知道。身上穿着一件粉红色的紧身无袖短衣，鼓囊囊的胸前（托尔斯泰语）绘着一株极引人注目的花草。衣摆之下是一件像是白牛仔布做的热裤，此裤极短，险险裹住我们通常用来坐的部位。脚上蹬着一双我所以为的拖鞋，只是拖鞋前面还做了一个小布洞，似乎是专门为她尊贵的大脚趾服务。&lt;/p&gt;

&lt;p&gt;我盯着她清凉无汗面上微微拂起的刘海儿，还有那身上无所不在的充满惑意的曲线，捏住鼻子责问道：&lt;/p&gt;

&lt;p&gt;“请我吃饭，用得着下这么大本钱吗？想让我献血啊？”&lt;/p&gt;

&lt;p&gt;她愣了愣，笑道：“主要是为了配合师兄你的短小打扮嘛。”&lt;/p&gt;

&lt;p&gt;我愕然，看了看自己的装束，昨天刚剪短的刺发之下，是一件洗成遗物一般的格子短袖，穿的“休闲”式短裤，也因为身躯的日渐发胖而显得紧绷绷的，脚上蹬着一双上高中时候的凉鞋剪成的拖鞋，我一向很看中此鞋的舒适程度，但给人的感观却是大不佳。&lt;/p&gt;

&lt;p&gt;我俩的配合，似乎并不默契。&lt;/p&gt;

&lt;p&gt;我提议去得胜街吃铞仔，她闻言雀跃，说闻名已久，只是未去过。&lt;/p&gt;

&lt;p&gt;我看了她半天，始相信，这是一个与社会脱离已久的人。或者说，是和下层人民没有搞好干群关系的人。&lt;/p&gt;

&lt;p&gt;我叹了口气，带着她从培心路，肖家巷一路穿了过去。&lt;/p&gt;

&lt;p&gt;路上顺便买了一份体坛周报，一串香蕉，两斤三两的生姜，那是家里明天要的。&lt;/p&gt;

&lt;p&gt;我心安理得的指挥她给小贩付账。&lt;/p&gt;

&lt;p&gt;到了得胜街，随意寻了处小饭馆，我做主，点了二十块钱的豆花肥肠，四块五一瓶的枝江大曲。&lt;/p&gt;

&lt;p&gt;我深深了解细水长流的道理。&lt;/p&gt;

&lt;p&gt;或许我们在电话里，真的可以做到百无禁忌。但如此真切的面对面，却总让人容易产生不真实的感觉。&lt;/p&gt;

&lt;p&gt;于是，我开始喝酒，她开始看着我喝酒。过了一会儿，她开始往我杯子里倒酒。再过了会儿，她就开始从我的杯子里往外倒酒。&lt;/p&gt;

&lt;p&gt;她撑着额，看着小酒馆外不时走过的醉汉，忽地向我问道：&lt;/p&gt;

&lt;p&gt;“听你说话，看你行事，总以为你是个不大懂得在乎的人。&lt;/p&gt;

&lt;p&gt;只是，真的可以什么都不在乎嘛？”&lt;/p&gt;

&lt;p&gt;我打了个酒嗝，端起一杯淡到没有茶味的茶，漱了漱口，应道：&lt;/p&gt;

&lt;p&gt;“男女之间的东西，我倒是一向不大在乎的。……嗯，只是前些天，躺在床上睡不着，瞎想心事时，才发现老爸他闭着眼睛，也会伸手到我这边来摸一摸，看看我是不是盖着。等再过了会儿，又发现老妈开始做老爸一样的事情……”我用手尖轻轻点点她冰凉的鼻尖，笑道：“我可能会在乎这些。”&lt;/p&gt;

&lt;p&gt;也许是因为喝了酒的缘故，我说的分外认真。&lt;/p&gt;

&lt;p&gt;她听的也很认真，然后说了句我一直记得的话：&lt;/p&gt;

&lt;p&gt;“你得道了。”&lt;/p&gt;

&lt;p&gt;接下来的事情有些记不清楚了，好象是我就送她到解放路的二路车站去坐的。还买了两瓶鲜橙多，一人一瓶提在手上摇着。&lt;/p&gt;

&lt;p&gt;直到今天，我也不懂，为什么一定要送她到公共汽车站去坐计程车。怪哉。&lt;/p&gt;

&lt;p&gt;待回到家后，我用了两个小时的时间才从酒意中醒来。&lt;/p&gt;

&lt;p&gt;我死死地盯着身旁的电话，发现它一动不动，不知怎的，觉得非常搞笑。&lt;/p&gt;

&lt;p&gt;于是我在半夜十二点的家中，放声大笑。&lt;/p&gt;

&lt;p&gt;本以为那夜的酩酊之态会把她吓倒。没料到她的电话还是照常地骚扰我，而且似乎来的更频繁些了。&lt;/p&gt;

&lt;p&gt;只是现在在电话里，她开始喜欢自以为是的剖析我，不断进行着昨日之我与今日之她的对照，进行着她所谓的理性批判，妄图谋求湖大和加大辩论赛的最后胜利，对了，我忘了说，她是湖大毕业的。&lt;/p&gt;

&lt;p&gt;我说我只是想有尽可能多的时间承欢于父母之膝下，她说我的潜意识里是想榨干父母的最后一滴血汗。&lt;/p&gt;

&lt;p&gt;我说我的生活态度乃是生而无为，这是很有深度，很有历史渊源的一种活法。&lt;/p&gt;

&lt;p&gt;她说庄子也曾做过油漆协会的会长，老陶同志也曾努力地种田，虽说收成看样子不大好。而只有我好象是什么都不做似的，懒的连说话的声音都显得软软的。&lt;/p&gt;

&lt;p&gt;于是她判定我不是生而无为，而是生而无能。&lt;/p&gt;

&lt;p&gt;我原谅她的无知，须知无能这种评语是不可轻易予人的，尤其是男人。&lt;/p&gt;

&lt;p&gt;我经常被她的长篇大论搞的哭笑不得。于是我常恨恨地问自己，是什么时候变得和她这样熟了，熟的以至于都可以像李艳一样肆无忌惮地攻击我。&lt;/p&gt;

&lt;p&gt;更令我伤神的是，她已不再满足在电话里教育我，经常把我喊出去切磋一番。&lt;/p&gt;

&lt;p&gt;只是她总喜欢带着我去一些我不大愿意去的地方，一些据她说有她和她男人之间甜蜜回忆的地方。&lt;/p&gt;

&lt;p&gt;诸如，在北山坡的阿诗玛餐厅，他们吃了第一顿二人晚餐。&lt;/p&gt;

&lt;p&gt;（其实只是上初中的时候，办黑板报搞晚了，所以在那里吃了两碗面条。）&lt;/p&gt;

&lt;p&gt;又比如，在南榭的水塘边，他们第一次单独约会。&lt;/p&gt;

&lt;p&gt;（其实只是学校办活动，他们两个负责清场。）&lt;/p&gt;

&lt;p&gt;再比如，她的男人在交电大厦对门的马路上教她学的自行车。&lt;/p&gt;

&lt;p&gt;（这其实……对，这是真的。）&lt;/p&gt;

&lt;p&gt;不过好在每逢到了这种地方，她都是眉目含笑，巧笑倩兮。从不给我帮她擦眼泪的机会。&lt;/p&gt;

&lt;p&gt;这叫坚强，还是死撑？&lt;/p&gt;

&lt;p&gt;幸亏她还会主动地邀我吃饭，不然我不知道能忍受她多久，哪怕她长的挺漂亮。&lt;/p&gt;

&lt;p&gt;由于饭钱是她出的，所以地方都由我定。&lt;/p&gt;

&lt;p&gt;于是在yc市的街上常常可以看见一个憨拙拙的男人拖着一个傻兮兮的美女四处奔走于各大面馆之间。&lt;/p&gt;

&lt;p&gt;中午，我们吃文子面馆的炸酱面，她只吃豌豆面，不放辣椒。&lt;/p&gt;

&lt;p&gt;晚上，我们通常是带着在解放电影院门口买的卤豆干，臭豆干，炸豆干，直奔北门，享受那碗香喷喷的红油小面。&lt;/p&gt;

&lt;p&gt;逛街的时候，若饿了，就在街边摊上吃碗凉面。若是走在中山路附近，就只吃热干面，并且一定要到新开的那家。因为据她说，这是从原来的老热干面馆里下岗的几个女工办的，所以要多多支持。&lt;/p&gt;

&lt;p&gt;我不管这些，只是想到这家新开的六角钱一两，比老馆子要便宜一角钱。&lt;/p&gt;

&lt;p&gt;能吃饭，而不用付钱，乃是人生最大享受。&lt;/p&gt;

&lt;p&gt;只是有一天，在夷陵广场那惨兮兮的坟场灯光映照之下，她突然问道：&lt;/p&gt;

&lt;p&gt;“你什么时候去挣点儿钱，也请我吃碗面条？”&lt;/p&gt;

&lt;p&gt;我把叼着烟的脑袋猛地摇了摇，以示从无此意，接着便被眼前晃动的小红点吸引了自己的注意力。&lt;/p&gt;

&lt;p&gt;她轻轻地抠抠耳垂，疑惑道：&lt;/p&gt;

&lt;p&gt;“不对吧？虽然我没谈过恋爱，但也没听说过像你这么追求女孩的。”&lt;/p&gt;

&lt;p&gt;“追求？”我猛咳数声，烟头也掉在了地上。我赶紧拾了起来，以免给城监的罚款。&lt;/p&gt;

&lt;p&gt;“放心，哪怕我命犯天煞孤星，唯君能解此命数，我也不会有此想法。”&lt;/p&gt;

&lt;p&gt;我赶紧撇清。&lt;/p&gt;

&lt;p&gt;“为什么？难道我长的不漂亮吗？”&lt;/p&gt;

&lt;p&gt;她说着一笑，然后轻盈地转了个圈，任发丝飞扬。&lt;/p&gt;

&lt;p&gt;可问题在于，那天她穿了件及膝的白裙，一转之下，不止秀发飞泻，也会裙摆摇摇。&lt;/p&gt;

&lt;p&gt;我睁大了眼睛走上前去，帮她把裙摆按住，以防春guang外泄旁人之眼。&lt;/p&gt;

&lt;p&gt;“正是因为你长的足够漂亮，所以这才不可能。”&lt;/p&gt;

&lt;p&gt;她起先疑惑，继而释然，望着我坏坏的笑道：&lt;/p&gt;

&lt;p&gt;“师兄也会自卑的呀。”&lt;/p&gt;

&lt;p&gt;我撇撇嘴，以示不屑此言，我左脚向前半步，右脚转向半分，头略微后仰，把髋部提前，傲然道：“想当年，班上一娇俏女子赠我雅号：笑揖清风洗我狂。”&lt;/p&gt;

&lt;p&gt;她看着我的样子，先是一阵傻笑，然后细细想了会儿，忽然大悟道：“笑揖清风洗我狂？我想起来了，那是武状元苏乞儿里的一句歌词，噢，原来是送给天下第一大帮帮主的，”&lt;/p&gt;

&lt;p&gt;她坏坏地笑着，坏坏的看着我。&lt;/p&gt;

&lt;p&gt;我心底一阵发毛，谁知道这么帅呆了，酷毙了的一句话，居然是形容叫花子的。&lt;/p&gt;

&lt;p&gt;所以我决定马上到5460上面留言，好生责问一番晶晶姑娘。&lt;/p&gt;

&lt;p&gt;她拿我这脾气没法，只好叹着气，坐到了我的身旁。侧着脸望着我，笑道：&lt;/p&gt;

&lt;p&gt;“我们和恋爱中的男女有分别吗？”&lt;/p&gt;

&lt;p&gt;虽说这些天，我们几乎天天在一起，逛街的时候，手也会很自然的牵在一起，但我还是气壮山河地告诉她：&lt;/p&gt;

&lt;p&gt;“分别很大。比如你要是死了，我会很伤心，但绝不会想到陪你去死。你若是忽然消失了，我也会很伤心，但绝不会想去找到你。你若是忽然扑上来亲我一口，我只会以为是蚊子叮了一下，绝不会……”&lt;/p&gt;

&lt;p&gt;忽然瞧见她一副跃跃欲试的神情，我连忙说道：&lt;/p&gt;

&lt;p&gt;“再比如我不知道你的电话号码，甚至我们俩连彼此的名字都不知道。”&lt;/p&gt;

&lt;p&gt;的确，我们连彼此的名字都还不知道。&lt;/p&gt;

&lt;p&gt;但此刻看着她在夜空下白衣如雪，秀发伏肩，不知怎地忽然有了想知道她姓名的念头。&lt;/p&gt;

&lt;p&gt;“那师兄你叫什么名字？”&lt;/p&gt;

&lt;p&gt;“xf。”&lt;/p&gt;

&lt;p&gt;“？？？”&lt;/p&gt;

&lt;p&gt;“拂晓的晓，晓溪塔的晓。山峰的峰。”&lt;/p&gt;

&lt;p&gt;“挺不错的名字。”&lt;/p&gt;

&lt;p&gt;很好，她不像别的女人一样，总是追问我姓什么。&lt;/p&gt;

&lt;p&gt;“xf意指清晨的山峰，与日同生，与霞共辉的意思。”&lt;/p&gt;

&lt;p&gt;她摇摇头说：“不对。xf，说的是女人的眉毛。”&lt;/p&gt;

&lt;p&gt;接着她背了一句古诗。&lt;/p&gt;

&lt;p&gt;虽说这句诗我没听过，但仍是面上一窘。&lt;/p&gt;

&lt;p&gt;“你呢？”&lt;/p&gt;

&lt;p&gt;她似笑非笑地望了我一眼，轻声道：&lt;/p&gt;

&lt;p&gt;“叶轻眉，看轻天下须眉。”&lt;/p&gt;

&lt;p&gt;她俏皮地抹了一下自己的眉毛，&lt;/p&gt;

&lt;p&gt;偷偷看着无辜的我。&lt;/p&gt;

&lt;p&gt;那天晚上，回到家中，她打来电话。&lt;/p&gt;

&lt;p&gt;我问她，知道了彼此的名字意味着会发生什么事情？&lt;/p&gt;

&lt;p&gt;她似乎觉得我问的有些多此一举：&lt;/p&gt;

&lt;p&gt;“那我们自然就是朋友了。”&lt;/p&gt;

&lt;p&gt;“朋友？”我心里狂松一口气，连忙在电话这头哈腰称是。&lt;/p&gt;

&lt;p&gt;于是我们就是朋友了，很好很好的那一种。&lt;/p&gt;

&lt;p&gt;必须承认，叶轻眉同志是一个好同志。&lt;/p&gt;

&lt;p&gt;至少对我而言，她可以为我提供无来由的饮食供给，可以让我稍微摆脱一下无所事事的生活状态，可以锻炼我那两寸半长的许久未练过的将烂的滑舌，可以让我回忆起牵女孩子小手是一个什么感觉，可以让我重温好为人师的怪癖，可以让我幻想自己是在谈一场从天上掉下来的恋爱。&lt;/p&gt;

&lt;p&gt;不过我很清醒地知道，天上从来没掉下过林妹妹，若有，也是掉到了宝玉的怡红院子里。&lt;/p&gt;

&lt;p&gt;在我的记忆中，唯一从天上掉到我床上的，只有蟑螂而已。&lt;/p&gt;

&lt;p&gt;这是件真事，自那天起，我便和家中的蟑螂势不两立。所以现在它们在我家里的处境非常凄凉，欲死不能，生而不爽。&lt;/p&gt;

&lt;p&gt;不过至少，我现在可以几乎天天看见一张纯净的脸，这让我很容易地就陷入某种自己很喜欢的幻想中。最关键的是，这张脸上，总是带着笑意，无穷无尽的笑意。&lt;/p&gt;

&lt;p&gt;总之，还是那句老话：我喜欢。&lt;/p&gt;

&lt;p&gt;曾经有个中年人，在他三十六岁生日的酒桌上告诉我：&lt;/p&gt;

&lt;p&gt;“xf啊，要好好过日子，人一过二十之后，这日子就跟飞一样的就跑了。当我还没明白是怎么回事，就发现自己已经是孩子他爹了。”&lt;/p&gt;

&lt;p&gt;那年我十八。&lt;/p&gt;

&lt;p&gt;虽说我一直牢记前辈的惨痛教训，但仍然没能阻止日子自己飞走。&lt;/p&gt;

&lt;p&gt;我记得好象前不久香港才回归，怎么一晃又要跨世纪了。&lt;/p&gt;

&lt;p&gt;我很担心自己搞不好哪天一觉醒来，发现自己也是孩子他爹了。&lt;/p&gt;

&lt;p&gt;我曾经总结过，之所以二十岁后的日子会过的快，是因为这一段时间人会过的很疲沓。谈恋爱的没了激情，搞事业的，还来不及培养野心，读书的往往在想鸡阿姨，每天的日子似乎都是这样在过。书还是那几本书，公司还是那个公司，路也还是那条路哟，女朋友都还是那个女朋友，没法换。&lt;/p&gt;

&lt;p&gt;机械的重复，永远是谋杀时间的良策，比如钟表。&lt;/p&gt;

&lt;p&gt;好在东方红，太阳升，中国出了个叶轻眉。&lt;/p&gt;

&lt;p&gt;她绝不会让你觉得和她在一起的时间很无聊，她只会让你觉得非常无聊，无聊地可以让时间停摆。&lt;/p&gt;

&lt;p&gt;第二天，天下雨，她拉着我满大街的飞奔，对街道两旁畏畏缩缩躲在屋檐下的人们投以同情的一笑。然后，不顾那些人们对被她拖着的我的同情，从四新路一直跑到滨江公园那两个烂亭子。&lt;/p&gt;

&lt;p&gt;然后她看了我一会儿，很生气地对我说：&lt;/p&gt;

&lt;p&gt;“你怎么还不脱衣服啊。”&lt;/p&gt;

&lt;p&gt;我大惊之下，早失色心。&lt;/p&gt;

&lt;p&gt;“喂，我很冷耶。”&lt;/p&gt;

&lt;p&gt;她很不耐烦地说，一点都不懂撒娇是什么意思。&lt;/p&gt;

&lt;p&gt;我在心里暗骂一句自找，然后解释道：“你没看见我的衣服全湿了。”&lt;/p&gt;

&lt;p&gt;她摇头以示不在乎。&lt;/p&gt;

&lt;p&gt;于是我叹、叹、叹，叹这女人弱智，脱下像防洪大堤上的编织袋一样的短袖，拧了拧，递给她套上。&lt;/p&gt;

&lt;p&gt;于是亭子里就出现了一个吊带裙外套着件**的短袖，而且似乎还颇为享受的美女，还有一个浑身哆嗦，胸有赘肉的男人。&lt;/p&gt;

&lt;p&gt;这等场景绝对是千古难见的。&lt;/p&gt;

&lt;p&gt;于是我张开猫头鹰的眼睛，透过水朦朦的眼镜，尴尬地回应着四周投来的好奇目光。&lt;/p&gt;

&lt;p&gt;这时候她打了个喷嚏，声音小小的，好可怜。&lt;/p&gt;

&lt;p&gt;于是我明智地打了数个喷嚏，声音颇为张狂，好可怕的那种。&lt;/p&gt;

&lt;p&gt;她望了我一眼，才回过神来。&lt;/p&gt;

&lt;p&gt;我可怜兮兮地通知她：&lt;/p&gt;

&lt;p&gt;“好象感冒了。”&lt;/p&gt;

&lt;p&gt;于是，她的同情心开始泛滥，不再坚持站在亭子里看雨景，喊了辆出租，把我送回了家。&lt;/p&gt;

&lt;p&gt;待我坐到了家中，不禁为刚才的高竿击节叫好，心想若不是使出此等计谋，只怕此时还在那个鬼地方示众。&lt;/p&gt;

&lt;p&gt;正当我兴高彩烈，准备晚上她打电话来的时候好好气气她时，一股酥麻无比的感觉，从两眼之间开始积发，在我还没反应过来时，一阵十二级台风，就从我的鼻孔里刮了出来。而且似乎还不解气，居然是一连刮了数次。&lt;/p&gt;

&lt;p&gt;在喷嚏连连中，我才认识到，自己真的是感冒了。&lt;/p&gt;

&lt;p&gt;我发誓，以后再也不糊弄她了。&lt;/p&gt;

&lt;p&gt;得知我生病的消息，她非常过意不去，在电话里对我温言安慰，让我很是得意。&lt;/p&gt;

&lt;p&gt;我从小便喜欢生病，一半是装的，一小半是真的，另一小半连我自己都搞不清楚是真的，还是装久了以后，搞糊涂了。&lt;/p&gt;

&lt;p&gt;所以我很清楚生病所带来的好处，以前可以不上学，现在是可以不洗碗，父母不会吼你，姐姐们不敢凶你。只是没想到现在又多了一个好处。&lt;/p&gt;

&lt;p&gt;可以听到叶轻眉很好听的声音，很小心地问你明天想吃什么。&lt;/p&gt;

&lt;p&gt;我告诉她：“鸭头和啤酒。”&lt;/p&gt;

&lt;p&gt;她在电话那头傻傻一笑，解释道：“丫头我不喝酒的。”&lt;/p&gt;

&lt;p&gt;我的命不好，生在十一月，所以读书的时候，在称呼上有些吃亏，高中班上虽然还有捷捷几个帅哥比我小，但女人却都比我们大，噢，好象还有小温也比较小。&lt;/p&gt;

&lt;p&gt;不过不管怎么说吧，总是很难把妹妹这个词喊出口，后来在大学里给李艳写信的时候，居然有时会错手写上个姐字。让人很是痛心。&lt;/p&gt;

&lt;p&gt;于是我很喜欢叫她们丫头，一方面表达一种首长关怀小鬼的亲切，一方面，也是想树立自己憨厚长者的形象。可喊了很多年后，发现一点儿用都没有。&lt;/p&gt;

&lt;p&gt;于是当她说可以喊她丫头的时候，我坚决反对。&lt;/p&gt;

&lt;p&gt;我说还是喊你花吧。&lt;/p&gt;

&lt;p&gt;她又抵死不从。&lt;/p&gt;

&lt;p&gt;可她的名字真的挺别扭，喊眉儿吧，太媚。喊小轻轻？又怕她会错意。喊轻眉？路人可能会上来问青梅多少钱一斤。喊小叶？同志般的关怀倒是体现出来了，我又怕她喊我一休哥。至于阿叶这个称呼更是不能用的，那一般是我见到圣婴出世，或世界末日时才会发出的惊呼。&lt;/p&gt;

&lt;p&gt;于是我决定叫她最常见，也是最通用的称呼。&lt;/p&gt;

&lt;p&gt;“喂！”&lt;/p&gt;

&lt;p&gt;她又反对，我只好说她的名字太古怪了。&lt;/p&gt;

&lt;p&gt;她在电话那头想想，也承认，并说这是她老爸取的，于是就让我喊她小眉好了。&lt;/p&gt;

&lt;p&gt;我想这肯定她老爸当年恢复高考时，想考中文系，而因为她的诞生而告吹的时候，一怒之下取了这么个名字。&lt;/p&gt;

&lt;p&gt;我总在想，是一个什么样的人能取出如此酸腐的姓名来。&lt;/p&gt;

&lt;p&gt;一个阳光明媚的下午，我们逛书店时，我把这个分析报告提交给她，她拿着本红袖招，听得吃吃直笑。然后正色告诉我，不能拿她父母开玩笑。说完后，又开始笑。&lt;/p&gt;

&lt;p&gt;于是我们很开心地拖着手在解放路上毫无意义的来回逛着。&lt;/p&gt;

&lt;p&gt;走到海鸥商店的时候，她喊我站住，然后把我头发上的一个纸片摘了下来。&lt;/p&gt;

&lt;p&gt;正当我备感温柔之际，她却猛地把我手甩开了。&lt;/p&gt;

&lt;p&gt;那一下用的劲儿可真大，直到今天回想起来，我的肩膀还隐隐作疼。（莫不是打字打的太多的原因？）&lt;/p&gt;

&lt;p&gt;我愕然地看着她一脸痴呆的表情。&lt;/p&gt;

&lt;p&gt;她一脸愕然地看着我的身后。&lt;/p&gt;

&lt;p&gt;于是我转头，看见一个长相温厚的中年男子，正充满疑问地看着我俩，于是我又愕然。&lt;/p&gt;

&lt;p&gt;然后看见她低首敛眉地轻轻唤道：“老爸！”&lt;/p&gt;

&lt;p&gt;老爸！于是我在愕然之后，也变得有些痴呆。&lt;/p&gt;

&lt;p&gt;我痴呆地看着那个男人，五秒钟后，很弱智地喊了声：“伯父，你好。”&lt;/p&gt;

&lt;p&gt;伯父？我以为我是谁？李嘉诚的儿子？喊的***这么酸。&lt;/p&gt;

&lt;p&gt;这位伯父很有深意！地看了我一眼，然后点点头，和小眉同志说了两句话，便像一个革命者一样，直挺着身板向前走去，头也不回。&lt;/p&gt;

&lt;p&gt;我估计他为了克制转过头来教训我一顿的冲动，一定用尽了全身的力量。&lt;/p&gt;

&lt;p&gt;待他走远后，我们二人同时瘫软在地。&lt;/p&gt;

&lt;p&gt;于是我们开始分析，她老爸会不会有什么错误的判断，&lt;/p&gt;

&lt;p&gt;最后得出的结论是：&lt;/p&gt;

&lt;p&gt;一定会有。&lt;/p&gt;

&lt;p&gt;小眉的理由是，她老爸看我的眼神像是在看一个傻女婿。&lt;/p&gt;

&lt;p&gt;我的理由恰好相反，我觉得她老爸的眼神，好象在审问一个诱拐她宝贝女儿的恶棍。&lt;/p&gt;

&lt;p&gt;不过虽然理由不大一样，但结论是一样的，她回家之后有麻烦了。&lt;/p&gt;

&lt;p&gt;然后她开始埋怨我，说我刚才的表现真的很像电影里那些男主角第一次见老丈人的模样。&lt;/p&gt;

&lt;p&gt;我连忙道歉，说那是因为紧张过度的原因。&lt;/p&gt;

&lt;p&gt;接着我提出藏在心里很久的疑问，能取出这样一个名字的人究竟是何方神圣。&lt;/p&gt;

&lt;p&gt;小眉指指街对面，告诉我，她老爸是市图书馆的。&lt;/p&gt;

&lt;p&gt;于是我释然。于是二人开始相视大笑。&lt;/p&gt;

&lt;p&gt;笑了会儿，我突然觉得有些不对劲，怎么也笑不出来了。&lt;/p&gt;

&lt;p&gt;不知为什么，我突然觉得这个场景好熟悉。好象很多年前就有过一次似的。&lt;/p&gt;

&lt;p&gt;于是我在漫天阳光的笼罩中开始回忆往事，越想越失神。&lt;/p&gt;

&lt;p&gt;失神之后，我问她：“请我唱卡拉圈可？”&lt;/p&gt;

&lt;p&gt;她是个很细心的人，连忙笑道：“小女子不胜荣幸。”&lt;/p&gt;

&lt;p&gt;我很感激。&lt;/p&gt;

&lt;p&gt;那天在包房里，我拼命地找齐秦的一首歌，我忘了名字，但记得歌词。&lt;/p&gt;

&lt;p&gt;总算在唱完三张专辑后，那首歌的调子响了起来。&lt;/p&gt;

&lt;p&gt;我像拿着手榴弹一样拿着麦克，左手抚胸，深情款款，运气憋出那股瓷盘打碎般的瓷性嗓音，认真的唱着：&lt;/p&gt;

&lt;p&gt;你的近况，陆续从朋友口中传到我耳畔，我拿什么条件能够将你遗忘，除非我们……多想不去想，夜夜偏又想……&lt;/p&gt;

&lt;p&gt;一曲唱罢，我把自己感动的唏嘘不已。&lt;/p&gt;

&lt;p&gt;回头看她，仍是满脸带笑，脸上尽是鼓励的神色。&lt;/p&gt;

&lt;p&gt;只是她的手帕还放在桌上，有些湿了。&lt;/p&gt;

&lt;p&gt;据她后来说，那天晚上，她家里开了个家庭大会，着重研究了一下她的交友问题。当她老爸把下午看到的情况说出来后，大家的反应各不相同。她哥哥先是准备提拳头来寻我，待后来想清楚自己妹妹已经二十出头了，又准备提瓶酒来寻我。她的老奶奶则很是激动，要请我去她家吃饭。她妈则在傻笑。&lt;/p&gt;

&lt;p&gt;听她说完后，我放声大笑，然后很无辜地问道：“真的要去吗？”&lt;/p&gt;

&lt;p&gt;她瞪了我一眼，说我想的美。&lt;/p&gt;

&lt;p&gt;其实我以为这是很痛苦的事。&lt;/p&gt;

&lt;p&gt;她又说已经解释清楚了，我只是她的好朋友，不过为了让她家人放心，便给我这个混混儿安排了个工作，一个异常恶心的工作：网络作家。&lt;/p&gt;

&lt;p&gt;我虽然早就是坐家了，但为了替她圆谎，便写了首五十一个字的诗，放到了某家网站上，然后不停地点击再alt加F4。&lt;/p&gt;

&lt;p&gt;不到数天，便有些不长眼睛的人奋勇跟进，居然挤进了排行榜的前十名。&lt;/p&gt;

&lt;p&gt;她拍拍我的头说，小伙子挺聪明的。&lt;/p&gt;

&lt;p&gt;我靠。&lt;/p&gt;

&lt;p&gt;于是我佯狂，靠在她的肩上。&lt;/p&gt;

&lt;p&gt;在以后的那十来天里，我经常带她到一中江边的那道斜坡上去，就是以前上学时我经常和何伟抽烟的那个地儿。&lt;/p&gt;

&lt;p&gt;她撑着额头看着我抽烟的英姿，问：“你在想什么呢？”&lt;/p&gt;

&lt;p&gt;我深吸一口烟，呲牙裂嘴地把白气吐出来，回味半晌，并不答话。&lt;/p&gt;

&lt;p&gt;她越看越入神。&lt;/p&gt;

&lt;p&gt;我有些受不了，说：“我这是在冒充孤独，模仿绝望。”&lt;/p&gt;

&lt;p&gt;她眼睛一下亮了，兴奋道：“嘿，真没想到你这么个人也能说出这么好玩的话来。”&lt;/p&gt;

&lt;p&gt;我扁扁嘴以示不屑，但想了想后，又解释道：“这两句词我在发的每个帖子里都要用一遍的。”我把手一摊，笑道：“不过这是个盗版。那还是上初中的时候，在报纸上看到的。好象是一个铁路系统的文青写的。”&lt;/p&gt;

&lt;p&gt;“嘁！”她颇为失望，“什么都说的这么白，多没意思。”&lt;/p&gt;

&lt;p&gt;我抠抠头说：“跟你第一次见面就说过，我这人最大的好处就是诚恳了。”&lt;/p&gt;

&lt;p&gt;她纠正道：“是木讷。”&lt;/p&gt;

&lt;p&gt;我不服气她的说法，告诉她，我有时候一天会遇见五个问路的，而且其中三个还都没带车钱。这说明我的样貌，给人的第一感觉就是可信。&lt;/p&gt;

&lt;p&gt;她又纠正道：“那叫易骗。”&lt;/p&gt;

&lt;p&gt;我扭过头去，三分钟不找她说话。&lt;/p&gt;

&lt;p&gt;由于我们通电话太勤了些，自然家里也发现了一些异常。比如老姐总在埋怨现在很少吃到我炒的苦瓜了。&lt;/p&gt;

&lt;p&gt;于是我在家里开始被一群姑婆们追问。逼不得已，我以人格起誓，说绝对没谈恋爱。&lt;/p&gt;

&lt;p&gt;结果发现，我的人格似乎有些卑下不可信。于是我改用我父亲的人格起誓，这才逃离了她们的包围。&lt;/p&gt;

&lt;p&gt;有时想起来，会发现小眉同志的确是一个不错的玩伴，或者说朋友。&lt;/p&gt;

&lt;p&gt;她不蹦迪，不上网聊天，不看电影，喜欢看席娟，看言情烂碟，看武侠小说，的确和我搭配的挺好。&lt;/p&gt;

&lt;p&gt;而且我们两人还都是那种极少见的弱智。&lt;/p&gt;

&lt;p&gt;记得有一天，家里来了亲戚，而她又约我出门，为了掌控我的行踪，老爸让姐夫哥把手机丢给我。姐夫很无辜地看了我一眼，我回他一白眼。&lt;/p&gt;

&lt;p&gt;然后逛到青少年宫的时候电话响了，&lt;/p&gt;

&lt;p&gt;然后我们俩人用了半个小时，也没搞清楚这手机是怎么用的。&lt;/p&gt;

&lt;p&gt;于是，只好散伙回家。&lt;/p&gt;

&lt;p&gt;顺便说句题外话，直到公元一九九七年，我才知道怎样打寻呼机，手机？更是没碰过的玩意。&lt;/p&gt;

&lt;p&gt;她虽然在这方面的弱智和我惊人地相像，但人却比我善良多了。&lt;/p&gt;

&lt;p&gt;这一点从我现在都不敢带她从解放路的天桥上过，就可见一斑。&lt;/p&gt;

&lt;p&gt;yc人都知道，那天桥上盛产乞丐。&lt;/p&gt;

&lt;p&gt;我告诉她，与其接济乞丐，还不如接济我。&lt;/p&gt;

&lt;p&gt;她皱皱眉说，怎么能把自己和乞丐相提并论呢？我想了想后，正色答道：“的确不应该，我现在的收入比他们还少。”&lt;/p&gt;

&lt;p&gt;她看着我，想了半响，无奈地点点头，算是承认了这个事实。&lt;/p&gt;

&lt;p&gt;不过我们也经常吵架，争论的焦点一般集中在梅格瑞恩到底该不该和比利克里斯托上chuang。&lt;/p&gt;

&lt;p&gt;她说情到浓时，自然难免。&lt;/p&gt;

&lt;p&gt;我说这完全破坏了那份感觉。&lt;/p&gt;

&lt;p&gt;她说最终圆满的结局证明了，这个床，上的有价值。&lt;/p&gt;

&lt;p&gt;我说结局是编剧写好了的，我只记得梅格瑞恩在完事后，咧着张大嘴，用鼻子长出一口气，活像一个刚生吞了自己丈夫的母螳螂。&lt;/p&gt;

&lt;p&gt;于是她恨恨地说了声；男人啊……&lt;/p&gt;

&lt;p&gt;于是我们两个同时把电视打开，同步播放影碟，一边盯着屏幕，一边拿着电话开始争吵。&lt;/p&gt;

&lt;p&gt;不一会儿，就看到哈利开始在街边上思念他的前妻了。&lt;/p&gt;

&lt;p&gt;电视里传来比利克里斯托那土拨鼠一样的声音：&lt;/p&gt;

&lt;p&gt;“我不知道是想念海伦，还是想念想念海伦的念头。”&lt;/p&gt;

&lt;p&gt;莎丽正准备上前安慰他，只见哈利用哲学家的风度思考了半秒钟后，像个白痴一样，无头无脑地说：&lt;/p&gt;

&lt;p&gt;“IMISSHELEN！”&lt;/p&gt;

&lt;p&gt;然后，小眉在电话的那头没了声音。&lt;/p&gt;

&lt;p&gt;我知道她一直在她的男人面前扮演那个最不懂事的，最傻兮兮的好朋友角色，我也知道她经常演的力不从心，知道她演的很辛苦，知道她在生活里实在是笑的太多了，又倔强的不肯哭，我知道她就像荔枝一样，最外面是鲜美而坚硬的壳，剥开后是柔嫩易伤的瓤，瓤里面裹着的是那颗苦苦的核。&lt;/p&gt;

&lt;p&gt;由于我喜欢我的朋友们多笑，不哭，于是连忙开始讲解那个诃契尼还是叫契诃尼的理论。&lt;/p&gt;

&lt;p&gt;就是那个说人的记忆最搞笑，得不到的东西记忆最深刻的那套玩艺儿，这套理论最关键的地方，就是什么尼说，没可能的感情付出最容易让人沉醉，因为总让你觉得对方的身上有无尽的宝藏供你挖掘，有无尽的秘密任你独享。&lt;/p&gt;

&lt;p&gt;她被我拙劣的讲解搞的笑出声来，问我怎么知道那个什么尼。&lt;/p&gt;

&lt;p&gt;我想了想后，记了起来，告诉她是中午在中央台看的第二起跑线里提到的。&lt;/p&gt;

&lt;p&gt;她很疑惑。&lt;/p&gt;

&lt;p&gt;于是我进一步解释道：“青春期性教育专题节目。”&lt;/p&gt;

&lt;p&gt;我和小眉总是像恋人一样的单独出来约会。我们也从不让双方的朋友圈子交杂其间，只是进行一对一的交流，俗称单挑。&lt;/p&gt;

&lt;p&gt;唯一有些遗憾的是，我绝没有恋人一方的那种权利，就是那种路漫漫其修远兮，吾将上下而……的权利。面对美女而做柳下惠，实为人生至痛。&lt;/p&gt;

&lt;p&gt;偶尔有一天，她喊我陪她去赴一个酒宴，我说为什么，她说她的男人回来了。&lt;/p&gt;

&lt;p&gt;于是我说好，然后我洗了个澡，找了两件姐夫哥当年和老姐斗争时的战袍，蹬上前天姐夫哥刚买的新皮鞋，揣上姐夫哥的诺基亚，虽说还不大会用。还上了点姐夫哥的咖哩水，噢不好意思，写错了。&lt;/p&gt;

&lt;p&gt;总之，是打扮的人模狗样的去了。&lt;/p&gt;

&lt;p&gt;她在酒店的外面接我，见到我的一身行头，很诧异地皱皱眉头，问道：“今天怎么穿成这副德行？”&lt;/p&gt;

&lt;p&gt;我挑挑唇边，道：“要冒充你的男朋友，总得下点儿本钱吧。我不怕丢脸，但很怕朋友因为我而丢脸。”&lt;/p&gt;

&lt;p&gt;她伸手捂住自己嘴巴，笑道：“你怎么这么聪明，我还没说，你就知道了？”&lt;/p&gt;

&lt;p&gt;“我是天才。”&lt;/p&gt;

&lt;p&gt;我向来持天才无用论。&lt;/p&gt;

&lt;p&gt;结果那天的酒席上，我发现自己真的很无用，面对那些酒席上比我还人模狗样的人们，我实在不知该说些什么，这位说自己当年的室友在加拿大买了个PLAYSTATION，结果没玩两天就坏了。那位则把周星驰的几句话换了几个宾语在那里背来背去，还有两位更是搞笑，居然说不知道安琪集团为什么到现在还不配股，颇为不满，待听说我有个同学在安琪，居然要我喊出来聊聊，把证券的这块业务让给他们做。&lt;/p&gt;

&lt;p&gt;天可怜见，我那位同学自己手上的一点内部股还不准卖哩。&lt;/p&gt;

&lt;p&gt;我说天才无用的另一个佐证是，自己这个天才被那些人看鲜花下的狗屎眼光逼的举杯应战，居然战局刚开，便已丢盔卸甲了。&lt;/p&gt;

&lt;p&gt;于是醉眼朦胧的我，并没能看清楚小眉那个迟到了的男人。&lt;/p&gt;

&lt;p&gt;只隐约有个印象，虽然比我高，但还是不高。不过长的确实比我帅。&lt;/p&gt;

&lt;p&gt;此处套用一句俗话：&lt;/p&gt;

&lt;p&gt;长的比我帅不叫帅，长的比我丑，那才叫真丑。&lt;/p&gt;

&lt;p&gt;后来小眉送喝醉了的我回家，到我家楼下两人分手前，她笑着对我说：“今天演的真不赖！”&lt;/p&gt;

&lt;p&gt;我傻笑一番，伸出大拇指，说：“我是临时演员，而你是影坛常青树，演技比我好。”&lt;/p&gt;

&lt;p&gt;知道明星什么时候会演砸吗？&lt;/p&gt;

&lt;p&gt;就像姜文和万梓良拍的那部恶片，说明他在没有了自己喜欢的东西后会演砸。&lt;/p&gt;

&lt;p&gt;知道明星为什么会演砸吗？&lt;/p&gt;

&lt;p&gt;就像周润发拍的和平饭店，那说明他潜意识里想断绝自己在香港的后路。&lt;/p&gt;

&lt;p&gt;知道小眉为什么会演砸吗？&lt;/p&gt;

&lt;p&gt;道理很简单，她失去了自己最喜欢的东西，然后发现后路原来早就断了。&lt;/p&gt;

&lt;p&gt;我接到她的那个电话，是在晚上九点钟，海霞马上要开始播新闻了。&lt;/p&gt;

&lt;p&gt;她很可怜兮兮地在电话里告诉我，她得到消息，她的男人要结婚了。新娘当然不是她，可问题在于，新娘也不是她的那个好朋友，听说是一个南蛮小妹。&lt;/p&gt;

&lt;p&gt;她说她并不伤心她的男人要结婚，只是觉得气不过怎么找了个这么个人。&lt;/p&gt;

&lt;p&gt;似乎为了证明这点，她在电话那头傻笑不止。&lt;/p&gt;

&lt;p&gt;然后我就听到了她的抽泣声。&lt;/p&gt;

&lt;p&gt;我第一次听见她哭，就在那个似乎应该一如平常的晚上。&lt;/p&gt;

&lt;p&gt;我并不是很担心她，只是觉得像电影里的情节，此时一般应该有个傻兮兮的男人守在一边。&lt;/p&gt;

&lt;p&gt;虽然我不傻，但我们是朋友，我对朋友向来很温厚，所以我觉得应该马上找到她。只是我想她不会告诉我她现在在哪儿的。装惯了坚强的人，在受伤后，总喜欢找一个没人知道的角落里去哭。&lt;/p&gt;

&lt;p&gt;于是我说：“你看你身边的江风一会儿向上吹，一会儿向下吹，世事如风，本无定数，何必执着呢。”&lt;/p&gt;

&lt;p&gt;她闷闷地答道是啊，只是江风好冷啊。&lt;/p&gt;

&lt;p&gt;于是我知道了她在江边。&lt;/p&gt;

&lt;p&gt;我看了看电视上的时间，接着说：“钟楼开始敲钟了吧，你看时间总是不停的，日子总要继续吧。”&lt;/p&gt;

&lt;p&gt;她说是啊，只是这声音好吵啊。&lt;/p&gt;

&lt;p&gt;于是我知道她在钟楼的附近。&lt;/p&gt;

&lt;p&gt;于是我知道了她是在南榭。&lt;/p&gt;

&lt;p&gt;那个据说是她和号称她男人的无辜朋友第一次约会的地点。&lt;/p&gt;

&lt;p&gt;于是在三分钟后，我出现在南榭的门口。&lt;/p&gt;

&lt;p&gt;直到今天，我还认为，这是我平生最聪明的一次举动。&lt;/p&gt;

&lt;p&gt;于是她很惊讶地迎接我的到来，很无助地靠在我的肩上。&lt;/p&gt;

&lt;p&gt;我笑着对她说：“今天晚上我的肩膀对你是免费的。”&lt;/p&gt;

&lt;p&gt;这句话，我是向何伟学的。&lt;/p&gt;

&lt;p&gt;果然有效，她笑了。&lt;/p&gt;

&lt;p&gt;于是开始陪她逛街，陪她喝酒，开始进行平日里是她做的工作，从杯子里往外面倒酒。不过区别在于，平日里她总是把我的酒倒在地上，而今夜是我把她的杯中物倒在了自己的肚子里，不能浪费，是吧。&lt;/p&gt;

&lt;p&gt;可她还是醉了，我也醉了，两人像酒鬼一样互相搀扶着在江边瞎逛。&lt;/p&gt;

&lt;p&gt;走到了大公桥那边，她突然伏在我的怀里哭起来。&lt;/p&gt;

&lt;p&gt;我轻轻地搂着她，穿过她的黑发的我的手，轻拍着她的肩。&lt;/p&gt;

&lt;p&gt;过了一阵，她平息了下来，用那双带着醉意却仍是美丽的眼睛看着我，喃喃地说道：“xf，你真是个好人。”&lt;/p&gt;

&lt;p&gt;用哈利的一个男性朋友的话讲，说一个人是好人，便意味着这人长的不咋的。&lt;/p&gt;

&lt;p&gt;一般的电影拍到这里就可以了，我也是这样认为。&lt;/p&gt;

&lt;p&gt;所以当她用那冰凉的胳臂环住我的颈，傻傻地说道：“来，亲我的嘴。”我一时没反应过来。&lt;/p&gt;

&lt;p&gt;过了小半晌，我打了个酒嗝，纠正道：“那叫吻。”&lt;/p&gt;

&lt;p&gt;她在我怀里扭动着身躯，我不知道这是叫撒娇，还是喝多了不大舒服。&lt;/p&gt;

&lt;p&gt;我好意地提醒她：“你刚刚吐了的。”&lt;/p&gt;

&lt;p&gt;于是她用踉跄的步伐冲过马路，买来了口香糖和矿泉水，用十秒钟的时间漱完口，嚼完口香糖，又嘟起了红红的唇。&lt;/p&gt;

&lt;p&gt;我深吸两口气，忽然想起了一句台词：&lt;/p&gt;

&lt;p&gt;“我只是刚好路过，你就要和我……我……牙都还没刷呢。”&lt;/p&gt;

&lt;p&gt;依照谢文砚的吩咐，以下删去二十一字……&lt;/p&gt;

&lt;p&gt;她无意识地看着我，忽然轻轻地说道：“我们是不是只能做朋友？”&lt;/p&gt;

&lt;p&gt;我点点头。&lt;/p&gt;

&lt;p&gt;然后她说：“那好，我们去找家旅馆，好吗？”&lt;/p&gt;

&lt;p&gt;我这才确定，她不止喝醉了，而且已经醉的人事不省了。&lt;/p&gt;

&lt;p&gt;只是她的发绕着我的耳，她的唇贴着我的颊，我的手抚着她的背。&lt;/p&gt;

&lt;p&gt;让我心思思。&lt;/p&gt;

&lt;p&gt;必须承认，那天夜里的我是有些无耻。虽说喝醉了，但还是有些无耻。&lt;/p&gt;

&lt;p&gt;于是我们开始在江边那条街上寻找地方。但由于经验方面的原因，二人一直是逡巡不前，对那些闪着光的招牌有些望而生畏。&lt;/p&gt;

&lt;p&gt;一直疲惫地走到一马路那里，她软软地靠在我身上，轻声骂了我一句：“你是男人哎，连开房都不会，真是个笨蛋。”&lt;/p&gt;

&lt;p&gt;我虽然已醉了，但还是回了句：“笑话，我是很纯洁的。”&lt;/p&gt;

&lt;p&gt;然后，我们同时注意到了街对面的一个招牌：烟草招待所。招牌的下面有四个小字：安全舒适。&lt;/p&gt;

&lt;p&gt;然后，我们四目互视，像那夜在天桥上一样，化为雕像长达半个小时。&lt;/p&gt;

&lt;p&gt;然后，她鼓起勇气，一个人走过去问房间多少钱一夜。&lt;/p&gt;

&lt;p&gt;小姐告诉她，是按床收费，不是按房间。&lt;/p&gt;

&lt;p&gt;一个床位三十五，双人间就是七十。&lt;/p&gt;

&lt;p&gt;然后她像蜗牛一样地走了回来，&lt;/p&gt;

&lt;p&gt;然后她说没带钱，让我去交钱。&lt;/p&gt;

&lt;p&gt;然后我说我也没带。&lt;/p&gt;

&lt;p&gt;于是我拦了辆的士送她回家。&lt;/p&gt;

&lt;p&gt;然后她很自然地掏出了皮包里的钞票付了车钱。&lt;/p&gt;

&lt;p&gt;然后我又拦了辆的士回家。&lt;/p&gt;

&lt;p&gt;然后我很后悔地摸出今天家里刚交上来的生活费付了车钱。&lt;/p&gt;

&lt;p&gt;可能是那夜酒喝的太多了的原因吧，我们有三天没见面。&lt;/p&gt;

&lt;p&gt;再见面的时候，我们约在儿童公园。&lt;/p&gt;

&lt;p&gt;儿童公园里最出名的，便是那些一个疯胜一个的气功爱好者，以及湖心亭里那几位不惧风雨的老同志，一声凄厉过一声的吊嗓子声。他们十分爱好伟大祖国的历史遗产，却忘了更多的人一向是拒领这份遗产的。&lt;/p&gt;

&lt;p&gt;我和小眉见面的时候是下午，那时候公园里非常的安静。&lt;/p&gt;

&lt;p&gt;我忽然十分想念那些老同志发出来的声音。&lt;/p&gt;

&lt;p&gt;在儿童公园里那些大树的荫蔽之下，我看着穿着一件大红裙子的她，觉得好尴尬。&lt;/p&gt;

&lt;p&gt;在不时拂来的热风里，她盯着满脸紧张的我，显得好无措。&lt;/p&gt;

&lt;p&gt;我强迫自己堆起脸颊边的两垛肉，笑着说：“今天穿这么红，想自杀殉情，然后化为厉鬼去找你男人算账啊？”&lt;/p&gt;

&lt;p&gt;她一愣，忽地面上一红，并不答话。&lt;/p&gt;

&lt;p&gt;原来这个笑话真的很冷。&lt;/p&gt;

&lt;p&gt;正当我们不知该怎么办的时候，发现身边突然多了两群小孩在吵架，一群是男小孩，一群是女小孩。&lt;/p&gt;

&lt;p&gt;女小孩为首的指着男小孩群说：“你们好酷喔……”然后一堆女小孩齐声叫道：“内裤的裤。”&lt;/p&gt;

&lt;p&gt;为首的男小孩，指着女小孩的鼻子骂道：“你们好凶噢。”然后大家一起吼道：“胸罩的胸。”&lt;/p&gt;

&lt;p&gt;于是我们在一旁放声大笑，笑的天地失色，笑的涕泪俱下，笑的夸张无比，似乎把一切可笑的事全放在此时笑了出来。&lt;/p&gt;

&lt;p&gt;于是xf和小眉这两个小朋友又回到了从前。&lt;/p&gt;

&lt;p&gt;我一向认为自己是一个很惫懒的人，特别是在那几年里。&lt;/p&gt;

&lt;p&gt;我每天按时于十一点三十分起床，然后吃饭，刷牙。并且一直坚持吃过午饭才刷牙，因为我觉得这体现了华罗庚研究的那个什么学的原理，可以避免不必要的重复工作。&lt;/p&gt;

&lt;p&gt;吃过午饭，便开始洗碗，然后趁着父母午睡的时间，一个人拿着遥控器对着电视机傻笑。等老爸起床后，为了逃避和他下象棋的苦差，便出门瞎逛。由于瞎逛是没有目的性的，于是我在那几年里，用自己的脚板，步量了yc市所有的大街小巷。&lt;/p&gt;

&lt;p&gt;逛到四点半钟，便开始往回走，走到三联书店的时候，便假装自己很热爱文化，泡进去看各式小说，一直拖到六点半。&lt;/p&gt;

&lt;p&gt;如果我的阴谋得逞的话，待回到家时，大概已经有人因为饿的受不了，会主动做好了饭。但很遗憾，我家人的耐性一般都比较好。&lt;/p&gt;

&lt;p&gt;虽说晚上这顿饭一般逃不脱，但那几年的书店逃亡史却让我有了个新的爱好，那就是看席娟的言情小说。我觉得她的书挺好，不费神，又好看，而且她本人长的也不丑。&lt;/p&gt;

&lt;p&gt;晚上吃完饭，便又开始洗碗，然后度日如年地等待着父母姐姐们看的恶俗电视剧播完。然后很殷勤地通知她们，现在已经很晚了，早些睡觉，明天上班，精神会好一些。&lt;/p&gt;

&lt;p&gt;待她们入睡后，我又开始拿着遥控器，看着深夜重播的恶俗电视剧傻笑。&lt;/p&gt;

&lt;p&gt;笑完后，我会洗个澡，点上一根烟，坐在阳台上想心事。&lt;/p&gt;

&lt;p&gt;往往想了半天，才发现没什么心事好想。&lt;/p&gt;

&lt;p&gt;于是去上厕所，然后睡觉，睡之前提醒自己，一定要在十一点半起床，提醒自己明天要改变路线，到铁路坝的新华书店去，因为三联的席娟的小说已经清空了。还提醒自己，明天又是新的一天了，应该大口地呼吸这城市里新鲜的空气，应该用笑容去面对每一个人，提醒自己要像鹌鹑一样的生活：安稳并且纯蠢。&lt;/p&gt;

&lt;p&gt;由于李艳已经有了男朋友，再没空陪我了，所以当时我最大的快乐，便是那几个很穷的兄弟经常会请我吃饭喝酒。人是些极有趣的人，酒是很有糊包谷味的酒。不过最快乐的时候却在于吃完付账的时候，看着他们很头痛地凑着钱，而自己却可以跷着二郎腿，剔着牙，一副悠然自得的模样。&lt;/p&gt;

&lt;p&gt;是的，我没钱，没工作，没爱人，没向往。&lt;/p&gt;

&lt;p&gt;哪怕认识小眉之后，这四样还是一点没变。&lt;/p&gt;

&lt;p&gt;我的生活中唯一在变的似乎只有自己的体重和年龄。&lt;/p&gt;

&lt;p&gt;不过若要强说一点没变，那是撒谎。&lt;/p&gt;

&lt;p&gt;至少现在是我和小眉两个人一起用脚板来丈量这个朱总理所期望的世界级城市。只是我俩一直很疑惑，这世界级的城市居然仅用双足也可以走遍。&lt;/p&gt;

&lt;p&gt;现在泡书店也是两个人了，大多数时间我也不在家里吃饭了，那几个兄弟也见得少了。没办法，见色忘义乃是我辈本份。&lt;/p&gt;

&lt;p&gt;不过我还是习惯晚上坐在阳台上想那些并不存在的心事。越想越以为自己患了老年痴呆。&lt;/p&gt;

&lt;p&gt;不想心事的时候，我和小眉两个人穿人海，过公园，摸桂树下的草，闻面馆里的香，看尽天下言情小说，尝遍江风各种味道，曾坐在湖边一起发呆，看到美女齐声尖叫，帮老人家提过菜，也曾恐吓过骂女小孩胸罩一样凶的男小孩，勾肩搭背常有，心中坦坦荡荡是实。&lt;/p&gt;

&lt;p&gt;我们谈中东危机，台湾地震，印尼失火，华为爆炸。我们也谈她的朋友以及我的朋友。谈她的家人及我的家人。谈她的过去及我的过去。只是遗漏了她的未来和我的未来。&lt;/p&gt;

&lt;p&gt;她在公司里可以上网，所以帮我申请了一个信箱，问我要取个什么名字。我告诉她，就用xfstz，她想了想，说幸福属天主，什么意思？我告诉她，我不信教，意思也很简单，xf是头猪。&lt;/p&gt;

&lt;p&gt;她摇摇头，没说什么。&lt;/p&gt;

&lt;p&gt;她现在甚至可以问我多少天洗一次澡，我说夏天时一天洗三次都可以，冬天时三月洗一次都说不定。我还说我每年十一月十八号开始禁澡，来年的二月三十一号开禁。她正感不解，我告诉她，由于没有二月三十一号，所以顺延至三月二十二号。&lt;/p&gt;

&lt;p&gt;她问是什么特别的日子，我说那天是李艳的生日，水节。&lt;/p&gt;

&lt;p&gt;她还问过我，是否与当年那个女同学还有联系，我说有啊，她家的小狗叫多多，就是我取的，用的就是李艳家的小狗的名字。&lt;/p&gt;

&lt;p&gt;只不过我没有告诉小眉，这似乎是我和那个女同学唯一的变相联系。&lt;/p&gt;

&lt;p&gt;她疑惑了五天，才问我到底喜欢的是李艳还是谁。&lt;/p&gt;

&lt;p&gt;于是我颇为得意地告诉她，如果是李艳打电话告诉我她要结婚，我一定会把她臭骂一通，然后找个机会和她老公大醉一场。&lt;/p&gt;

&lt;p&gt;她还是不懂，于是我解释道，若是我那个当年的女同学结婚了，我会对那个女同学送上最诚挚的祝福，然后当掉自己所有的家当，买个钟送给她的老公。&lt;/p&gt;

&lt;p&gt;她仍然不懂，于是我说，李艳是我最好的朋友，就像小眉是我最好的朋友一样。&lt;/p&gt;

&lt;p&gt;于是她表示了解。&lt;/p&gt;

&lt;p&gt;后来有几天，小眉的家人陪她的老奶奶回老家去了，丢下了孤伶伶的她，于是我便有了机会去她家作陪客，吃免费的肉，喝免费的好酒，抽免费的好烟，总之用了三天的时间，整干净了她父亲所有的存货。&lt;/p&gt;

&lt;p&gt;我们在一起也没什么节目，一般就是她靠在我的肩上看电视，看困了她就去洗澡，然后回房睡觉，睡之前，提醒我走的时候记得要锁门。这种行事方式总是让我很难一时回过神来。&lt;/p&gt;

&lt;p&gt;有一天她突然趴在我肩上问我，为什么我们两个人就是不来电。&lt;/p&gt;

&lt;p&gt;“我们难道不相配吗？”&lt;/p&gt;

&lt;p&gt;又不是男生女生配，我在心里想着。嘴上说：&lt;/p&gt;

&lt;p&gt;“我们是天生绝配。”&lt;/p&gt;

&lt;p&gt;她笑了，说：“那倒是，我有貌，美貌；你有才……”&lt;/p&gt;

&lt;p&gt;“蠢材。”我接道。&lt;/p&gt;

&lt;p&gt;“我不吃辣椒。”&lt;/p&gt;

&lt;p&gt;“我爱好大蒜。”&lt;/p&gt;

&lt;p&gt;“我喜欢席娟。”&lt;/p&gt;

&lt;p&gt;“我也不讨厌。”&lt;/p&gt;

&lt;p&gt;“你是徐子陵。”&lt;/p&gt;

&lt;p&gt;“那你就是师妃暄。”&lt;/p&gt;

&lt;p&gt;“那我是人淡如菊，爱在窗台上摆盆绿菊的凌霜华。”&lt;/p&gt;

&lt;p&gt;“那我就是那个丁典，为了看你窗台上的ju花，甘愿入牢十二年。”&lt;/p&gt;

&lt;p&gt;我忽地想到凌霜华最终被自己父亲害死了，而丁典也中毒而亡，不由一愣。&lt;/p&gt;

&lt;p&gt;这时小眉还傻兮兮地抱着个布娃娃皱着眉头想还有什么可以说。我一是怕她想得太费神，二来也并不觉得肉麻是很有趣的，于是总结道：&lt;/p&gt;

&lt;p&gt;“最关键的是你有钞票，而我没钱。”&lt;/p&gt;

&lt;p&gt;她闻言大喜，连连点头。翘起两手的大拇指排成一排，&lt;/p&gt;

&lt;p&gt;“果然是绝配。”接着一叹：“可惜没感觉。”&lt;/p&gt;

&lt;p&gt;我想小眉说的是对的。&lt;/p&gt;

&lt;p&gt;但像她这么漂亮的女孩子依在你的身旁，要说心里没点儿想法，那你绝对是在包装一家上市公司，做做样子而已。&lt;/p&gt;

&lt;p&gt;我知道我的相貌是上好的绝缘体，但她常常于无意间流露出的娇憨之态却是常温下的超导材料。&lt;/p&gt;

&lt;p&gt;幸亏我们只是朋友而已。不然我一定会很害怕的。&lt;/p&gt;

&lt;p&gt;只是我不知道自己究竟怕的是什么。&lt;/p&gt;

&lt;p&gt;过了几天，那个喜欢阴笑的大学同学又打了个电话来了，说出国的她又回成都了。&lt;/p&gt;

&lt;p&gt;于是我才醒过来，原来我是一个生活在过去世界的人。&lt;/p&gt;

&lt;p&gt;原来我所害怕的，只是忘了我是那个世界的人。&lt;/p&gt;

&lt;p&gt;可是若我能忘了我是那个世界的人，又有什么不好呢？&lt;/p&gt;

&lt;p&gt;我是忘不了，还是害怕忘了呢？&lt;/p&gt;

&lt;p&gt;就像哈利说的，他是想念海伦，还是想念想念海伦的念头呢？&lt;/p&gt;

&lt;p&gt;只是哈利最后也说了：“Imisshelen!”&lt;/p&gt;

&lt;p&gt;这不是学会忘记的问题，而是学会不去强迫自己记得的问题。&lt;/p&gt;

&lt;p&gt;而且我不敢想像，我们两个这么弱智的人也会有学会的一天。&lt;/p&gt;

&lt;p&gt;我想这些的时候，已经收拾好了行李，与所有的兄弟喝完了壮行的酒，买好了去成都的车票，在车站前看着有些发呆的小眉。&lt;/p&gt;

&lt;p&gt;她忍不住说：“你真的要去吗？你还不死心吗？”&lt;/p&gt;

&lt;p&gt;我笑着拍拍她的脑袋，道：“丫头，今天怎么这么操心。有很多事情，往往是我们自己也控制不了的。”&lt;/p&gt;

&lt;p&gt;她也笑了，道：“你今天终于肯叫我丫头了。”接着顿了顿，续道：“只是为什么今天要叫我丫头呢？”眼神中有些迷惑不解。&lt;/p&gt;

&lt;p&gt;我不作解释，往车站里走去，一边走一边挥手。&lt;/p&gt;

&lt;p&gt;她从后面追了上来，拉着我的包，怯怯地道：“可以不走吗？”&lt;/p&gt;

&lt;p&gt;我问为什么。&lt;/p&gt;

&lt;p&gt;她有些不豫，嚷道：“你老沉在那里面干吗，能当饭吃吗？你说xf是头猪，你以为你真是头猪啊！你有猪宝宝那么可爱吗？一头猪，浑身是宝，你呢？除了耍耍嘴皮子，还会做什么？吃我的花我的，现在还不知死活的跑到那个鬼地方去。我不准你去。”&lt;/p&gt;

&lt;p&gt;对于她的表现，我好感激。&lt;/p&gt;

&lt;p&gt;我又笑了笑，把她的发缠在自己的食指上，粗声道：“放心吧，我只是去看看。记住自己要照顾好自己哟！”&lt;/p&gt;

&lt;p&gt;我想了想，又说：“其实我离开些日子也好，免得你总是吃面条，那样营养跟不上，身材可是要变形的。”&lt;/p&gt;

&lt;p&gt;她也笑了，轻轻叹了口气道：“哎，算了，你还是去吧。看来我们两个都是一样的不可救药。”&lt;/p&gt;

&lt;p&gt;待我走出十几米，忽然听见她在后面喊道：&lt;/p&gt;

&lt;p&gt;“你可不是一头猪，你比猪还胖。”&lt;/p&gt;

&lt;p&gt;我笑着摇头，结果发现车站的人都在看我。&lt;/p&gt;

&lt;p&gt;“……你意为鸿鹄志在天下，只怕一失足成千古笑；你意在吞吐天地，不料却成天诛地灭……”她还在我身后，反复吟诵着。&lt;/p&gt;

&lt;p&gt;我记起来了，这是白愁飞临死之前哼的两句废话。&lt;/p&gt;

&lt;p&gt;我搔搔头，心想，小眉真是一个完美的一塌糊涂的女子，可惜天生就是不属于我的。&lt;/p&gt;

&lt;p&gt;火车马上就要开了，在我踏入车厢的那一刻，我不自觉地张开了嘴，轻轻哼着：“我是一头小憨猪，过的很幸福，不想明天能吃什么，只把昨晚的剩菜牢牢记住，啦，啦，啦，啦，啦……过的不糊涂……”&lt;/p&gt;

&lt;p&gt;成都是我曾经生活了两年半的地方。当年我在那里时，我拼命地告诉自己的高中同学，那是一个四季如春的美丽城市。后来我离开了那里，我便拼命地说，那是一个终年看不到太阳，让人闷头闷脑的地方。&lt;/p&gt;

&lt;p&gt;等我回到了这里，才发现不管我怎么说，这城市还是像从前一样，淡淡的天，乌乌的云，灰灰的楼，安静的人群。&lt;/p&gt;

&lt;p&gt;甚至连去学校的公汽都还是那一路。&lt;/p&gt;

&lt;p&gt;我一个人背着包到了学校，找到了一个当年和她关系比较好的老师，打听她的联系方法。&lt;/p&gt;

&lt;p&gt;那个老师很诧异会看到我，更加诧异地说道她昨天晚上就搭飞机走了。&lt;/p&gt;

&lt;p&gt;我算了算时间，那时候我坐的火车刚刚经过达县。&lt;/p&gt;

&lt;p&gt;我这才知道有钱可以改变很多东西，至少对于当时的我而言，金钱就意味着时间，时间就意味着机会，机会就意味着可能，只是可能通常的意思是说不可能……&lt;/p&gt;

&lt;p&gt;我向那位老师说了声谢谢。然后走出办公室，在校园里瞎逛着。&lt;/p&gt;

&lt;p&gt;路过原来住的旧六舍的时候才发现，当年的木板楼早已拆了，现在杵在我面前的是一个很漂亮的学生公寓。公寓里面灯火通明，学生们幸福的一塌糊涂。&lt;/p&gt;

&lt;p&gt;我想起当年在木板楼的过道里借着灯光写信，不由笑了起来。&lt;/p&gt;

&lt;p&gt;我那时候给李艳写四页纸的信，便一定会给她写五页，如此类推。&lt;/p&gt;

&lt;p&gt;我搓搓手，想了起来，当时给李艳写的最长的一封信，只有十七页。&lt;/p&gt;

&lt;p&gt;我突然很痛恨眼前这漂亮的建筑。&lt;/p&gt;

&lt;p&gt;晚上，找到了那个大学同学。&lt;/p&gt;

&lt;p&gt;他似乎并不惊讶会在这里看到我，反而幸灾乐祸地说道：“她昨天就走了。”&lt;/p&gt;

&lt;p&gt;我说我知道，然后躺下就睡。&lt;/p&gt;

&lt;p&gt;他看了我两眼，便出去买酒菜。&lt;/p&gt;

&lt;p&gt;在他的狗窝里呆了两天，喝倒了很多老同学，又重温了一遍田晓霞之死，我便不知道该干什么了，我不知道该到哪里去了。&lt;/p&gt;

&lt;p&gt;这时候，我想起了一个非常好的朋友，当年因为大学成绩过于糟糕，现在分到了阿坝自治州的一个电厂。于是我给他打了个电话，让他来接我。&lt;/p&gt;

&lt;p&gt;他住的地方叫映秀镇，这个小镇我后来和很多女孩子都提过，记得是这样描述的：这个小镇，山不清，水不秀，还有个电厂，空气也不是顶好，不过人少，夜静，月明。&lt;/p&gt;

&lt;p&gt;其实我最喜欢的倒是院子旁边的那条声音很大的河。&lt;/p&gt;

&lt;p&gt;在那几个月里，我经常沿着那条河随意乱走，在那几条索桥之间穿来穿去，偶尔看到山垭里的野棉花，便停下来，采两把，丢到水里面。&lt;/p&gt;

&lt;p&gt;有时候，看着那山顶上的积雪，也曾认真地想着要去爬一爬。&lt;/p&gt;

&lt;p&gt;只是我觉得自己好累。&lt;/p&gt;

&lt;p&gt;河的这岸，就是映秀小镇。&lt;/p&gt;

&lt;p&gt;小镇无特色，只是豆腐多，萝卜多，毛片也多。&lt;/p&gt;

&lt;p&gt;当然最多的还是一些从不认识却自然变的亲切的朋友。&lt;/p&gt;

&lt;p&gt;小镇虽好，只是太过寂寞。&lt;/p&gt;

&lt;p&gt;别说寂寞这词太俗。我在映秀镇只用了半个月的时间便了解了为何有些人会因孤独而死。&lt;/p&gt;

&lt;p&gt;三个半月之后，我不但喝光了朋友所有的全兴，看完了所有的毛片，所有看的下去的武侠小说，到最后甚至连鲁迅杂文全集都当宝贝似地看了两遍。还因为弄饭而整坏了四个电炉，可还是寂寞。&lt;/p&gt;

&lt;p&gt;于是我开始想写一本可以流传半年的武侠小说。&lt;/p&gt;

&lt;p&gt;可又不会写。&lt;/p&gt;

&lt;p&gt;我平均每个月打个电话回家，告诉父母我活的很好。&lt;/p&gt;

&lt;p&gt;我也曾给李艳打过电话，但一直没人接。&lt;/p&gt;

&lt;p&gt;所以我只好每个月给在武汉的一位女同学写封信，借此通知高中的同学们，xf还没死，只是不知道他们在不在乎。&lt;/p&gt;

&lt;p&gt;我也曾给小眉打过电话，但老奶奶说她已经到天津上班去了。&lt;/p&gt;

&lt;p&gt;我想这样很好。&lt;/p&gt;

&lt;p&gt;直到有一天，我例行给家里打电话后，又顺手拨了李艳家的电话。&lt;/p&gt;

&lt;p&gt;她在那头笑呵呵地说：“我要结婚了，祝福我吧！”&lt;/p&gt;

&lt;p&gt;我忽然一下想起了小眉，想起了我对她的承诺。&lt;/p&gt;

&lt;p&gt;所以我把李艳痛斥了一番，然后问她什么时候让我和老任痛痛快快地喝次酒。接着开始收拾行李。&lt;/p&gt;

&lt;p&gt;在电厂工作的好朋友知道我要走了，便陪我到河的两岸去走了走。&lt;/p&gt;

&lt;p&gt;那是他第二十几次陪我了。&lt;/p&gt;

&lt;p&gt;他递给我一根烟，帮我点燃，然后拍拍我的头。&lt;/p&gt;

&lt;p&gt;说了一句很没深度的话：&lt;/p&gt;

&lt;p&gt;“其实我们这里的烧豆腐还是很好吃的，有空常来。”&lt;/p&gt;

&lt;p&gt;等我坐着旅游船赶回yc的时候，才知道李艳已经在一个风雪飘扬的冬日，坐着拖拉机出嫁了。&lt;/p&gt;

&lt;p&gt;于是我狠狠地吃了她们夫妇几顿。&lt;/p&gt;

&lt;p&gt;回到了家里，才知道自己其实很想家。但这并不阻碍我又开始背着黑包，四处寻美色养眼。只是时近年关，人们多穿的比较厚实。看了几分钟，便觉得很没兴致。&lt;/p&gt;

&lt;p&gt;于是我跑到书店里看书，坐在面馆里吃面，呆在江边吹冷风，抽三峡牌香烟，自己和自己聊天。&lt;/p&gt;

&lt;p&gt;我这才发现，小眉在我的生活里不止扮演着参与者的角色，她还很能替我省钱。&lt;/p&gt;

&lt;p&gt;有一天，眼镜摔坏了，我去换八块钱一个的镜片，走在路上，险些撞到一个人，由于眼前一片模糊，所以不知道长的什么样，只是觉得眼前一亮，似乎是个穿着花裙子的漂亮女孩。&lt;/p&gt;

&lt;p&gt;我知道这是眼花，大冬天的，谁穿花裙子找冻。&lt;/p&gt;

&lt;p&gt;父母并不曾问我这些月做了什么，我益发地觉得歉疚。所以过年的那些天，尽量不和兄弟们出去，而是呆在家里陪他们。有一天，家里来了不少亲戚，顿时热闹起来。&lt;/p&gt;

&lt;p&gt;我小意地四处周旋着，却听到电话铃响了。&lt;/p&gt;

&lt;p&gt;我拿起电话，听到一道夏日里冰淇淋一般清凉的声音，虽然现在是冬天，但我还是很高兴。&lt;/p&gt;

&lt;p&gt;“你知道猪是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我想了想，说：“笨死的。”&lt;/p&gt;

&lt;p&gt;“知道农夫是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我答不出来。&lt;/p&gt;

&lt;p&gt;“是看见猪笨死了之后，气死了。”&lt;/p&gt;

&lt;p&gt;“那你总该知道农夫的邻居是怎么死的吧？”&lt;/p&gt;

&lt;p&gt;我想了想，还是答不出来。&lt;/p&gt;

&lt;p&gt;“你真是头猪耶！那当然是因为看见农夫竟然会因为猪笨死而气死，所以那个邻居就笑死了。”&lt;/p&gt;

&lt;p&gt;“那你知道那个邻居的老婆是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我又想了想，认真回答道：“大概是看见她老公竟然笑死了，丢下自己孤儿寡母，所以恨死了。”&lt;/p&gt;

&lt;p&gt;我感觉她在电话那头摇摇头，然后听见她说：&lt;/p&gt;

&lt;p&gt;“那个邻居的老婆心疼死了。”&lt;/p&gt;

&lt;p&gt;我在电话的这头笑了，轻声道：“小眉，好久不见。”&lt;/p&gt;

&lt;p&gt;这时候门铃响了，我舍不得丢下手中的话筒，向坐在桌上的哥哥姐姐们投去求助的眼光。却发现他们的眼光都盯在桌子上。&lt;/p&gt;

&lt;p&gt;于是我在电话里向小眉道了个歉，旋风一般冲到门口打开。&lt;/p&gt;

&lt;p&gt;我看见门外亭亭玉立着小眉。&lt;/p&gt;

&lt;p&gt;她把手机收回袋里，眉眼带笑道：“意外吧？！惊喜吧？！”&lt;/p&gt;

&lt;p&gt;我很意外，待回过头来看见满桌的人张大了嘴四处找牙齿，再看见老妈露出卖掉二十几年存货的神色，才知道原来他们很惊喜。&lt;/p&gt;

&lt;p&gt;像小眉这般可爱的人，自然可以很轻易地让我老爸老妈哥哥姐姐们喜爱。&lt;/p&gt;

&lt;p&gt;于是她吃了平生最饱的一餐饭，听了平生最温柔的话。&lt;/p&gt;

&lt;p&gt;当我看着老妈看小眉的神情，不免有些怀疑这个老妈究竟是谁的妈。&lt;/p&gt;

&lt;p&gt;然后我送她回家。&lt;/p&gt;

&lt;p&gt;在路上，我们一直傻傻地走着，直到她问我：“结果如何？”&lt;/p&gt;

&lt;p&gt;“当然没有结果。”&lt;/p&gt;

&lt;p&gt;“结论？”&lt;/p&gt;

&lt;p&gt;“暂时没有。”&lt;/p&gt;

&lt;p&gt;她停下来，看着我，叹口气道：“你真是快笨死了，我真是快气死了。”&lt;/p&gt;

&lt;p&gt;我笑了笑，说：“你若气死了，我岂不是要笑死了。”&lt;/p&gt;

&lt;p&gt;她也笑了，说：“你最好别死，不然，我可是要心疼死的。”&lt;/p&gt;

&lt;p&gt;那天的风很冷，所以我不觉得自己有些发热。&lt;/p&gt;

&lt;p&gt;我哈哈哈数声，然后说：“我现在正值脆弱，你可别引诱我。”&lt;/p&gt;

&lt;p&gt;她呸了一声，说赏我一口唾沫。&lt;/p&gt;

&lt;p&gt;我笑着摊开双掌，伸到她的唇前接着。&lt;/p&gt;

&lt;p&gt;我们互述别后情由，我说我伤心的时候就抄史记，让自己以为自己是个老学究，根本不识情为何物。她说当她想她的男人的时候，就按照我教的办法，拼命看蓝色生死恋，结果越看越伤神。&lt;/p&gt;

&lt;p&gt;我向她道歉，她说不用。她说我们家那错架子一般的楼梯让她好生难找，我向她道歉。她说从天津回来过年，结果等了我几天的电话，也没等着，于是我又向她道歉。她说在天津那边，偶尔还会想我，我只好又道歉。然后发觉自己道歉的很没道理。&lt;/p&gt;

&lt;p&gt;于是我们又变成秤不离砣，砣不离秤了。&lt;/p&gt;

&lt;p&gt;她说回来后，曾经见过一次她的男人，那是在一次牌桌上。&lt;/p&gt;

&lt;p&gt;我问她表现如何。&lt;/p&gt;

&lt;p&gt;她笑嘻嘻地说想到他已经结了婚了，以后也没什么机会了，所以趁着摸牌的机会，不停地用手指触摸他的手臂，拼命地揩油。&lt;/p&gt;

&lt;p&gt;我笑着纠正，那不叫揩油，那叫送油上门。&lt;/p&gt;

&lt;p&gt;她突然盯着我很严肃地说，现在发现过了好几个月，那个男人依然可以很轻易地影响到她的心情。&lt;/p&gt;

&lt;p&gt;我想了想，认为自己没什么立场开解她，便开玩笑说，那你还是等着他离婚吧。&lt;/p&gt;

&lt;p&gt;本以为她会笑，谁知她竟认真地想了起来。&lt;/p&gt;

&lt;p&gt;我暗呼圣母之名。&lt;/p&gt;

&lt;p&gt;她走的前一天晚上，又给我打了个电话，开门见山头一句：&lt;/p&gt;

&lt;p&gt;“你做我男朋友好不好？”&lt;/p&gt;

&lt;p&gt;一般日本小女生在这个时候会说：“我可以和你交往吗？”脸上还会带着羞怯而大胆的表情。&lt;/p&gt;

&lt;p&gt;宣萱演的白领在这个时候会说：“上我家去喝杯咖啡吗？”表情是不容人拒绝的。&lt;/p&gt;

&lt;p&gt;琼瑶一般会说：“你看那天边的两朵彩云，一朵似我，旁边的一朵是否是你呢？”表情是弱智的。&lt;/p&gt;

&lt;p&gt;古时候的女人可能会说：“遗君明珠，荐君枕席，侍君添香，蒙君不弃……”表情是未知的。&lt;/p&gt;

&lt;p&gt;当代的湖北女人，一般是打死都不会先说的，表情是期待的。&lt;/p&gt;

&lt;p&gt;所以我知道当小眉这样说，一定有下文，所以我很平静。&lt;/p&gt;

&lt;p&gt;果然她苦兮兮地叹道：“真不想走，又找不到个借口留下来。”&lt;/p&gt;

&lt;p&gt;我愤然于她的麻木，惊讶于自己的麻木。&lt;/p&gt;

&lt;p&gt;我说可以介绍很多优秀青年给她认识，比如捷捷和王博。&lt;/p&gt;

&lt;p&gt;过了会儿，又满怀遗憾地告诉她，我们班的这两面旗帜都已倒在美人怀里了。&lt;/p&gt;

&lt;p&gt;于是她又呸了我一口，然后问我，真的不考虑一下。&lt;/p&gt;

&lt;p&gt;我告诉她，她既没得白血病，我也没出车祸，看样子不大可能。&lt;/p&gt;

&lt;p&gt;她想了想，也认同了我的看法，并且为我万分可惜。&lt;/p&gt;

&lt;p&gt;然后她笑嘻嘻地说：“你会后悔的。”&lt;/p&gt;

&lt;p&gt;我说那是一定的。&lt;/p&gt;

&lt;p&gt;“你再也找不到比我更合适当你女朋友的人了。”&lt;/p&gt;

&lt;p&gt;我说那是不一定的。&lt;/p&gt;

&lt;p&gt;“你有可能再也找不到女朋友了。”&lt;/p&gt;

&lt;p&gt;我说那是你胡扯的。&lt;/p&gt;

&lt;p&gt;我们很开心地笑了起来，挂电话之前她说：&lt;/p&gt;

&lt;p&gt;“这次走了，可能就不回来了，以后没人陪你玩，你可别把自己闷着。还有，不该想的事就别想了。早点儿找个工作，自己都养不活自己，丢不丢人啊？还有，别对女孩子说自己喜欢看言情小说，那也很丢人的。还有注意运动，快些减肥。还有什么来着……噢，还有DON’T**OKEANDDRINKALOT，OK?”&lt;/p&gt;

&lt;p&gt;我一一含笑应允，正准备挂电话，又听到她抢着说：&lt;/p&gt;

&lt;p&gt;“还有……帮我问侯你爸爸，妈妈。”&lt;/p&gt;

&lt;p&gt;这是我最后一次听到她的声音。&lt;/p&gt;

&lt;p&gt;小眉走了以后，我仍然是像以往那样生活着，只是骗家里人买了一部电脑，所以老爸天天在和机器下棋，也没空烦我了，所以我也不用天天出门逛街了。&lt;/p&gt;

&lt;p&gt;老姐带着我那个有二级厨师证书的姐夫哥搬回来住了，所以我也不用天天做饭了。&lt;/p&gt;

&lt;p&gt;那些穷兄弟也渐渐地鸟兽东南散了，我也不用经常喝酒了。&lt;/p&gt;

&lt;p&gt;李艳也跟随她老公南下了，我也没有吵架的对象了。&lt;/p&gt;

&lt;p&gt;我也开始考文凭，准备工作了。&lt;/p&gt;

&lt;p&gt;我把一天的时间分成十份，用其中六份来思念钞票，两份用来记住那位身在异国的女同学，一份用来悼念李艳和她的多多，一份用来想想高中同学的相貌，一分用来策划让别人想念。只是偶尔还会想起小眉，曾经是我最好，最好的朋友的那个小眉，那个再无音信的小眉。&lt;/p&gt;

&lt;p&gt;由于时间实在还是太多，便开始续写在映秀镇上没写成的武侠小说，由于把自己幻想成了金小庸，铺设的场面太大，便喊在武汉读书的那位女同学给我拿点儿历史资料回来。结果她给我带了一本大概是小学用的中国古代通史。&lt;/p&gt;

&lt;p&gt;所以这个计划又搁置了起来。&lt;/p&gt;

&lt;p&gt;后来用上了ＱＱ，练就了一身双手互搏的本领，周游于诸多头像之间，发了疯似地告诉她们：&lt;/p&gt;

&lt;p&gt;“从前有座学校，学校里有个澡堂，澡堂里有个我，我在澡堂里洗澡，一边洗澡一边唱歌，我是一头小憨猪，过的很幸福……”&lt;/p&gt;

&lt;p&gt;然后她们说我很有趣。&lt;/p&gt;

&lt;p&gt;于是我把她们都拉到了黑名单里。&lt;/p&gt;

&lt;p&gt;后来又来了一批头像，她们都说对我的名字很感兴趣，说轻眉老生是什么意思。&lt;/p&gt;

&lt;p&gt;我说那意味着我博学多才，成熟稳重，看轻天下其它男子。&lt;/p&gt;

&lt;p&gt;她们问我有何佐证。&lt;/p&gt;

&lt;p&gt;我告诉她们，我经常背的黑包里，一般放着四本书：&lt;/p&gt;

&lt;p&gt;一本是荣格文集，这体现了我的深度。&lt;/p&gt;

&lt;p&gt;一本是鲁迅杂文全集，这体现了我忧国忧民之心。&lt;/p&gt;

&lt;p&gt;一本是平凡的世界，这说明了我如同浴火的凤凰，向往着从苦难中升华。&lt;/p&gt;

&lt;p&gt;还有一本是交错时光的爱恋，完完全全是因为自己喜欢看。&lt;/p&gt;

&lt;p&gt;看到我的回答，她们的答复无一例外是一声呸。&lt;/p&gt;

&lt;p&gt;我也偶尔会上席绢梦幻阁去看看，取了个望月精灵的恶名，与那些十五六岁的小朋友们打打嘴仗，不亦乐乎。&lt;/p&gt;

&lt;p&gt;我还上了５４６０，潜进了湖大所有的班级，只是很可惜，没有小眉的信息。&lt;/p&gt;

&lt;p&gt;一个阳光明媚的夏天，我偷偷到冰箱里把外甥女的冰淇淋摸了一根，坐在电脑前有滋有味地品尝了起来。然后发现李艳在ＱＱ里埋怨我帮她取的叶轻眉的名字很难听，我笑了起来。&lt;/p&gt;

&lt;p&gt;她又问我是不是还在和那些未成年人打嘴仗，也不知道省点儿钱。&lt;/p&gt;

&lt;p&gt;正准备回答，就发现有另外一个头像开口了。&lt;/p&gt;

&lt;p&gt;于是我告诉李艳，想到和她聊天，确实有点儿心疼钱，但想到和别人聊天，嗯不错，我舍得。&lt;/p&gt;

&lt;p&gt;李艳怒发冲冠，警告我，以后不准再四处攻击她，免得影响她后半生的幸福。&lt;/p&gt;

&lt;p&gt;我愕然道，你还有幸福吗，更莫说是下半辈子的。&lt;/p&gt;

&lt;p&gt;两人又互骂几句后，我才有空去看来的那条消息。&lt;/p&gt;

&lt;p&gt;那个头像说：&lt;/p&gt;

&lt;p&gt;“天气还真是热啊。”&lt;/p&gt;

&lt;p&gt;我忙着和李艳打闹，急忙敷衍道：&lt;/p&gt;

&lt;p&gt;“天好热啊。”&lt;/p&gt;

&lt;p&gt;本不打算再理她，谁知她的下一句话，来的奇快无比。&lt;/p&gt;

&lt;p&gt;“你知道猪是怎么死的吗？”&lt;/p&gt;

&lt;p&gt;我摸了摸后脑勺，点上根烟，咧着嘴笑了，像弹钢琴一样打着键盘。&lt;/p&gt;

&lt;p&gt;“我是想你想死的。”&lt;/p&gt;

&lt;p&gt;是的，叶轻眉，我的朋友，最好最好的那一种。&lt;/p&gt;

&lt;p&gt;跋：（其实这个字本身就很有搞笑的功能）&lt;/p&gt;

&lt;p&gt;我所想念的，一切都可以结束了&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（这是猫腻的长篇小说《庆余年》里写在前面的非常有趣的一章，很喜欢这个故事，所以摘录到此）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>杂谈:指纹歌里的人生百态</title>
      <link>http://alimy.me/post/etc_201603192115/</link>
      <pubDate>Sat, 19 Mar 2016 21:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/etc_201603192115/</guid>
      <description>

&lt;p&gt;“一螺穷，二螺富，三螺四螺开当铺……”童年时代，您可曾唱过指纹歌？童谣未必预示了命运，但却包含了人生百态。&lt;/p&gt;

&lt;p&gt;指纹，是在每个人出生第六个月就形成，并跟随人一生一世的身体纹线，每个人的指纹都是独一无二的，世界上绝不会有指纹完全相同的两个人。所以，我国在一千多年前的唐代，就实行了指纹画押。古代的借据就是借户用中指和食指在借据上并列印上指纹叫作“花押”。直到现代，立据签约还仍然使用这种当事人在契约上按手印的方法作为凭信。刑事侦探还把鉴别手纹作为破案的重要手段。&lt;/p&gt;

&lt;p&gt;两种最基本的指纹：纹如水流中的漩涡形，或中间的纹成封口的环状，叫涡纹，又叫螺纹；指纹呈流线形脱开，不封口，叫流纹，又叫箕纹。&lt;/p&gt;

&lt;p&gt;螺是指螺旋状的环形纹，箕是指簸箕状的开口纹。张爱玲在《谈看书》中提到：十只手指上，螺越多越好，聚得住钱；男人簸箕也好，会赚钱，能够把钱铲回家；女人则是螺好，会积钱，手上没螺，拿东西不牢。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的地图-盛行于东南沿海:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的地图：盛行于东南沿海&lt;/h3&gt;

&lt;p&gt;在一些童谣集中载录了大量的指纹歌，如商务印书馆《各省童谣集》第一集（1923年）就收录了三首，分别采自安徽休宁、浙江杭县、浙江新昌；上海世界书局《绘图童谣大观》（1924年）也收录了三首，分别采自江苏的吴县、无锡和江都。&lt;/p&gt;

&lt;p&gt;《各省童谣集》的编者说：“看螺纹定一生贫富贵贱，各省都有这种事，但所说各不相同，可见这事不足深信。”这话听起来，好像如果各地所说一致，就可以深信似的。这首曾经被打入“封建迷信”另册的趣味童谣，正因为异文众多，不足为信，才会给我们的童年生活带来许多相互打趣的快乐。&lt;/p&gt;

&lt;p&gt;我陆续搜集了101首大同小异的指纹歌，却发现它们只出现在11个省市，并非“各省都有”。对照中国地图看一下，指纹歌基本上流行于东南沿海地区，从江苏沿海路向南，上海、浙江、福建、台湾、广东，一个不落，而内陆却只有安徽、湖北、湖南、江西等几个紧靠以上地区的省份。在西北和东北地区，居然没能找到一首指纹歌。&lt;/p&gt;

&lt;p&gt;北京的儿歌是最丰富的，可是，北大《歌谣》周刊并未见到有指纹歌发表。我所仅见的北京这首《一螺穷》，内容还被精减、合并为“一螺穷，二螺富，三螺四螺开当铺，五螺六螺磨豆腐，七螺八螺自来有，九螺一箕，稳吃稳坐”。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的韵脚-韵一换-运也转:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的韵脚：韵一换，运也转&lt;/h3&gt;

&lt;p&gt;北京的《一螺穷》虽然简单，却大致反映了许多指纹歌的主导思路，也即张爱玲说的，螺越多越好。另一首不明地域的螺纹歌，这一思路更加明显：“一螺穷，二螺富，三螺四螺卖豆腐，五螺六螺开当铺，七螺八螺有官做，九螺十螺享清福。”生活质量的好坏基本上与手上螺纹的多少成正比。不过，指纹歌的价值更多体现在它的游戏性，而不是命相的准确度。&lt;/p&gt;

&lt;p&gt;各地指纹歌中最一致的，大约是起首句“一螺穷（贫），二螺富”，全部101首中，占了67首。大凡“一螺穷，二螺富”的地区，基本都是为了在前几句中押一个“富”字韵，北平的《一螺穷》最有代表性。明白了这一点，也就明白了为什么有那么多人开当铺、磨豆腐、披麻布、无着裤、住大屋、倒大路。&lt;/p&gt;

&lt;p&gt;多数“一螺穷”会在五螺之后换韵。韵一换，运也转，比如湖北流传的“一螺穷，二螺富，三螺四螺住大屋，五螺卖柴，六螺穿鞋，七螺八螺，挑屎过街，九螺单，当天官，十螺全，点状元，十个簸箕，金银挑起”。这就有点像客家儿童唱“一二三四五，上山打老虎，老虎不在家，放屁就是他”，为什么放屁的是他而不是你和我，只是因为“他”与“家”押韵。因此，如果上一句唱成“老虎在家里”，那么对不起，“放屁就是你”。&lt;/p&gt;

&lt;p&gt;起首句与《一螺穷》不一致的地区，主要是广东、福建和台湾。台湾金门的“一螺一嗲嗲，二螺跄脚蹉”与闽南的“一螺一底底,二螺跑飞飞”，以及潮州的“一螺一帝帝，二螺走脚皮”估计是同源异文，所谓嗲、底、帝，大概也只是各地记录者用词的不同，都是为了表达一种闲适状态，以便与“二螺跄脚蹉”的劳碌状态相区别。&lt;/p&gt;

&lt;p&gt;《一螺穷》放在闽南话中，读起来很不爽口，因此只能重编一套《一螺一嗲嗲》的新指纹歌。所以说，一螺到底是“穷”还是“嗲嗲”，不是因为东海岸人与南海岸人长得有什么不一样，而是因为他们的语言系统不一样。&lt;/p&gt;

&lt;h3 id=&#34;指纹歌的秘密-三教九流-人生百态:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;指纹歌的秘密：三教九流，人生百态&lt;/h3&gt;

&lt;p&gt;在杭州到台州的连接带上，杭州、诸暨、新昌、天台、临海，都流行一种恐怖版指纹歌，杭州是“五螺磨刀枪，六螺杀爹娘”，诸暨是“七螺磨刀枪，八螺杀爷娘”，新昌是“七螺磨尖刀，八螺杀爹娘”，天台是“六螺磨刀枪，七螺杀姨娘”，临海是“五螺掼刀枪，六螺杀爷娘”。少一螺的，总是执行前一工序，或者叫帮凶；多一螺的，总是执行后一工序，因此成了凶手。&lt;/p&gt;

&lt;p&gt;六螺在所有螺数中是最狠最倒霉的，在杭州和临海一定是凶手；到了天台可以弱化为帮凶；再到诸暨或新昌，穷虽穷，却可以不必干那杀人的勾当；如果能走远一点，北上江苏如皋，好歹可以“去种田”；到了扬州、仪征一带就能“骑花马”；如果脚力勤，远上北京，还能攒钱“开当铺”。但是不能往西或往南，往湖北只能“穿草鞋”、“做强盗”；往湖南则是“打草鞋”、“放鸭婆”；到江西也还有可能“打死人”；到了广东和福建，大多数情况下还是只能“讨饭匹”、“掰心肠”、“做小偷”、“给狗拆”。当然，少数南下分子也可能“做相公”；如果能渡海到台湾，则有可能“米头全”或者“有米煮”。&lt;/p&gt;

&lt;p&gt;据说人种不同，螺数分布的规律也不同。白种人与非洲人箕纹多，澳洲土著螺纹多，黄种人介于两者之间。假设这种说法是正确的，那么，黄种人应该是以五螺六螺居多了，按杭州和临海的说法，他们都在“磨刀霍霍向爹娘”——这当然只能拿来当个噱头，供儿童们互相唱着取笑。&lt;/p&gt;

&lt;p&gt;纵观各地指纹歌，各行各业五花八门，计有重工业（砸石条、掼刀枪），轻工业（磨豆腐、弹棉花），农牧业（会种田、牵猪牯），建筑业（起大厝），服务业（挑粪桶、抬花轿），商业（开当铺、卖老婆），交通（骑白马、坐官船），能源（担柴卖），文教卫生（中状元、捡狗屎），信息产业（做媒婆），文化艺术（吹喇叭），宗教（拜菩萨），行政管理（会做官、管天下）等等，三教九流，包罗万象。&lt;/p&gt;

&lt;p&gt;指纹歌中最常见的生活状态是平平过、谷满仓、坐颓颓、走脚皮、盖草铺、住大屋、无米炊、操心肠、得高寿、有钱无人知、金子银子压秤砣之类。另外，打死人、做强盗、做贼、偷挖壁、沿街乞、倒大路的现象也非常严重。&lt;/p&gt;

&lt;p&gt;要说指纹歌真实地反映了现代社会的人生百态，那显然是拔高了，但若说反映了传统农业社会对于社会结构与人生百态的粗浅理解，则不会太过。&lt;/p&gt;

&lt;p&gt;当然，指纹歌也缺失了许多很重要的社会内容。比如对于读书的理解，只给出了“中状元”一条出路，似乎中不了状元就只能捡狗屎。至于现代社会的现代行业，就得不到体现了。指纹歌几乎没有什么实际的命相作用，也不会真有人拿着鸡毛当令箭，因此，我们也就用不着大惊小怪地把它当作封建迷信一棒打杀，权当一张陈旧发黄的老照片，也挺好。&lt;/p&gt;

&lt;h3 id=&#34;各地指纹歌:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;各地指纹歌&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;北京&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺四螺开当铺，五螺六螺磨豆腐，七螺八螺自来有，九螺一箕，稳吃稳坐。&lt;br /&gt;
&lt;em&gt;（1930年，雪如女士《北平歌谣续集》）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一斗穷二斗富三斗四斗卖豆腐，五斗六斗开当铺，七斗八斗把官做，九斗十斗享清福.&lt;/p&gt;

&lt;p&gt;一斗穷二斗富三斗四斗卖豆腐，五斗六斗去赶集，七斗八斗去赴席，九斗一过，老了稳坐&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;苏州&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗巧二罗好，三罗抱棒柱，四罗打得稳勿住，五罗穷六罗富，七罗做长工，八罗做相公，九罗骑白马，十罗坐官船。&lt;br /&gt;
&lt;em&gt;原注：指纹皆圆者为罗，吴人以罗之多少，占一生之命运。（《吴歌丙集》第39首，320页）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一螺巧二螺拙，三螺拖棒柱，四螺纯勿识，五螺富，六螺穷，七螺做相公，八螺做长工，九螺骑白马，十螺坐官船。&lt;br /&gt;
&lt;em&gt;原注：按指纹中作回旋状者，谓之螺，否则谓之粪箕。又传说：男以螺多为贵；女以粪箕多为贵。（《吴歌丁集》第4首，350页）&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;常熟&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩巧，二箩拙，三箩回勿转，四箩拖捧柱，五箩富，六箩穷，七箩相公，八箩长工，九箩撑黄伞，十箩十畚箕，堆满老宅基。&lt;/p&gt;

&lt;p&gt;一螺巧，二螺笨，三螺拖捧头，四螺全不识，五螺富，六螺穷，七螺挑糞桶，八螺做长工，九螺骑白马，十螺坐官船，无螺一场空。&lt;br /&gt;
&lt;em&gt;解释：拖捧头指吃生活挨打，全不识是文盲。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;鄂西&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺四螺住瓦屋，五螺六螺穿草鞋，七螺八螺挑屎卖，九螺单，当天官，十螺全，点状元，十把筲箕，金银挑起&lt;br /&gt;
&lt;em&gt;原注：螺，即指纹。呈螺旋形的叫螺，有缺口的叫筲箕。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;杭州&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富；三罗四罗披麻布；五罗六罗开店铺；七罗八罗有官做；九罗一畚箕，顿顿吃干的；十罗全，中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;临海&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富， 三罗造酒醋，四罗卖豆腐， 五罗掼刀枪，六罗杀鸡娘， 七罗七，讨饭匹， 八罗八，拜菩萨， 九罗九，做太守， 十罗十，生个小儿别大别。 满手鸡，做个状元有吃又有嬉。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;缙云&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一脶穷两脶富，三脶换豆腐，四脶卖酒醋，五脶骑白马，六脶管天下，七脶摇铃铃，八脶上天灯，九脶九，做太守，十脶全，中状元。&lt;br /&gt;
&lt;em&gt;【注释】换豆腐——缙云古代，豆腐不用钱买，而是用豆子换，一斤豆子换三斤豆腐。做豆腐的人家一般没有多少利润，只是赚些豆腐渣喂猪。后来有了豆腐店，豆腐也可以用钱买了，但是习惯上依旧叫做“换豆腐”。摇铃铃——指当道士。上天灯——“天灯”是缙云旧俗由“积善人家”一家或几家轮流点在十字路口或丁字路口的灯笼。这里指积善。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;诸暨&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺挑担捡鸡屙，四螺骑白马五螺管天下六螺做丞相七螺磨刀枪八螺做贼，九螺逼（追）着——十只鸡，满天飞！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;天台&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一罗穷二罗富，三罗卖豆腐，四罗捉狗屙，五罗高官做，六罗磨刀枪，七罗杀爹娘，八罗八，敲菩萨，九罗九，做太守，十罗全，生个小囝中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;瑞安&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一雷富，二雷平平过，三雷扫猪污，四雷卖豆腐，五背刀枪，六雷杀爷娘，七雷骑白马，八雷坐天下，九雷九，背快口，十雷全，中状元，十雷空，做相公。” 潮汕&lt;/p&gt;

&lt;p&gt;一螺一飞飞，二螺走脚皮，三螺有米煮，四螺无米炊，五螺五田庄，六螺百心肠，七螺七益益，八螺做乞食，九螺九翁翁，十螺做太公。无螺十簸箕，免赚就有钱。&lt;br /&gt;
&lt;em&gt;解释：飞飞即悠闲，走脚皮指到处奔波。五田庄即家有田地，地主也。百心肠是太多烦恼操心事。七益益指乐善好施。九翁翁即翁媳婆媳关系和睦。做太公即四代同堂，多子多福。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一螺坐颓颓；二螺走脚皮；三螺无米煮；四螺无米炊；五螺五田庄；六螺操心肠；七螺七役役；八螺做乞食；九螺九安安；十螺会做官&lt;/p&gt;

&lt;p&gt;一螺穷、二螺家、三螺四螺开当铺、五个螺作媒婆、六个螺作小偷、七螺遭殃、八螺吃糠、九螺一个箕到老坐着吃、十个螺作大官。&lt;/p&gt;

&lt;p&gt;一螺巧嗲嗲；二螺走脚皮；三螺有米煮；四螺胡饭炊；五螺顾三餐；六螺岁寿长；七螺七富富；八螺起大厝；九螺九安安；没螺没簸箕；有厝又有钱。&lt;/p&gt;

&lt;p&gt;一螺学爬爬，二螺走骹皮，三螺无米煮，四螺无饭炊，五螺五挖挖，六螺做乞食，七螺穷到底，八螺富上天，九螺玉春臼，十螺金瓦厝。&lt;/p&gt;

&lt;p&gt;一螺一帝帝，二螺走脚皮，三螺无米煮，四螺有饭炊，五螺五益益，六螺给狗拆，七螺七富裕，八螺起大厝，九螺挖壁空，十螺做相公。十畚箕，有嗵食有嗵披。&lt;/p&gt;

&lt;p&gt;一螺一直坐，二螺撑脚蹄，三螺无米煮，四螺学喷吹，五螺偷挖壁，六螺做乞食，七螺穷，八螺富，九螺起大厝，十螺中进士。&lt;/p&gt;

&lt;p&gt;一螺一短短，二螺欠脚气，三螺学吹箫，四螺有米煮，五螺五尖当，六螺日头长，七螺七娃娃，八螺做乞吃，九螺九安安，十螺会做官。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;赣南客家&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷二螺富，三螺牵猪古（意为贫贱），四螺蒸酒卖豆腐，五螺骑马应圩，六螺打死人，七螺做中人，八螺驮锁链（即戴枷锁），九螺解下院（意为吃官司），十螺十足，层箩列谷，瓮子盛足，无螺穿椟惢（意为什么都留不住）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;闽东&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷，二螺富，三螺开酒库，四螺没饭吃，五螺做乞食（乞丐），六螺圆车车（形容人的富态），七螺做老爹（大官），八螺是庙祝（寺庙中管香火的人），九螺会当家，十螺管天下。（《福州百首民谣》）&lt;/p&gt;

&lt;p&gt;一缧堆，二缧衰，三缧没米煮，四缧有饭吹，五缧红又红，六缧去卖田，七缧富又富，八缧穿破裤，九缧弯又弯，十缧去做官&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;闽南&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺一直坐，二螺撑脚蹄，三螺无米煮，四螺学喷吹，五螺偷挖壁，六螺做乞食，七螺穷，八螺富，九螺起大厝，十螺中进士。&lt;/p&gt;

&lt;p&gt;一脶一坐座，二脶走脚皮，三脶无米煮，四脶有饭炊，五脶五花妆，六脶米头全，七脶七挖壁，八脶做乞吃，九脶九上山，十脶去做官。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;金门&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺一嗲嗲，二螺跄脚蹉，三螺贤歕吹，四螺有米煮，五螺五花装，六螺米头长，七螺七挖壁，八螺做乞食，十螺去做官。十畚箕有通食阁有通偏。&lt;br /&gt;
&lt;em&gt;注：跄脚蹉：单脚跳。贤歕吹：很会哭。偏：占便宜。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;资兴&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩穷二箩富，三箩蒸曲卖豆腐，四箩家军窟，五箩家贫民窟，六箩骑马走街上过，七箩打杀人，八箩煞娘爷，九箩咚咚咚，十箩窃古种&lt;br /&gt;
&lt;em&gt;解释：家军窟指充军命，家平民窟，是平民命，骑马，是指中状元。打杀人，指江湖人氏，煞娘爷，相当狠。咚咚咚，不是乞丐就是戏子。窃古种，野种（窃古=小偷）。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;安仁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一箩穷二箩富，三箩四箩蒸酒卖豆腐，五箩六箩打草鞋，七箩八箩挑屎卖，九箩一操，骑马背官刀，十箩全，中状元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;乐昌客家&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一螺穷，二螺富，三螺牵猪牯，四螺蒸酒卖豆腐，五螺骑马迎喝，六螺打死人，七螺做中人，八螺锁链，九螺解锁链，十螺盎子装粥吃客家,。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;南雄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一脶穷，二脶富，三脶蒸酒磨豆腐，四脶满冬冬，五脶做相公，六脶打死人，七脶做中人，八脶平平过，九脶十脶饿死没人知。一脶巧，二脶饱，三脶抓屎爪，四脶满冬冬，五脶做相公，六脶骑马过河，七脶银打秤锤，八脶九脶子孙多，十脶死了劳劳嘈。河北&lt;/p&gt;

&lt;p&gt;一斗穷，二斗富，三斗四斗开当铺，五斗卖煤子，六斗小贼子。七斗当员外，八斗作知府，九斗十斗，不做就有。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;附带一个测试游戏-测测你的指纹:1484b06f629e4ed2ba4137848d0eaf86&#34;&gt;附带一个测试游戏（测测你的指纹）&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;注意：o为斗（手指肚上纹路形成一个闭合的圆圈环绕状），x为簸萁（其余任何图案,一般就是纹路不闭合，开口向下）斗是代表得到，簸萁是代表付出&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;提示：男左女右&lt;/em&gt;&lt;br /&gt;
顺序：大食中无小&amp;mdash;-性格简述&lt;br /&gt;
1.  oooox&amp;mdash;有点能力，思想波动，见异思迁，讲信用。&lt;br /&gt;
2.  ooxoo&amp;mdash;朋友多，工作有成绩，感情深，性格开朗。&lt;br /&gt;
3.  ooooo&amp;mdash;有信心，办事积极，有领导能力，身体健康，易挫折。&lt;br /&gt;
4.  oooxx&amp;mdash;信用心强，心地善良。&lt;br /&gt;
5.  xxxxx&amp;mdash;温顺有耐力，性格朴实，正直。&lt;br /&gt;
6.  oxxxo&amp;mdash;花言巧语，诡计多端，以自己为主。&lt;br /&gt;
7.  xxxxo&amp;mdash;机智，狡猾。&lt;br /&gt;
8.  xxxoo&amp;mdash;唱材，感情用事，活泼，不自量。&lt;br /&gt;
9.  xoxoo&amp;mdash;稳重，有活动能力，有信心，容易自我毁灭。&lt;br /&gt;
10. xooxo&amp;mdash;活动能力超群，能充分理解事物。&lt;br /&gt;
11. xxooo&amp;mdash;感情丰富，不稳定，欠考虑，活动能力强，易挫折。&lt;br /&gt;
12. oxxoo&amp;mdash;易动感情，愿意助人。&lt;br /&gt;
13. oxoxo&amp;mdash;感情丰富，有活动能力，好显示自己。&lt;br /&gt;
14. oxoox&amp;mdash;易动感情，才貌超群，肯设想，通情达理。&lt;br /&gt;
15. ooxox&amp;mdash;手巧，有能力，遇事冷静，表面急躁。&lt;br /&gt;
16. xxoxo&amp;mdash;热情，好吹嘘，有时积极稳重，独立活动不多。&lt;br /&gt;
17. ooxxo&amp;mdash;自私，不听劝，好色，易挫折。&lt;br /&gt;
18. xxoxx&amp;mdash;手巧，聪明，固执。&lt;br /&gt;
19. oooxo&amp;mdash;做事漂亮，口是心非，经不起情色考验。&lt;br /&gt;
20. xxxox&amp;mdash;有经验，办事认真，稳重。&lt;br /&gt;
21. xooox&amp;mdash;感情强烈，活泼，有耐心，自尊心强，但服从分配。&lt;br /&gt;
22. oxoxx&amp;mdash;好奇心强，有志气，有远见，但易失败。&lt;br /&gt;
23. xoooo&amp;mdash;能说能干，性格急躁，自尊心强。&lt;br /&gt;
24. oxooo&amp;mdash;想象力丰富，个性强，运气好。&lt;br /&gt;
25. xoxox&amp;mdash;做事无计划，通情达理，有活动能力。&lt;br /&gt;
26. xxoox&amp;mdash;斗争性强，性格坚强，有时狂热。&lt;br /&gt;
27. oxxxx&amp;mdash;性格温顺，善于为人，耿直，做事圆滑机智。&lt;br /&gt;
28. ooxxx&amp;mdash;强烈求知欲，做事坚强，文武兼备。&lt;br /&gt;
29. xoxxx&amp;mdash;铁面无私，有活动能力，待人热情。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（资料整理自网络，仅供参考）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>就这样认识了Gogs</title>
      <link>http://alimy.me/post/inf_201603182105/</link>
      <pubDate>Fri, 18 Mar 2016 21:05:00 CST</pubDate>
      
      <guid>http://alimy.me/post/inf_201603182105/</guid>
      <description>&lt;p&gt;大概是2015年12月21日，我想知道一些关于SGL(Skia Graphics Engine)的信息，就糊里糊涂的跳到
一个网站&lt;a href=&#34;https://libskia.so/&#34;&gt;https://libskia.so/&lt;/a&gt;, 然后顺便浏览了一下，做的还是很有吸引力的个人网站。其中有一
篇Blog： &lt;a href=&#34;https://libskia.so/b/discovering-gogs.html&#34;&gt;Discovering Gogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;博主写道:&lt;br /&gt;
I just discovered Gogs, a light Git web fronted written in Go.
After reading a bit on its website, I decided to try a bit, just
for fun. It was really easy to install it with NginX as reverse
proxy, everything is Gogs&amp;rsquo; documentation, and it was ready in
less than 10 minutes. Wonderful!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s still in beta, but already very functionnal, providing most
of the classic features such as issues, milestones, ssh keys, README.md
parser, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Finally, I just dropped my old Gitweb1, and I welcome you to my new Gogs! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我也跟着他的节奏部署了Gogs,用的是sqlite3作为数据库，安装非常简单，用户体验和Github
非常相似但简便的多。之前部署过Gitlab社区版，部署的时候各种的不爽，在我的机子上运行速度还不匝地，
无奈还是放弃用Gitlab，只使用cgit来web浏览git库。现在好了，有了gogs，部署简便，运行速度也很快，
UX也是棒棒的，我想说，这就是我一直想要的。&lt;/p&gt;

&lt;p&gt;附上Gogs的信息： &lt;a href=&#34;https://gogs.io&#34; title=&#34;官方网站&#34;&gt;【官网】&lt;/a&gt; &lt;a href=&#34;https://try.gogs.io&#34; title=&#34;官方演示&#34;&gt;【演示】&lt;/a&gt;  &lt;a href=&#34;https://github.com/gogits/gogs&#34; title=&#34;官方源码&#34;&gt;【源码】&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>50 Shades of Go</title>
      <link>http://alimy.me/post/dev_201603182045/</link>
      <pubDate>Fri, 18 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603182045/</guid>
      <description>

&lt;p&gt;Go is a simple and fun language, but, like any other language, it has a few gotchas&amp;hellip; Many of those gotchas are not entirely Go&amp;rsquo;s fault. Some of these mistakes are natural traps if you are coming from another language. Others are due to faulty assumptions and missing details.&lt;/p&gt;

&lt;p&gt;A lot of these gotchas may seem obvious if you took the time to learn the language reading the official spec, wiki, mailing list discussions, many great posts and presentations by Rob Pike, and the source code. Not everybody starts the same way though and that&amp;rsquo;s OK. If you are new to Go the information here will save you hours debugging your code.&lt;/p&gt;

&lt;p&gt;This post covers Go 1.5 and below.&lt;/p&gt;

&lt;h3 id=&#34;total-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Total Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;Unused Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;Unused Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;Redeclaring Variables Using Short Variable Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;Accidental Variable Shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8&#34;&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#10&#34;&gt;Map Capacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#11&#34;&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12&#34;&gt;Array Function Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13&#34;&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#14&#34;&gt;Slices and Arrays Are One-Dimensional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#15&#34;&gt;Accessing Non-Existing Map Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#16&#34;&gt;Strings Are Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#17&#34;&gt;Conversions Between Strings and Byte Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#18&#34;&gt;Strings and Index Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#19&#34;&gt;Strings Are Not Always UTF8 Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#20&#34;&gt;String Length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#21&#34;&gt;Missing Comma In Multi-Line Slice/Array/Map Literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22&#34;&gt;log.Fatal and log.Panic Do More Than Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23&#34;&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24&#34;&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#25&#34;&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#26&#34;&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#27&#34;&gt;Increments and Decrements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#28&#34;&gt;Bitwise NOT Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#29&#34;&gt;Operator Precedence Differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#30&#34;&gt;Unexported Structure Fields Are Not Encoded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#31&#34;&gt;App Exits With Active Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32&#34;&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33&#34;&gt;Sending to an Closed Channel Causes a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#35&#34;&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;intermediate-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Intermediate Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#36&#34;&gt;Closing HTTP Response Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#37&#34;&gt;Closing HTTP Connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#38&#34;&gt;Unmarshalling JSON Numbers into Interface Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#39&#34;&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#40&#34;&gt;Recovering From a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#41&#34;&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;for range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42&#34;&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43&#34;&gt;Slice Data Corruption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#44&#34;&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#45&#34;&gt;Type Declarations and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#46&#34;&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#47&#34;&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#48&#34;&gt;Deferred Function Call Argument Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#49&#34;&gt;Deferred Function Call Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#50&#34;&gt;Failed Type Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#51&#34;&gt;Blocked Goroutines and Resource Leaks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;advanced-beginner:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;Advanced Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#52&#34;&gt;Using Pointer Receiver Methods On Value Instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#53&#34;&gt;Updating Map Value Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#54&#34;&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#55&#34;&gt;Stack and Heap Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#56&#34;&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#57&#34;&gt;Read and Write Operation Reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#58&#34;&gt;Preemptive Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-1-a-opening-brace-can-t-be-placed-on-a-separate-line:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most other languages that use braces you get to choose where you place them. Go is different. You can thank automatic semicolon injection (without lookahead) for this behavior. Yes, Go does have semicolons :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main()  
{ //error, can&#39;t have the opening brace on a separate line
    fmt.Println(&amp;quot;hello there!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(&amp;quot;works!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-2-a-unused-variables:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;2&#34;&gt;&lt;/a&gt;Unused Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have an unused variable your code will fail to compile. There&amp;rsquo;s an exception though. You must use variables you declare inside functions, but it&amp;rsquo;s OK if you have unused global variables. It&amp;rsquo;s also OK to have unused function arguments.&lt;/p&gt;

&lt;p&gt;If you assign a new value to the unused variable your code will still fail to compile. You need to use the variable value somehow to make the compiler happy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var gvar int //not an error

func main() {  
    var one int   //error, unused variable
    two := 2      //error, unused variable
    var three int //error, even though it&#39;s assigned 3 on the next line
    three = 3

    func(unused string) {
        fmt.Println(&amp;quot;Unused arg. No compile error&amp;quot;)
    }(&amp;quot;what?&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox473116179/main.go:6: one declared and not used /tmp/sandbox473116179/main.go:7: two declared and not used /tmp/sandbox473116179/main.go:8: three declared and not used
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var one int
    _ = one

    two := 2
    fmt.Println(two)

    var three int
    three = 3
    one = three

    var four int
    four = four
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to comment out or remove the unused variables :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-3-a-unused-imports:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;3&#34;&gt;&lt;/a&gt;Unused Imports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your code will fail to compile if you import a package without using any of its exported functions, interfaces, structures, or variables.&lt;/p&gt;

&lt;p&gt;If you really need the imported package you can use the blank identifier, _ , as its package name to avoid this compilation failure. The blank identifier is used to import packages for their side effects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox627475386/main.go:4: imported and not used: &amp;quot;fmt&amp;quot; /tmp/sandbox627475386/main.go:5: imported and not used: &amp;quot;log&amp;quot; /tmp/sandbox627475386/main.go:6: imported and not used: &amp;quot;time&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    _ &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = log.Println

func main() {  
    _ = time.Now
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to remove or comment out the unused imports :-) The goimports tool can help you with that.&lt;/p&gt;

&lt;h3 id=&#34;a-name-4-a-short-variable-declarations-can-be-used-only-inside-functions:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;4&#34;&gt;&lt;/a&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

myvar := 1 //error

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox265716165/main.go:3: non-declaration statement outside function body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var myvar = 1

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-5-a-redeclaring-variables-using-short-variable-declarations:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;5&#34;&gt;&lt;/a&gt;Redeclaring Variables Using Short Variable Declarations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t redeclare a variable in a standalone statement, but it is allowed in multi-variable declarations where at least one new variable is also declared.&lt;/p&gt;

&lt;p&gt;The redeclared variable has to be in the same block or you&amp;rsquo;ll end up with a shadowed variable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one := 1 //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox706333626/main.go:5: no new variables on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one, two := 1,2

    one,two = two,one
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-6-a-can-t-use-short-variable-declarations-to-set-field-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;6&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  data.result, err := work() //error
  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:18: non-name data.result on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though there&amp;rsquo;s a ticket to address this gotcha it&amp;rsquo;s unlikely to change because Rob Pike likes it &amp;ldquo;as is&amp;rdquo; :-)&lt;/p&gt;

&lt;p&gt;Use temporary variables or predeclare all your variables and use the standard assignment operator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  var err error
  data.result, err = work() //ok
  if err != nil {
    fmt.Println(err)
    return
  }

  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data) //prints: info: {result:13}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-7-a-accidental-variable-shadowing:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;7&#34;&gt;&lt;/a&gt;Accidental Variable Shadowing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The short variable declaration syntax is so convenient (especially for those coming from a dynamic language) that it&amp;rsquo;s easy to treat it like a regular assignment operation. If you make this mistake in a new code block there will be no compiler error, but your app will not do what you expect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := 1
    fmt.Println(x)     //prints 1
    {
        fmt.Println(x) //prints 1
        x := 2
        fmt.Println(x) //prints 2
    }
    fmt.Println(x)     //prints 1 (bad if you need 2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very common trap even for experienced Go developers. It&amp;rsquo;s easy to make and it could be hard to spot.&lt;/p&gt;

&lt;p&gt;You can use the vet command to find some of these problems. By default, vet will not perform any shadowed variable checks. Make sure to use the -shadow flag: go tool vet -shadow your_file.go&lt;/p&gt;

&lt;p&gt;Note that the vet command will not report all shadowed variables. Use go-nyet for more aggressive shadowed variable detection.&lt;/p&gt;

&lt;h3 id=&#34;a-name-8-a-can-t-use-nil-to-initialize-a-variable-without-an-explicit-type:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;8&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;nil&amp;rdquo; identifier can be used as the &amp;ldquo;zero value&amp;rdquo; for interfaces, functions, pointers, maps, slices, and channels. If you don&amp;rsquo;t specify the variable type the compiler will fail to compile your code because it can&amp;rsquo;t guess the type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x = nil //error

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox188239583/main.go:4: use of untyped nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x interface{} = nil

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-9-a-using-nil-slices-and-maps:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;9&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to add items to a &amp;ldquo;nil&amp;rdquo; slice, but doing the same with a map will produce a runtime panic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var s []int
    s = append(s,1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var m map[string]int
    m[&amp;quot;one&amp;quot;] = 1 //error

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-10-a-map-capacity:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;10&#34;&gt;&lt;/a&gt;Map Capacity&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can specify the map capacity when it&amp;rsquo;s created, but you can&amp;rsquo;t use the cap() function on maps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    m := make(map[string]int,99)
    cap(m) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox326543983/main.go:5: invalid argument m (type map[string]int) for cap
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-11-a-strings-can-t-be-nil:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;11&#34;&gt;&lt;/a&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha for developers who are used to assigning &amp;ldquo;nil&amp;rdquo; identifiers to string variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string = nil //error

    if x == nil { //error
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment /tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string //defaults to &amp;quot;&amp;quot; (zero value)

    if x == &amp;quot;&amp;quot; {
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-12-a-array-function-arguments:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;12&#34;&gt;&lt;/a&gt;Array Function Arguments&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr [3]int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [1 2 3] (not ok if you need [7 2 3])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original array data use array pointer types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr *[3]int) {
        (*arr)[0] = 7
        fmt.Println(arr) //prints &amp;amp;[7 2 3]
    }(&amp;amp;x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []int{1,2,3}

    func(arr []int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-13-a-unexpected-values-in-slice-and-array-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;13&#34;&gt;&lt;/a&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can happen if you are used to the &amp;ldquo;for-in&amp;rdquo; or &amp;ldquo;foreach&amp;rdquo; statements in other languages. The &amp;ldquo;range&amp;rdquo; clause in Go is different. It generates two values: the first value is the item index while the second value is the item data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for v := range x {
        fmt.Println(v) //prints 0, 1, 2
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for _, v := range x {
        fmt.Println(v) //prints a, b, c
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-14-a-slices-and-arrays-are-one-dimensional:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;14&#34;&gt;&lt;/a&gt;Slices and Arrays Are One-Dimensional&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may seem like Go supports multi-dimensional arrays and slices, but it doesn&amp;rsquo;t. Creating arrays of arrays or slices of slices is possible though. For numerical computation apps that rely on dynamic multi-dimensional arrays it&amp;rsquo;s far from ideal in terms of performance and complexity.&lt;/p&gt;

&lt;p&gt;You can build dynamic multi-dimensional arrays using raw one-dimensional arrays, slices of &amp;ldquo;independent&amp;rdquo; slices, and slices of &amp;ldquo;shared data&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;If you are using raw one-dimensional arrays you are responsible for indexing, bounds checking, and memory reallocations when the arrays need to grow.&lt;/p&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;independent&amp;rdquo; slices is a two step process. First, you have to create the outer slice. Then, you have to allocate each inner slice. The inner slices are independent of each other. You can grow and shrink them without affecting other inner slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := 2
    y := 4

    table := make([][]int,x)
    for i:= range table {
        table[i] = make([]int,y)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;shared data&amp;rdquo; slices is a three step process. First, you have to create the data &amp;ldquo;container&amp;rdquo; slice that will hold raw data. Then, you create the outer slice. Finally, you initialize each inner slice by reslicing the raw data slice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    h, w := 2, 4

    raw := make([]int,h*w)
    for i := range raw {
        raw[i] = i
    }
    fmt.Println(raw,&amp;amp;raw[4])
    //prints: [0 1 2 3 4 5 6 7] &amp;lt;ptr_addr_x&amp;gt;

    table := make([][]int,h)
    for i:= range table {
        table[i] = raw[i*w:i*w + w]
    }

    fmt.Println(table,&amp;amp;table[1][0])
    //prints: [[0 1 2 3] [4 5 6 7]] &amp;lt;ptr_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a spec/proposal for multi-dimensional arrays and slices, but it looks like it&amp;rsquo;s a low priority feature at this point in time.&lt;/p&gt;

&lt;h3 id=&#34;a-name-15-a-accessing-non-existing-map-keys:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;15&#34;&gt;&lt;/a&gt;Accessing Non-Existing Map Keys&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner
This is a gotcha for developers who expect to get &amp;ldquo;nil&amp;rdquo; identifiers (like it&amp;rsquo;s done in other languages). The returned value will be &amp;ldquo;nil&amp;rdquo; if the &amp;ldquo;zero value&amp;rdquo; for the corresponding data type is &amp;ldquo;nil&amp;rdquo;, but it&amp;rsquo;ll be different for other data types. Checking for the appropriate &amp;ldquo;zero value&amp;rdquo; can be used to determine if the map record exists, but it&amp;rsquo;s not always reliable (e.g., what do you do if you have a map of booleans where the &amp;ldquo;zero value&amp;rdquo; is false). The most reliable way to know if a given map record exists is to check the second value returned by the map access operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if v := x[&amp;quot;two&amp;quot;]; v == &amp;quot;&amp;quot; { //incorrect
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if _,ok := x[&amp;quot;two&amp;quot;]; !ok {
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-16-a-strings-are-immutable:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;16&#34;&gt;&lt;/a&gt;Strings Are Immutable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trying to update an individual character in a string variable using the index operator will result in a failure. Strings are read-only byte slices (with a few extra properties). If you do need to update a string then use a byte slice instead converting it to a string type when necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    x[0] = &#39;T&#39;

    fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox305565531/main.go:7: cannot assign to x[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    xbytes := []byte(x)
    xbytes[0] = &#39;T&#39;

    fmt.Println(string(xbytes)) //prints Text
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn&amp;rsquo;t really the right way to update characters in a text string because a given character could be stored in multiple bytes. If you do need to make updates to a text string convert it to a rune sclice first. Even with rune slices a single character might span multiple runes, which can happen if you have characters with grave accent, for example. This complicated and ambiguous nature of &amp;ldquo;characters&amp;rdquo; is the reason why Go strings are represented as byte sequences.&lt;/p&gt;

&lt;h3 id=&#34;a-name-17-a-conversions-between-strings-and-byte-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;17&#34;&gt;&lt;/a&gt;Conversions Between Strings and Byte Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you convert a string to a byte slice (and vice versa) you get a complete copy of the orginal data. It&amp;rsquo;s not like a cast operation in other languages and it&amp;rsquo;s not like reslicing where the new slice variable points to the same underlying array used by the original byte slice.&lt;/p&gt;

&lt;p&gt;Go does have a couple of optimizations for []byte to string and string to []byte conversions to avoid extra allocations (with more optimizations on the todo list).&lt;/p&gt;

&lt;p&gt;The first optimization avoids extra allocations when []byte keys are used to lookup entries in map[string] collections: m[string(key)].&lt;/p&gt;

&lt;p&gt;The second optimization avoids extra allocations in for range clauses where strings are converted to []byte: for i,v := range []byte(str) {&amp;hellip;}.&lt;/p&gt;

&lt;h3 id=&#34;a-name-18-a-strings-and-index-operator:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;18&#34;&gt;&lt;/a&gt;Strings and Index Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index operator on a string returns a byte value, not a character (like it&amp;rsquo;s done in other languages).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    fmt.Println(x[0]) //print 116
    fmt.Printf(&amp;quot;%T&amp;quot;,x[0]) //prints uint8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to access specific string &amp;ldquo;characters&amp;rdquo; (unicode code points/runes) use the for range clause. The official &amp;ldquo;unicode/utf8&amp;rdquo; package and the experimental utf8string package (golang.org/x/exp/utf8string) are also useful. The utf8string package includes a convenient At() method. Converting the string to a slice of runes is an option too.&lt;/p&gt;

&lt;h3 id=&#34;a-name-19-a-strings-are-not-always-utf8-text:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;19&#34;&gt;&lt;/a&gt;Strings Are Not Always UTF8 Text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;String values are not required to be UTF8 text. They can contain arbitrary bytes. The only time strings are UTF8 is when string literals are used. Even then they can include other data using escape sequences.&lt;/p&gt;

&lt;p&gt;To know if you have a UTF8 text string use the ValidString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data1 := &amp;quot;ABC&amp;quot;
    fmt.Println(utf8.ValidString(data1)) //prints: true

    data2 := &amp;quot;A\xfeC&amp;quot;
    fmt.Println(utf8.ValidString(data2)) //prints: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-20-a-string-length:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;20&#34;&gt;&lt;/a&gt;String Length&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you are a python developer and you have the following piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data = u&#39;♥&#39;  
print(len(data)) #prints: 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you convert it to a similar Go code snippet you might be surprised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(len(data)) //prints: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in len() function returns the number of bytes instead of the number of characters like it&amp;rsquo;s done for unicode strings in Python.&lt;/p&gt;

&lt;p&gt;To get the same results in Go use the RuneCountInString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(utf8.RuneCountInString(data)) //prints: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically the RuneCountInString() function doesn&amp;rsquo;t return the number of characters because a single character may span multiple runes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;é&amp;quot;
    fmt.Println(len(data))                    //prints: 3
    fmt.Println(utf8.RuneCountInString(data)) //prints: 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-21-a-missing-comma-in-multi-line-slice-array-and-map-literals:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;21&#34;&gt;&lt;/a&gt;Missing Comma In Multi-Line Slice, Array, and Map Literals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2 //error
    }
    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox367520156/main.go:6: syntax error: need trailing comma before newline in composite literal /tmp/sandbox367520156/main.go:8: non-declaration statement outside function body /tmp/sandbox367520156/main.go:9: syntax error: unexpected }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2,
    }
    x = x

    y := []int{3,4,} //no error
    y = y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You won&amp;rsquo;t get a compiler error if you leave the trailing comma when you collapse the declaration to be on a single line.&lt;/p&gt;

&lt;h3 id=&#34;a-name-22-a-log-fatal-and-log-panic-do-more-than-log:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;22&#34;&gt;&lt;/a&gt;log.Fatal and log.Panic Do More Than Log&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logging libraries often provide different log levels. Unlike those logging libraries, the log package in Go does more than log if you call its Fatal&lt;em&gt;() and Panic&lt;/em&gt;() functions. When your app calls those functions Go will also terminate your app :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;log&amp;quot;

func main() {  
    log.Fatalln(&amp;quot;Fatal Level: log entry&amp;quot;) //app exits here
    log.Println(&amp;quot;Normal Level: log entry&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-23-a-built-in-data-structure-operations-are-not-synchronized:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;23&#34;&gt;&lt;/a&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though Go has a number of features to support concurrency natively, concurrency safe data collections are not one them :-) It&amp;rsquo;s your responsibility to ensure the data collection updates are atomic. Goroutines and channels are the recommended way to implement those atomic operations, but you can also leverage the &amp;ldquo;sync&amp;rdquo; package if it makes sense for your application.&lt;/p&gt;

&lt;h3 id=&#34;a-name-24-a-iteration-values-for-strings-in-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;24&#34;&gt;&lt;/a&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index value (the first value returned by the &amp;ldquo;range&amp;rdquo; operation) is the index of the first byte for the current &amp;ldquo;character&amp;rdquo; (unicode code point/rune) returned in the second value. It&amp;rsquo;s not the index for the current &amp;ldquo;character&amp;rdquo; like it&amp;rsquo;s done in other languages. Note that an actual character might be represented by multiple runes. Make sure to check out the &amp;ldquo;norm&amp;rdquo; package (golang.org/x/text/unicode/norm) if you need to work with characters.&lt;/p&gt;

&lt;p&gt;The for range clauses with string variables will try to interpret the data as UTF8 text. For any byte sequences it doesn&amp;rsquo;t understand it will return 0xfffd runes (aka unicode replacement characters) instead of the actual data. If you have arbitrary (non-UTF8 text) data stored in your string variables, make sure to convert them to byte slices to get all stored data as is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;A\xfe\x02\xff\x04&amp;quot;
    for _,v := range data {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)

    fmt.Println()
    for _,v := range []byte(data) {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfe 0x2 0xff 0x4 (good)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-25-a-iterating-through-a-map-using-a-for-range-clause:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;25&#34;&gt;&lt;/a&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha if you expect the items to be in a certain order (e.g., ordered by the key value). Each map iteration will produce different results. The Go runtime tries to go an extra mile randomizing the iteration order, but it doesn&amp;rsquo;t always succeed so you may get several identical map iterations. Don&amp;rsquo;t be surprised to see 5 identical iterations in a row.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    m := map[string]int{&amp;quot;one&amp;quot;:1,&amp;quot;two&amp;quot;:2,&amp;quot;three&amp;quot;:3,&amp;quot;four&amp;quot;:4}
    for k,v := range m {
        fmt.Println(k,v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you use the Go Playground (&lt;a href=&#34;https://play.golang.org/&#34;&gt;https://play.golang.org/&lt;/a&gt;) you&amp;rsquo;ll always get the same results because it doesn&amp;rsquo;t recompile the code unless you make a change.&lt;/p&gt;

&lt;h3 id=&#34;a-name-26-a-fallthrough-behavior-in-switch-statements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;26&#34;&gt;&lt;/a&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;case&amp;rdquo; blocks in &amp;ldquo;switch&amp;rdquo; statements break by default. This is different from other languages where the default behavior is to fall through to the next &amp;ldquo;case&amp;rdquo; block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;: //error
        case &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can force the &amp;ldquo;case&amp;rdquo; blocks to fall through by using the &amp;ldquo;fallthrough&amp;rdquo; statement at the end of each &amp;ldquo;case&amp;rdquo; block. You can also rewrite your switch statement to use expression lists in the &amp;ldquo;case&amp;rdquo; blocks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;, &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints true (ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-27-a-increments-and-decrements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;27&#34;&gt;&lt;/a&gt;Increments and Decrements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages have increment and decrement operators. Unlike other languages, Go doesn&amp;rsquo;t support the prefix version of the operations. You also can&amp;rsquo;t use these two operators in expressions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    ++i //error
    fmt.Println(data[i++]) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox101231828/main.go:8: syntax error: unexpected ++ /tmp/sandbox101231828/main.go:9: syntax error: unexpected ++, expecting :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    i++
    fmt.Println(data[i])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-28-a-bitwise-not-operator:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;28&#34;&gt;&lt;/a&gt;Bitwise NOT Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages use ~ as the unary NOT operator (aka bitwise complement), but Go reuses the XOR operator (^) for that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(~2) //error
}
Compile Error:

/tmp/sandbox965529189/main.go:6: the bitwise complement operator is ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var d uint8 = 2
    fmt.Printf(&amp;quot;%08b\n&amp;quot;,^d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go still uses ^ as the XOR operator, which may be confusing for some people.&lt;/p&gt;

&lt;p&gt;If you want you can represent a unary NOT operation (e.g, NOT 0x02) with a binary XOR operation (e.g., 0x02 XOR 0xff). This could explain why ^ is reused to represent unary NOT operations.&lt;/p&gt;

&lt;p&gt;Go also has a special &amp;lsquo;AND NOT&amp;rsquo; bitwise operator (&amp;amp;^), which adds to the NOT operator confusion. It looks like a special feature/hack to support A AND (NOT B) without requiring parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var a uint8 = 0x82
    var b uint8 = 0x02
    fmt.Printf(&amp;quot;%08b [A]\n&amp;quot;,a)
    fmt.Printf(&amp;quot;%08b [B]\n&amp;quot;,b)

    fmt.Printf(&amp;quot;%08b (NOT B)\n&amp;quot;,^b)
    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [B XOR 0xff]\n&amp;quot;,b,0xff,b ^ 0xff)

    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [A XOR B]\n&amp;quot;,a,b,a ^ b)
    fmt.Printf(&amp;quot;%08b &amp;amp; %08b = %08b [A AND B]\n&amp;quot;,a,b,a &amp;amp; b)
    fmt.Printf(&amp;quot;%08b &amp;amp;^%08b = %08b [A &#39;AND NOT&#39; B]\n&amp;quot;,a,b,a &amp;amp;^ b)
    fmt.Printf(&amp;quot;%08b&amp;amp;(^%08b)= %08b [A AND (NOT B)]\n&amp;quot;,a,b,a &amp;amp; (^b))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-29-a-operator-precedence-differences:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;29&#34;&gt;&lt;/a&gt;Operator Precedence Differences&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from the &amp;ldquo;bit clear&amp;rdquo; operators (&amp;amp;^) Go has a set of standard operators shared by many other languages. The operator precedence is not always the same though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Printf(&amp;quot;0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; %#x\n&amp;quot;,0x2 &amp;amp; 0x2 + 0x4)
    //prints: 0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; 0x6
    //Go:    (0x2 &amp;amp; 0x2) + 0x4
    //C++:    0x2 &amp;amp; (0x2 + 0x4) -&amp;gt; 0x2

    fmt.Printf(&amp;quot;0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; %#x\n&amp;quot;,0x2 + 0x2 &amp;lt;&amp;lt; 0x1)
    //prints: 0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x6
    //Go:     0x2 + (0x2 &amp;lt;&amp;lt; 0x1)
    //C++:   (0x2 + 0x2) &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x8

    fmt.Printf(&amp;quot;0xf | 0x2 ^ 0x2 -&amp;gt; %#x\n&amp;quot;,0xf | 0x2 ^ 0x2)
    //prints: 0xf | 0x2 ^ 0x2 -&amp;gt; 0xd
    //Go:    (0xf | 0x2) ^ 0x2
    //C++:    0xf | (0x2 ^ 0x2) -&amp;gt; 0xf
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-30-a-unexported-structure-fields-are-not-encoded:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;30&#34;&gt;&lt;/a&gt;Unexported Structure Fields Are Not Encoded&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The struct fields starting with lowercase letters will not be (json, xml, gob, etc.) encoded, so when you decode the structure you&amp;rsquo;ll end up with zero values in those unexported fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

type MyData struct {  
    One int
    two string
}

func main() {  
    in := MyData{1,&amp;quot;two&amp;quot;}
    fmt.Printf(&amp;quot;%#v\n&amp;quot;,in) //prints main.MyData{One:1, two:&amp;quot;two&amp;quot;}

    encoded,_ := json.Marshal(in)
    fmt.Println(string(encoded)) //prints {&amp;quot;One&amp;quot;:1}

    var out MyData
    json.Unmarshal(encoded,&amp;amp;out)

    fmt.Printf(&amp;quot;%#v\n&amp;quot;,out) //prints main.MyData{One:1, two:&amp;quot;&amp;quot;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-31-a-app-exits-with-active-goroutines:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;31&#34;&gt;&lt;/a&gt;App Exits With Active Goroutines&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app will not wait for all your goroutines to complete. This is a common mistake for beginners in general. Everybody starts somewhere, so there&amp;rsquo;s no shame in making rookie mistakes :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        go doit(i)
    }
    time.Sleep(1 * time.Second)
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    time.Sleep(3 * time.Second)
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[1] is running
all done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the most common solutions is to use a &amp;ldquo;WaitGroup&amp;rdquo; variable. It will allow the main goroutine to wait until all worker goroutines are done. If your app has long running workers with message processing loops you&amp;rsquo;ll also need a way to signal those goroutines that it&amp;rsquo;s time to exit. You can send a &amp;ldquo;kill&amp;rdquo; message to each worker. Another option is to close a channel all workers are receiving from. It&amp;rsquo;s a simple way to signal all goroutines at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,done,wg)
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int,done &amp;lt;-chan struct{},wg sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    &amp;lt;- done
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this app you&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[0] is done
[1] is running
[1] is done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the workers are done before the main goroutine exists. Great! However, you&amp;rsquo;ll also see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fatal error: all goroutines are asleep - deadlock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not so great :-) What&amp;rsquo;s going on? Why is there a deadlock? The workers exited and they executed wg.Done(). The app should work.&lt;/p&gt;

&lt;p&gt;The deadlock happens because each worker gets a copy of the original &amp;ldquo;WaitGroup&amp;rdquo; variable. When workers execute wg.Done() it has no effect on the &amp;ldquo;WaitGroup&amp;rdquo; variable in the main goroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    wq := make(chan interface{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,wq,done,&amp;amp;wg)
    }

    for i := 0; i &amp;lt; workerCount; i++ {
        wq &amp;lt;- i
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int, wq &amp;lt;-chan interface{},done &amp;lt;-chan struct{},wg * sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    for {
        select {
        case m := &amp;lt;- wq:
            fmt.Printf(&amp;quot;[%v] m =&amp;gt; %v\n&amp;quot;,workerId,m)
        case &amp;lt;- done:
            fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
            return
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it works as expected :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-32-a-sending-to-an-unbuffered-channel-returns-as-soon-as-the-target-receiver-is-ready:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;32&#34;&gt;&lt;/a&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sender will not be blocked until your message is processed by the receiver. Depending on the machine where you are running the code, the receiver goroutine may or may not have enough time to process the message before the sender continues its execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    ch := make(chan string)

    go func() {
        for m := range ch {
            fmt.Println(&amp;quot;processed:&amp;quot;,m)
        }
    }()

    ch &amp;lt;- &amp;quot;cmd.1&amp;quot;
    ch &amp;lt;- &amp;quot;cmd.2&amp;quot; //won&#39;t be processed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-33-a-sending-to-an-closed-channel-causes-a-panic:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;33&#34;&gt;&lt;/a&gt;Sending to an Closed Channel Causes a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Receiving from a closed channel is safe. The ok return value in a receive statement will be set to false indicating that no data was received. If you are receiving from a buffered channel you&amp;rsquo;ll get the buffered data first and once it&amp;rsquo;s empty the ok return value will be false.&lt;/p&gt;

&lt;p&gt;Sending data to a closed channel causes a panic. It is a documented behavior, but it&amp;rsquo;s not very intuitive for new Go developers who might expect the send behavior to be similar to the receive behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get the first result
    fmt.Println(&amp;lt;-ch)
    close(ch) //not ok (you still have other senders)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on your application the fix will be different. It might be a minor code change or it might require a change in your application design. Either way, you&amp;rsquo;ll need to make sure your application doesn&amp;rsquo;t try to send data to a closed channel.&lt;/p&gt;

&lt;p&gt;The buggy example can be fixed by using a special cancellation channel to signal the remaining workers that their results are no longer neeeded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    done := make(chan struct{})
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            select {
            case ch &amp;lt;- (idx + 1) * 2: fmt.Println(idx,&amp;quot;sent result&amp;quot;)
            case &amp;lt;- done: fmt.Println(idx,&amp;quot;exiting&amp;quot;)
            }
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    close(done)
    //do other work
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-34-a-using-nil-channels:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;34&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send and receive operations on a nil channel block forver. It&amp;rsquo;s a well documented behavior, but it can be a surprise for new Go developers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    var ch chan int
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the code you&amp;rsquo;ll see a runtime error like this: fatal error: all goroutines are asleep - deadlock!&lt;/p&gt;

&lt;p&gt;This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;  
import &amp;quot;time&amp;quot;

func main() {  
    inch := make(chan int)
    outch := make(chan int)

    go func() {
        var in &amp;lt;- chan int = inch
        var out chan &amp;lt;- int
        var val int
        for {
            select {
            case out &amp;lt;- val:
                out = nil
                in = inch
            case val = &amp;lt;- in:
                out = outch
                in = nil
            }
        }
    }()

    go func() {
        for r := range outch {
            fmt.Println(&amp;quot;result:&amp;quot;,r)
        }
    }()

    time.Sleep(0)
    inch &amp;lt;- 1
    inch &amp;lt;- 2
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-35-a-methods-with-value-receivers-can-t-change-the-original-value:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;35&#34;&gt;&lt;/a&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Method receivers are like regular function arguments. If it&amp;rsquo;s declared to be a value then your function/method gets a copy of your receiver argument. This means making changes to the receiver will not affect the original value unless your receiver is a map or slice variable and you are updating the items in the collection or the fields you are updating in the receiver are pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    key *string
    items map[string]bool
}

func (this *data) pmethod() {  
    this.num = 7
}

func (this data) vmethod() {  
    this.num = 8
    *this.key = &amp;quot;v.key&amp;quot;
    this.items[&amp;quot;vmethod&amp;quot;] = true
}

func main() {  
    key := &amp;quot;key.1&amp;quot;
    d := data{1,&amp;amp;key,make(map[string]bool)}

    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=1 key=key.1 items=map[]

    d.pmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=key.1 items=map[]

    d.vmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=v.key items=map[vmethod:true]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-36-a-closing-http-response-body:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;36&#34;&gt;&lt;/a&gt;Closing HTTP Response Body&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you make requests using the standard http library you get a http response variable. If you don&amp;rsquo;t read the response body you still need to close it. Note that you must do it for empty responses too. It&amp;rsquo;s very easy to forget especially for new Go developers.&lt;/p&gt;

&lt;p&gt;Some new Go developers do try to close the response body, but they do it in the wrong place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    defer resp.Body.Close()//not ok
    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code works for successful requests, but if the http request fails the resp variable might be nil, which will cause a runtime panic.&lt;/p&gt;

&lt;p&gt;The most common why to close the response body is by using a defer call after the http response error check.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if err != nil {
        fmt.Println(err)
        return
    }

    defer resp.Body.Close()//ok, most of the time :-)
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time when your http request fails the resp variable will be nil and the err variable will be non-nil. However, when you get a redirection failure both variables will be non-nil. This means you can still end up with a leak.&lt;/p&gt;

&lt;p&gt;You can fix this leak by adding a call to close non-nil response bodies in the http response error handling block. Another option is to use one defer call to close response bodies for all failed and successful requests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The orignal implementation for resp.Body.Close() also reads and discards the remaining response body data. This ensured that the http connection could be reused for another request if the keepalive http connection behavior is enabled. The latest http client behavior is different. Now it&amp;rsquo;s your responsibility to read and discard the remaining response data. If you don&amp;rsquo;t do it the http connection might be closed instead of being reused. This little gotcha is supposed to be documented in Go 1.5.&lt;/p&gt;

&lt;p&gt;If reusing the http connection is important for your application you might need to add something like this at the end of your response processing logic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_, err = io.Copy(ioutil.Discard, resp.Body)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will be necessary if you don&amp;rsquo;t read the entire response body right away, which might happen if you are processing json API responses with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;json.NewDecoder(resp.Body).Decode(&amp;amp;data)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-37-a-closing-http-connections:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;37&#34;&gt;&lt;/a&gt;Closing HTTP Connections&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some HTTP servers keep network connections open for a while (based on the HTTP 1.1 spec and the server &amp;ldquo;keep-alive&amp;rdquo; configurations). By default, the standard http library will close the network connections only when the target HTTP server asks for it. This means your app may run out of sockets/file descriptors under certain conditions.&lt;/p&gt;

&lt;p&gt;You can ask the http library to close the connection after your request is done by setting the Close field in the request variable to true.&lt;/p&gt;

&lt;p&gt;Another option is to add a Connection request header and set it to close. The target HTTP server should respond with a Connection: close header too. When the http library sees this response header it will also close the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    req, err := http.NewRequest(&amp;quot;GET&amp;quot;,&amp;quot;http://golang.org&amp;quot;,nil)
    if err != nil {
        fmt.Println(err)
        return
    }

    req.Close = true
    //or do this:
    //req.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)

    resp, err := http.DefaultClient.Do(req)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also disable http connection reuse globally. You&amp;rsquo;ll need to create a custom http transport configuration for it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    tr := &amp;amp;http.Transport{DisableKeepAlives: true}
    client := &amp;amp;http.Client{Transport: tr}

    resp, err := client.Get(&amp;quot;http://golang.org&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(resp.StatusCode)

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you send a lot of requests to the same HTTP server it&amp;rsquo;s ok to keep the network connection open. However, if your app sends one or two requests to many different HTTP servers in a short period of time it&amp;rsquo;s a good idea to close the network connections right after your app receives the responses. Increasing the open file limit might be a good idea too. The correct solution depends on your application though.&lt;/p&gt;

&lt;h3 id=&#34;a-name-38-a-unmarshalling-json-numbers-into-interface-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;38&#34;&gt;&lt;/a&gt;Unmarshalling JSON Numbers into Interface Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Go treats numeric values in JSON as float64 numbers when you decode/unmarshal JSON data into an interface. This means the following code will fail with a panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = result[&amp;quot;status&amp;quot;].(int) //error
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Runtime Panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic: interface conversion: interface is float64, not int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the JSON value you are trying to decode is an integer you have serveral options.&lt;/p&gt;

&lt;p&gt;Option one: use the float value as-is :-)&lt;/p&gt;

&lt;p&gt;Option two: convert the float value to the integer type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = uint64(result[&amp;quot;status&amp;quot;].(float64)) //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option three: use a Decoder type to unmarshal JSON and tell it to represent JSON numbers using the Number interface type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status,_ = result[&amp;quot;status&amp;quot;].(json.Number).Int64() //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the string representation of your Number value to unmarshal it to a different numeric type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status uint64
  if err := json.Unmarshal([]byte(result[&amp;quot;status&amp;quot;].(json.Number).String()), &amp;amp;status); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option four: use a struct type that maps your numeric value to the numeric type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result struct {
    Status uint64 `json:&amp;quot;status&amp;quot;`
  }

  if err := json.NewDecoder(bytes.NewReader(data)).Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Printf(&amp;quot;result =&amp;gt; %+v&amp;quot;,result)
  //prints: result =&amp;gt; {Status:200}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option five: use a struct that maps your numeric value to the json.RawMessage type if you need to defer the value decoding.&lt;/p&gt;

&lt;p&gt;This option is useful if you have to perform conditional JSON field decoding where the field type or structure might change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  records := [][]byte{
    []byte(`{&amp;quot;status&amp;quot;: 200, &amp;quot;tag&amp;quot;:&amp;quot;one&amp;quot;}`),
    []byte(`{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;two&amp;quot;}`),
  }

  for idx, record := range records {
    var result struct {
      StatusCode uint64
      StatusName string
      Status json.RawMessage `json:&amp;quot;status&amp;quot;`
      Tag string             `json:&amp;quot;tag&amp;quot;`
    }

    if err := json.NewDecoder(bytes.NewReader(record)).Decode(&amp;amp;result); err != nil {
      fmt.Println(&amp;quot;error:&amp;quot;, err)
      return
    }

    var sstatus string
    if err := json.Unmarshal(result.Status, &amp;amp;sstatus); err == nil {
      result.StatusName = sstatus
    }

    var nstatus uint64
    if err := json.Unmarshal(result.Status, &amp;amp;nstatus); err == nil {
      result.StatusCode = nstatus
    }

    fmt.Printf(&amp;quot;[%v] result =&amp;gt; %+v\n&amp;quot;,idx,result)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-39-a-comparing-structs-arrays-slices-and-maps:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;39&#34;&gt;&lt;/a&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the equality operator, ==, to compare struct variables if each structure field can be compared with the equality operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    fp float32
    complex complex64
    str string
    char rune
    yes bool
    events &amp;lt;-chan string
    handler interface{}
    ref *byte
    raw [10]byte
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2) //prints: v1 == v2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of the struct fields are not comparable then using the equality operator will result in compile time errors. Note that arrays are comparable only if their data items are comparable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go does provide a number of helper functions to compare variables that can&amp;rsquo;t be compared using the comparison operators.&lt;/p&gt;

&lt;p&gt;The most generic solution is to use the DeepEqual() function in the reflect package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true

    m1 := map[string]string{&amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;}
    m2 := map[string]string{&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;}
    fmt.Println(&amp;quot;m1 == m2:&amp;quot;,reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true

    s1 := []int{1, 2, 3}
    s2 := []int{1, 2, 3}
    fmt.Println(&amp;quot;s1 == s2:&amp;quot;,reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from being slow (which may or may not be a deal breaker for your application), DeepEqual() also has its own gotchas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,reflect.DeepEqual(b1, b2)) //prints: b1 == b2: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() doesn&amp;rsquo;t consider an empty slice to be equal to a &amp;ldquo;nil&amp;rdquo; slice. This behavior is different from the behavior you get using the bytes.Equal() function. bytes.Equal() considers &amp;ldquo;nil&amp;rdquo; and empty slices to be equal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,bytes.Equal(b1, b2)) //prints: b1 == b2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() isn&amp;rsquo;t always perfect comparing slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

func main() {  
    var str string = &amp;quot;one&amp;quot;
    var in interface{} = &amp;quot;one&amp;quot;
    fmt.Println(&amp;quot;str == in:&amp;quot;,str == in,reflect.DeepEqual(str, in))
    //prints: str == in: true true

    v1 := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    v2 := []interface{}{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1, v2))
    //prints: v1 == v2: false (not ok)

    data := map[string]interface{}{
        &amp;quot;code&amp;quot;: 200,
        &amp;quot;value&amp;quot;: []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;},
    }
    encoded, _ := json.Marshal(data)
    var decoded map[string]interface{}
    json.Unmarshal(encoded, &amp;amp;decoded)
    fmt.Println(&amp;quot;data == decoded:&amp;quot;,reflect.DeepEqual(data, decoded))
    //prints: data == decoded: false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your byte slices (or strings) contain text data you might be tempted to use ToUpper() or ToLower() from the &amp;ldquo;bytes&amp;rdquo; and &amp;ldquo;strings&amp;rdquo; packages when you need to compare values in a case insensitive manner (before using ==,bytes.Equal(), or bytes.Compare()). It will work for English text, but it will not work for text in many other languages. strings.EqualFold() and bytes.EqualFold() should be used instead.&lt;/p&gt;

&lt;p&gt;If your byte slices contain secrets (e.g., cryptographic hashes, tokens, etc.) that need to be validated against user-provided data, don&amp;rsquo;t use reflect.DeepEqual(), bytes.Equal(), or bytes.Compare() because those functions will make your application vulnerable to timing attacks. To avoid leaking the timing information use the functions from the &amp;lsquo;crypto/subtle&amp;rsquo; package (e.g., subtle.ConstantTimeCompare()).&lt;/p&gt;

&lt;h3 id=&#34;a-name-40-a-recovering-from-a-panic:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;40&#34;&gt;&lt;/a&gt;Recovering From a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recover() function can be used to catch/intercept a panic. Calling recover() will do the trick only when it&amp;rsquo;s done in a deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    recover() //doesn&#39;t do anything
    panic(&amp;quot;not good&amp;quot;)
    recover() //won&#39;t be executed :)
    fmt.Println(&amp;quot;ok&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    defer func() {
        fmt.Println(&amp;quot;recovered:&amp;quot;,recover())
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to recover() works only if it&amp;rsquo;s called directly in your deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func doRecover() {  
    fmt.Println(&amp;quot;recovered =&amp;gt;&amp;quot;,recover()) //prints: recovered =&amp;gt; &amp;lt;nil&amp;gt;
}

func main() {  
    defer func() {
        doRecover() //panic is not recovered
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-41-a-updating-and-referencing-item-values-in-slice-array-and-map-range-clauses:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;41&#34;&gt;&lt;/a&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data values generated in the &amp;ldquo;range&amp;rdquo; clause are copies of the actual collection elements. They are not references to the original items. This means that updating the values will not change the original data. It also means that taking the address of the values will not give you pointers to the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for _,v := range data {
        v *= 10 //original item is not changed
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [1 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original collection record value use the index operator to access the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for i,_ := range data {
        data[i] *= 10
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [10 20 30]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your collection holds pointer values then the rules are slightly different. You still need to use the index operator if you want the original record to point to another value, but you can update the data stored at the target location using the second value in the &amp;ldquo;for range&amp;rdquo; clause.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []*struct{num int} {{1},{2},{3}}

    for _,v := range data {
        v.num *= 10
    }

    fmt.Println(data[0],data[1],data[2]) //prints &amp;amp;{10} &amp;amp;{20} &amp;amp;{30}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-42-a-hidden-data-in-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;42&#34;&gt;&lt;/a&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you reslice a slice, the new slice will reference the array of the original slice. If you forget about this behavior it can lead to unexpected memory usage if your application allocates large temporary slices creating new slices from them to refer to small sections of the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    return raw[:3]
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 10000 &amp;lt;byte_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid this trap make sure to copy the data you need from the temporary slice (instead of reslicing it).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    res := make([]byte,3)
    copy(res,raw[:3])
    return res
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 3 &amp;lt;byte_addr_y&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-43-a-slice-data-corruption:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;43&#34;&gt;&lt;/a&gt;Slice Data &amp;ldquo;Corruption&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you need to rewrite a path (stored in a slice). You reslice the path to reference each directory modifying the first folder name and then you combine the names to create a new path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex]
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; uffixBBBB (not ok)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It didn&amp;rsquo;t work as you expected. Instead of &amp;ldquo;AAAAsuffix/BBBBBBBBB&amp;rdquo; you ended up with &amp;ldquo;AAAAsuffix/uffixBBBB&amp;rdquo;. It happened because both directory slices referenced the same underlying array data from the original path slice. This means that the original path is also modified. Depending on your application this might be a problem too.&lt;/p&gt;

&lt;p&gt;This problem can fixed by allocating new slices and copying the data you need. Another option is to use the full slice expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex:sepIndex] //full slice expression
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB (ok now)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extra parameter in the full slice expression controls the capacity for the new slice. Now appending to that slice will trigger a new buffer allocation instead of overwriting the data in the second slice.&lt;/p&gt;

&lt;h3 id=&#34;a-name-44-a-stale-slices:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;44&#34;&gt;&lt;/a&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multiple slices can reference the same data. This can happen when you create a new slice from an existing slice, for example. If your application relies on this behavior to function properly then you&amp;rsquo;ll need to worry about &amp;ldquo;stale&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;At some point adding data to one of the slices will result in a new array allocation when the original array can&amp;rsquo;t hold any more new data. Now other slices will point to the old array (with old data).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;

func main() {  
    s1 := []int{1,2,3}
    fmt.Println(len(s1),cap(s1),s1) //prints 3 3 [1 2 3]

    s2 := s1[1:]
    fmt.Println(len(s2),cap(s2),s2) //prints 2 2 [2 3]

    for i := range s2 { s2[i] += 20 }

    //still referencing the same array
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [22 23]

    s2 = append(s2,4)

    for i := range s2 { s2[i] += 10 }

    //s1 is now &amp;quot;stale&amp;quot;
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [32 33 14]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-45-type-declarations-and-methods:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;45&#34;&gt;&amp;lt;/&amp;gt;Type Declarations and Methods&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a type declaration by defining a new type from an existing (non-interface) type, you don&amp;rsquo;t inherit the methods defined for that existing type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myMutex sync.Mutex

func main() {  
    var mtx myMutex
    mtx.Lock() //error
    mtx.Unlock() //error  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox106401185/main.go:9: mtx.Lock undefined (type myMutex has no field or method Lock) /tmp/sandbox106401185/main.go:10: mtx.Unlock undefined (type myMutex has no field or method Unlock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do need the methods from the original type you can define a new struct type embedding the original type as an anonymous field.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker struct {  
    sync.Mutex
}

func main() {  
    var lock myLocker
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interface type declarations also retain their method sets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker sync.Locker

func main() {  
    var lock myLocker = new(sync.Mutex)
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-46-a-breaking-out-of-for-switch-and-for-select-code-blocks:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;46&#34;&gt;&lt;/a&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &amp;ldquo;break&amp;rdquo; statement without a label only gets you out of the inner switch/select block. If using a &amp;ldquo;return&amp;rdquo; statement is not an option then defining a label for the outer loop is the next best thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    loop:
        for {
            switch {
            case true:
                fmt.Println(&amp;quot;breaking out...&amp;quot;)
                break loop
            }
        }

    fmt.Println(&amp;quot;out!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &amp;ldquo;goto&amp;rdquo; statement will do the trick too&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;a-name-47-a-iteration-variables-and-closures-in-for-statements:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;47&#34;&gt;&lt;/a&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most common gotcha in Go. The iteration variables in for statements are reused in each iteration. This means that each closure (aka function literal) created in your for loop will reference the same variable (and they&amp;rsquo;ll get that variable&amp;rsquo;s value at the time those goroutines start executing).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func() {
            fmt.Println(v)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest solution (that doesn&amp;rsquo;t require any changes to the goroutine) is to save the current iteration variable value in a local variable inside the for loop block.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        vcopy := v //
        go func() {
            fmt.Println(vcopy)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another solution is to pass the current iteration variable as a parameter to the anonymous goroutine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func(in string) {
            fmt.Println(in)
        }(v)
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a slightly more complicated version of the trap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        v := v
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you think you&amp;rsquo;ll see when you run this code (and why)?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []*field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-48-a-deferred-function-call-argument-evaluation:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;48&#34;&gt;&lt;/a&gt;Deferred Function Call Argument Evaluation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arguments for a deferred function call are evaluated when the defer statement is evaluated (not when the function is actually executing).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var i int = 1

    defer fmt.Println(&amp;quot;result =&amp;gt;&amp;quot;,func() int { return i * 2 }())
    i++
    //prints: result =&amp;gt; 2 (not ok if you expected 4)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-49-a-deferred-function-call-execution:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;49&#34;&gt;&lt;/a&gt;Deferred Function Call Execution&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The deferred calls are executed at the end of the containing function and not at the end of the containing code block. It&amp;rsquo;s an easy mistake to make for new Go developers confusing the deferred code execution rules with the variable scoping rules. It can become a problem if you have a long running function with a for loop that tries to defer resource cleanup calls in each iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        f, err := os.Open(target)
        if err != nil {
            fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err) //prints error: too many open files
            break
        }
        defer f.Close() //will not be closed at the end of this code block
        //do something with the file...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to solve the problem is by wrapping the code block in a function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        func() {
            f, err := os.Open(target)
            if err != nil {
                fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err)
                return
            }
            defer f.Close() //ok
            //do something with the file...
        }()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to get rid of the defer statement :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-50-a-failed-type-assertions:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;50&#34;&gt;&lt;/a&gt;Failed Type Assertions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failed type assertions return the &amp;ldquo;zero value&amp;rdquo; for the target type used in the assertion statement. This can lead to unexpected behavior when it&amp;rsquo;s mixed with variable shadowing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if data, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,data)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; 0 (not &amp;quot;great&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if res, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; great (as expected)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-51-a-blocked-goroutines-and-resource-leaks:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;51&#34;&gt;&lt;/a&gt;Blocked Goroutines and Resource Leaks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rob Pike talked about a number of fundamental concurrency patterns in his &amp;ldquo;Go Concurrency Patterns&amp;rdquo; presentation at Google I/O in 2012. Fetching the first result from a number of targets is one of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function starts a goroutines for each search replica. Each goroutine sends its search result to the result channel. The first value from the result channel is returned.&lt;/p&gt;

&lt;p&gt;What about the results from the other goroutines? What about the goroutines themselves?&lt;/p&gt;

&lt;p&gt;The result channel in the First() function is unbuffered. This means that only the first goroutine returns. All other goroutines are stuck trying to send their results. This means if you have more than one replica each call will leak resources.&lt;/p&gt;

&lt;p&gt;To avoid the leaks you need to make sure all goroutines exit. One potential solution is to use a buffered result channel big enough to hold all results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,len(replicas))
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another potential solution is to use a select statement with a default case and a buffered result channel that can hold one value. The default case ensures that the goroutines don&amp;rsquo;t get stuck even when the result channel can&amp;rsquo;t receive messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,1)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        default:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use a special cancellation channel to interrupt the workers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    done := make(chan struct{})
    defer close(done)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        case &amp;lt;- done:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }

    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why did the presentation contain these bugs? Rob Pike simply didn&amp;rsquo;t want to comlicate the slides. It makes sense, but it can be a problem for new Go developers who would use the code as is without thinking that it might have problems.&lt;/p&gt;

&lt;h3 id=&#34;a-name-52-a-using-pointer-receiver-methods-on-value-instances:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;52&#34;&gt;&lt;/a&gt;Using Pointer Receiver Methods On Value Instances&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to call a pointer receiver method on a value as long as the value is addressable. In other words, you don&amp;rsquo;t need to have a value receiver version of the method in some cases.&lt;/p&gt;

&lt;p&gt;Not every variable is addressable though. Map elements are not addressable. Variables referenced through interfaces are also not addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func (p *data) print() {  
    fmt.Println(&amp;quot;name:&amp;quot;,p.name)
}

type printer interface {  
    print()
}

func main() {  
    d1 := data{&amp;quot;one&amp;quot;}
    d1.print() //ok

    var in printer = data{&amp;quot;two&amp;quot;} //error
    in.print()

    m := map[string]data {&amp;quot;x&amp;quot;:data{&amp;quot;three&amp;quot;}}
    m[&amp;quot;x&amp;quot;].print() //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox017696142/main.go:21: cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver)
/tmp/sandbox017696142/main.go:25: cannot call pointer method on m[&amp;quot;x&amp;quot;] /tmp/sandbox017696142/main.go:25: cannot take the address of m[&amp;quot;x&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-53-a-updating-map-value-fields:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;53&#34;&gt;&lt;/a&gt;Updating Map Value Fields&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a map of struct values you can&amp;rsquo;t update individual struct fields.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox380452744/main.go:9: cannot assign to m[&amp;quot;x&amp;quot;].name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work because map elements are not addressable.&lt;/p&gt;

&lt;p&gt;What can be extra confusing for new Go devs is the fact that slice elements are addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    s := []data {{&amp;quot;one&amp;quot;}}
    s[0].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(s)    //prints: [{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that a while ago it was possible to update map element fields in one of the Go compilers (gccgo), but that behavior was quickly fixed :-) It was also considered as a potential feature for Go 1.3. It wasn&amp;rsquo;t important enough to support at that point in time, so it&amp;rsquo;s still on the todo list.&lt;/p&gt;

&lt;p&gt;The first work around is to use a temporary variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    r := m[&amp;quot;x&amp;quot;]
    r.name = &amp;quot;two&amp;quot;
    m[&amp;quot;x&amp;quot;] = r
    fmt.Printf(&amp;quot;%v&amp;quot;,m) //prints: map[x:{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another workaround is to use a map of pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(m[&amp;quot;x&amp;quot;]) //prints: &amp;amp;{two}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, what happens when you run this code?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;z&amp;quot;].name = &amp;quot;what?&amp;quot; //???
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-54-a-nil-interfaces-and-nil-interfaces-values:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;54&#34;&gt;&lt;/a&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the second most common gotcha in Go because interfaces are not pointers even though they may look like pointers. Interface variables will be &amp;ldquo;nil&amp;rdquo; only when their type and value fields are &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The interface type and value fields are populated based on the type and value of the variable used to create the corresponding interface variable. This can lead to unexpected behavior when you are trying to check if an interface variable equals to &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data *byte
    var in interface{}

    fmt.Println(data,data == nil) //prints: &amp;lt;nil&amp;gt; true
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; true

    in = data
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; false
    //&#39;data&#39; is &#39;nil&#39;, but &#39;in&#39; is not &#39;nil&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch out for this trap when you have a function that returns interfaces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res) //prints: good result: &amp;lt;nil&amp;gt;
        //&#39;res&#39; is not &#39;nil&#39;, but its value is &#39;nil&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        } else {
            return nil //return an explicit &#39;nil&#39;
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;bad result (res is nil)&amp;quot;) //here as expected
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-55-a-stack-and-heap-variables:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;55&#34;&gt;&lt;/a&gt;Stack and Heap Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don&amp;rsquo;t always know if your variable is allocated on the stack or heap. In C++ creating variables using the new operator always means that you have a heap variable. In Go the compiler decides where the variable will be allocated even if the new() or make() functions are used. The compiler picks the location to store the variable based on its size and the result of &amp;ldquo;escape analysis&amp;rdquo;. This also means that it&amp;rsquo;s ok to return references to local variables, which is not ok in other languages like C or C++.&lt;/p&gt;

&lt;p&gt;If you need to know where your variables are allocated pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go run -gcflags -m app.go).&lt;/p&gt;

&lt;h3 id=&#34;a-name-56-a-gomaxprocs-concurrency-and-parallelism:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;56&#34;&gt;&lt;/a&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 1.4 and below uses only one execution context / OS thread. This means that only one goroutine can execute at any given time. Starting with 1.5 Go sets the number of execution contexts to the number of logical CPU cores returned by runtime.NumCPU(). That number may or may not match the total number of logical CPU cores on your system depending on the CPU affinity settings of your process. You can adjust this number by changing the GOMAXPROCS environment variable or by calling the runtime.GOMAXPROCS() function.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a common misconception that GOMAXPROCS represents the number of CPUs Go will use to run goroutines. The runtime.GOMAXPROCS() function documentation adds more to the confusion. The GOMAXPROCS variable description (&lt;a href=&#34;https://golang.org/pkg/runtime/&#34;&gt;https://golang.org/pkg/runtime/&lt;/a&gt;) does a better job talking about OS threads.&lt;/p&gt;

&lt;p&gt;You can set GOMAXPROCS to more than the number of your CPUs. The max value for GOMAXPROCS is 256.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: X (1 on play.golang.org)
    fmt.Println(runtime.NumCPU())       //prints: X (1 on play.golang.org)
    runtime.GOMAXPROCS(20)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 20
    runtime.GOMAXPROCS(300)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 256
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-57-a-read-and-write-operation-reordering:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;57&#34;&gt;&lt;/a&gt;Read and Write Operation Reordering&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go may reorder some operations, but it ensures that the overall behavior in the goroutine where it happens doesn&amp;rsquo;t change. However, it doesn&amp;rsquo;t guarantee the order of execution across multiple goroutines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;runtime&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = runtime.GOMAXPROCS(3)

var a, b int

func u1() {  
    a = 1
    b = 2
}

func u2() {  
    a = 3
    b = 4
}

func p() {  
    println(a)
    println(b)
}

func main() {  
    go u1()
    go u2()
    go p()
    time.Sleep(1 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code a few times you might see these a and b variable combinations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
2

3
4

0
2

0
0

1
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting combination for a and b is &amp;ldquo;02&amp;rdquo;. It shows that b was updated before a.&lt;/p&gt;

&lt;p&gt;If you need to preserve the order of read and write operations across multiple goroutines you&amp;rsquo;ll need to use channels or the appropriate constructs from the &amp;ldquo;sync&amp;rdquo; package.&lt;/p&gt;

&lt;h3 id=&#34;a-name-58-a-preemptive-scheduling:d69ae22d9ee4babfbb2c7eb1d79dc668&#34;&gt;&lt;a name=&#34;58&#34;&gt;&lt;/a&gt;Preemptive Scheduling&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s possible to have a rogue goroutine that prevents other goroutines from running. It can happen if you have a for loop that doesn&amp;rsquo;t allow the scheduler to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for loop doesn&amp;rsquo;t have to be empty. It&amp;rsquo;ll be a problem as long as it contains code that doesn&amp;rsquo;t trigger the scheduler execution.&lt;/p&gt;

&lt;p&gt;The scheduler will run after GC, &amp;ldquo;go&amp;rdquo; statements, blocking channel operations, blocking system calls, and lock operations. It may also run when a non-inlined function is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        fmt.Println(&amp;quot;not done!&amp;quot;) //not inlined
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out if the function you call in the for loop is inlined pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go build -gcflags -m).&lt;/p&gt;

&lt;p&gt;Another option is to invoke the scheduler explicitly. You can do it with the Gosched() function from the &amp;ldquo;runtime&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        runtime.Gosched()
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you made it here and you have comments or ideas feel free to add a note to this Reddit discussion.&lt;/p&gt;

&lt;p&gt;Thank you for your feedback and suggestions!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&#34; title=&#34;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>诚意十足的招聘页面</title>
      <link>http://alimy.me/post/etc_201603152115/</link>
      <pubDate>Tue, 15 Mar 2016 21:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/etc_201603152115/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160315210501.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210501.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160315210502.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210502.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210503.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210503.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210504.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210504.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210505.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210505.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210506.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210506.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210507.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210507.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210508.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210508.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210509.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210509.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210510.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210510.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210511.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210511.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210512.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210512.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210513.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210513.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210514.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210514.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210515.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210515.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210516.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210516.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210517.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210517.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210518.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210518.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://alimy.me/images/post/20160315210519.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160315210519.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to TOML</title>
      <link>http://alimy.me/post/dev_201603132045/</link>
      <pubDate>Sun, 13 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132045/</guid>
      <description>

&lt;h3 id=&#34;overview-of-date-and-calendar-classes:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;TOML stands for Tom’s Own Minimal Language. It is a configuration language vaguely similar to YAML or property lists, but far, far better. But before we get into it in detail, let’s look back at what came before.&lt;/p&gt;

&lt;h3 id=&#34;long-ago-in-a-galaxy-far-far-away:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Long Ago, In A Galaxy Far, Far Away&lt;/h3&gt;

&lt;p&gt;Since the beginning of computing, people have needed a way to configure their software. On Linux, this generally is done in text files. For simple configurations, good old foo = bar works pretty well. One setting per line, name on the left, value on the right, separated by an equals. Great. But when your configuration gets more complicated, this quickly breaks down. What if you need a value that is more than one line? How do you indicate a value should be parsed as a number instead of a string? How do you namespace related configuration values so you don’t need ridiculously long names to prevent collisions?&lt;/p&gt;

&lt;h3 id=&#34;the-dark-ages:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;The Dark Ages&lt;/h3&gt;

&lt;p&gt;In the 90’s, we used XML. And it sucked. XML is verbose, it’s hard for humans to read and write, and it still doesn’t solve a lot of the problems above (like how to specify the type of a value). In addition, the XML spec is huge, processing is very complicated, and all the extra features invite abuse and overcomplication.&lt;/p&gt;

&lt;h3 id=&#34;enlightenment:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Enlightenment&lt;/h3&gt;

&lt;p&gt;In the mid 2000’s, JSON came to popularity as a data exchange format, and it was so much better than XML. It had real types, it was easy for programs to process, and you didn’t have to write a spec on what values should get processed in what way (well, mostly). It was sigificantly less verbose than XML. But it is a format intended for computers to read and write, not humans. It is a pain to write by hand, and even pretty-printed, it can be hard to read and the compact data format turns into a nested mess of curly braces. Also, JSON is not without its problems… for example, there’s no date type, there’s no support for comments, and all numbers are floats.&lt;/p&gt;

&lt;h3 id=&#34;a-false-start:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;A False Start&lt;/h3&gt;

&lt;p&gt;YAML came to popularity some time after JSON as a more human-readable format, and its key: value syntax and pretty indentation is definitely a lot easier on the eyes than JSON’s nested curly-braces. However, YAML trades ease of reading for difficulty in writing. Indentation as delimiters is fraught with error… figuring out how to get multiple lines of data into any random value is an exercise in googling and trial &amp;amp; error.&lt;/p&gt;

&lt;p&gt;The YAML spec is also ridiculously long. 100% compatible parsers are very difficult to write. Writing YAML by hand is a ridden with landmines of corner cases where your choice of names or values happens to hit a reserved word or special marker. It does support comments, though.&lt;/p&gt;

&lt;h3 id=&#34;the-savior:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;The Savior&lt;/h3&gt;

&lt;p&gt;On February 23, 2013, Tom Preston-Werner (former CEO of GitHub) made his first commit to &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;https://github.com/toml-lang/toml&lt;/a&gt;. TOML stands for Tom’s Obvious, Minimal Language. It is a language designed for configuring software. Finally.&lt;/p&gt;

&lt;p&gt;TOML takes inspiration from all of the above (well, except XML) and even gets some of its syntax from Microsoft’s INI files. It is easy to write by hand and easy to read. The spec is short and understandable by mere humans, and it’s fairly easy for computers to parse. It supports comments, has first class dates, and supports both integers and floats. It is generally insensitive to whitespace, without requiring a ton of delimiters.&lt;/p&gt;

&lt;p&gt;Let’s dive in.&lt;/p&gt;

&lt;h3 id=&#34;the-basics:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;The Basics&lt;/h3&gt;

&lt;p&gt;The basic form is key = value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Comments start with hash
foo = &amp;quot;strings are in quotes and are always UTF8 with escape codes: \n \u00E9&amp;quot;

bar = &amp;quot;&amp;quot;&amp;quot;multi-line strings
use three quotes&amp;quot;&amp;quot;&amp;quot;

baz = &#39;literal\strings\use\single\quotes&#39;

bat = &#39;&#39;&#39;multiline\literals\use
three\quotes&#39;&#39;&#39;

int = 5 # integers are just numbers
float = 5.0 # floats have a decimal point with numbers on both sides

date = 2006-05-27T07:32:00Z # dates are ISO 8601 full zulu form

bool = true # good old true and false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One cool point: If the first line of a multiline string (either literal or not) is a line return, it will be trimmed. So you can make your big blocks of text start on the line after the name of the value and not need to worry about the extraneous newline at the beginning of your text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;preabmle = &amp;quot;&amp;quot;&amp;quot;
We the people of the United States, in order to form a more perfect union,
establish justice, insure domestic tranquility, provide for the common defense,
promote the general welfare, and secure the blessings of liberty to ourselves
and our posterity, do ordain and establish this Constitution for the United
States of America.&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lists:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Lists (arrays) are signified with brackets and delimited with commas. Only primitives are allowed in this form, though you may have nested lists. The format is forgiving, ignoring whitespace and newlines, and yes, the last comma is optional (thank you!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo = [ &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;
        &amp;quot;bat&amp;quot;
]

nums = [ 1, 2, ]

nested = [[ &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;], [1, 2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love that the format is forgiving of whitespace and that last comma. I like that the arrays are all of a single type, but allowing mixed types of sub-arrays bugs the heck out of me.&lt;/p&gt;

&lt;h3 id=&#34;now-we-get-crazy:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Now we get crazy&lt;/h3&gt;

&lt;p&gt;What’s left? In JSON there are objects, in YAML there are associative arrays… in common parlance they are maps or dictionaries or hash tables. Named collections of key/value pairs.&lt;/p&gt;

&lt;p&gt;In TOML they are called tables and look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# some config above
[table_name]
foo = 1
bar = 2
Foo and bar are keys in the table called table_name. Tables have to be at the end of the config file. Why? because there’s no end delimiter. All keys under a table declaration are associated with that table, until a new table is declared or the end of the file. So declaring two tables looks like this:

# some config above
[table1]
foo = 1
bar = 2

[table2]
	foo = 1
	baz = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The declaration of table2 defines where table1 ends. Note that you can indent the values if you want, or not. TOML doesn’t care.&lt;/p&gt;

&lt;p&gt;If you want nested tables, you can do that, too. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table1]
	foo = &amp;quot;bar&amp;quot;

[table1.nested_table]
	baz = &amp;quot;bat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nested_table&lt;/code&gt; is defined as a value in &lt;code&gt;table1&lt;/code&gt; because its name starts with &lt;code&gt;table1..&lt;/code&gt; Again, the table goes until the next table definition, so &lt;code&gt;baz=&amp;quot;bat&amp;quot;&lt;/code&gt; is a value in &lt;code&gt;table1.nested_table&lt;/code&gt;. You can indent the nested table to make it more obvious, but again, all whitespace is optional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table1]
	foo = &amp;quot;bar&amp;quot;

	[table1.nested_table]
		baz = &amp;quot;bat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;table1&amp;quot; : {
		&amp;quot;foo&amp;quot; : &amp;quot;bar&amp;quot;,
		&amp;quot;nested_table&amp;quot; : {
			&amp;quot;baz&amp;quot; : &amp;quot;bat&amp;quot;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having to retype the parent table name for each sub-table is kind of annoying, but I do like that it is very explicit. It also means that ordering and indenting and delimiters don’t matter. You don’t have to declare parent tables if they’re empty, so you can do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[foo.bar.baz]
bat = &amp;quot;hi&amp;quot;
Which is the equivalent to this JSON:

{
	&amp;quot;foo&amp;quot; : {
		&amp;quot;bar&amp;quot; : {
			&amp;quot;baz&amp;quot; : {
				&amp;quot;bat&amp;quot; : &amp;quot;hi&amp;quot;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;last-but-not-least:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Last but not least&lt;/h3&gt;

&lt;p&gt;The last thing is arrays of tables, which are declared with double brackets thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[comments]]
author = &amp;quot;Nate&amp;quot;
text = &amp;quot;Great Article!&amp;quot;

[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;
This is equivalent to the JSON:

{
	&amp;quot;comments&amp;quot; : [
		{
			&amp;quot;author&amp;quot; : &amp;quot;Nate&amp;quot;,
			&amp;quot;text&amp;quot; : Great Article!&amp;quot;
		},
		{
			&amp;quot;author&amp;quot; : &amp;quot;Anonymous&amp;quot;,
			&amp;quot;text&amp;quot; : Love It!&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays of tables inside another table get combined in the way you’d expect, like [[table1.array]].&lt;/p&gt;

&lt;p&gt;TOML is very permissive here. Because all tables have very explicitly defined parentage, the order they’re defined in doesn’t matter. You can have tables (and entries in an array of tables) in whatever order you want. This is totally acceptable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;

[foo.bar.baz]
bat = &amp;quot;hi&amp;quot;

[foo.bar]
howdy = &amp;quot;neighbor&amp;quot;

[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it generally makes sense to actually order things in a more organized fashion, but it’s nice that you can’t shoot yourself in the foot if you reorder things “incorrectly”.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:cd783df526b6f2bb60029e89f5bc5f57&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s TOML. It’s pretty awesome.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&#34;https://github.com/toml-lang/toml#implementations&#34; title=&#34;list of parsers&#34;&gt;list of parsers&lt;/a&gt; on the TOML page on github for pretty much whatever language you want. I recommend &lt;a href=&#34;https://github.com/BurntSushi/toml &#39;BurntSushi&#34;&gt;BurntSushi’s for Go&lt;/a&gt;, since it works just like the built-in parsers.&lt;/p&gt;

&lt;p&gt;It is now my default configuration language for all the applications I write.&lt;/p&gt;

&lt;p&gt;The next time you write an application that needs some configuration, take a look at TOML. I think your users will thank you.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://npf.io/2014/08/intro-to-toml/&#34; title=&#34;Intro to TOML&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java: Date And Calendar</title>
      <link>http://alimy.me/post/dev_201603132030/</link>
      <pubDate>Sun, 13 Mar 2016 20:30:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132030/</guid>
      <description>

&lt;h3 id=&#34;overview-of-date-and-calendar-classes:903fa8484a7e080c7a9dddbda27c7bc4&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;In this tutorial we look at the classes in java that are helpful in manipulating dates. Manipulating dates in java can be challenging, especially if you are building applications that cater to multiple timezones. Parsing dates, printing a date in UTC, printing a date in a different timezone, comparing dates, adding time to date&amp;hellip; we will be looking at all of these in this tutorial. We first begin with the introduction to the classes and then follow up with examples. You may want to directly jump to the examples, however, we strongly recommend that you understand the classes first, since that will make the examples very easy to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java.util.Date - This class is used to represent a specific time with a precision of millisecond. If you create a new Date object, it obtains the current system time using System.currentTimeMillis(). This is the number of milliseconds since epoch time (midnight, January 1, 1970 UTC). Here&amp;rsquo;s the tricky part, date stores time as number of seconds since epoch, it is a UTC time. However, when you print the date, you get the string representation of the date in the local timezone. Also note that the Date class is not designed to manipulate hour, month, year etc or retrieve them. Use this class only to create data or compare two dates. For all other uses, see the Calendar or GregorianCalendar class.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.Calendar - Calendar class allows manipulating data using its various fields such as minute, hour, day etc. As in the java.util.Date object, time is represented as number of milliseconds since epoch time. To get an instance of the Calendar use the Calendar.getInstance() method which returns a locale sensitive Calendar instance. Various set and get methods can be used to set and get time values. The current time is represented in two ways - 1. as number of milliseconds since epoch and 2. as local fields such as YEAR, MONTH, DAY, HOUR, MINUTE etc. The conversion between the two types is achieved by using the timezone offset (getOffset()) and the daylight savings fields.&lt;br /&gt;
the MONTH fields starts from 0 (JANUARY).&lt;br /&gt;
The DAY_OF_MONTH starts from 1&lt;br /&gt;
the DAY_OF_WEEK starts from SUNDAY with a value of 1.&lt;br /&gt;
HOUR starts from 0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.GregorialCalendar - A GregorianCalendar is the default implementation of the Abstract Calendar class. Next let us look at examples&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;create-a-date-object-and-print-it:903fa8484a7e080c7a9dddbda27c7bc4&#34;&gt;Create a Date object and print it&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    public void createDateAndPrintIt() {
    // create and prints the current date. It prints the data in the local
    // timezone
    System.out.println(new java.util.Date());
    // prints Sun Jul 28 20:09:36 IST 2013
    // get the number of milli seconds since epock
    System.out.println(new java.util.Date().getTime());
    // prints 1375022617792
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-an-instance-of-calendar-object-and-print-it:903fa8484a7e080c7a9dddbda27c7bc4&#34;&gt;get an instance of Calendar object and print it&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public void createCalendarAndPrintIt() {
    Calendar cal = Calendar.getInstance();
    System.out.println(cal);
    // java.util.GregorianCalendar[time=1375025205859,areFieldsSet=true,areAllFieldsSet=true,lenient=true,
    // zone=sun.util.calendar.ZoneInfo[id=&amp;quot;Asia/Calcutta&amp;quot;,offset=19800000,dstSavings=0,useDaylight=false,transitions=6,lastRule=null],
    // firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,
    // DAY_OF_YEAR=209,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=56,SECOND=45,MILLISECOND=859,ZONE_OFFSET=19800000,DST_OFFSET=0]
    System.out.println(cal.getTime());
    // prints Sun Jul 28 20:56:45 IST 2013
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;manipulate-calendar:903fa8484a7e080c7a9dddbda27c7bc4&#34;&gt;Manipulate Calendar&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public void manipulateCalendar() {
    Calendar cal = Calendar.getInstance();
    System.out.println(cal.getTime());// Sun Jul 28 21:53:55 IST 2013
    // add a day
    cal.add(Calendar.DAY_OF_MONTH, 1);
    System.out.println(cal.getTime());// Mon Jul 29 21:53:55 IST 2013
    cal.add(Calendar.DAY_OF_WEEK, 1);
    System.out.println(cal.getTime());// Tue Jul 30 21:53:55 IST 2013
    cal.add(Calendar.HOUR, 1);
    System.out.println(cal.getTime());// Tue Jul 30 22:53:55 IST 2013
    cal.add(Calendar.HOUR_OF_DAY, 1);
    System.out.println(cal.getTime());// Tue Jul 30 23:53:55 IST 2013
    cal.add(Calendar.MINUTE, 100);
    System.out.println(cal.getTime());// Wed Jul 31 01:33:55 IST 2013
    // demonstrate leniency
    cal.add(Calendar.DAY_OF_MONTH, 32);
    System.out.println(cal.getTime());// Sun Sep 01 01:33:55 IST 2013
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/date/java-date-and-calendar-classes.jsp&#34; title=&#34;Date And Calendar&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java: org.json</title>
      <link>http://alimy.me/post/dev_201603132025/</link>
      <pubDate>Sun, 13 Mar 2016 20:25:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132025/</guid>
      <description>

&lt;h3 id=&#34;overview-of-the-api-classes:ea451922ece9dc79afacfb7b6aeaf09c&#34;&gt;Overview of The API Classes&lt;/h3&gt;

&lt;p&gt;org.json has classes to parse and write json string. It also converts between json and xml, HTTP header, Cookies, and CDF. The main classes are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;org.json.JSONObject - This class stores unordered key value pairs. The value can be Boolean, JSONArray, Number, String or JSONObject.NULL. It has constructors to take in a json string and store it as key value pairs. It also has constructors that take in a Map, a bean or a String&lt;/li&gt;
&lt;li&gt;org.json.JSONTokener - This class parses a JSON string and is also used internally by the JSONObject and JSONArray classes to parse JSON Strings&lt;/li&gt;
&lt;li&gt;org.json.JSONArray - This class stores an ordered sequence of values. Externally it represents a JSON Array&lt;/li&gt;
&lt;li&gt;org.json.JSONWriter - This class represents method to produce json text. It has an append(String) method to append a string to a json text, key(String) and value(String) method to add key and values to json string. It can also write an array.&lt;/li&gt;
&lt;li&gt;org.json.CDL- This class has methods to convert comma delimited text to JSONArray and a JSONArray to a comma delimited text. The array contains rows of comma separed strings, with rows separated by newline. The first row contains names.&lt;/li&gt;
&lt;li&gt;org.json.Cookie - This class has method to convert a web browser cookie to a JSONObject and back.&lt;/li&gt;
&lt;li&gt;org.json.CookieList - This class has method to convert a list of cookies to JSONObject and back.
Lets see some examples&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;parse-json:ea451922ece9dc79afacfb7b6aeaf09c&#34;&gt;Parse JSON&lt;/h3&gt;

&lt;p&gt;This examples shows how to parse a JSON string. The JSON string in this example is a list of genres (limited to 2) from freemusicarchive.org&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytriails.json.orgjson;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.io.IOUtils;
import org.json.JSONObject;
import org.json.simple.JSONArray;

public class ParseJson1 {
	public static void main(String[] args) throws MalformedURLException, IOException {
		String url = &amp;quot;http://freemusicarchive.org/api/get/genres.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=2&amp;quot;;
		String genreJson = IOUtils.toString(new URL(url));
		JSONObject json = new JSONObject(genreJson);
		// get the title
		System.out.println(json.get(&amp;quot;title&amp;quot;));
		// get the data
		JSONArray genreArray = (JSONArray) json.get(&amp;quot;dataset&amp;quot;);
		// get the first genre
		JSONObject firstGenre = (JSONObject) genreArray.get(0);
		System.out.println(firstGenre.get(&amp;quot;genre_title&amp;quot;));
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-json-using-a-bean:ea451922ece9dc79afacfb7b6aeaf09c&#34;&gt;Build JSON using a bean&lt;/h3&gt;

&lt;p&gt;Lets look at how to build the same JSON string as above but using a bean for the genre&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytriails.json.orgjson;

import org.json.JSONObject;

public class BuildJson1 {

	public static void main(String[] args) {
		JSONObject dataset = new JSONObject();
		dataset.put(&amp;quot;genre_id&amp;quot;, 1);
		dataset.put(&amp;quot;genre_parent_id&amp;quot;, JSONObject.NULL);
		dataset.put(&amp;quot;genre_title&amp;quot;, &amp;quot;International&amp;quot;);
		// use the accumulate function to add to an existing value. The value
		// will now be converted to a list
		dataset.accumulate(&amp;quot;genre_title&amp;quot;, &amp;quot;Pop&amp;quot;);
		// append to the key
		dataset.append(&amp;quot;genre_title&amp;quot;, &amp;quot;slow&amp;quot;);
		dataset.put(&amp;quot;genre_handle&amp;quot;, &amp;quot;International&amp;quot;);
		dataset.put(&amp;quot;genre_color&amp;quot;, &amp;quot;#CC3300&amp;quot;);

		// get the json array for a string
		System.out.println(dataset.getJSONArray(&amp;quot;genre_title&amp;quot;));
		// prints [&amp;quot;International&amp;quot;,&amp;quot;Pop&amp;quot;,&amp;quot;slow&amp;quot;]

		// increment a number by 1
		dataset.increment(&amp;quot;genre_id&amp;quot;);

		// quote a string allowing the json to be delivered within html
		System.out.println(JSONObject.quote(dataset.toString()));
		// prints
		// &amp;quot;{\&amp;quot;genre_color\&amp;quot;:\&amp;quot;#CC3300\&amp;quot;,\&amp;quot;genre_title\&amp;quot;:[\&amp;quot;International\&amp;quot;,\&amp;quot;Pop\&amp;quot;,\&amp;quot;slow\&amp;quot;],
		// \&amp;quot;genre_handle\&amp;quot;:\&amp;quot;International\&amp;quot;,\&amp;quot;genre_parent_id\&amp;quot;:null,\&amp;quot;genre_id\&amp;quot;:2}&amp;quot;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-csv-from-jsonarray:ea451922ece9dc79afacfb7b6aeaf09c&#34;&gt;Creating a CSV from JsonArray&lt;/h3&gt;

&lt;p&gt;Lets look at an example of how to use the java.json.CDL class to convert a jsonarray to a csv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytriails.json.orgjson;

import java.io.IOException;
import java.net.URL;

import org.apache.commons.io.IOUtils;
import org.json.CDL;
import org.json.JSONArray;
import org.json.JSONObject;

public class JsonToCsv {
	public static void main(String[] args) {
		String url = &amp;quot;http://freemusicarchive.org/api/get/genres.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=10&amp;quot;;
		try {
			String genreJson = IOUtils.toString(new URL(url));
			JSONObject json = new JSONObject(genreJson);
			System.out.println(CDL.toString(new JSONArray(json.get(&amp;quot;dataset&amp;quot;).toString())));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/json/java-org-json.jsp&#34; title=&#34;Java - org.json&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java: Json Simple</title>
      <link>http://alimy.me/post/dev_201603132015/</link>
      <pubDate>Sun, 13 Mar 2016 20:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132015/</guid>
      <description>

&lt;p&gt;Json Simple is, as the name suggest, a very simple API. The API itself is made up of around 13 classes. The main classes are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSONParser - This parses Json text. It takes in a java.io.Reader or a String Object. It is also possible to pass a ContentHandler or ContainerHandler to the parser.&lt;/li&gt;
&lt;li&gt;JSONObject - This is a java representation of JSON string. It stores key value pairs. JsonObject extends HashMap. It has method to encode a map to a JSON text (writeJSONString(Map map, Writer out))&lt;/li&gt;
&lt;li&gt;JSONArray - Represents a collection. It extends an ArrayList. It implements the JSONAware and JSONStreamAware interface&lt;/li&gt;
&lt;li&gt;JSONValue - This class has methods to parse JSON string into Java objects. It uses the JSONParser to do so. It has methods to write JSON string from many java types (writeJSONString(Object value, Writer out)). It also has methods to escapte special characters using the escape(String s) method. This method escapes quotes, \, /, \r, \n, \b, \f, \t and other control characters (U+0000 through U+001F)&lt;/li&gt;
&lt;li&gt;JSONAware - Beans that support output to JSON form should implement this interface.
Lets see some examples&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;parse-json:74b021baee5c16170d831b65ab6f7843&#34;&gt;Parse JSON&lt;/h3&gt;

&lt;p&gt;This examples shows how to parse a JSON string. The JSON string in this example is a list of genres (limited to 2) from freemusicarchive.org&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.IOException;
import java.net.URL;

import org.apache.commons.io.IOUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.ParseException;

public class ParseJson1 {

    public static void main(String[] args) {
        String url = &amp;quot;http://freemusicarchive.org/api/get/genres.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=2&amp;quot;;
        /*
         * {&amp;quot;title&amp;quot;:&amp;quot;Free Music Archive - Genres&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;errors&amp;quot;:[],&amp;quot;total&amp;quot; : &amp;quot;161&amp;quot;,&amp;quot;total_pages&amp;quot;:81,&amp;quot;page&amp;quot;:1,&amp;quot;limit&amp;quot;:&amp;quot;2&amp;quot;,
         * &amp;quot;dataset&amp;quot;:
         * [{&amp;quot;genre_id&amp;quot;: &amp;quot;1&amp;quot;,&amp;quot;genre_parent_id&amp;quot;:&amp;quot;38&amp;quot;,&amp;quot;genre_title&amp;quot;:&amp;quot;Avant-Garde&amp;quot; ,&amp;quot;genre_handle&amp;quot;: &amp;quot;Avant-Garde&amp;quot;,&amp;quot;genre_color&amp;quot;:&amp;quot;#006666&amp;quot;},
         * {&amp;quot;genre_id&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;genre_parent_id&amp;quot; :null,&amp;quot;genre_title&amp;quot;:&amp;quot;International&amp;quot;,&amp;quot;genre_handle&amp;quot;:&amp;quot;International&amp;quot;,&amp;quot;genre_color&amp;quot;:&amp;quot;#CC3300&amp;quot;}]}
         */
        try {
            String genreJson = IOUtils.toString(new URL(url));
            JSONObject genreJsonObject = (JSONObject) JSONValue.parseWithException(genreJson);
            // get the title
            System.out.println(genreJsonObject.get(&amp;quot;title&amp;quot;));
            // get the data
            JSONArray genreArray = (JSONArray) genreJsonObject.get(&amp;quot;dataset&amp;quot;);
            // get the first genre
            JSONObject firstGenre = (JSONObject) genreArray.get(0);
            System.out.println(firstGenre.get(&amp;quot;genre_title&amp;quot;));
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-json:74b021baee5c16170d831b65ab6f7843&#34;&gt;Build JSON&lt;/h3&gt;

&lt;p&gt;We now build a json string for a genre&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONAware;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

public class BuildJson2 {

    public static void main(String[] args) {
        BuildJson2 json2 = new BuildJson2();
        GenreBean bean = json2.new GenreBean();
        bean.setGenre_title(&amp;quot;International&amp;quot;);
        bean.setGenre_color(&amp;quot;#CC3300&amp;quot;);
        bean.setGenre_handle(&amp;quot;International&amp;quot;);
        bean.setGenre_id(1);
        System.out.println(JSONValue.toJSONString(bean));
    }

    class GenreBean implements JSONAware {

        int genre_id;
        int genre_parent_id;
        String genre_handle;
        String genre_title;
        String genre_color;

        @Override
        public String toJSONString() {
            Map&amp;lt;Object , Object&amp;gt; genreBeanJsonMap = new HashMap&amp;lt;Object , Object&amp;gt;();
            genreBeanJsonMap.put(&amp;quot;genre_id&amp;quot;, getGenre_id());
            genreBeanJsonMap.put(&amp;quot;genre_parent_id&amp;quot;, getGenre_parent_id());
            genreBeanJsonMap.put(&amp;quot;genre_handle&amp;quot;, getGenre_handle());
            genreBeanJsonMap.put(&amp;quot;genre_title&amp;quot;, getGenre_handle());
            genreBeanJsonMap.put(&amp;quot;genre_color&amp;quot;, getGenre_color());
            return JSONObject.toJSONString(genreBeanJsonMap);
        }

        public int getGenre_id() {
            return genre_id;
        }

        public void setGenre_id(int genre_id) {
            this.genre_id = genre_id;
        }

        public int getGenre_parent_id() {
            return genre_parent_id;
        }

        public void setGenre_parent_id(int genre_parent_id) {
            this.genre_parent_id = genre_parent_id;
        }

        public String getGenre_handle() {
            return genre_handle;
        }

        public void setGenre_handle(String genre_handle) {
            this.genre_handle = genre_handle;
        }

        public String getGenre_title() {
            return genre_title;
        }

        public void setGenre_title(String genre_title) {
            this.genre_title = genre_title;
        }

        public String getGenre_color() {
            return genre_color;
        }

        public void setGenre_color(String genre_color) {
            this.genre_color = genre_color;
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/json/java-json-simple.jsp&#34; title=&#34;Java - Json Simple&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gson: User Guide</title>
      <link>http://alimy.me/post/dev_201603122045/</link>
      <pubDate>Sat, 12 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122045/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Goals-for-Gson&#34;&gt;Goals for Gson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-Performance-and-Scalability&#34;&gt;Gson Performance and Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-Users&#34;&gt;Gson Users&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Using-Gson&#34;&gt;Using Gson&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Gson-With-Maven&#34;&gt;Using Gson with Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Primitives-Examples&#34;&gt;Primitives Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Object-Examples&#34;&gt;Object Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Finer-Points-with-Objects&#34;&gt;Finer Points with Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Nested-Classes-including-Inner-Classes-&#34;&gt;Nested Classes (including Inner Classes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Array-Examples&#34;&gt;Array Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Collections-Examples&#34;&gt;Collections Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Collections-Limitations&#34;&gt;Collections Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Serializing-and-Deserializing-Generic-Types&#34;&gt;Serializing and Deserializing Generic Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types&#34;&gt;Serializing and Deserializing Collection with Objects of Arbitrary Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Built-in-Serializers-and-Deserializers&#34;&gt;Built-in Serializers and Deserializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Custom-Serialization-and-Deserialization&#34;&gt;Custom Serialization and Deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TOC-Writing-a-Serializer&#34;&gt;Writing a Serializer&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Writing-a-Deserializer&#34;&gt;Writing a Deserializer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Writing-an-Instance-Creator&#34;&gt;Writing an Instance Creator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-InstanceCreator-for-a-Parameterized-Type&#34;&gt;InstanceCreator for a Parameterized Type&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format&#34;&gt;Compact Vs. Pretty Printing for JSON Output Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Null-Object-Support&#34;&gt;Null Object Support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Versioning-Support&#34;&gt;Versioning Support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Excluding-Fields-From-Serialization-and-Deserialization&#34;&gt;Excluding Fields From Serialization and Deserialization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Java-Modifier-Exclusion&#34;&gt;Java Modifier Exclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Gson-s-Expose&#34;&gt;Gson&amp;rsquo;s &lt;code&gt;@Expose&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-User-Defined-Exclusion-Strategies&#34;&gt;User Defined Exclusion Strategies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-JSON-Field-Naming-Support&#34;&gt;JSON Field Naming Support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers&#34;&gt;Sharing State Across Custom Serializers and Deserializers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Streaming&#34;&gt;Streaming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Issues-in-Designing-Gson&#34;&gt;Issues in Designing Gson&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#TOC-Future-Enhancements-to-Gson&#34;&gt;Future Enhancements to Gson&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;a-name-toc-overview-a-overview:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h2&gt;

&lt;p&gt;Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.&lt;/p&gt;

&lt;p&gt;Gson can work with arbitrary Java objects including pre-existing objects that you do not have source code of.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-goals-for-gson-a-goals-for-gson:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Goals-for-Gson&#34;&gt;&lt;/a&gt;Goals for Gson&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Provide easy to use mechanisms like &lt;code&gt;toString()&lt;/code&gt; and constructor (factory method) to convert Java to JSON and vice-versa&lt;/li&gt;
&lt;li&gt;Allow pre-existing unmodifiable objects to be converted to and from JSON&lt;/li&gt;
&lt;li&gt;Allow custom representations for objects&lt;/li&gt;
&lt;li&gt;Support arbitrarily complex objects&lt;/li&gt;
&lt;li&gt;Generate compact and readability JSON output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-name-toc-gson-performance-and-scalability-a-gson-performance-and-scalability:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Gson-Performance-and-Scalability&#34;&gt;&lt;/a&gt;Gson Performance and Scalability&lt;/h2&gt;

&lt;p&gt;Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class &lt;a href=&#34;gson/src/test/java/com/google/gson/metrics/PerformanceTest.java&#34;&gt;&lt;code&gt;PerformanceTest&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings: Deserialized strings of over 25MB without any problems (see &lt;code&gt;disabled_testStringDeserializationPerformance&lt;/code&gt; method in &lt;code&gt;PerformanceTest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Large collections:

&lt;ul&gt;
&lt;li&gt;Serialized a collection of 1.4 million objects (see &lt;code&gt;disabled_testLargeCollectionSerialization&lt;/code&gt; method in &lt;code&gt;PerformanceTest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Deserialized a collection of 87,000 objects (see &lt;code&gt;disabled_testLargeCollectionDeserialization&lt;/code&gt; in &lt;code&gt;PerformanceTest&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Delete the &lt;code&gt;disabled_&lt;/code&gt; prefix to run these tests. We use this prefix to prevent running these tests every time we run JUnit tests.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-gson-users-a-gson-users:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Gson-Users&#34;&gt;&lt;/a&gt;Gson Users&lt;/h2&gt;

&lt;p&gt;Gson was originally created for use inside Google where it is currently used in a number of projects. It is now used by a number of public projects and companies. See details &lt;a href=&#34;https://sites.google.com/site/gson/gson-users&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-using-gson-a-using-gson:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Using-Gson&#34;&gt;&lt;/a&gt;Using Gson&lt;/h2&gt;

&lt;p&gt;The primary class to use is &lt;a href=&#34;gson/src/main/java/com/google/gson/Gson.java&#34;&gt;&lt;code&gt;Gson&lt;/code&gt;&lt;/a&gt; which you can just create by calling &lt;code&gt;new Gson()&lt;/code&gt;. There is also a class &lt;a href=&#34;gson/src/main/java/com/google/gson/GsonBuilder.java&#34;&gt;&lt;code&gt;GsonBuilder&lt;/code&gt;&lt;/a&gt; available that can be used to create a Gson instance with various settings like version control and so on.&lt;/p&gt;

&lt;p&gt;The Gson instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-gson-with-maven-a-using-gson-with-maven:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Gson-With-Maven&#34;&gt;&lt;/a&gt;Using Gson with Maven&lt;/h2&gt;

&lt;p&gt;To use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;!--  Gson: Java to Json conversion --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;2.6.2&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is it, now your maven project is Gson enabled.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-primitives-examples-a-primitives-examples:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Primitives-Examples&#34;&gt;&lt;/a&gt;Primitives Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Serialization
Gson gson = new Gson();
gson.toJson(1);            // ==&amp;gt; 1
gson.toJson(&amp;quot;abcd&amp;quot;);       // ==&amp;gt; &amp;quot;abcd&amp;quot;
gson.toJson(new Long(10)); // ==&amp;gt; 10
int[] values = { 1 };
gson.toJson(values);       // ==&amp;gt; [1]

// Deserialization
int one = gson.fromJson(&amp;quot;1&amp;quot;, int.class);
Integer one = gson.fromJson(&amp;quot;1&amp;quot;, Integer.class);
Long one = gson.fromJson(&amp;quot;1&amp;quot;, Long.class);
Boolean false = gson.fromJson(&amp;quot;false&amp;quot;, Boolean.class);
String str = gson.fromJson(&amp;quot;\&amp;quot;abc\&amp;quot;&amp;quot;, String.class);
String anotherStr = gson.fromJson(&amp;quot;[\&amp;quot;abc\&amp;quot;]&amp;quot;, String.class);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-toc-object-examples-a-object-examples:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Object-Examples&#34;&gt;&lt;/a&gt;Object Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class BagOfPrimitives {
  private int value1 = 1;
  private String value2 = &amp;quot;abc&amp;quot;;
  private transient int value3 = 3;
  BagOfPrimitives() {
    // no-args constructor
  }
}

// Serialization
BagOfPrimitives obj = new BagOfPrimitives();
Gson gson = new Gson();
String json = gson.toJson(obj);  

// ==&amp;gt; json is {&amp;quot;value1&amp;quot;:1,&amp;quot;value2&amp;quot;:&amp;quot;abc&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you can not serialize objects with circular references since that will result in infinite recursion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Deserialization
BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);
// ==&amp;gt; obj2 is just like obj
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-toc-finer-points-with-objects-a-finer-points-with-objects:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Finer-Points-with-Objects&#34;&gt;&lt;/a&gt;&lt;strong&gt;Finer Points with Objects&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It is perfectly fine (and recommended) to use private fields&lt;/li&gt;
&lt;li&gt;There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.&lt;/li&gt;
&lt;li&gt;If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.&lt;/li&gt;
&lt;li&gt;This implementation handles nulls correctly&lt;/li&gt;
&lt;li&gt;While serialization, a null field is skipped from the output&lt;/li&gt;
&lt;li&gt;While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null&lt;/li&gt;
&lt;li&gt;If a field is &lt;em&gt;synthetic&lt;/em&gt;, it is ignored and not included in JSON serialization or deserialization&lt;/li&gt;
&lt;li&gt;Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-name-toc-nested-classes-including-inner-classes-a-nested-classes-including-inner-classes:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Nested-Classes-including-Inner-Classes-&#34;&gt;&lt;/a&gt;Nested Classes (including Inner Classes)&lt;/h3&gt;

&lt;p&gt;Gson can serialize static nested classes quite easily.&lt;/p&gt;

&lt;p&gt;Gson can also deserialize static nested classes. However, Gson can &lt;strong&gt;not&lt;/strong&gt; automatically deserialize the &lt;strong&gt;pure inner classes since their no-args constructor also need a reference to the containing Object&lt;/strong&gt; which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class A {
  public String a;

  class B {

    public String b;

    public B() {
      // No args constructor for B
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The above class B can not (by default) be serialized with Gson.&lt;/p&gt;

&lt;p&gt;Gson can not deserialize &lt;code&gt;{&amp;quot;b&amp;quot;:&amp;quot;abc&amp;quot;}&lt;/code&gt; into an instance of B since the class B is an inner class. if it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class InstanceCreatorForB implements InstanceCreator&amp;lt;A.B&amp;gt; {
  private final A a;
  public InstanceCreatorForB(A a)  {
    this.a = a;
  }
  public A.B createInstance(Type type) {
    return a.new B();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is possible, but not recommended.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-array-examples-a-array-examples:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Array-Examples&#34;&gt;&lt;/a&gt;Array Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Gson gson = new Gson();
int[] ints = {1, 2, 3, 4, 5};
String[] strings = {&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, &amp;quot;ghi&amp;quot;};

// Serialization
gson.toJson(ints);     // ==&amp;gt; [1,2,3,4,5]
gson.toJson(strings);  // ==&amp;gt; [&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, &amp;quot;ghi&amp;quot;]

// Deserialization
int[] ints2 = gson.fromJson(&amp;quot;[1,2,3,4,5]&amp;quot;, int[].class);
// ==&amp;gt; ints2 will be same as ints
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also support multi-dimensional arrays, with arbitrarily complex element types.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-collections-examples-a-collections-examples:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Collections-Examples&#34;&gt;&lt;/a&gt;Collections Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Gson gson = new Gson();
Collection&amp;lt;Integer&amp;gt; ints = Lists.immutableList(1,2,3,4,5);

// Serialization
String json = gson.toJson(ints);  // ==&amp;gt; json is [1,2,3,4,5]

// Deserialization
Type collectionType = new TypeToken&amp;lt;Collection&amp;lt;Integer&amp;gt;&amp;gt;(){}.getType();
Collection&amp;lt;Integer&amp;gt; ints2 = gson.fromJson(json, collectionType);
// ==&amp;gt; ints2 is same as ints
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly hideous: note how we define the type of collection.
Unfortunately, there is no way to get around this in Java.&lt;/p&gt;

&lt;h4 id=&#34;a-name-toc-collections-limitations-a-collections-limitations:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Collections-Limitations&#34;&gt;&lt;/a&gt;Collections Limitations&lt;/h4&gt;

&lt;p&gt;Gson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type.
This makes sense, and is rarely a problem when following good Java coding practices.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-serializing-and-deserializing-generic-types-a-serializing-and-deserializing-generic-types:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Serializing-and-Deserializing-Generic-Types&#34;&gt;&lt;/a&gt;Serializing and Deserializing Generic Types&lt;/h3&gt;

&lt;p&gt;When you call &lt;code&gt;toJson(obj)&lt;/code&gt;, Gson calls &lt;code&gt;obj.getClass()&lt;/code&gt; to get information on the fields to serialize. Similarly, you can typically pass &lt;code&gt;MyClass.class&lt;/code&gt; object in the &lt;code&gt;fromJson(json, MyClass.class)&lt;/code&gt; method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Foo&amp;lt;T&amp;gt; {
  T value;
}
Gson gson = new Gson();
Foo&amp;lt;Bar&amp;gt; foo = new Foo&amp;lt;Bar&amp;gt;();
gson.toJson(foo); // May not serialize foo.value correctly

gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code fails to interpret value as type Bar because Gson invokes &lt;code&gt;list.getClass()&lt;/code&gt; to get its class information, but this method returns a raw class, &lt;code&gt;Foo.class&lt;/code&gt;. This means that Gson has no way of knowing that this is an object of type &lt;code&gt;Foo&amp;lt;Bar&amp;gt;&lt;/code&gt;, and not just plain &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the &lt;a href=&#34;http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html&#34;&gt;&lt;code&gt;TypeToken&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Type fooType = new TypeToken&amp;lt;Foo&amp;lt;Bar&amp;gt;&amp;gt;() {}.getType();
gson.toJson(foo, fooType);

gson.fromJson(json, fooType);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idiom used to get &lt;code&gt;fooType&lt;/code&gt; actually defines an anonymous local inner class containing a method &lt;code&gt;getType()&lt;/code&gt; that returns the fully parameterized type.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-serializing-and-deserializing-collection-with-objects-of-arbitrary-types-a-serializing-and-deserializing-collection-with-objects-of-arbitrary-types:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types&#34;&gt;&lt;/a&gt;Serializing and Deserializing Collection with Objects of Arbitrary Types&lt;/h3&gt;

&lt;p&gt;Sometimes you are dealing with JSON array that contains mixed types. For example:
&lt;code&gt;[&#39;hello&#39;,5,{name:&#39;GREETINGS&#39;,source:&#39;guest&#39;}]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The equivalent &lt;code&gt;Collection&lt;/code&gt; containing this is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Collection collection = new ArrayList();
collection.add(&amp;quot;hello&amp;quot;);
collection.add(5);
collection.add(new Event(&amp;quot;GREETINGS&amp;quot;, &amp;quot;guest&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the &lt;code&gt;Event&lt;/code&gt; class is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Event {
  private String name;
  private String source;
  private Event(String name, String source) {
    this.name = name;
    this.source = source;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can serialize the collection with Gson without doing anything specific: &lt;code&gt;toJson(collection)&lt;/code&gt; would write out the desired output.&lt;/p&gt;

&lt;p&gt;However, deserialization with &lt;code&gt;fromJson(json, Collection.class)&lt;/code&gt; will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in &lt;code&gt;fromJson()&lt;/code&gt;. So, you have three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use Gson&amp;rsquo;s parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use &lt;code&gt;Gson.fromJson()&lt;/code&gt; on each of the array elements.This is the preferred approach. &lt;a href=&#34;extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java&#34;&gt;Here is an example&lt;/a&gt; that demonstrates how to do this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Register a type adapter for &lt;code&gt;Collection.class&lt;/code&gt; that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Register a type adapter for &lt;code&gt;MyCollectionMemberType&lt;/code&gt; and use &lt;code&gt;fromJson()&lt;/code&gt; with &lt;code&gt;Collection&amp;lt;MyCollectionMemberType&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach is practical only if the array appears as a top-level element or if you can change the field type holding the collection to be of type &lt;code&gt;Collection&amp;lt;MyCollectionMemberType&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-built-in-serializers-and-deserializers-a-built-in-serializers-and-deserializers:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Built-in-Serializers-and-Deserializers&#34;&gt;&lt;/a&gt;Built-in Serializers and Deserializers&lt;/h3&gt;

&lt;p&gt;Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.
Here is a list of such classes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;java.net.URL&lt;/code&gt; to match it with strings like &lt;code&gt;&amp;quot;https://github.com/google/gson/&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.net.URI&lt;/code&gt; to match it with strings like &lt;code&gt;&amp;quot;/google/gson/&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also find source code for some commonly used classes such as JodaTime at &lt;a href=&#34;https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-custom-serialization-and-deserialization-a-custom-serialization-and-deserialization:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Custom-Serialization-and-Deserialization&#34;&gt;&lt;/a&gt;Custom Serialization and Deserialization&lt;/h3&gt;

&lt;p&gt;Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).
Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Json Serialiers: Need to define custom serialization for an object&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Json Deserializers: Needed to define custom deserialization for a type&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instance Creators: Not needed if no-args constructor is available or a deserializer is registered&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GsonBuilder gson = new GsonBuilder();
gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());
gson.registerTypeAdapter(MyType.class, new MySerializer());
gson.registerTypeAdapter(MyType.class, new MyDeserializer());
gson.registerTypeAdapter(MyType.class, new MyInstanceCreator());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;registerTypeAdapter&lt;/code&gt; call checks if the type adapter implements more than one of these interfaces and register it for all of them.&lt;/p&gt;

&lt;h4 id=&#34;a-name-toc-writing-a-serializer-a-writing-a-serializer:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Writing-a-Serializer&#34;&gt;&lt;/a&gt;Writing a Serializer&lt;/h4&gt;

&lt;p&gt;Here is an example of how to write a custom serializer for JodaTime &lt;code&gt;DateTime&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class DateTimeSerializer implements JsonSerializer&amp;lt;DateTime&amp;gt; {
  public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {
    return new JsonPrimitive(src.toString());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gson calls &lt;code&gt;serialize()&lt;/code&gt; when it runs into a &lt;code&gt;DateTime&lt;/code&gt; object during serialization.&lt;/p&gt;

&lt;h4 id=&#34;a-name-toc-writing-a-deserializer-a-writing-a-deserializer:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Writing-a-Deserializer&#34;&gt;&lt;/a&gt;Writing a Deserializer&lt;/h4&gt;

&lt;p&gt;Here is an example of how to write a custom deserializer for JodaTime DateTime class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class DateTimeDeserializer implements JsonDeserializer&amp;lt;DateTime&amp;gt; {
  public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
      throws JsonParseException {
    return new DateTime(json.getAsJsonPrimitive().getAsString());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gson calls &lt;code&gt;deserialize&lt;/code&gt; when it needs to deserialize a JSON string fragment into a DateTime object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finer points with Serializers and Deserializers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Often you want to register a single handler for all generic types corresponding to a raw type&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, suppose you have an &lt;code&gt;Id&lt;/code&gt; class for id representation/translation (i.e. an internal vs. external representation).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Id&amp;lt;T&amp;gt;&lt;/code&gt; type that has same serialization for all generic types

&lt;ul&gt;
&lt;li&gt;Essentially write out the id value&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deserialization is very similar but not exactly the same

&lt;ul&gt;
&lt;li&gt;Need to call &lt;code&gt;new Id(Class&amp;lt;T&amp;gt;, String)&lt;/code&gt; which returns an instance of &lt;code&gt;Id&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say &lt;code&gt;Id&amp;lt;RequiresSpecialHandling&amp;gt;&lt;/code&gt; needed special handling).
The &lt;code&gt;Type&lt;/code&gt; parameter for the &lt;code&gt;toJson()&lt;/code&gt; and &lt;code&gt;fromJson()&lt;/code&gt; contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-writing-an-instance-creator-a-writing-an-instance-creator:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Writing-an-Instance-Creator&#34;&gt;&lt;/a&gt;Writing an Instance Creator&lt;/h3&gt;

&lt;p&gt;While deserializing an Object, Gson needs to create a default instance of the class.
Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t matter whether public or private&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instance Creator Example&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class MoneyInstanceCreator implements InstanceCreator&amp;lt;Money&amp;gt; {
  public Money createInstance(Type type) {
    return new Money(&amp;quot;1000000&amp;quot;, CurrencyCode.USD);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type could be of a corresponding generic type&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very useful to invoke constructors which need specific generic type information&lt;/li&gt;
&lt;li&gt;For example, if the &lt;code&gt;Id&lt;/code&gt; class stores the class for which the Id is being created&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;a-name-toc-instancecreator-for-a-parameterized-type-a-instancecreator-for-a-parameterized-type:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-InstanceCreator-for-a-Parameterized-Type&#34;&gt;&lt;/a&gt;InstanceCreator for a Parameterized Type&lt;/h4&gt;

&lt;p&gt;Sometimes that the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyList&amp;lt;T&amp;gt; extends ArrayList&amp;lt;T&amp;gt; {
}

class MyListInstanceCreator implements InstanceCreator&amp;lt;MyList&amp;lt;?&amp;gt;&amp;gt; {
    @SuppressWarnings(&amp;quot;unchecked&amp;quot;)
  public MyList&amp;lt;?&amp;gt; createInstance(Type type) {
    // No need to use a parameterized list since the actual instance will have the raw type anyway.
    return new MyList();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the &lt;code&gt;createInstance&lt;/code&gt; method. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Id&amp;lt;T&amp;gt; {
  private final Class&amp;lt;T&amp;gt; classOfId;
  private final long value;
  public Id(Class&amp;lt;T&amp;gt; classOfId, long value) {
    this.classOfId = classOfId;
    this.value = value;
  }
}

class IdInstanceCreator implements InstanceCreator&amp;lt;Id&amp;lt;?&amp;gt;&amp;gt; {
  public Id&amp;lt;?&amp;gt; createInstance(Type type) {
    Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();
    Type idType = typeParameters[0]; // Id has only one parameterized type T
    return Id.get((Class)idType, 0L);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, &lt;code&gt;type&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; object in this case is the Java parameterized type representation of &lt;code&gt;Id&amp;lt;Foo&amp;gt;&lt;/code&gt; where the actual instance should be bound to &lt;code&gt;Id&amp;lt;Foo&amp;gt;&lt;/code&gt;. Since &lt;code&gt;Id&lt;/code&gt; class has just one parameterized type parameter, &lt;code&gt;T&lt;/code&gt;, we use the zeroth element of the type array returned by &lt;code&gt;getActualTypeArgument()&lt;/code&gt; which will hold &lt;code&gt;Foo.class&lt;/code&gt; in this case.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-compact-vs-pretty-printing-for-json-output-format-a-compact-vs-pretty-printing-for-json-output-format:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format&#34;&gt;&lt;/a&gt;Compact Vs. Pretty Printing for JSON Output Format&lt;/h3&gt;

&lt;p&gt;The default JSON output that is provide by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, &amp;ldquo;null&amp;rdquo; fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the &lt;a href=&#34;#TOC-Null-Object-Support&#34;&gt;Null Object Support&lt;/a&gt; section for information on configure Gson to output all null values.&lt;/p&gt;

&lt;p&gt;If you like to use the Pretty Print feature, you must configure your &lt;code&gt;Gson&lt;/code&gt; instance using the &lt;code&gt;GsonBuilder&lt;/code&gt;. The &lt;code&gt;JsonFormatter&lt;/code&gt; is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default &lt;code&gt;JsonPrintFormatter&lt;/code&gt; that has default line length of 80 character, 2 character indentation, and 4 character right margin.&lt;/p&gt;

&lt;p&gt;The following is an example shows how to configure a &lt;code&gt;Gson&lt;/code&gt; instance to use the default &lt;code&gt;JsonPrintFormatter&lt;/code&gt; instead of the &lt;code&gt;JsonCompactFormatter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gson gson = new GsonBuilder().setPrettyPrinting().create();
String jsonOutput = gson.toJson(someObject);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-toc-null-object-support-a-null-object-support:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Null-Object-Support&#34;&gt;&lt;/a&gt;Null Object Support&lt;/h3&gt;

&lt;p&gt;The default behaviour that is implemented in Gson is that &lt;code&gt;null&lt;/code&gt; object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how you would configure a &lt;code&gt;Gson&lt;/code&gt; instance to output null:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Gson gson = new GsonBuilder().serializeNulls().create();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: when serializing &lt;code&gt;null&lt;/code&gt;s with Gson, it will add a &lt;code&gt;JsonNull&lt;/code&gt; element to the &lt;code&gt;JsonElement&lt;/code&gt; structure. Therefore, this object can be used in custom serialization/deserialization.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Foo {
  private final String s;
  private final int i;

  public Foo() {
    this(null, 5);
  }

  public Foo(String s, int i) {
    this.s = s;
    this.i = i;
  }
}

Gson gson = new GsonBuilder().serializeNulls().create();
Foo foo = new Foo();
String json = gson.toJson(foo);
System.out.println(json);

json = gson.toJson(null);
System.out.println(json);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;s&amp;quot;:null,&amp;quot;i&amp;quot;:5}
null
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-toc-versioning-support-a-versioning-support:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Versioning-Support&#34;&gt;&lt;/a&gt;Versioning Support&lt;/h3&gt;

&lt;p&gt;Multiple versions of the same object can be maintained by using &lt;a href=&#34;gson/src/main/java/com/google/gson/annotations/Since.java&#34;&gt;@Since&lt;/a&gt; annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your &lt;code&gt;Gson&lt;/code&gt; instance to ignore any field/object that is greater than some version number. If no version is set on the &lt;code&gt;Gson&lt;/code&gt; instance then it will serialize and deserialize all fields and classes regardless of the version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VersionedClass {
  @Since(1.1) private final String newerField;
  @Since(1.0) private final String newField;
  private final String field;

  public VersionedClass() {
    this.newerField = &amp;quot;newer&amp;quot;;
    this.newField = &amp;quot;new&amp;quot;;
    this.field = &amp;quot;old&amp;quot;;
  }
}

VersionedClass versionedObject = new VersionedClass();
Gson gson = new GsonBuilder().setVersion(1.0).create();
String jsonOutput = gson.toJson(someObject);
System.out.println(jsonOutput);
System.out.println();

gson = new Gson();
jsonOutput = gson.toJson(someObject);
System.out.println(jsonOutput);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;newField&amp;quot;:&amp;quot;new&amp;quot;,&amp;quot;field&amp;quot;:&amp;quot;old&amp;quot;}

{&amp;quot;newerField&amp;quot;:&amp;quot;newer&amp;quot;,&amp;quot;newField&amp;quot;:&amp;quot;new&amp;quot;,&amp;quot;field&amp;quot;:&amp;quot;old&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-toc-excluding-fields-from-serialization-and-deserialization-a-excluding-fields-from-serialization-and-deserialization:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Excluding-Fields-From-Serialization-and-Deserialization&#34;&gt;&lt;/a&gt;Excluding Fields From Serialization and Deserialization&lt;/h3&gt;

&lt;p&gt;Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanism that allow field and class exclusion. If none of the below mechanism satisfy your needs then you can always use &lt;a href=&#34;#TOC-Custom-Serialization-and-Deserializ&#34;&gt;custom serializers and deserializers&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-toc-java-modifier-exclusion-a-java-modifier-exclusion:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Java-Modifier-Exclusion&#34;&gt;&lt;/a&gt;Java Modifier Exclusion&lt;/h4&gt;

&lt;p&gt;By default, if you mark a field as &lt;code&gt;transient&lt;/code&gt;, it will be excluded. As well, if a field is marked as &lt;code&gt;static&lt;/code&gt; then by default it will be excluded. If you want to include some transient fields then you can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.lang.reflect.Modifier;
Gson gson = new GsonBuilder()
    .excludeFieldsWithModifiers(Modifier.STATIC)
    .create();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: you can use any number of the &lt;code&gt;Modifier&lt;/code&gt; constants to &lt;code&gt;excludeFieldsWithModifiers&lt;/code&gt; method. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Gson gson = new GsonBuilder()
    .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)
    .create();
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-toc-gson-s-expose-a-gson-s-expose:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Gson-s-Expose&#34;&gt;&lt;/a&gt;Gson&amp;rsquo;s &lt;code&gt;@Expose&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using &lt;code&gt;new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()&lt;/code&gt;. The Gson instance created will exclude all fields in a class that are not marked with &lt;code&gt;@Expose&lt;/code&gt; annotation.&lt;/p&gt;

&lt;h4 id=&#34;a-name-toc-user-defined-exclusion-strategies-a-user-defined-exclusion-strategies:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-User-Defined-Exclusion-Strategies&#34;&gt;&lt;/a&gt;User Defined Exclusion Strategies&lt;/h4&gt;

&lt;p&gt;If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the &lt;a href=&#34;http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html&#34;&gt;&lt;code&gt;ExclusionStrategy&lt;/code&gt;&lt;/a&gt; JavaDoc for more information.&lt;/p&gt;

&lt;p&gt;The following example shows how to exclude fields marked with a specific &lt;code&gt;@Foo&lt;/code&gt; annotation and excludes top-level types (or declared field type) of class &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD})
public @interface Foo {
  // Field tag only annotation
}

public class SampleObjectForTest {
  @Foo private final int annotatedField;
  private final String stringField;
  private final long longField;
  private final Class&amp;lt;?&amp;gt; clazzField;

  public SampleObjectForTest() {
    annotatedField = 5;
    stringField = &amp;quot;someDefaultValue&amp;quot;;
    longField = 1234;
  }
}

public class MyExclusionStrategy implements ExclusionStrategy {
  private final Class&amp;lt;?&amp;gt; typeToSkip;

  private MyExclusionStrategy(Class&amp;lt;?&amp;gt; typeToSkip) {
    this.typeToSkip = typeToSkip;
  }

  public boolean shouldSkipClass(Class&amp;lt;?&amp;gt; clazz) {
    return (clazz == typeToSkip);
  }

  public boolean shouldSkipField(FieldAttributes f) {
    return f.getAnnotation(Foo.class) != null;
  }
}

public static void main(String[] args) {
  Gson gson = new GsonBuilder()
      .setExclusionStrategies(new MyExclusionStrategy(String.class))
      .serializeNulls()
      .create();
  SampleObjectForTest src = new SampleObjectForTest();
  String json = gson.toJson(src);
  System.out.println(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;longField&amp;quot;:1234}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-toc-json-field-naming-support-a-json-field-naming-support:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-JSON-Field-Naming-Support&#34;&gt;&lt;/a&gt;JSON Field Naming Support&lt;/h3&gt;

&lt;p&gt;Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case &amp;mdash; &lt;code&gt;sampleFieldNameInJava&lt;/code&gt;) to a Json field name (i.e., &lt;code&gt;sample_field_name_in_java&lt;/code&gt; or &lt;code&gt;SampleFieldNameInJava&lt;/code&gt;). See the &lt;a href=&#34;http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html&#34;&gt;FieldNamingPolicy&lt;/a&gt; class for information on the pre-defined naming policies.&lt;/p&gt;

&lt;p&gt;It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise &amp;ldquo;Runtime&amp;rdquo; exceptions if an invalid field name is provided as the annotation value.&lt;/p&gt;

&lt;p&gt;The following is an example of how to use both Gson naming policy features:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class SomeObject {
  @SerializedName(&amp;quot;custom_naming&amp;quot;) private final String someField;
  private final String someOtherField;

  public SomeObject(String a, String b) {
    this.someField = a;
    this.someOtherField = b;
  }
}

SomeObject someObject = new SomeObject(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;);
Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
String jsonRepresentation = gson.toJson(someObject);
System.out.println(jsonRepresentation);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;custom_naming&amp;quot;:&amp;quot;first&amp;quot;,&amp;quot;SomeOtherField&amp;quot;:&amp;quot;second&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a need for custom naming policy (&lt;a href=&#34;http://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892&#34;&gt;see this discussion&lt;/a&gt;), you can use the &lt;a href=&#34;http://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html&#34;&gt;@SerializedName&lt;/a&gt; annotation.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-sharing-state-across-custom-serializers-and-deserializers-a-sharing-state-across-custom-serializers-and-deserializers:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers&#34;&gt;&lt;/a&gt;Sharing State Across Custom Serializers and Deserializers&lt;/h3&gt;

&lt;p&gt;Sometimes you need to share state across custom serializers/deserializers (&lt;a href=&#34;http://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb&#34;&gt;see this discussion&lt;/a&gt;). You can use the following three strategies to accomplish this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Store shared state in static fields&lt;/li&gt;
&lt;li&gt;Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state&lt;/li&gt;
&lt;li&gt;Use Java &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 and 2 are not thread-safe options, but 3 is.&lt;/p&gt;

&lt;h3 id=&#34;a-name-toc-streaming-a-streaming:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Streaming&#34;&gt;&lt;/a&gt;Streaming&lt;/h3&gt;

&lt;p&gt;In addition Gson&amp;rsquo;s object model and data binding, you can use Gson to read from and write to a &lt;a href=&#34;https://sites.google.com/site/gson/streaming&#34;&gt;stream&lt;/a&gt;. You can also combine streaming and object model access to get the best of both approaches.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-issues-in-designing-gson-a-issues-in-designing-gson:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Issues-in-Designing-Gson&#34;&gt;&lt;/a&gt;Issues in Designing Gson&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;https://sites.google.com/site/gson/gson-design-document&#34; title=&#34;Gson design document&#34;&gt;Gson design document&lt;/a&gt; for a discussion of issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion.&lt;/p&gt;

&lt;h2 id=&#34;a-name-toc-future-enhancements-to-gson-a-future-enhancements-to-gson:44e1d5afd8024397723223fe19ec4679&#34;&gt;&lt;a name=&#34;TOC-Future-Enhancements-to-Gson&#34;&gt;&lt;/a&gt;Future Enhancements to Gson&lt;/h2&gt;

&lt;p&gt;For the latest list of proposed enhancements or if you&amp;rsquo;d like to suggest new ones, see the &lt;a href=&#34;https://github.com/google/gson/issues&#34;&gt;Issues section&lt;/a&gt; under the project website.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://github.com/google/gson/blob/master/UserGuide.md&#34; title=&#34;User Guide&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gson: Exclusion Strategy</title>
      <link>http://alimy.me/post/dev_201603122040/</link>
      <pubDate>Sat, 12 Mar 2016 20:40:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122040/</guid>
      <description>

&lt;p&gt;In this tutorial we look at how to selectively include fields from a java object to a json string. By default, Gson tries to map all fields in the java object to the corresponding property in json. However, in certain cases we may want to control that. There are a few ways to do this. It is also possible to excluse fields from third party packages where we have no access to the source code. The different ways to exclude fields are :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By defining a custom annotation and ignoring fields that are annotated with that.&lt;/li&gt;
&lt;li&gt;By Defining a custom exclusion class by extending the ExclusionStrategy interface and implementing the public boolean shouldSkipField(FieldAttributes f); and public boolean shouldSkipClass(Class clazz); methods&lt;/li&gt;
&lt;li&gt;By using the @Expose annotations and then using the excludeFieldsWithoutExposeAnnotation() method on the GsonBuilder. This will ignore all fields except the ones that have been exposed using the @Expose annotation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;the-example-below-demonstrates-all-three:328ca424640a9366d8b50d13fb24324f&#34;&gt;The example below demonstrates all three&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.awt.Color;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class ExclusionExample {
	public static void main(String[] args) {
		// We create an instance of type CAT.
		Cat cat = new Cat();
		cat.setName(&amp;quot;Cat&amp;quot;);
		cat.setAge(1);
		cat.setColor(Color.BLACK);
		cat.setCountry(&amp;quot;US&amp;quot;);
		// we allow serializing null. therefore although the fields lazy is
		// null, it will be serialized. We add a CustomExclusionStrategy that
		// will exclude the Color class. We also allow only those fields that
		// have been exposed using the @Expore annotation
		Gson gson = new GsonBuilder().serializeNulls().setExclusionStrategies(new CustomExclusionStrategy(Color.class))
				.excludeFieldsWithoutExposeAnnotation().create();
		System.out.println(gson.toJson(cat));
		// prints {&amp;quot;name&amp;quot;:&amp;quot;Cat&amp;quot;,&amp;quot;lazy&amp;quot;:null}

	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-cat-class:328ca424640a9366d8b50d13fb24324f&#34;&gt;The Cat class&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.awt.Color;

import com.google.gson.annotations.Expose;

public class Cat {
	@Expose
	private String name;
	private int age;
	private Color color;
	@Expose
	@Country
	private String country;
	@Expose
	private Boolean lazy = null;

	public void setAge(int age) {
		this.age = age;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setColor(Color color) {
		this.color = color;
	}

	public int getAge() {
		return age;
	}

	public String getName() {
		return name;
	}

	public Color getColor() {
		return color;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getCountry() {
		return country;
	}

	public void setLazy(Boolean lazy) {
		this.lazy = lazy;
	}

	public Boolean getLazy() {
		return lazy;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-exclusion-strategy:328ca424640a9366d8b50d13fb24324f&#34;&gt;The Exclusion Strategy&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldAttributes;

/**
 * This class defines custom exclusion policy. We want to ignore all fields that
 * have been annotated with the Country annotation. Note that we can also ignore
 * fields based on name or type. This same policy can be applied to any class.
 * In this example we apply to the CAT class, but it is not limited to the cat
 * class.
 *
 */
public class CustomExclusionStrategy implements ExclusionStrategy {

	private Class classToExclude;

	public CustomExclusionStrategy(Class classToExclude) {
		this.classToExclude = classToExclude;
	}

	// This method is called for all fields. if the method returns false the
	// field is excluded from serialization
	@Override
	public boolean shouldSkipField(FieldAttributes f) {
		if (f.getAnnotation(Country.class) == null)
			return false;

		return true;
	}

	// This method is called for all classes. If the method returns false the
	// class is excluded.
	@Override
	public boolean shouldSkipClass(Class&amp;lt;?&amp;gt; clazz) {
		if (clazz.equals(classToExclude))
			return true;
		return false;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/json/java-google-json-exclusion-strategy.jsp&#34; title=&#34;Excluding certain fields from Java classes&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gson: Custom Serializer</title>
      <link>http://alimy.me/post/dev_201603122035/</link>
      <pubDate>Sat, 12 Mar 2016 20:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122035/</guid>
      <description>

&lt;p&gt;Just as we saw in the &lt;a href=&#34;http://alimy.me/post/dev_201603122030&#34;&gt;previous&lt;/a&gt; tutorial, Gson provides way to specify custom serializers and deserializers. Register a custom serializer with the GsonBuilder if you need you own way to convert a java object to json and you a custom deserializer if you dont like Gson&amp;rsquo;s way of converting json to the java object. The first example below shows a custom serializer and the second example shows a custom deserializer.&lt;/p&gt;

&lt;h3 id=&#34;custom-serializer:111b3d40cae40f94b365983d1c03789a&#34;&gt;Custom Serializer&lt;/h3&gt;

&lt;p&gt;Create a custom serializer by implementing a com.studytrails.json.gson.JsonSerializer and implementing the public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context); method. src is the source object and Type is the type of the source object. The example below demonstrates a custom Serializer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.lang.reflect.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.reflect.TypeToken;

public class DogSerializer implements JsonSerializer {
	@Override
	public JsonElement serialize(Dog src, Type typeOfSrc, JsonSerializationContext context) {
		// This method gets involved whenever the parser encounters the Dog
		// object (for which this serializer is registered)
		JsonObject object = new JsonObject();
		String name = src.getName().replaceAll(&amp;quot; &amp;quot;, &amp;quot;_&amp;quot;);
		object.addProperty(&amp;quot;name&amp;quot;, name);
		// we create the json object for the dog and send it back to the
		// Gson serializer
		return object;
	}

	public static void main(String[] args) {
		Animall&amp;lt;Dog&amp;gt; animal = new Animall&amp;lt;Dog&amp;gt;();
		Dog dog = new Dog(&amp;quot;I am a dog&amp;quot;);
		animal.setAnimal(dog);
		// Create the GsonBuilder and register a serializer for the Dog class.
		// Whenever the Dog class is encountered Gson calls the DogSerializer
		// we set pretty printing own to format the json
		Gson gson = new GsonBuilder().registerTypeAdapter(Dog.class, new DogSerializer()).setPrettyPrinting().create();
		// Since Animal contains generic type create the type using TypeToken
		// class.
		Type animalType = new TypeToken&amp;lt;Animal&amp;lt;Dog&amp;gt;&amp;gt;() {
		}.getType();
		System.out.println(gson.toJson(animal, animalType));
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Animal class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

public class Animal {

	public T animal;

	public void setAnimal(T animal) {
		this.animal = animal;
	}

	public T get() {
		return animal;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Dog class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

public class Dog {
	private String name;

	public Dog(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;custom-deserializer:111b3d40cae40f94b365983d1c03789a&#34;&gt;Custom DeSerializer&lt;/h4&gt;

&lt;p&gt;Use a custome De serializer to create a Dog Object from the json. To create a deserializer implement the public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.lang.reflect.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;

public class DogDeserialiser implements JsonDeserializer&amp;lt;Dog&amp;gt; {
	@Override
	public Dog deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
		String name = json.getAsJsonObject().get(&amp;quot;name&amp;quot;).getAsString();
		name = name.replace(&amp;quot; &amp;quot;, &amp;quot;_&amp;quot;);
		Dog dog = new Dog(name);

		return dog;
	}

	public static void main(String[] args) {
		String json = &amp;quot;{\&amp;quot;animal\&amp;quot;:{\&amp;quot;name\&amp;quot;:\&amp;quot;I am a dog\&amp;quot;}}&amp;quot;;
		Gson gson = new GsonBuilder().registerTypeAdapter(Dog.class, new DogDeserialiser()).create();
		Type animalType = new TypeToken&amp;lt;Animal&amp;lt;Dog&amp;gt;&amp;gt;() {
		}.getType();
		Animal&amp;lt;Dog&amp;gt; animal = gson.fromJson(json, animalType);
		System.out.println(animal.get().getName());
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/json/java-google-json-introduction.jsp&#34; title=&#34;Using Custom Serialization and Deserialization classes&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gson: Custom Type Adapter</title>
      <link>http://alimy.me/post/dev_201603122030/</link>
      <pubDate>Sat, 12 Mar 2016 20:30:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603122030/</guid>
      <description>&lt;p&gt;In the earlier tutorials we have seen how gson can serialize and deserialize java classes with or without hierarchies. By default, it introspects the classes and comes with with a strategy for serializing and deserializing it. However, in some cases, you want to specify your own conversion strategy. That is, you want to control how the java object is converted to json string and the other way round. Gson provides a capability to specify a custom type adapter. You tell Gson that for a particular class, use the conversion strategy specified by your custom adapter. Lets look at how to write the type adapter :
To write a custom adapter extend the com.google.gson.TypeAdapter abstract class. Implement the public abstract T read(JsonReader in) throws IOException; and public abstract void write(JsonWriter out, T value) throws IOException; methods. The adapter should also handle nulls. Create the Type adapter instance and then register it with the GsonBuilder. Create the Gson object from the GsonBuilder and then use that to serialize and deserialize. Lets look at an example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.io.IOUtils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class DatasetTypeAdapterExample8 {

	public static void main(String[] args) throws MalformedURLException, IOException {
		String url = &amp;quot;http://freemusicarchive.org/api/get/albums.json?api_key=60BLHNQCAOUFPIBZ&amp;amp;limit=5&amp;quot;;
		String json = IOUtils.toString(new URL(url));
		// Create the custom type adapter and register it with the GsonBuilder
		// class.
		Gson gson = new GsonBuilder().registerTypeAdapter(Dataset.class, new DatasetTypeAdapter()).create();
		// deserialize the json to Albums class. The Dataset objects are part of
		// the Albums class. Whenever Gson encounters an object of type DataSet
		// it calls the DatasetTypeAdapter to read and write json.
		Albums albums = gson.fromJson(json, Albums.class);
		System.out.println(albums.getDataset()[1].getAlbum_title());
		// prints
		// http://freemusicarchive.org/music/The_Yes_Sirs/Through_The_Cracks_Mix_Vol_1/
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Adapter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.io.IOException;

import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;

/**
 * The Dataset class contains the information about a particular Album.
 * album_title and album_url are two distinct fields in the json. The Dataset
 * object contains the field album_title. Normally Gson would map the
 * album_title property in the json the the album_title field in the Dataset
 * object. However, we dont want that. We want to use the album_url property
 * from the json object to populate the album_title field in the Dataset object.
 * we build a custom TypeAdapter to do that. This is just a trivial case, you
 * could also combine album_url and album_title properties and set it to the
 * album_title field of the Dataset Object.
 *
 */
public class DatasetTypeAdapter extends TypeAdapter&amp;lt;Dataset&amp;gt; {
	@Override
	public Dataset read(JsonReader reader) throws IOException {
		// the first token is the start object
		JsonToken token = reader.peek();
		Dataset dataset = new Dataset();
		if (token.equals(JsonToken.BEGIN_OBJECT)) {
			reader.beginObject();
			while (!reader.peek().equals(JsonToken.END_OBJECT)) {
				if (reader.peek().equals(JsonToken.NAME)) {
					if (reader.nextName().equals(&amp;quot;album_url&amp;quot;))
						dataset.setAlbum_title(reader.nextString());
					else
						reader.skipValue();

				}
			}
			reader.endObject();

		}
		return dataset;
	}

	@Override
	public void write(JsonWriter out, Dataset value) throws IOException {

	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Albums class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;


public class Albums {

	private String title;
	private Dataset[] dataset;

	public void setTitle(String title) {
		this.title = title;
	}

	public void setDataset(Dataset[] dataset) {
		this.dataset = dataset;
	}

	public String getTitle() {
		return title;
	}

	public Dataset[] getDataset() {
		return dataset;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Dataset class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.studytrails.json.gson;

import java.util.HashMap;
import java.util.Map;

public class Dataset {
	private String album_id;
	private String album_title;
	private Map&amp;lt;String , Object&amp;gt; otherProperties = new HashMap&amp;lt;String , Object&amp;gt;();

	public String getAlbum_id() {
		return album_id;
	}

	public void setAlbum_id(String album_id) {
		this.album_id = album_id;
	}

	public String getAlbum_title() {
		return album_title;
	}

	public void setAlbum_title(String album_title) {
		this.album_title = album_title;
	}

	public Object get(String name) {
		return otherProperties.get(name);
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/json/java-google-json-type-adapter.jsp&#34; title=&#34;Using Custom type adapters&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
