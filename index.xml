<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>北 野 on 北 野 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/</link>
    
    
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <updated>Sun, 10 Mar 2019 17:06:00 CST</updated>
    
    <item>
      <title>Toyota GT86</title>
      <link>http://alimy.me/post/art_201903101706/</link>
      <pubDate>Sun, 10 Mar 2019 17:06:00 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201903101706/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20190310170600.webp&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20190310170600.webp&#34; alt=&#34;图片加载中...请使用支持Webp的浏览器加速查看&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toyota GT86（&lt;a href=&#34;http://alimy.me/images/post/20190310170600.jpeg&#34; title=&#34;jpeg格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>http://alimy.me/post/dev_201901101804/</link>
      <pubDate>Thu, 10 Jan 2019 18:04:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201901101804/</guid>
      <description>&lt;h4 id=&#34;version-3-0-2&#34;&gt;Version 3.0.2&lt;/h4&gt;

&lt;p&gt;The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;NOT RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be interpreted as described in &lt;a href=&#34;https://tools.ietf.org/html/bcp14&#34;&gt;BCP 14&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc2119&#34;&gt;RFC2119&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc8174&#34;&gt;RFC8174&lt;/a&gt; when, and only when, they appear in all capitals, as shown here.&lt;/p&gt;

&lt;p&gt;This document is licensed under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;The Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.&lt;/p&gt;

&lt;p&gt;An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definitions&#34;&gt;Definitions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#oasDocument&#34;&gt;OpenAPI Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mediaTypes&#34;&gt;Media Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#httpCodes&#34;&gt;HTTP Status Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specification&#34;&gt;Specification&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#documentStructure&#34;&gt;Document Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataTypes&#34;&gt;Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#richText&#34;&gt;Rich Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relativeReferences&#34;&gt;Relative References In URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#schema&#34;&gt;Schema&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#oasObject&#34;&gt;OpenAPI Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contactObject&#34;&gt;Contact Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#licenseObject&#34;&gt;License Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#serverVariableObject&#34;&gt;Server Variable Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#encodingObject&#34;&gt;Encoding Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#responsesObject&#34;&gt;Responses Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tagObject&#34;&gt;Tag Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discriminatorObject&#34;&gt;Discriminator Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oauthFlowsObject&#34;&gt;OAuth Flows Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securityFiltering&#34;&gt;Security Filtering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#revisionHistory&#34;&gt;Appendix A: Revision History&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;h5 id=&#34;a-name-oasdocument-a-openapi-document&#34;&gt;&lt;a name=&#34;oasDocument&#34;&gt;&lt;/a&gt;OpenAPI Document&lt;/h5&gt;

&lt;p&gt;A document (or set of documents) that defines or describes an API. An OpenAPI definition uses and conforms to the OpenAPI Specification.&lt;/p&gt;

&lt;h5 id=&#34;a-name-pathtemplating-a-path-templating&#34;&gt;&lt;a name=&#34;pathTemplating&#34;&gt;&lt;/a&gt;Path Templating&lt;/h5&gt;

&lt;p&gt;Path templating refers to the usage of curly braces ({}) to mark a section of a URL path as replaceable using path parameters.&lt;/p&gt;

&lt;h5 id=&#34;a-name-mediatypes-a-media-types&#34;&gt;&lt;a name=&#34;mediaTypes&#34;&gt;&lt;/a&gt;Media Types&lt;/h5&gt;

&lt;p&gt;Media type definitions are spread across several resources.
The media type definitions SHOULD be in compliance with &lt;a href=&#34;https://tools.ietf.org/html/rfc6838&#34;&gt;RFC6838&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some examples of possible media type definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  text/plain; charset=utf-8
  application/json
  application/vnd.github+json
  application/vnd.github.v3+json
  application/vnd.github.v3.raw+json
  application/vnd.github.v3.text+json
  application/vnd.github.v3.html+json
  application/vnd.github.v3.full+json
  application/vnd.github.v3.diff
  application/vnd.github.v3.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;a-name-httpcodes-a-http-status-codes&#34;&gt;&lt;a name=&#34;httpCodes&#34;&gt;&lt;/a&gt;HTTP Status Codes&lt;/h5&gt;

&lt;p&gt;The HTTP Status Codes are used to indicate the status of the executed operation.
The available status codes are defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6&#34;&gt;RFC7231&lt;/a&gt; and registered status codes are listed in the &lt;a href=&#34;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&#34;&gt;IANA Status Code Registry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;specification&#34;&gt;Specification&lt;/h2&gt;

&lt;h3 id=&#34;versions&#34;&gt;Versions&lt;/h3&gt;

&lt;p&gt;The OpenAPI Specification is versioned using &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt; (semver) and follows the semver specification.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;major&lt;/code&gt;.&lt;code&gt;minor&lt;/code&gt; portion of the semver (for example &lt;code&gt;3.0&lt;/code&gt;) SHALL designate the OAS feature set. Typically, &lt;em&gt;&lt;code&gt;.patch&lt;/code&gt;&lt;/em&gt; versions address errors in this document, not the feature set. Tooling which supports OAS 3.0 SHOULD be compatible with all OAS 3.0.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between &lt;code&gt;3.0.0&lt;/code&gt; and &lt;code&gt;3.0.1&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Subsequent minor version releases of the OpenAPI Specification (incrementing the &lt;code&gt;minor&lt;/code&gt; version number) SHOULD NOT interfere with tooling developed to a lower minor version and same major version.  Thus a hypothetical &lt;code&gt;3.1.0&lt;/code&gt; specification SHOULD be usable with tooling designed for &lt;code&gt;3.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An OpenAPI document compatible with OAS 3.*.* contains a required &lt;a href=&#34;#oasVersion&#34;&gt;&lt;code&gt;openapi&lt;/code&gt;&lt;/a&gt; field which designates the semantic version of the OAS that it uses. (OAS 2.0 documents contain a top-level version field named &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#swaggerObject&#34;&gt;&lt;code&gt;swagger&lt;/code&gt;&lt;/a&gt; and value &lt;code&gt;&amp;quot;2.0&amp;quot;&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;format&#34;&gt;Format&lt;/h3&gt;

&lt;p&gt;An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.&lt;/p&gt;

&lt;p&gt;For example, if a field has an array value, the JSON array representation will be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   &amp;quot;field&amp;quot;: [ 1, 2, 3 ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All field names in the specification are &lt;strong&gt;case sensitive&lt;/strong&gt;.
This includes all fields that are used as keys in a map, except where explicitly noted that keys are &lt;strong&gt;case insensitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.&lt;/p&gt;

&lt;p&gt;Patterned fields MUST have unique names within the containing object.&lt;/p&gt;

&lt;p&gt;In order to preserve the ability to round-trip between YAML and JSON formats, YAML version &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html&#34;&gt;1.2&lt;/a&gt; is RECOMMENDED along with some additional constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tags MUST be limited to those allowed by the &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#id2803231&#34;&gt;JSON Schema ruleset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keys used in YAML maps MUST be limited to a scalar string, as defined by the &lt;a href=&#34;http://yaml.org/spec/1.2/spec.html#id2802346&#34;&gt;YAML Failsafe schema ruleset&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.&lt;/p&gt;

&lt;h3 id=&#34;a-name-documentstructure-a-document-structure&#34;&gt;&lt;a name=&#34;documentStructure&#34;&gt;&lt;/a&gt;Document Structure&lt;/h3&gt;

&lt;p&gt;An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the user. In the latter case, &lt;code&gt;$ref&lt;/code&gt; fields MUST be used in the specification to reference those parts as follows from the &lt;a href=&#34;http://json-schema.org&#34;&gt;JSON Schema&lt;/a&gt; definitions.&lt;/p&gt;

&lt;p&gt;It is RECOMMENDED that the root OpenAPI document be named: &lt;code&gt;openapi.json&lt;/code&gt; or &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-datatypes-a-data-types&#34;&gt;&lt;a name=&#34;dataTypes&#34;&gt;&lt;/a&gt;Data Types&lt;/h3&gt;

&lt;p&gt;Primitive data types in the OAS are based on the types supported by the &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-00#section-4.2&#34;&gt;JSON Schema Specification Wright Draft 00&lt;/a&gt;.
Note that &lt;code&gt;integer&lt;/code&gt; as a type is also supported and is defined as a JSON number without a fraction or exponent part.
&lt;code&gt;null&lt;/code&gt; is not supported as a type (see &lt;a href=&#34;#schemaNullable&#34;&gt;&lt;code&gt;nullable&lt;/code&gt;&lt;/a&gt; for an alternative solution).
Models are defined using the &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;, which is an extended subset of JSON Schema Specification Wright Draft 00.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dataTypeFormat&#34;&gt;&lt;/a&gt;Primitives have an optional modifier property: &lt;code&gt;format&lt;/code&gt;.
OAS uses several known formats to define in fine detail the data type being used.
However, to support documentation needs, the &lt;code&gt;format&lt;/code&gt; property is an open &lt;code&gt;string&lt;/code&gt;-valued property, and can have any value.
Formats such as &lt;code&gt;&amp;quot;email&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;uuid&amp;quot;&lt;/code&gt;, and so on, MAY be used even though undefined by this specification.
Types that are not accompanied by a &lt;code&gt;format&lt;/code&gt; property follow the type definition in the JSON Schema. Tools that do not recognize a specific &lt;code&gt;format&lt;/code&gt; MAY default back to the &lt;code&gt;type&lt;/code&gt; alone, as if the &lt;code&gt;format&lt;/code&gt; is not specified.&lt;/p&gt;

&lt;p&gt;The formats defined by the OAS are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypes&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeFormat&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;signed 32 bits&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;signed 64 bits (a.k.a long)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;base64 encoded characters&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any sequence of octets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;As defined by &lt;code&gt;full-date&lt;/code&gt; - &lt;a href=&#34;https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date-time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;As defined by &lt;code&gt;date-time&lt;/code&gt; - &lt;a href=&#34;https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A hint to UIs to obscure input.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;a-name-richtext-a-rich-text-formatting&#34;&gt;&lt;a name=&#34;richText&#34;&gt;&lt;/a&gt;Rich Text Formatting&lt;/h3&gt;

&lt;p&gt;Throughout the specification &lt;code&gt;description&lt;/code&gt; fields are noted as supporting CommonMark markdown formatting.
Where OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by &lt;a href=&#34;http://spec.commonmark.org/0.27/&#34;&gt;CommonMark 0.27&lt;/a&gt;. Tooling MAY choose to ignore some CommonMark features to address security concerns.&lt;/p&gt;

&lt;h3 id=&#34;a-name-relativereferences-a-relative-references-in-urls&#34;&gt;&lt;a name=&#34;relativeReferences&#34;&gt;&lt;/a&gt;Relative References in URLs&lt;/h3&gt;

&lt;p&gt;Unless specified otherwise, all properties that are URLs MAY be relative references as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-4.2&#34;&gt;RFC3986&lt;/a&gt;.
Relative references are resolved using the URLs defined in the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt; as a Base URI.&lt;/p&gt;

&lt;p&gt;Relative references used in &lt;code&gt;$ref&lt;/code&gt; are processed as per &lt;a href=&#34;https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&#34;&gt;JSON Reference&lt;/a&gt;, using the URL of the current document as the base URI. See also the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;schema&#34;&gt;Schema&lt;/h3&gt;

&lt;p&gt;In the following description, if a field is not explicitly &lt;strong&gt;REQUIRED&lt;/strong&gt; or described with a MUST or SHALL, it can be considered OPTIONAL.&lt;/p&gt;

&lt;h4 id=&#34;a-name-oasobject-a-openapi-object&#34;&gt;&lt;a name=&#34;oasObject&#34;&gt;&lt;/a&gt;OpenAPI Object&lt;/h4&gt;

&lt;p&gt;This is the root document object of the &lt;a href=&#34;#oasDocument&#34;&gt;OpenAPI document&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasVersion&#34;&gt;&lt;/a&gt;openapi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. This string MUST be the &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;semantic version number&lt;/a&gt; of the &lt;a href=&#34;#versions&#34;&gt;OpenAPI Specification version&lt;/a&gt; that the OpenAPI document uses. The &lt;code&gt;openapi&lt;/code&gt; field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is &lt;em&gt;not&lt;/em&gt; related to the API &lt;a href=&#34;#infoVersion&#34;&gt;&lt;code&gt;info.version&lt;/code&gt;&lt;/a&gt; string.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasInfo&#34;&gt;&lt;/a&gt;info&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. Provides metadata about the API. The metadata MAY be used by tooling as required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An array of Server Objects, which provide connectivity information to a target server. If the &lt;code&gt;servers&lt;/code&gt; property is not provided, or is an empty array, the default value would be a &lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt; with a &lt;a href=&#34;#serverUrl&#34;&gt;url&lt;/a&gt; value of &lt;code&gt;/&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasPaths&#34;&gt;&lt;/a&gt;paths&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The available paths and operations for the API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasComponents&#34;&gt;&lt;/a&gt;components&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An element to hold various schemas for the specification.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#tagObject&#34;&gt;Tag Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; must be declared. The tags that are not declared MAY be organized randomly or based on the tools&amp;rsquo; logic. Each tag name in the list MUST be unique.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oasExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-infoobject-a-info-object&#34;&gt;&lt;a name=&#34;infoObject&#34;&gt;&lt;/a&gt;Info Object&lt;/h4&gt;

&lt;p&gt;The object provides metadata about the API.
The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-1&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTitle&#34;&gt;&lt;/a&gt;title&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The title of the application.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the application. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTermsOfService&#34;&gt;&lt;/a&gt;termsOfService&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL to the Terms of Service for the API. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoContact&#34;&gt;&lt;/a&gt;contact&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#contactObject&#34;&gt;Contact Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The contact information for the exposed API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoLicense&#34;&gt;&lt;/a&gt;license&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#licenseObject&#34;&gt;License Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The license information for the exposed API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoVersion&#34;&gt;&lt;/a&gt;version&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The version of the OpenAPI document (which is distinct from the &lt;a href=&#34;#oasVersion&#34;&gt;OpenAPI Specification version&lt;/a&gt; or the API implementation version).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;info-object-example&#34;&gt;Info Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;Sample Pet Store App&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;This is a sample server for a pet store.&amp;quot;,
  &amp;quot;termsOfService&amp;quot;: &amp;quot;http://example.com/terms/&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://www.example.com/support&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;support@example.com&amp;quot;
  },
  &amp;quot;license&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
  },
  &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;title: Sample Pet Store App
description: This is a sample server for a pet store.
termsOfService: http://example.com/terms/
contact:
  name: API Support
  url: http://www.example.com/support
  email: support@example.com
license:
  name: Apache 2.0
  url: https://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-contactobject-a-contact-object&#34;&gt;&lt;a name=&#34;contactObject&#34;&gt;&lt;/a&gt;Contact Object&lt;/h4&gt;

&lt;p&gt;Contact information for the exposed API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-2&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The identifying name of the contact person/organization.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URL pointing to the contact information. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactEmail&#34;&gt;&lt;/a&gt;email&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The email address of the contact person/organization. MUST be in the format of an email address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;contact-object-example&#34;&gt;Contact Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;http://www.example.com/support&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;support@example.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: API Support
url: http://www.example.com/support
email: support@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-licenseobject-a-license-object&#34;&gt;&lt;a name=&#34;licenseObject&#34;&gt;&lt;/a&gt;License Object&lt;/h4&gt;

&lt;p&gt;License information for the exposed API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-3&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The license name used for the API.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL to the license used for the API. MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;license-object-example&#34;&gt;License Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Apache 2.0
url: https://www.apache.org/licenses/LICENSE-2.0.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-serverobject-a-server-object&#34;&gt;&lt;a name=&#34;serverObject&#34;&gt;&lt;/a&gt;Server Object&lt;/h4&gt;

&lt;p&gt;An object representing a Server.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-4&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. A URL to the target host.  This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in &lt;code&gt;{&lt;/code&gt;brackets&lt;code&gt;}&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional string describing the host designated by the URL. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariables&#34;&gt;&lt;/a&gt;variables&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#serverVariableObject&#34;&gt;Server Variable Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map between a variable name and its value.  The value is used for substitution in the server&amp;rsquo;s URL template.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;server-object-example&#34;&gt;Server Object Example&lt;/h5&gt;

&lt;p&gt;A single server would be described as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;url&amp;quot;: &amp;quot;https://development.gigantic-server.com/v1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Development server&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;url: https://development.gigantic-server.com/v1
description: Development server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows how multiple servers can be described, for example, at the OpenAPI Object&amp;rsquo;s &lt;a href=&#34;#oasServers&#34;&gt;&lt;code&gt;servers&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;servers&amp;quot;: [
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://development.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Development server&amp;quot;
    },
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://staging.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Staging server&amp;quot;
    },
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://api.gigantic-server.com/v1&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Production server&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows how variables can be used for a server configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;servers&amp;quot;: [
    {
      &amp;quot;url&amp;quot;: &amp;quot;https://{username}.gigantic-server.com:{port}/{basePath}&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;The production API server&amp;quot;,
      &amp;quot;variables&amp;quot;: {
        &amp;quot;username&amp;quot;: {
          &amp;quot;default&amp;quot;: &amp;quot;demo&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;this value is assigned by the service provider, in this example `gigantic-server.com`&amp;quot;
        },
        &amp;quot;port&amp;quot;: {
          &amp;quot;enum&amp;quot;: [
            &amp;quot;8443&amp;quot;,
            &amp;quot;443&amp;quot;
          ],
          &amp;quot;default&amp;quot;: &amp;quot;8443&amp;quot;
        },
        &amp;quot;basePath&amp;quot;: {
          &amp;quot;default&amp;quot;: &amp;quot;v2&amp;quot;
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - &#39;8443&#39;
        - &#39;443&#39;
      default: &#39;8443&#39;
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-servervariableobject-a-server-variable-object&#34;&gt;&lt;a name=&#34;serverVariableObject&#34;&gt;&lt;/a&gt;Server Variable Object&lt;/h4&gt;

&lt;p&gt;An object representing a Server Variable for server URL template substitution.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-5&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableEnum&#34;&gt;&lt;/a&gt;enum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;An enumeration of string values to be used if the substitution options are from a limited set.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The default value to use for substitution, which SHALL be sent if an alternate value is &lt;em&gt;not&lt;/em&gt; supplied. Note this behavior is different than the &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&amp;rsquo;s&lt;/a&gt; treatment of default values, because in those cases parameter values are optional.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;serverVariableDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional description for the server variable. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-componentsobject-a-components-object&#34;&gt;&lt;a name=&#34;componentsObject&#34;&gt;&lt;/a&gt;Components Object&lt;/h4&gt;

&lt;p&gt;Holds a set of reusable objects for different aspects of the OAS.
All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-6&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsSchemas&#34;&gt;&lt;/a&gt; schemas&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#schemaObject&#34;&gt;Schema Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsResponses&#34;&gt;&lt;/a&gt; responses&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#responseObject&#34;&gt;Response Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsParameters&#34;&gt;&lt;/a&gt; parameters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsExamples&#34;&gt;&lt;/a&gt; examples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#exampleObject&#34;&gt;Example Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsRequestBodies&#34;&gt;&lt;/a&gt; requestBodies&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsHeaders&#34;&gt;&lt;/a&gt; headers&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#headerObject&#34;&gt;Header Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsSecuritySchemes&#34;&gt;&lt;/a&gt; securitySchemes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsLinks&#34;&gt;&lt;/a&gt; links&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#linkObject&#34;&gt;Link Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;componentsCallbacks&#34;&gt;&lt;/a&gt; callbacks&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold reusable &lt;a href=&#34;#callbackObject&#34;&gt;Callback Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the fixed fields declared above are objects that MUST use keys that match the regular expression: &lt;code&gt;^[a-zA-Z0-9\.\-_]+$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Field Name Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User
User_1
User_Name
user-name
my.org.User
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;components-object-example&#34;&gt;Components Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;components&amp;quot;: {
  &amp;quot;schemas&amp;quot;: {
    &amp;quot;GeneralError&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;code&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
        },
        &amp;quot;message&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    },
    &amp;quot;Category&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;id&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
        },
        &amp;quot;name&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    },
    &amp;quot;Tag&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;id&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
        },
        &amp;quot;name&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    }
  },
  &amp;quot;parameters&amp;quot;: {
    &amp;quot;skipParam&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;skip&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;number of items to skip&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
      }
    },
    &amp;quot;limitParam&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;limit&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;max records to return&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot; : {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
      }
    }
  },
  &amp;quot;responses&amp;quot;: {
    &amp;quot;NotFound&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Entity not found.&amp;quot;
    },
    &amp;quot;IllegalInput&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Illegal input for operation.&amp;quot;
    },
    &amp;quot;GeneralError&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;General Error&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {
          &amp;quot;schema&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/GeneralError&amp;quot;
          }
        }
      }
    }
  },
  &amp;quot;securitySchemes&amp;quot;: {
    &amp;quot;api_key&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
    },
    &amp;quot;petstore_auth&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
      &amp;quot;flows&amp;quot;: {
        &amp;quot;implicit&amp;quot;: {
          &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://example.org/api/oauth/dialog&amp;quot;,
          &amp;quot;scopes&amp;quot;: {
            &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
            &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: &#39;#/components/schemas/GeneralError&#39;
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows: 
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathsobject-a-paths-object&#34;&gt;&lt;a name=&#34;pathsObject&#34;&gt;&lt;/a&gt;Paths Object&lt;/h4&gt;

&lt;p&gt;Holds the relative paths to the individual endpoints and their operations.
The path is appended to the URL from the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt; in order to construct the full URL.  The Paths MAY be empty, due to &lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathsPath&#34;&gt;&lt;/a&gt;/{path}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A relative path to an individual endpoint. The field name MUST begin with a slash. The path is &lt;strong&gt;appended&lt;/strong&gt; (no relative URL resolution) to the expanded URL from the &lt;a href=&#34;#serverObject&#34;&gt;&lt;code&gt;Server Object&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;url&lt;/code&gt; field in order to construct the full URL. &lt;a href=&#34;#pathTemplating&#34;&gt;Path templating&lt;/a&gt; is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it&amp;rsquo;s up to the tooling to decide which one to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;path-templating-matching&#34;&gt;Path Templating Matching&lt;/h5&gt;

&lt;p&gt;Assuming the following paths, the concrete definition, &lt;code&gt;/pets/mine&lt;/code&gt;, will be matched first if used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /pets/{petId}
  /pets/mine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following paths are considered identical and invalid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /pets/{petId}
  /pets/{name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following may lead to ambiguous resolution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  /{entity}/me
  /books/{id}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;paths-object-example&#34;&gt;Paths Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;/pets&amp;quot;: {
    &amp;quot;get&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Returns all pets from the system that the user has access to&amp;quot;,
      &amp;quot;responses&amp;quot;: {
        &amp;quot;200&amp;quot;: {          
          &amp;quot;description&amp;quot;: &amp;quot;A list of pets.&amp;quot;,
          &amp;quot;content&amp;quot;: {
            &amp;quot;application/json&amp;quot;: {
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/pet&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/pets:
  get:
    description: Returns all pets from the system that the user has access to
    responses:
      &#39;200&#39;:
        description: A list of pets.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: &#39;#/components/schemas/pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathitemobject-a-path-item-object&#34;&gt;&lt;a name=&#34;pathItemObject&#34;&gt;&lt;/a&gt;Path Item Object&lt;/h4&gt;

&lt;p&gt;Describes the operations available on a single path.
A Path Item MAY be empty, due to &lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;.
The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-7&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows for an external definition of this path item. The referenced structure MUST be in the format of a &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;. If there are conflicts between the referenced definition and this Path Item&amp;rsquo;s definition, the behavior is &lt;em&gt;undefined&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional, string summary, intended to apply to all operations in this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional, string description, intended to apply to all operations in this path. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemGet&#34;&gt;&lt;/a&gt;get&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a GET operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPut&#34;&gt;&lt;/a&gt;put&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a PUT operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPost&#34;&gt;&lt;/a&gt;post&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a POST operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemDelete&#34;&gt;&lt;/a&gt;delete&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a DELETE operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemOptions&#34;&gt;&lt;/a&gt;options&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a OPTIONS operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemHead&#34;&gt;&lt;/a&gt;head&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a HEAD operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPatch&#34;&gt;&lt;/a&gt;patch&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a PATCH operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemTrace&#34;&gt;&lt;/a&gt;trace&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A definition of a TRACE operation on this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An alternative &lt;code&gt;server&lt;/code&gt; array to service all operations in this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;. The list can use the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; to link to parameters that are defined at the &lt;a href=&#34;#componentsParameters&#34;&gt;OpenAPI Object&amp;rsquo;s components/parameters&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;path-item-object-example&#34;&gt;Path Item Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;get&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Returns pets based on ID&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;Find pets by ID&amp;quot;,
    &amp;quot;operationId&amp;quot;: &amp;quot;getPetsById&amp;quot;,
    &amp;quot;responses&amp;quot;: {
      &amp;quot;200&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;pet response&amp;quot;,
        &amp;quot;content&amp;quot;: {
          &amp;quot;*/*&amp;quot;: {
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
              }
            }
          }
        }
      },
      &amp;quot;default&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;error payload&amp;quot;,
        &amp;quot;content&amp;quot;: {
          &amp;quot;text/html&amp;quot;: {
            &amp;quot;schema&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
            }
          }
        }
      }
    }
  },
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet to use&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      },
      &amp;quot;style&amp;quot;: &amp;quot;simple&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;get:
  description: Returns pets based on ID
  summary: Find pets by ID
  operationId: getPetsById
  responses:
    &#39;200&#39;:
      description: pet response
      content:
        &#39;*/*&#39; :
          schema:
            type: array
            items:
              $ref: &#39;#/components/schemas/Pet&#39;
    default:
      description: error payload
      content:
        &#39;text/html&#39;:
          schema:
            $ref: &#39;#/components/schemas/ErrorModel&#39;
parameters:
- name: id
  in: path
  description: ID of pet to use
  required: true
  schema:
    type: array
    style: simple
    items:
      type: string  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-operationobject-a-operation-object&#34;&gt;&lt;a name=&#34;operationObject&#34;&gt;&lt;/a&gt;Operation Object&lt;/h4&gt;

&lt;p&gt;Describes a single API operation on a path.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-8&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short summary of what the operation does.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A verbose explanation of the operation behavior. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationId&#34;&gt;&lt;/a&gt;operationId&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is &lt;strong&gt;case-sensitive&lt;/strong&gt;. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of parameters that are applicable for this operation. If a parameter is already defined at the &lt;a href=&#34;#pathItemParameters&#34;&gt;Path Item&lt;/a&gt;, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;. The list can use the &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; to link to parameters that are defined at the &lt;a href=&#34;#componentsParameters&#34;&gt;OpenAPI Object&amp;rsquo;s components/parameters&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationRequestBody&#34;&gt;&lt;/a&gt;requestBody&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#requestBodyObject&#34;&gt;Request Body Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The request body applicable for this operation.  The &lt;code&gt;requestBody&lt;/code&gt; is only supported in HTTP methods where the HTTP 1.1 specification &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-4.3.1&#34;&gt;RFC7231&lt;/a&gt; has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague, &lt;code&gt;requestBody&lt;/code&gt; SHALL be ignored by consumers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationResponses&#34;&gt;&lt;/a&gt;responses&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responsesObject&#34;&gt;Responses Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The list of possible responses as they are returned from executing this operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationCallbacks&#34;&gt;&lt;/a&gt;callbacks&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a &lt;a href=&#34;#callbackObject&#34;&gt;Callback Object&lt;/a&gt; that describes a request that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDeprecated&#34;&gt;&lt;/a&gt;deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. This definition overrides any declared top-level &lt;a href=&#34;#oasSecurity&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/a&gt;. To remove a top-level security declaration, an empty array can be used.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationServers&#34;&gt;&lt;/a&gt;servers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;An alternative &lt;code&gt;server&lt;/code&gt; array to service this operation. If an alternative &lt;code&gt;server&lt;/code&gt; object is specified at the Path Item Object or Root level, it will be overridden by this value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;operation-object-example&#34;&gt;Operation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;tags&amp;quot;: [
    &amp;quot;pet&amp;quot;
  ],
  &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
  &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  ],
  &amp;quot;requestBody&amp;quot;: {
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/x-www-form-urlencoded&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
           &amp;quot;properties&amp;quot;: {
              &amp;quot;name&amp;quot;: { 
                &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;status&amp;quot;: {
                &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
             }
           },
        &amp;quot;required&amp;quot;: [&amp;quot;status&amp;quot;] 
        }
      }
    }
  },
  &amp;quot;responses&amp;quot;: {
    &amp;quot;200&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Pet updated.&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {},
        &amp;quot;application/xml&amp;quot;: {}
      }
    },
    &amp;quot;405&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Method Not Allowed&amp;quot;,
      &amp;quot;content&amp;quot;: {
        &amp;quot;application/json&amp;quot;: {},
        &amp;quot;application/xml&amp;quot;: {}
      }
    }
  },
  &amp;quot;security&amp;quot;: [
    {
      &amp;quot;petstore_auth&amp;quot;: [
        &amp;quot;write:pets&amp;quot;,
        &amp;quot;read:pets&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tags:
- pet
summary: Updates a pet in the store with form data
operationId: updatePetWithForm
parameters:
- name: petId
  in: path
  description: ID of pet that needs to be updated
  required: true
  schema:
    type: string
requestBody:
  content:
    &#39;application/x-www-form-urlencoded&#39;:
      schema:
       properties:
          name: 
            description: Updated name of the pet
            type: string
          status:
            description: Updated status of the pet
            type: string
       required:
         - status
responses:
  &#39;200&#39;:
    description: Pet updated.
    content: 
      &#39;application/json&#39;: {}
      &#39;application/xml&#39;: {}
  &#39;405&#39;:
    description: Method Not Allowed
    content: 
      &#39;application/json&#39;: {}
      &#39;application/xml&#39;: {}
security:
- petstore_auth:
  - write:pets
  - read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-externaldocumentationobject-a-external-documentation-object&#34;&gt;&lt;a name=&#34;externalDocumentationObject&#34;&gt;&lt;/a&gt;External Documentation Object&lt;/h4&gt;

&lt;p&gt;Allows referencing an external resource for extended documentation.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-9&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the target documentation. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The URL for the target documentation. Value MUST be in the format of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;external-documentation-object-example&#34;&gt;External Documentation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Find more info here&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://example.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: Find more info here
url: https://example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-parameterobject-a-parameter-object&#34;&gt;&lt;a name=&#34;parameterObject&#34;&gt;&lt;/a&gt;Parameter Object&lt;/h4&gt;

&lt;p&gt;Describes a single operation parameter.&lt;/p&gt;

&lt;p&gt;A unique parameter is defined by a combination of a &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; and &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;parameter-locations&#34;&gt;Parameter Locations&lt;/h5&gt;

&lt;p&gt;There are four possible parameter locations specified by the &lt;code&gt;in&lt;/code&gt; field:
* path - Used together with &lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt;, where the parameter value is actually part of the operation&amp;rsquo;s URL. This does not include the host or base path of the API. For example, in &lt;code&gt;/items/{itemId}&lt;/code&gt;, the path parameter is &lt;code&gt;itemId&lt;/code&gt;.
* query - Parameters that are appended to the URL. For example, in &lt;code&gt;/items?id=###&lt;/code&gt;, the query parameter is &lt;code&gt;id&lt;/code&gt;.
* header - Custom headers that are expected as part of the request. Note that &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#page-22&#34;&gt;RFC7230&lt;/a&gt; states header names are case insensitive.
* cookie - Used to pass a specific cookie value to the API.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-10&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the parameter. Parameter names are &lt;em&gt;case sensitive&lt;/em&gt;. &lt;ul&gt;&lt;li&gt;If &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&amp;quot;path&amp;quot;&lt;/code&gt;, the &lt;code&gt;name&lt;/code&gt; field MUST correspond to the associated path segment from the &lt;a href=&#34;#pathsPath&#34;&gt;path&lt;/a&gt; field in the &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;. See &lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt; for further information.&lt;li&gt;If &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&amp;quot;header&amp;quot;&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; field is &lt;code&gt;&amp;quot;Accept&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Content-Type&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;Authorization&amp;quot;&lt;/code&gt;, the parameter definition SHALL be ignored.&lt;li&gt;For all other cases, the &lt;code&gt;name&lt;/code&gt; corresponds to the parameter name used by the &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; property.&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The location of the parameter. Possible values are &amp;ldquo;query&amp;rdquo;, &amp;ldquo;header&amp;rdquo;, &amp;ldquo;path&amp;rdquo; or &amp;ldquo;cookie&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A brief description of the parameter. This could contain examples of use.  &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterRequired&#34;&gt;&lt;/a&gt;required&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether this parameter is mandatory. If the &lt;a href=&#34;#parameterIn&#34;&gt;parameter location&lt;/a&gt; is &amp;ldquo;path&amp;rdquo;, this property is &lt;strong&gt;REQUIRED&lt;/strong&gt; and its value MUST be &lt;code&gt;true&lt;/code&gt;. Otherwise, the property MAY be included and its default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDeprecated&#34;&gt;&lt;/a&gt; deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterAllowEmptyValue&#34;&gt;&lt;/a&gt; allowEmptyValue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the ability to pass empty-valued parameters. This is valid only for &lt;code&gt;query&lt;/code&gt; parameters and allows sending a parameter with an empty value. Default value is &lt;code&gt;false&lt;/code&gt;. If &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is used, and if behavior is &lt;code&gt;n/a&lt;/code&gt; (cannot be serialized), the value of &lt;code&gt;allowEmptyValue&lt;/code&gt; SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The rules for serialization of the parameter are specified in one of two ways.
For simpler scenarios, a &lt;a href=&#34;#parameterSchema&#34;&gt;&lt;code&gt;schema&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; can describe the structure and syntax of the parameter.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterStyle&#34;&gt;&lt;/a&gt;style&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of &lt;code&gt;in&lt;/code&gt;): for &lt;code&gt;query&lt;/code&gt; - &lt;code&gt;form&lt;/code&gt;; for &lt;code&gt;path&lt;/code&gt; - &lt;code&gt;simple&lt;/code&gt;; for &lt;code&gt;header&lt;/code&gt; - &lt;code&gt;simple&lt;/code&gt;; for &lt;code&gt;cookie&lt;/code&gt; - &lt;code&gt;form&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExplode&#34;&gt;&lt;/a&gt;explode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When this is true, parameter values of type &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt; generate separate parameters for each value of the array or key-value pair of the map.  For other types of parameters this property has no effect. When &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;form&lt;/code&gt;, the default value is &lt;code&gt;true&lt;/code&gt;. For all other styles, the default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterAllowReserved&#34;&gt;&lt;/a&gt;allowReserved&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the parameter value SHOULD allow reserved characters, as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.2&#34;&gt;RFC3986&lt;/a&gt; &lt;code&gt;:/?#[]@!$&amp;amp;&#39;()*+,;=&lt;/code&gt; to be included without percent-encoding. This property only applies to parameters with an &lt;code&gt;in&lt;/code&gt; value of &lt;code&gt;query&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The schema defining the type used for the parameter.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Example of the media type.  The example SHOULD match the specified schema and encoding properties if present.  The &lt;code&gt;example&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;examples&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;example&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExamples&#34;&gt;&lt;/a&gt;examples&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[ &lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Examples of the media type.  Each example SHOULD contain a value in the correct format as specified in the parameter encoding.  The &lt;code&gt;examples&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;example&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;examples&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more complex scenarios, the &lt;a href=&#34;#parameterContent&#34;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property can define the media type and schema of the parameter.
A parameter MUST contain either a &lt;code&gt;schema&lt;/code&gt; property, or a &lt;code&gt;content&lt;/code&gt; property, but not both.
When &lt;code&gt;example&lt;/code&gt; or &lt;code&gt;examples&lt;/code&gt; are provided in conjunction with the &lt;code&gt;schema&lt;/code&gt; object, the example MUST follow the prescribed serialization strategy for the parameter.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map containing the representations for the parameter. The key is the media type and the value describes it.  The map MUST only contain one entry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;style-values&#34;&gt;Style Values&lt;/h5&gt;

&lt;p&gt;In order to support common ways of serializing simple parameters, a set of &lt;code&gt;style&lt;/code&gt; values are defined.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;style&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypes&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;in&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path-style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.7&#34;&gt;RFC6570&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Label style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.5&#34;&gt;RFC6570&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;&lt;code&gt;primitive&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;, &lt;code&gt;cookie&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Form style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.8&#34;&gt;RFC6570&lt;/a&gt;. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; with a &lt;code&gt;csv&lt;/code&gt; (when &lt;code&gt;explode&lt;/code&gt; is false) or &lt;code&gt;multi&lt;/code&gt; (when &lt;code&gt;explode&lt;/code&gt; is true) value from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Simple style parameters defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc6570#section-3.2.2&#34;&gt;RFC6570&lt;/a&gt;.  This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; with a &lt;code&gt;csv&lt;/code&gt; value from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;spaceDelimited&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Space separated array values. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; equal to &lt;code&gt;ssv&lt;/code&gt; from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pipeDelimited&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pipe separated array values. This option replaces &lt;code&gt;collectionFormat&lt;/code&gt; equal to &lt;code&gt;pipes&lt;/code&gt; from OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;deepObject&lt;/td&gt;
&lt;td&gt;&lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Provides a simple way of rendering nested objects using form parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;style-examples&#34;&gt;Style Examples&lt;/h5&gt;

&lt;p&gt;Assume a parameter named &lt;code&gt;color&lt;/code&gt; has one of the following values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   string -&amp;gt; &amp;quot;blue&amp;quot;
   array -&amp;gt; [&amp;quot;blue&amp;quot;,&amp;quot;black&amp;quot;,&amp;quot;brown&amp;quot;]
   object -&amp;gt; { &amp;quot;R&amp;quot;: 100, &amp;quot;G&amp;quot;: 200, &amp;quot;B&amp;quot;: 150 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following table shows examples of rendering differences for each value.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeFormat&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;explode&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;string&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;array&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;object&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;;color&lt;/td&gt;
&lt;td&gt;;color=blue&lt;/td&gt;
&lt;td&gt;;color=blue,black,brown&lt;/td&gt;
&lt;td&gt;;color=R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;matrix&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;;color&lt;/td&gt;
&lt;td&gt;;color=blue&lt;/td&gt;
&lt;td&gt;;color=blue;color=black;color=brown&lt;/td&gt;
&lt;td&gt;;R=100;G=200;B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.blue&lt;/td&gt;
&lt;td&gt;.blue.black.brown&lt;/td&gt;
&lt;td&gt;.R.100.G.200.B.150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.blue&lt;/td&gt;
&lt;td&gt;.blue.black.brown&lt;/td&gt;
&lt;td&gt;.R=100.G=200.B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;color=&lt;/td&gt;
&lt;td&gt;color=blue&lt;/td&gt;
&lt;td&gt;color=blue,black,brown&lt;/td&gt;
&lt;td&gt;color=R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;form&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;color=&lt;/td&gt;
&lt;td&gt;color=blue&lt;/td&gt;
&lt;td&gt;color=blue&amp;amp;color=black&amp;amp;color=brown&lt;/td&gt;
&lt;td&gt;R=100&amp;amp;G=200&amp;amp;B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;td&gt;blue,black,brown&lt;/td&gt;
&lt;td&gt;R,100,G,200,B,150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;simple&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;td&gt;blue,black,brown&lt;/td&gt;
&lt;td&gt;R=100,G=200,B=150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;spaceDelimited&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue%20black%20brown&lt;/td&gt;
&lt;td&gt;R%20100%20G%20200%20B%20150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pipeDelimited&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;blue|black|brown&lt;/td&gt;
&lt;td&gt;R|100|G|200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;deepObject&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;color[R]=100&amp;amp;color[G]=200&amp;amp;color[B]=150&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;parameter-object-examples&#34;&gt;Parameter Object Examples&lt;/h5&gt;

&lt;p&gt;A header parameter with an array of 64 bit integer numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;token&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;token to be passed as a header&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
    }
  },
  &amp;quot;style&amp;quot;: &amp;quot;simple&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: token
in: header
description: token to be passed as a header
required: true
schema:
  type: array
  items:
    type: integer
    format: int64
style: simple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A path parameter of a string value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;username to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: username
in: path
description: username to fetch
required: true
schema:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An optional query parameter of a string value, allowing multiple values by repeating the query parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;ID of the object to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: false,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  },
  &amp;quot;style&amp;quot;: &amp;quot;form&amp;quot;,
  &amp;quot;explode&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: id
in: query
description: ID of the object to fetch
required: false
schema:
  type: array
  items:
    type: string
style: form
explode: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A free-form query parameter, allowing undefined parameters of a specific type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;freeForm&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;additionalProperties&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
  },
  &amp;quot;style&amp;quot;: &amp;quot;form&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in: query
name: freeForm
schema:
  type: object
  additionalProperties:
    type: integer
style: form
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A complex parameter using &lt;code&gt;content&lt;/code&gt; to define serialization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;coordinates&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;lat&amp;quot;,
          &amp;quot;long&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;lat&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;
          },
          &amp;quot;long&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in: query
name: coordinates
content:
  application/json:
    schema:
      type: object
      required:
        - lat
        - long
      properties:
        lat:
          type: number
        long:
          type: number
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-requestbodyobject-a-request-body-object&#34;&gt;&lt;a name=&#34;requestBodyObject&#34;&gt;&lt;/a&gt;Request Body Object&lt;/h4&gt;

&lt;p&gt;Describes a single request body.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-11&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A brief description of the request body. This could contain examples of use.  &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The content of the request body. The key is a media type or &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#appendix-D&#34;&gt;media type range&lt;/a&gt; and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;requestBodyRequired&#34;&gt;&lt;/a&gt;required&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines if the request body is required in the request. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;request-body-examples&#34;&gt;Request Body Examples&lt;/h5&gt;

&lt;p&gt;A request body with a referenced model definition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/User&amp;quot;
      },
      &amp;quot;examples&amp;quot;: {
          &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User Example&amp;quot;, 
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.json&amp;quot;
          } 
        }
    },
    &amp;quot;application/xml&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/User&amp;quot;
      },
      &amp;quot;examples&amp;quot;: {
          &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in XML&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.xml&amp;quot;
          }
        }
    },
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;examples&amp;quot;: {
        &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in Plain text&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.txt&amp;quot; 
        }
      } 
    },
    &amp;quot;*/*&amp;quot;: {
      &amp;quot;examples&amp;quot;: {
        &amp;quot;user&amp;quot; : {
            &amp;quot;summary&amp;quot;: &amp;quot;User example in other format&amp;quot;,
            &amp;quot;externalValue&amp;quot;: &amp;quot;http://foo.bar/examples/user-example.whatever&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: user to add to the system
content: 
  &#39;application/json&#39;:
    schema:
      $ref: &#39;#/components/schemas/User&#39;
    examples:
      user:
        summary: User Example
        externalValue: &#39;http://foo.bar/examples/user-example.json&#39;
  &#39;application/xml&#39;:
    schema:
      $ref: &#39;#/components/schemas/User&#39;
    examples:
      user:
        summary: User Example in XML
        externalValue: &#39;http://foo.bar/examples/user-example.xml&#39;
  &#39;text/plain&#39;:
    examples:
      user:
        summary: User example in text plain format
        externalValue: &#39;http://foo.bar/examples/user-example.txt&#39;
  &#39;*/*&#39;:
    examples:
      user: 
        summary: User example in other format
        externalValue: &#39;http://foo.bar/examples/user-example.whatever&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A body parameter that is an array of string values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: user to add to the system
required: true
content:
  text/plain:
    schema:
      type: array
      items:
        type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-mediatypeobject-a-media-type-object&#34;&gt;&lt;a name=&#34;mediaTypeObject&#34;&gt;&lt;/a&gt;Media Type Object&lt;/h4&gt;

&lt;p&gt;Each Media Type Object provides schema and examples for the media type identified by its key.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-12&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The schema defining the content of the request, response, or parameter.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The &lt;code&gt;example&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;examples&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;example&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeExamples&#34;&gt;&lt;/a&gt;examples&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[ &lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The &lt;code&gt;examples&lt;/code&gt; field is mutually exclusive of the &lt;code&gt;example&lt;/code&gt; field.  Furthermore, if referencing a &lt;code&gt;schema&lt;/code&gt; which contains an example, the &lt;code&gt;examples&lt;/code&gt; value SHALL &lt;em&gt;override&lt;/em&gt; the example provided by the schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;mediaTypeEncoding&#34;&gt;&lt;/a&gt;encoding&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#encodingObject&#34;&gt;Encoding Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to &lt;code&gt;requestBody&lt;/code&gt; objects when the media type is &lt;code&gt;multipart&lt;/code&gt; or &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;media-type-examples&#34;&gt;Media Type Examples&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;application/json&amp;quot;: {
    &amp;quot;schema&amp;quot;: {
         &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
    },
    &amp;quot;examples&amp;quot;: {
      &amp;quot;cat&amp;quot; : {
        &amp;quot;summary&amp;quot;: &amp;quot;An example of a cat&amp;quot;,
        &amp;quot;value&amp;quot;: 
          {
            &amp;quot;name&amp;quot;: &amp;quot;Fluffy&amp;quot;,
            &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;,
            &amp;quot;color&amp;quot;: &amp;quot;White&amp;quot;,
            &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;,
            &amp;quot;breed&amp;quot;: &amp;quot;Persian&amp;quot;
          }
      },
      &amp;quot;dog&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;An example of a dog with a cat&#39;s name&amp;quot;,
        &amp;quot;value&amp;quot; :  { 
          &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
          &amp;quot;petType&amp;quot;: &amp;quot;Dog&amp;quot;,
          &amp;quot;color&amp;quot;: &amp;quot;Black&amp;quot;,
          &amp;quot;gender&amp;quot;: &amp;quot;Female&amp;quot;,
          &amp;quot;breed&amp;quot;: &amp;quot;Mixed&amp;quot;
        },
      &amp;quot;frog&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/examples/frog-example&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;application/json: 
  schema:
    $ref: &amp;quot;#/components/schemas/Pet&amp;quot;
  examples:
    cat:
      summary: An example of a cat
      value:
        name: Fluffy
        petType: Cat
        color: White
        gender: male
        breed: Persian
    dog:
      summary: An example of a dog with a cat&#39;s name
      value:
        name: Puma
        petType: Dog
        color: Black
        gender: Female
        breed: Mixed
    frog:
      $ref: &amp;quot;#/components/examples/frog-example&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;considerations-for-file-uploads&#34;&gt;Considerations for File Uploads&lt;/h5&gt;

&lt;p&gt;In contrast with the 2.0 specification, &lt;code&gt;file&lt;/code&gt; input/output content in OpenAPI is described with the same semantics as any other schema type. Specifically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# content transferred with base64 encoding
schema:
  type: string
  format: base64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# content transferred in binary (octet-stream):
schema:
  type: string
  format: binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These examples apply to either input payloads of file uploads or response payloads.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;requestBody&lt;/code&gt; for submitting a file in a &lt;code&gt;POST&lt;/code&gt; operation may look like the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    application/octet-stream:
      # any media type is accepted, functionally equivalent to `*/*`
      schema:
        # a binary file of any type
        type: string
        format: binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, specific media types MAY be specified:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# multiple, specific media types may be specified:
requestBody:
  content:
      # a binary file of type png or jpeg
    &#39;image/jpeg&#39;:
      schema:
        type: string
        format: binary
    &#39;image/png&#39;:
      schema:
        type: string
        format: binary        
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upload multiple files, a &lt;code&gt;multipart&lt;/code&gt; media type MUST be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/form-data:
      schema:
        properties:
          # The property name &#39;file&#39; will be used for all files.
          file:
            type: array
            items:
              type: string
              format: binary

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;support-for-x-www-form-urlencoded-request-bodies&#34;&gt;Support for x-www-form-urlencoded Request Bodies&lt;/h5&gt;

&lt;p&gt;To submit content using form url encoding via &lt;a href=&#34;https://tools.ietf.org/html/rfc1866&#34;&gt;RFC1866&lt;/a&gt;, the following
definition may be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    application/x-www-form-urlencoded:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # complex types are stringified to support RFC 1866
            type: object
            properties: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the contents in the &lt;code&gt;requestBody&lt;/code&gt; MUST be stringified per &lt;a href=&#34;https://tools.ietf.org/html/rfc1866/&#34;&gt;RFC1866&lt;/a&gt; when passed to the server.  In addition, the &lt;code&gt;address&lt;/code&gt; field complex object will be stringified.&lt;/p&gt;

&lt;p&gt;When passing complex objects in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; content type, the default serialization strategy of such properties is described in the &lt;a href=&#34;#encodingObject&#34;&gt;&lt;code&gt;Encoding Object&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;#encodingStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property as &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;special-considerations-for-multipart-content&#34;&gt;Special Considerations for &lt;code&gt;multipart&lt;/code&gt; Content&lt;/h5&gt;

&lt;p&gt;It is common to use &lt;code&gt;multipart/form-data&lt;/code&gt; as a &lt;code&gt;Content-Type&lt;/code&gt; when transferring request bodies to operations.  In contrast to 2.0, a &lt;code&gt;schema&lt;/code&gt; is REQUIRED to define the input parameters to the operation when using &lt;code&gt;multipart&lt;/code&gt; content.  This supports complex structures as well as supporting mechanisms for multiple file uploads.&lt;/p&gt;

&lt;p&gt;When passing in &lt;code&gt;multipart&lt;/code&gt; types, boundaries MAY be used to separate sections of the content being transferred — thus, the following default &lt;code&gt;Content-Type&lt;/code&gt;s are defined for &lt;code&gt;multipart&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the property is a primitive, or an array of primitive values, the default Content-Type is &lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the property is complex, or an array of complex values, the default Content-Type is &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the property is a &lt;code&gt;type: string&lt;/code&gt; with &lt;code&gt;format: binary&lt;/code&gt; or &lt;code&gt;format: base64&lt;/code&gt; (aka a file object), the default Content-Type is &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # default Content-Type for objects is `application/json`
            type: object
            properties: {}
          profileImage:
            # default Content-Type for string/binary is `application/octet-stream`
            type: string
            format: binary
          children:
            # default Content-Type for arrays is based on the `inner` type (text/plain here)
            type: array
            items:
              type: string
          addresses:
            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)
            type: array
            items:
              type: &#39;#/components/schemas/Address&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;code&gt;encoding&lt;/code&gt; attribute is introduced to give you control over the serialization of parts of &lt;code&gt;multipart&lt;/code&gt; request bodies.  This attribute is &lt;em&gt;only&lt;/em&gt; applicable to &lt;code&gt;multipart&lt;/code&gt; and &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; request bodies.&lt;/p&gt;

&lt;h4 id=&#34;a-name-encodingobject-a-encoding-object&#34;&gt;&lt;a name=&#34;encodingObject&#34;&gt;&lt;/a&gt;Encoding Object&lt;/h4&gt;

&lt;p&gt;A single encoding definition applied to a single schema property.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-13&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingContentType&#34;&gt;&lt;/a&gt;contentType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The Content-Type for encoding a specific property. Default value depends on the property type: for &lt;code&gt;string&lt;/code&gt; with &lt;code&gt;format&lt;/code&gt; being &lt;code&gt;binary&lt;/code&gt; – &lt;code&gt;application/octet-stream&lt;/code&gt;; for other primitive types – &lt;code&gt;text/plain&lt;/code&gt;; for &lt;code&gt;object&lt;/code&gt; - &lt;code&gt;application/json&lt;/code&gt;; for &lt;code&gt;array&lt;/code&gt; – the default is defined based on the inner type. The value can be a specific media type (e.g. &lt;code&gt;application/json&lt;/code&gt;), a wildcard media type (e.g. &lt;code&gt;image/*&lt;/code&gt;), or a comma-separated list of the two types.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingHeaders&#34;&gt;&lt;/a&gt;headers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map allowing additional information to be provided as headers, for example &lt;code&gt;Content-Disposition&lt;/code&gt;.  &lt;code&gt;Content-Type&lt;/code&gt; is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a &lt;code&gt;multipart&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingStyle&#34;&gt;&lt;/a&gt;style&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Describes how a specific property value will be serialized depending on its type.  See &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; for details on the &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property. The behavior follows the same values as &lt;code&gt;query&lt;/code&gt; parameters, including default values. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingExplode&#34;&gt;&lt;/a&gt;explode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When this is true, property values of type &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt; generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When &lt;a href=&#34;#encodingStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;form&lt;/code&gt;, the default value is &lt;code&gt;true&lt;/code&gt;. For all other styles, the default value is &lt;code&gt;false&lt;/code&gt;. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;encodingAllowReserved&#34;&gt;&lt;/a&gt;allowReserved&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the parameter value SHOULD allow reserved characters, as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.2&#34;&gt;RFC3986&lt;/a&gt; &lt;code&gt;:/?#[]@!$&amp;amp;&#39;()*+,;=&lt;/code&gt; to be included without percent-encoding. The default value is &lt;code&gt;false&lt;/code&gt;. This property SHALL be ignored if the request body media type is not &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;encoding-object-example&#34;&gt;Encoding Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    multipart/mixed:
      schema:
        type: object
        properties:
          id:
            # default is text/plain
            type: string
            format: uuid
          address:
            # default is application/json
            type: object
            properties: {}
          historyMetadata:
            # need to declare XML format!
            description: metadata in XML format
            type: object
            properties: {}
          profileImage:
            # default is application/octet-stream, need to declare an image type only!
            type: string
            format: binary
      encoding:
        historyMetadata:
          # require XML Content-Type in utf-8 encoding
          contentType: application/xml; charset=utf-8
        profileImage:
          # only accept png/jpeg
          contentType: image/png, image/jpeg
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responsesobject-a-responses-object&#34;&gt;&lt;a name=&#34;responsesObject&#34;&gt;&lt;/a&gt;Responses Object&lt;/h4&gt;

&lt;p&gt;A container for the expected responses of an operation.
The container maps a HTTP response code to the expected response.&lt;/p&gt;

&lt;p&gt;The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.
However, documentation is expected to cover a successful operation response and any known errors.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; MAY be used as a default response object for all HTTP codes
that are not covered individually by the specification.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Responses Object&lt;/code&gt; MUST contain at least one response code, and it
SHOULD be the response for a successful operation call.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-14&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can link to a response that the &lt;a href=&#34;#componentsResponses&#34;&gt;OpenAPI Object&amp;rsquo;s components/responses&lt;/a&gt; section defines.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-1&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesCode&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#httpCodes&#34;&gt;HTTP Status Code&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Any &lt;a href=&#34;#httpCodes&#34;&gt;HTTP status code&lt;/a&gt; can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code.  A &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can link to a response that is defined in the &lt;a href=&#34;#componentsResponses&#34;&gt;OpenAPI Object&amp;rsquo;s components/responses&lt;/a&gt; section. This field MUST be enclosed in quotation marks (for example, &amp;ldquo;200&amp;rdquo;) for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character &lt;code&gt;X&lt;/code&gt;. For example, &lt;code&gt;2XX&lt;/code&gt; represents all response codes between &lt;code&gt;[200-299]&lt;/code&gt;. Only the following range definitions are allowed: &lt;code&gt;1XX&lt;/code&gt;, &lt;code&gt;2XX&lt;/code&gt;, &lt;code&gt;3XX&lt;/code&gt;, &lt;code&gt;4XX&lt;/code&gt;, and &lt;code&gt;5XX&lt;/code&gt;. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;responses-object-example&#34;&gt;Responses Object Example&lt;/h5&gt;

&lt;p&gt;A 200 response for a successful operation and a default response for others (implying an error):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;a pet to be returned&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
        }
      }
    }
  },
  &amp;quot;default&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unexpected error&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#39;200&#39;:
  description: a pet to be returned
  content: 
    application/json:
      schema:
        $ref: &#39;#/components/schemas/Pet&#39;
default:
  description: Unexpected error
  content:
    application/json:
      schema:
        $ref: &#39;#/components/schemas/ErrorModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responseobject-a-response-object&#34;&gt;&lt;a name=&#34;responseObject&#34;&gt;&lt;/a&gt;Response Object&lt;/h4&gt;

&lt;p&gt;Describes a single response from an API Operation, including design-time, static
&lt;code&gt;links&lt;/code&gt; to operations based on the response.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-15&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. A short description of the response. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseHeaders&#34;&gt;&lt;/a&gt;headers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt;  | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;Maps a header name to its definition. &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#page-22&#34;&gt;RFC7230&lt;/a&gt; states header names are case insensitive. If a response header is defined with the name &lt;code&gt;&amp;quot;Content-Type&amp;quot;&lt;/code&gt;, it SHALL be ignored.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseContent&#34;&gt;&lt;/a&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#mediaTypeObject&#34;&gt;Media Type Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map containing descriptions of potential response payloads. The key is a media type or &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#appendix-D&#34;&gt;media type range&lt;/a&gt; and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseLinks&#34;&gt;&lt;/a&gt;links&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;a href=&#34;#linkObject&#34;&gt;Link Object&lt;/a&gt; | &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for &lt;a href=&#34;#componentsObject&#34;&gt;Component Objects&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;response-object-examples&#34;&gt;Response Object Examples&lt;/h5&gt;

&lt;p&gt;Response of an array of a complex type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A complex object array response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;application/json&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/VeryComplexType&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A complex object array response
content: 
  application/json:
    schema: 
      type: array
      items:
        $ref: &#39;#/components/schemas/VeryComplexType&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response with a string type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
content:
  text/plain:
    schema:
      type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plain text response with headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;content&amp;quot;: {
    &amp;quot;text/plain&amp;quot;: {
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  },
  &amp;quot;headers&amp;quot;: {
    &amp;quot;X-Rate-Limit-Limit&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    },
    &amp;quot;X-Rate-Limit-Remaining&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of remaining requests in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    },
    &amp;quot;X-Rate-Limit-Reset&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of seconds left in the current period&amp;quot;,
      &amp;quot;schema&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
content:
  text/plain:
    schema:
      type: string
    example: &#39;whoa!&#39;
headers:
  X-Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Reset:
    description: The number of seconds left in the current period
    schema:
      type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response with no return value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;object created&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: object created
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-callbackobject-a-callback-object&#34;&gt;&lt;a name=&#34;callbackObject&#34;&gt;&lt;/a&gt;Callback Object&lt;/h4&gt;

&lt;p&gt;A map of possible out-of band callbacks related to the parent operation.
Each value in the map is a &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; that describes a set of requests that may be initiated by the API provider and the expected responses.
The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-2&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;callbackExpression&#34;&gt;&lt;/a&gt;{expression}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A Path Item Object used to define a callback request and expected responses.  A &lt;a href=&#34;../examples/v3.0/callback-example.yaml&#34;&gt;complete example&lt;/a&gt; is available.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;key-expression&#34;&gt;Key Expression&lt;/h5&gt;

&lt;p&gt;The key that identifies the &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; is a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request.
A simple example might be &lt;code&gt;$request.body#/url&lt;/code&gt;.
However, using a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; the complete HTTP message can be accessed.
This includes accessing any part of a body that a JSON Pointer &lt;a href=&#34;https://tools.ietf.org/html/rfc6901&#34;&gt;RFC6901&lt;/a&gt; can reference.&lt;/p&gt;

&lt;p&gt;For example, given the following HTTP request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1
Host: example.org
Content-Type: application/json
Content-Length: 187

{
  &amp;quot;failedUrl&amp;quot; : &amp;quot;http://clientdomain.com/failed&amp;quot;,
  &amp;quot;successUrls&amp;quot; : [
    &amp;quot;http://clientdomain.com/fast&amp;quot;,
    &amp;quot;http://clientdomain.com/medium&amp;quot;,
    &amp;quot;http://clientdomain.com/slow&amp;quot;
  ] 
}

201 Created
Location: http://example.org/subscription/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named &lt;code&gt;eventType&lt;/code&gt; and a query parameter named &lt;code&gt;queryUrl&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$url&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning&#34;&gt;http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POST&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.path.eventType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;myevent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.query.queryUrl&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/stillrunning&#34;&gt;http://clientdomain.com/stillrunning&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.header.content-Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;application/json&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.body#/failedUrl&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/failed&#34;&gt;http://clientdomain.com/failed&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$request.body#/successUrls/2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://clientdomain.com/medium&#34;&gt;http://clientdomain.com/medium&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$response.header.Location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://example.org/subscription/1&#34;&gt;http://example.org/subscription/1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;callback-object-example&#34;&gt;Callback Object Example&lt;/h5&gt;

&lt;p&gt;The following example shows a callback to the URL specified by the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; property in the request body.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;myWebhook:
  &#39;http://notificationServer.com?transactionId={$request.body#/id}&amp;amp;email={$request.body#/email}&#39;:
    post:
      requestBody:
        description: Callback payload
        content: 
          &#39;application/json&#39;:
            schema:
              $ref: &#39;#/components/schemas/SomePayload&#39;
      responses:
        &#39;200&#39;:
          description: webhook successfully processed and no retries will be performed
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-exampleobject-a-example-object&#34;&gt;&lt;a name=&#34;exampleObject&#34;&gt;&lt;/a&gt;Example Object&lt;/h4&gt;

&lt;h5 id=&#34;fixed-fields-16&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Short description for the example.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Long description for the example. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleValue&#34;&gt;&lt;/a&gt;value&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Embedded literal example. The &lt;code&gt;value&lt;/code&gt; field and &lt;code&gt;externalValue&lt;/code&gt; field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleExternalValue&#34;&gt;&lt;/a&gt;externalValue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.  The &lt;code&gt;value&lt;/code&gt; field and &lt;code&gt;externalValue&lt;/code&gt; field are mutually exclusive.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all cases, the example value is expected to be compatible with the type schema
of its associated value.  Tooling implementations MAY choose to
validate compatibility automatically, and reject the example value(s) if incompatible.&lt;/p&gt;

&lt;h5 id=&#34;example-object-examples&#34;&gt;Example Object Examples&lt;/h5&gt;

&lt;p&gt;In a model:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schemas:
  properties:
    name:
      type: string
      examples:
        name:
          $ref: http://example.org/petapi-examples/openapi.json#/components/examples/name-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a request body:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;requestBody:
  content:
    &#39;application/json&#39;:
      schema:
        $ref: &#39;#/components/schemas/Address&#39;
      examples: 
        foo:
          summary: A foo example
          value: {&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;}
        bar:
          summary: A bar example
          value: {&amp;quot;bar&amp;quot;: &amp;quot;baz&amp;quot;}
    &#39;application/xml&#39;:
      examples: 
        xmlExample:
          summary: This is an example in XML
          externalValue: &#39;http://example.org/examples/address-example.xml&#39;
    &#39;text/plain&#39;:
      examples:
        textExample: 
          summary: This is a text example
          externalValue: &#39;http://foo.bar/examples/address-example.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parameters:
  - name: &#39;zipCode&#39;
    in: &#39;query&#39;
    schema:
      type: &#39;string&#39;
      format: &#39;zip-code&#39;
      examples:
        zip-example: 
          $ref: &#39;#/components/examples/zip-example&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;responses:
  &#39;200&#39;:
    description: your car appointment has been booked
    content: 
      application/json:
        schema:
          $ref: &#39;#/components/schemas/SuccessResponse&#39;
        examples:
          confirmation-success:
            $ref: &#39;#/components/examples/confirmation-success&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-linkobject-a-link-object&#34;&gt;&lt;a name=&#34;linkObject&#34;&gt;&lt;/a&gt;Link Object&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Link object&lt;/code&gt; represents a possible design-time link for a response.
The presence of a link does not guarantee the caller&amp;rsquo;s ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.&lt;/p&gt;

&lt;p&gt;Unlike &lt;em&gt;dynamic&lt;/em&gt; links (i.e. links provided &lt;strong&gt;in&lt;/strong&gt; the response payload), the OAS linking mechanism does not require link information in the runtime response.&lt;/p&gt;

&lt;p&gt;For computing links, and providing instructions to execute them, a &lt;a href=&#34;#runtimeExpression&#34;&gt;runtime expression&lt;/a&gt; is used for accessing values in an operation and using them as parameters while invoking the linked operation.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-17&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkOperationRef&#34;&gt;&lt;/a&gt;operationRef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A relative or absolute reference to an OAS operation. This field is mutually exclusive of the &lt;code&gt;operationId&lt;/code&gt; field, and MUST point to an &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;. Relative &lt;code&gt;operationRef&lt;/code&gt; values MAY be used to locate an existing &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; in the OpenAPI definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkOperationId&#34;&gt;&lt;/a&gt;operationId&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of an &lt;em&gt;existing&lt;/em&gt;, resolvable OAS operation, as defined with a unique &lt;code&gt;operationId&lt;/code&gt;.  This field is mutually exclusive of the &lt;code&gt;operationRef&lt;/code&gt; field.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, Any | &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A map representing parameters to pass to an operation as specified with &lt;code&gt;operationId&lt;/code&gt; or identified via &lt;code&gt;operationRef&lt;/code&gt;. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the &lt;a href=&#34;#parameterIn&#34;&gt;parameter location&lt;/a&gt; &lt;code&gt;[{in}.]{name}&lt;/code&gt; for operations that use the same parameter name in different locations (e.g. path.id).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkRequestBody&#34;&gt;&lt;/a&gt;requestBody&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any | &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A literal value or &lt;a href=&#34;#runtimeExpression&#34;&gt;{expression}&lt;/a&gt; to use as a request body when calling the target operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A description of the link. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;linkServer&#34;&gt;&lt;/a&gt;server&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#serverObject&#34;&gt;Server Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A server object to be used by the target operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A linked operation MUST be identified using either an &lt;code&gt;operationRef&lt;/code&gt; or &lt;code&gt;operationId&lt;/code&gt;.
In the case of an &lt;code&gt;operationId&lt;/code&gt;, it MUST be unique and resolved in the scope of the OAS document.
Because of the potential for name clashes, the &lt;code&gt;operationRef&lt;/code&gt; syntax is preferred
for specifications with external references.&lt;/p&gt;

&lt;h5 id=&#34;examples&#34;&gt;Examples&lt;/h5&gt;

&lt;p&gt;Computing a link from a request operation where the &lt;code&gt;$request.path.id&lt;/code&gt; is used to pass a request parameter to the linked operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;paths:
  /users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: the user identifier, as userId 
      schema:
        type: string
    get:
      responses:
        &#39;200&#39;:
          description: the user being returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid: # the unique user id
                    type: string
                    format: uuid
          links:
            address:
              # the target link operationId
              operationId: getUserAddress
              parameters:
                # get the `id` field from the request path parameter named `id`
                userId: $request.path.id
  # the path item of the linked operation
  /users/{userid}/address:
    parameters:
    - name: userid
      in: path
      required: true
      description: the user identifier, as userId 
      schema:
        type: string
    # linked operation
    get:
      operationId: getUserAddress
      responses:
        &#39;200&#39;:
          description: the user&#39;s address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a runtime expression fails to evaluate, no parameter value is passed to the target operation.&lt;/p&gt;

&lt;p&gt;Values from the response body can be used to drive a linked operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  address:
    operationId: getUserAddressByUUID
    parameters:
      # get the `uuid` field from the `uuid` field in the response body
      userUuid: $response.body#/uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clients follow all links at their discretion.
Neither permissions, nor the capability to make a successful call to that link, is guaranteed
solely by the existence of a relationship.&lt;/p&gt;

&lt;h5 id=&#34;operationref-examples&#34;&gt;OperationRef Examples&lt;/h5&gt;

&lt;p&gt;As references to &lt;code&gt;operationId&lt;/code&gt; MAY NOT be possible (the &lt;code&gt;operationId&lt;/code&gt; is an optional
value), references MAY also be made through a relative &lt;code&gt;operationRef&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  UserRepositories:
    # returns array of &#39;#/components/schemas/repository&#39;
    operationRef: &#39;#/paths/~12.0~1repositories~1{username}/get&#39;
    parameters:
      username: $response.body#/username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or an absolute &lt;code&gt;operationRef&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;links:
  UserRepositories:
    # returns array of &#39;#/components/schemas/repository&#39;
    operationRef: &#39;https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get&#39;
    parameters:
      username: $response.body#/username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the use of &lt;code&gt;operationRef&lt;/code&gt;, the &lt;em&gt;escaped forward-slash&lt;/em&gt; is necessary when
using JSON references.&lt;/p&gt;

&lt;h5 id=&#34;a-name-runtimeexpression-a-runtime-expressions&#34;&gt;&lt;a name=&#34;runtimeExpression&#34;&gt;&lt;/a&gt;Runtime Expressions&lt;/h5&gt;

&lt;p&gt;Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.
This mechanism is used by &lt;a href=&#34;#linkObject&#34;&gt;Link Objects&lt;/a&gt; and &lt;a href=&#34;#callbackObject&#34;&gt;Callback Objects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The runtime expression is defined by the following &lt;a href=&#34;https://tools.ietf.org/html/rfc5234&#34;&gt;ABNF&lt;/a&gt; syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      expression = ( &amp;quot;$url&amp;quot; | &amp;quot;$method&amp;quot; | &amp;quot;$statusCode&amp;quot; | &amp;quot;$request.&amp;quot; source | &amp;quot;$response.&amp;quot; source )
      source = ( header-reference | query-reference | path-reference | body-reference )  
      header-reference = &amp;quot;header.&amp;quot; token
      query-reference = &amp;quot;query.&amp;quot; name  
      path-reference = &amp;quot;path.&amp;quot; name
      body-reference = &amp;quot;body&amp;quot; [&amp;quot;#&amp;quot; fragment]
      fragment = a JSON Pointer [RFC 6901](https://tools.ietf.org/html/rfc6901)  
      name = *( char )
      char = as per RFC [7159](https://tools.ietf.org/html/rfc7159#section-7)
      token = as per RFC [7230](https://tools.ietf.org/html/rfc7230#section-3.2.6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; identifier is case-sensitive, whereas &lt;code&gt;token&lt;/code&gt; is not.&lt;/p&gt;

&lt;p&gt;The table below provides examples of runtime expressions and examples of their use in a value:&lt;/p&gt;

&lt;h5 id=&#34;a-name-runtimeexpressionexamples-a-examples&#34;&gt;&lt;a name=&#34;runtimeExpressionExamples&#34;&gt;&lt;/a&gt;Examples&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source Location&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;example expression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP Method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$method&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The allowable values for the &lt;code&gt;$method&lt;/code&gt; will be those for the HTTP operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Requested media type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.header.accept&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request parameter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.path.id&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Request parameters MUST be declared in the &lt;code&gt;parameters&lt;/code&gt; section of the parent operation or they cannot be evaluated. This includes request headers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request body property&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$request.body#/user/uuid&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In operations which accept payloads, references may be made to portions of the &lt;code&gt;requestBody&lt;/code&gt; or the entire body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Request URL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$url&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Response value&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$response.body#/status&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In operations which return payloads, references may be made to portions of the response body or the entire body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Response header&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;$response.header.Server&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Single header values only are available&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Runtime expressions preserve the type of the referenced value.
Expressions can be embedded into string values by surrounding the expression with &lt;code&gt;{}&lt;/code&gt; curly braces.&lt;/p&gt;

&lt;h4 id=&#34;a-name-headerobject-a-header-object&#34;&gt;&lt;a name=&#34;headerObject&#34;&gt;&lt;/a&gt;Header Object&lt;/h4&gt;

&lt;p&gt;The Header Object follows the structure of the &lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; with the following changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; MUST NOT be specified, it is given in the corresponding &lt;code&gt;headers&lt;/code&gt; map.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; MUST NOT be specified, it is implicitly in &lt;code&gt;header&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All traits that are affected by the location MUST be applicable to a location of &lt;code&gt;header&lt;/code&gt; (for example, &lt;a href=&#34;#parameterStyle&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;header-object-example&#34;&gt;Header Object Example&lt;/h5&gt;

&lt;p&gt;A simple header of type &lt;code&gt;integer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: The number of allowed requests in the current period
schema:
  type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-tagobject-a-tag-object&#34;&gt;&lt;a name=&#34;tagObject&#34;&gt;&lt;/a&gt;Tag Object&lt;/h4&gt;

&lt;p&gt;Adds metadata to a single tag that is used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;.
It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-18&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the tag.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description for the tag. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;tag-object-example&#34;&gt;Tag Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
	&amp;quot;description&amp;quot;: &amp;quot;Pets operations&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: pet
description: Pets operations
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-referenceobject-a-reference-object&#34;&gt;&lt;a name=&#34;referenceObject&#34;&gt;&lt;/a&gt;Reference Object&lt;/h4&gt;

&lt;p&gt;A simple object to allow referencing other components in the specification, internally and externally.&lt;/p&gt;

&lt;p&gt;The Reference Object is defined by &lt;a href=&#34;https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&#34;&gt;JSON Reference&lt;/a&gt; and follows the same structure, behavior and rules.&lt;/p&gt;

&lt;p&gt;For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-19&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;referenceRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The reference string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object cannot be extended with additional properties and any properties added SHALL be ignored.&lt;/p&gt;

&lt;h5 id=&#34;reference-object-example&#34;&gt;Reference Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: &#39;#/components/schemas/Pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-schema-document-example&#34;&gt;Relative Schema Document Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;Pet.json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: Pet.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-documents-with-embedded-schema-example&#34;&gt;Relative Documents With Embedded Schema Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;definitions.json#/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: definitions.yaml#/Pet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-schemaobject-a-schema-object&#34;&gt;&lt;a name=&#34;schemaObject&#34;&gt;&lt;/a&gt;Schema Object&lt;/h4&gt;

&lt;p&gt;The Schema Object allows the definition of input and output data types.
These types can be objects, but also primitives and arrays.
This object is an extended subset of the &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON Schema Specification Wright Draft 00&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information about the properties, see &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-00&#34;&gt;JSON Schema Core&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/draft-wright-json-schema-validation-00&#34;&gt;JSON Schema Validation&lt;/a&gt;.
Unless stated otherwise, the property definitions follow the JSON Schema.&lt;/p&gt;

&lt;h5 id=&#34;properties&#34;&gt;Properties&lt;/h5&gt;

&lt;p&gt;The following properties are taken directly from the JSON Schema definition and follow the same specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;multipleOf&lt;/li&gt;
&lt;li&gt;maximum&lt;/li&gt;
&lt;li&gt;exclusiveMaximum&lt;/li&gt;
&lt;li&gt;minimum&lt;/li&gt;
&lt;li&gt;exclusiveMinimum&lt;/li&gt;
&lt;li&gt;maxLength&lt;/li&gt;
&lt;li&gt;minLength&lt;/li&gt;
&lt;li&gt;pattern (This string SHOULD be a valid regular expression, according to the &lt;a href=&#34;https://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5&#34;&gt;ECMA 262 regular expression&lt;/a&gt; dialect)&lt;/li&gt;
&lt;li&gt;maxItems&lt;/li&gt;
&lt;li&gt;minItems&lt;/li&gt;
&lt;li&gt;uniqueItems&lt;/li&gt;
&lt;li&gt;maxProperties&lt;/li&gt;
&lt;li&gt;minProperties&lt;/li&gt;
&lt;li&gt;required&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following properties are taken from the JSON Schema definition but their definitions were adjusted to the OpenAPI Specification.
- type - Value MUST be a string. Multiple types via an array are not supported.
- allOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- oneOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- anyOf - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- not - Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema.
- items - Value MUST be an object and not an array. Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema. &lt;code&gt;items&lt;/code&gt; MUST be present if the &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;array&lt;/code&gt;.
- properties - Property definitions MUST be a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema (inline or referenced).
- additionalProperties - Value can be boolean or object. Inline or referenced schema MUST be of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; and not a standard JSON Schema. Consistent with JSON Schema, &lt;code&gt;additionalProperties&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;.
- description - &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.
- format - See &lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt; for further details. While relying on JSON Schema&amp;rsquo;s defined formats, the OAS offers a few additional predefined formats.
- default - The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object defined at the same level. For example, if &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt;, then &lt;code&gt;default&lt;/code&gt; can be &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; but cannot be &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, any time a Schema Object can be used, a &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; can be used in its place. This allows referencing definitions instead of defining them inline.&lt;/p&gt;

&lt;p&gt;Additional properties defined by the JSON Schema specification that are not mentioned here are strictly unsupported.&lt;/p&gt;

&lt;p&gt;Other than the JSON Schema subset fields, the following fields MAY be used for further schema documentation:&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-20&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaNullable&#34;&gt;&lt;/a&gt;nullable&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows sending a &lt;code&gt;null&lt;/code&gt; value for the defined schema. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaDiscriminator&#34;&gt;&lt;/a&gt;discriminator&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#discriminatorObject&#34;&gt;Discriminator Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See &lt;a href=&#34;#schemaComposition&#34;&gt;Composition and Inheritance&lt;/a&gt; for more details.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaReadOnly&#34;&gt;&lt;/a&gt;readOnly&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Relevant only for Schema &lt;code&gt;&amp;quot;properties&amp;quot;&lt;/code&gt; definitions. Declares the property as &amp;ldquo;read only&amp;rdquo;. This means that it MAY be sent as part of a response but SHOULD NOT be sent as part of the request. If the property is marked as &lt;code&gt;readOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt; and is in the &lt;code&gt;required&lt;/code&gt; list, the &lt;code&gt;required&lt;/code&gt; will take effect on the response only. A property MUST NOT be marked as both &lt;code&gt;readOnly&lt;/code&gt; and &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaWriteOnly&#34;&gt;&lt;/a&gt;writeOnly&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Relevant only for Schema &lt;code&gt;&amp;quot;properties&amp;quot;&lt;/code&gt; definitions. Declares the property as &amp;ldquo;write only&amp;rdquo;. Therefore, it MAY be sent as part of a request but SHOULD NOT be sent as part of the response. If the property is marked as &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt; and is in the &lt;code&gt;required&lt;/code&gt; list, the &lt;code&gt;required&lt;/code&gt; will take effect on the request only. A property MUST NOT be marked as both &lt;code&gt;readOnly&lt;/code&gt; and &lt;code&gt;writeOnly&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaXml&#34;&gt;&lt;/a&gt;xml&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional external documentation for this schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaDeprecated&#34;&gt;&lt;/a&gt; deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies that a schema is deprecated and SHOULD be transitioned out of usage. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h6 id=&#34;a-name-schemacomposition-a-composition-and-inheritance-polymorphism&#34;&gt;&lt;a name=&#34;schemaComposition&#34;&gt;&lt;/a&gt;Composition and Inheritance (Polymorphism)&lt;/h6&gt;

&lt;p&gt;The OpenAPI Specification allows combining and extending model definitions using the &lt;code&gt;allOf&lt;/code&gt; property of JSON Schema, in effect offering model composition.
&lt;code&gt;allOf&lt;/code&gt; takes an array of object definitions that are validated &lt;em&gt;independently&lt;/em&gt; but together compose a single object.&lt;/p&gt;

&lt;p&gt;While composition offers model extensibility, it does not imply a hierarchy between the models.
To support polymorphism, the OpenAPI Specification adds the &lt;code&gt;discriminator&lt;/code&gt; field.
When used, the &lt;code&gt;discriminator&lt;/code&gt; will be the name of the property that decides which schema definition validates the structure of the model.
As such, the &lt;code&gt;discriminator&lt;/code&gt; field MUST be a required field.
There are two ways to define the value of a discriminator for an inheriting instance.
- Use the schema name.
- Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.
As such, inline schema definitions, which do not have a given id, &lt;em&gt;cannot&lt;/em&gt; be used in polymorphism.&lt;/p&gt;

&lt;h6 id=&#34;xml-modeling&#34;&gt;XML Modeling&lt;/h6&gt;

&lt;p&gt;The &lt;a href=&#34;#schemaXml&#34;&gt;xml&lt;/a&gt; property allows extra definitions when translating the JSON definition to XML.
The &lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt; contains additional information about the available options.&lt;/p&gt;

&lt;h5 id=&#34;schema-object-examples&#34;&gt;Schema Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;primitive-sample&#34;&gt;Primitive Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: string
format: email
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;simple-model&#34;&gt;Simple Model&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;properties&amp;quot;: {
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;address&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Address&amp;quot;
    },
    &amp;quot;age&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
      &amp;quot;minimum&amp;quot;: 0
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
required:
- name
properties:
  name:
    type: string
  address:
    $ref: &#39;#/components/schemas/Address&#39;
  age:
    type: integer
    format: int32
    minimum: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-map-dictionary-properties&#34;&gt;Model with Map/Dictionary Properties&lt;/h6&gt;

&lt;p&gt;For a simple string to string mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a string to model mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ComplexModel&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  $ref: &#39;#/components/schemas/ComplexModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-example&#34;&gt;Model with Example&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;id&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
    },
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  },
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;example&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
    &amp;quot;id&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
properties:
  id:
    type: integer
    format: int64
  name:
    type: string
required:
- name
example:
  name: Puma
  id: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-composition&#34;&gt;Models with Composition&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;components&amp;quot;: {
    &amp;quot;schemas&amp;quot;: {
      &amp;quot;ErrorModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;message&amp;quot;,
          &amp;quot;code&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;message&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;code&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;minimum&amp;quot;: 100,
            &amp;quot;maximum&amp;quot;: 600
          }
        }
      },
      &amp;quot;ExtendedErrorModel&amp;quot;: {
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ErrorModel&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;required&amp;quot;: [
              &amp;quot;rootCause&amp;quot;
            ],
            &amp;quot;properties&amp;quot;: {
              &amp;quot;rootCause&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              }
            }
          }
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf:
      - $ref: &#39;#/components/schemas/ErrorModel&#39;
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-polymorphism-support&#34;&gt;Models with Polymorphism Support&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;components&amp;quot;: {
    &amp;quot;schemas&amp;quot;: {
      &amp;quot;Pet&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;discriminator&amp;quot;: {
          &amp;quot;propertyName&amp;quot;: &amp;quot;petType&amp;quot;
        },
        &amp;quot;properties&amp;quot;: {
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;petType&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;required&amp;quot;: [
          &amp;quot;name&amp;quot;,
          &amp;quot;petType&amp;quot;
        ]
      },
      &amp;quot;Cat&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;A representation of a cat. Note that `Cat` will be used as the discriminator value.&amp;quot;,
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;properties&amp;quot;: {
              &amp;quot;huntingSkill&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The measured skill for hunting&amp;quot;,
                &amp;quot;default&amp;quot;: &amp;quot;lazy&amp;quot;,
                &amp;quot;enum&amp;quot;: [
                  &amp;quot;clueless&amp;quot;,
                  &amp;quot;lazy&amp;quot;,
                  &amp;quot;adventurous&amp;quot;,
                  &amp;quot;aggressive&amp;quot;
                ]
              }
            },
            &amp;quot;required&amp;quot;: [
              &amp;quot;huntingSkill&amp;quot;
            ]
          }
        ]
      },
      &amp;quot;Dog&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;A representation of a dog. Note that `Dog` will be used as the discriminator value.&amp;quot;,
        &amp;quot;allOf&amp;quot;: [
          {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Pet&amp;quot;
          },
          {
            &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
            &amp;quot;properties&amp;quot;: {
              &amp;quot;packSize&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;the size of the pack the dog is from&amp;quot;,
                &amp;quot;default&amp;quot;: 0,
                &amp;quot;minimum&amp;quot;: 0
              }
            },
            &amp;quot;required&amp;quot;: [
              &amp;quot;packSize&amp;quot;
            ]
          }
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    Pet:
      type: object
      discriminator:
        propertyName: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:  ## &amp;quot;Cat&amp;quot; will be used as the discriminator value
      description: A representation of a cat
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        properties:
          huntingSkill:
            type: string
            description: The measured skill for hunting
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:  ## &amp;quot;Dog&amp;quot; will be used as the discriminator value
      description: A representation of a dog
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        properties:
          packSize:
            type: integer
            format: int32
            description: the size of the pack the dog is from
            default: 0
            minimum: 0
        required:
        - packSize
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-discriminatorobject-a-discriminator-object&#34;&gt;&lt;a name=&#34;discriminatorObject&#34;&gt;&lt;/a&gt;Discriminator Object&lt;/h4&gt;

&lt;p&gt;When request bodies or response payloads may be one of a number of different schemas, a &lt;code&gt;discriminator&lt;/code&gt; object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.&lt;/p&gt;

&lt;p&gt;When using the discriminator, &lt;em&gt;inline&lt;/em&gt; schemas will not be considered.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-21&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;propertyName&#34;&gt;&lt;/a&gt;propertyName&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the property in the payload that will hold the discriminator value.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;discriminatorMapping&#34;&gt;&lt;/a&gt; mapping&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;An object to hold mappings between payload values and schema names or references.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The discriminator object is legal only when using one of the composite keywords &lt;code&gt;oneOf&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which means the payload &lt;em&gt;MUST&lt;/em&gt;, by validation, match exactly one of the schemas described by &lt;code&gt;Cat&lt;/code&gt;, &lt;code&gt;Dog&lt;/code&gt;, or &lt;code&gt;Lizard&lt;/code&gt;.  In this case, a discriminator MAY act as a &amp;ldquo;hint&amp;rdquo; to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
  discriminator:
    propertyName: petType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expectation now is that a property with name &lt;code&gt;petType&lt;/code&gt; &lt;em&gt;MUST&lt;/em&gt; be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;id&amp;quot;: 12345,
  &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will indicate that the &lt;code&gt;Cat&lt;/code&gt; schema be used in conjunction with this payload.&lt;/p&gt;

&lt;p&gt;In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional &lt;code&gt;mapping&lt;/code&gt; definition MAY be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;MyResponseType:
  oneOf:
  - $ref: &#39;#/components/schemas/Cat&#39;
  - $ref: &#39;#/components/schemas/Dog&#39;
  - $ref: &#39;#/components/schemas/Lizard&#39;
  - $ref: &#39;https://gigantic-server.com/schemas/Monster/schema.json&#39;
  discriminator:
    propertyName: petType
    mapping:
      dog: &#39;#/components/schemas/Dog&#39;
      monster: &#39;https://gigantic-server.com/schemas/Monster/schema.json&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the discriminator &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;dog&lt;/code&gt; will map to the schema &lt;code&gt;#/components/schemas/Dog&lt;/code&gt;, rather than the default (implicit) value of &lt;code&gt;Dog&lt;/code&gt;.  If the discriminator &lt;em&gt;value&lt;/em&gt; does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.&lt;/p&gt;

&lt;p&gt;When used in conjunction with the &lt;code&gt;anyOf&lt;/code&gt; construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.&lt;/p&gt;

&lt;p&gt;In both the &lt;code&gt;oneOf&lt;/code&gt; and &lt;code&gt;anyOf&lt;/code&gt; use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an &lt;code&gt;allOf&lt;/code&gt; construct may be used as an alternate schema.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;components:
  schemas:
    Pet:
      type: object
      required:
      - petType
      properties:
        petType:
          type: string
      discriminator:
        propertyName: petType
        mapping:
          dog: Dog
    Cat:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Cat`
        properties:
          name:
            type: string
    Dog:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: string
    Lizard:
      allOf:
      - $ref: &#39;#/components/schemas/Pet&#39;
      - type: object
        # all other properties specific to a `Lizard`
        properties:
          lovesRocks:
            type: boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a payload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petType&amp;quot;: &amp;quot;Cat&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;misty&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will indicate that the &lt;code&gt;Cat&lt;/code&gt; schema be used.  Likewise this schema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petType&amp;quot;: &amp;quot;dog&amp;quot;,
  &amp;quot;bark&amp;quot;: &amp;quot;soft&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will map to &lt;code&gt;Dog&lt;/code&gt; because of the definition in the &lt;code&gt;mappings&lt;/code&gt; element.&lt;/p&gt;

&lt;h4 id=&#34;a-name-xmlobject-a-xml-object&#34;&gt;&lt;a name=&#34;xmlObject&#34;&gt;&lt;/a&gt;XML Object&lt;/h4&gt;

&lt;p&gt;A metadata object that allows for more fine-tuned XML model definitions.&lt;/p&gt;

&lt;p&gt;When using arrays, XML element names are &lt;em&gt;not&lt;/em&gt; inferred (for singular/plural forms) and the &lt;code&gt;name&lt;/code&gt; property SHOULD be used to add that information.
See examples for expected behavior.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-22&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replaces the name of the element/attribute used for the described schema property. When defined within &lt;code&gt;items&lt;/code&gt;, it will affect the name of the individual XML elements within the list. When defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;), it will affect the wrapping element and only if &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it will be ignored.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlNamespace&#34;&gt;&lt;/a&gt;namespace&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URI of the namespace definition. Value MUST be in the form of an absolute URI.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlPrefix&#34;&gt;&lt;/a&gt;prefix&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The prefix to be used for the &lt;a href=&#34;#xmlName&#34;&gt;name&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlAttribute&#34;&gt;&lt;/a&gt;attribute&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the property definition translates to an attribute instead of an element. Default value is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlWrapped&#34;&gt;&lt;/a&gt;wrapped&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MAY be used only for an array definition. Signifies whether the array is wrapped (for example, &lt;code&gt;&amp;lt;books&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;/books&amp;gt;&lt;/code&gt;) or unwrapped (&lt;code&gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&lt;/code&gt;). Default value is &lt;code&gt;false&lt;/code&gt;. The definition takes effect only when defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;xml-object-examples&#34;&gt;XML Object Examples&lt;/h5&gt;

&lt;p&gt;The examples of the XML object definitions are included inside a property definition of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; with a sample of the XML representation of it.&lt;/p&gt;

&lt;h6 id=&#34;no-xml-element&#34;&gt;No XML Element&lt;/h6&gt;

&lt;p&gt;Basic string property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basic string array property (&lt;a href=&#34;#xmlWrapped&#34;&gt;&lt;code&gt;wrapped&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; by default):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-name-replacement&#34;&gt;XML Name Replacement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
  xml:
    name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;...&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-attribute-prefix-and-namespace&#34;&gt;XML Attribute, Prefix and Namespace&lt;/h6&gt;

&lt;p&gt;In this example, a full model definition is shown.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Person&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;id&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;attribute&amp;quot;: true
        }
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;namespace&amp;quot;: &amp;quot;http://example.com/schema/sample&amp;quot;,
          &amp;quot;prefix&amp;quot;: &amp;quot;sample&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Person:
  type: object
  properties:
    id:
      type: integer
      format: int32
      xml:
        attribute: true
    name:
      type: string
      xml:
        namespace: http://example.com/schema/sample
        prefix: sample
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Person id=&amp;quot;123&amp;quot;&amp;gt;
    &amp;lt;sample:name xmlns:sample=&amp;quot;http://example.com/schema/sample&amp;quot;&amp;gt;example&amp;lt;/sample:name&amp;gt;
&amp;lt;/Person&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-arrays&#34;&gt;XML Arrays&lt;/h6&gt;

&lt;p&gt;Changing the element names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The external &lt;code&gt;name&lt;/code&gt; property has no effect on the XML:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To overcome the naming problem in the example above, the following definition can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Affecting both internal and external names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we change the external element but not the internal ones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityschemeobject-a-security-scheme-object&#34;&gt;&lt;a name=&#34;securitySchemeObject&#34;&gt;&lt;/a&gt;Security Scheme Object&lt;/h4&gt;

&lt;p&gt;Defines a security scheme that can be used by the operations.
Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2&amp;rsquo;s common flows (implicit, password, application and access code) as defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;RFC6749&lt;/a&gt;, and &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-oauth-discovery-06&#34;&gt;OpenID Connect Discovery&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-23&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Applies To&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The type of the security scheme. Valid values are &lt;code&gt;&amp;quot;apiKey&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;http&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;openIdConnect&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;A short description for security scheme. &lt;a href=&#34;http://spec.commonmark.org/&#34;&gt;CommonMark syntax&lt;/a&gt; MAY be used for rich text representation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the header, query or cookie parameter to be used.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The location of the API key. Valid values are &lt;code&gt;&amp;quot;query&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;header&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;cookie&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeScheme&#34;&gt;&lt;/a&gt;scheme&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The name of the HTTP Authorization scheme to be used in the &lt;a href=&#34;https://tools.ietf.org/html/rfc7235#section-5.1&#34;&gt;Authorization header as defined in RFC7235&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeBearerFormat&#34;&gt;&lt;/a&gt;bearerFormat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http&lt;/code&gt; (&lt;code&gt;&amp;quot;bearer&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;A hint to the client to identify how the bearer token is formatted.  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeFlows&#34;&gt;&lt;/a&gt;flows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowsObject&#34;&gt;OAuth Flows Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. An object containing configuration information for the flow types supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeOpenIdConnectUrl&#34;&gt;&lt;/a&gt;openIdConnectUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;openIdConnect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;security-scheme-object-example&#34;&gt;Security Scheme Object Example&lt;/h5&gt;

&lt;h6 id=&#34;basic-authentication-sample&#34;&gt;Basic Authentication Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;http&amp;quot;,
  &amp;quot;scheme&amp;quot;: &amp;quot;basic&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: http
scheme: basic
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;api-key-sample&#34;&gt;API Key Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: apiKey
name: api_key
in: header
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;jwt-bearer-sample&#34;&gt;JWT Bearer Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;http&amp;quot;,
  &amp;quot;scheme&amp;quot;: &amp;quot;bearer&amp;quot;,
  &amp;quot;bearerFormat&amp;quot;: &amp;quot;JWT&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: http
scheme: bearer
bearerFormat: JWT
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;implicit-oauth2-sample&#34;&gt;Implicit OAuth2 Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
  &amp;quot;flows&amp;quot;: {
    &amp;quot;implicit&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: oauth2
flows: 
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-oauthflowsobject-a-oauth-flows-object&#34;&gt;&lt;a name=&#34;oauthFlowsObject&#34;&gt;&lt;/a&gt;OAuth Flows Object&lt;/h4&gt;

&lt;p&gt;Allows configuration of the supported OAuth Flows.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-24&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsImplicit&#34;&gt;&lt;/a&gt;implicit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Implicit flow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsPassword&#34;&gt;&lt;/a&gt;password&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Resource Owner Password flow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsClientCredentials&#34;&gt;&lt;/a&gt;clientCredentials&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Client Credentials flow.  Previously called &lt;code&gt;application&lt;/code&gt; in OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowsAuthorizationCode&#34;&gt;&lt;/a&gt;authorizationCode&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#oauthFlowObject&#34;&gt;OAuth Flow Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Configuration for the OAuth Authorization Code flow.  Previously called &lt;code&gt;accessCode&lt;/code&gt; in OpenAPI 2.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-name-oauthflowobject-a-oauth-flow-object&#34;&gt;&lt;a name=&#34;oauthFlowObject&#34;&gt;&lt;/a&gt;OAuth Flow Object&lt;/h4&gt;

&lt;p&gt;Configuration details for a supported OAuth Flow&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-25&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Applies To&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowAuthorizationUrl&#34;&gt;&lt;/a&gt;authorizationUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;implicit&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;authorizationCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The authorization URL to be used for this flow. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowTokenUrl&#34;&gt;&lt;/a&gt;tokenUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;password&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;clientCredentials&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;authorizationCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The token URL to be used for this flow. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowRefreshUrl&#34;&gt;&lt;/a&gt;refreshUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;oauthFlowScopes&#34;&gt;&lt;/a&gt;scopes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Map[&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This object MAY be extended with &lt;a href=&#34;#specificationExtensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;oauth-flow-object-examples&#34;&gt;OAuth Flow Object Examples&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
  &amp;quot;flows&amp;quot;: {
    &amp;quot;implicit&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    },
    &amp;quot;authorizationCode&amp;quot;: {
      &amp;quot;authorizationUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/dialog&amp;quot;,
      &amp;quot;tokenUrl&amp;quot;: &amp;quot;https://example.com/api/oauth/token&amp;quot;,
      &amp;quot;scopes&amp;quot;: {
        &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
        &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: oauth2
flows: 
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  authorizationCode:
    authorizationUrl: https://example.com/api/oauth/dialog
    tokenUrl: https://example.com/api/oauth/token
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityrequirementobject-a-security-requirement-object&#34;&gt;&lt;a name=&#34;securityRequirementObject&#34;&gt;&lt;/a&gt;Security Requirement Object&lt;/h4&gt;

&lt;p&gt;Lists the required security schemes to execute this operation.
The name used for each property MUST correspond to a security scheme declared in the &lt;a href=&#34;#componentsSecuritySchemes&#34;&gt;Security Schemes&lt;/a&gt; under the &lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.
This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.&lt;/p&gt;

&lt;p&gt;When a list of Security Requirement Objects is defined on the &lt;a href=&#34;#oasObject&#34;&gt;OpenAPI Object&lt;/a&gt; or &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-3&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securityRequirementsName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;Each name MUST correspond to a security scheme which is declared in the &lt;a href=&#34;#componentsSecuritySchemes&#34;&gt;Security Schemes&lt;/a&gt; under the &lt;a href=&#34;#componentsObject&#34;&gt;Components Object&lt;/a&gt;. If the security scheme is of type &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;openIdConnect&amp;quot;&lt;/code&gt;, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;security-requirement-object-examples&#34;&gt;Security Requirement Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;non-oauth2-security-requirement&#34;&gt;Non-OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;api_key&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_key: []
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;oauth2-security-requirement&#34;&gt;OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;petstore_auth&amp;quot;: [
    &amp;quot;write:pets&amp;quot;,
    &amp;quot;read:pets&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;petstore_auth:
- write:pets
- read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-specificationextensions-a-specification-extensions&#34;&gt;&lt;a name=&#34;specificationExtensions&#34;&gt;&lt;/a&gt;Specification Extensions&lt;/h3&gt;

&lt;p&gt;While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;/p&gt;

&lt;p&gt;The extensions properties are implemented as patterned fields that are always prefixed by &lt;code&gt;&amp;quot;x-&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the OpenAPI Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. Can have any valid JSON format value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).&lt;/p&gt;

&lt;h3 id=&#34;a-name-securityfiltering-a-security-filtering&#34;&gt;&lt;a name=&#34;securityFiltering&#34;&gt;&lt;/a&gt;Security Filtering&lt;/h3&gt;

&lt;p&gt;Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation.&lt;/p&gt;

&lt;p&gt;The reasoning is to allow an additional layer of access control over the documentation.
While not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.&lt;/p&gt;

&lt;p&gt;Two examples of this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt; MAY be empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can&amp;rsquo;t access any documentation. They&amp;rsquo;d still have access to the &lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt; which may contain additional information regarding authentication.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different than hiding the path itself from the &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;, so the user will not be aware of its existence. This allows the documentation provider to finely control what the viewer can see.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;a-name-revisionhistory-a-appendix-a-revision-history&#34;&gt;&lt;a name=&#34;revisionHistory&#34;&gt;&lt;/a&gt;Appendix A: Revision History&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3.0.2&lt;/td&gt;
&lt;td&gt;2018-10-08&lt;/td&gt;
&lt;td&gt;Patch release of the OpenAPI Specification 3.0.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.1&lt;/td&gt;
&lt;td&gt;2017-12-06&lt;/td&gt;
&lt;td&gt;Patch release of the OpenAPI Specification 3.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0&lt;/td&gt;
&lt;td&gt;2017-07-26&lt;/td&gt;
&lt;td&gt;Release of the OpenAPI Specification 3.0.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc2&lt;/td&gt;
&lt;td&gt;2017-06-16&lt;/td&gt;
&lt;td&gt;rc2 of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc1&lt;/td&gt;
&lt;td&gt;2017-04-27&lt;/td&gt;
&lt;td&gt;rc1 of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.0.0-rc0&lt;/td&gt;
&lt;td&gt;2017-02-28&lt;/td&gt;
&lt;td&gt;Implementer&amp;rsquo;s Draft of the 3.0 specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2015-12-31&lt;/td&gt;
&lt;td&gt;Donation of Swagger 2.0 to the Open API Initiative&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2014-09-08&lt;/td&gt;
&lt;td&gt;Release of Swagger 2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;td&gt;2014-03-14&lt;/td&gt;
&lt;td&gt;Initial release of the formal document.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;2012-08-22&lt;/td&gt;
&lt;td&gt;Release of Swagger 1.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;2011-08-10&lt;/td&gt;
&lt;td&gt;First release of the Swagger Specification&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;(Notice: Origin official document is &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md&#34; title=&#34;OpenAPI in GitHub&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAML 简明参考</title>
      <link>http://alimy.me/post/dev_201901091450/</link>
      <pubDate>Wed, 09 Jan 2019 14:50:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201901091450/</guid>
      <description>&lt;h3 id=&#34;sect-语法说明&#34;&gt;&amp;sect;语法说明&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&#34;https://yaml.org&#34;&gt;yaml.org（英文）&lt;/a&gt;可以找到轻巧而好用的&lt;a href=&#34;https://yaml.org/refcard.html&#34;&gt;小抄（亦是用YAML表示）&lt;/a&gt;及&lt;a href=&#34;https://yaml.org/spec/&#34;&gt;格式说明&lt;/a&gt;。下面的内容，是关于基本组件的摘要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YAML使用可打印的Unicode字符，可使用UTF-8或UTF-16。&lt;/li&gt;
&lt;li&gt;使用空白字符为文件缩进来表示结构；不过不能使用跳格字符(TAB)。&lt;/li&gt;
&lt;li&gt;注解由井字号（ # ）开始，可以出现在一行中的任何位置，而且范围只有一行（也就是一般所谓的单行注解）&lt;/li&gt;
&lt;li&gt;每个清单成员以单行表示，并用短杠+空白（ -   ）起始。或使用方括号（ [ ] ），并用逗号+空白（ ,   ）分开成员。&lt;/li&gt;
&lt;li&gt;每个散列表的成员用冒号+空白（ :   ）分开键值和内容。或使用大括号（ {   } ），并用逗号+空白（ ,   ）分开。

&lt;ul&gt;
&lt;li&gt;散列表的键值可以用问号 ( ? )起始，用来明确的表示多个词汇组成的键值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符串平常并不使用引号，但必要的时候可以用双引号 ( &amp;ldquo; )或单引号 ( &amp;lsquo; )框住。

&lt;ul&gt;
&lt;li&gt;使用双引号表示字符串时，可用倒斜线（ \ ）开始的转义字符（这跟C语言类似）表示特殊字符。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;区块的字符串用缩进和修饰符（非必要）来和其他数据分隔，有新行保留（preserve）（使用符号 | ）或新行折叠（flod）（使用符号 &amp;gt; ）两种方式。&lt;/li&gt;
&lt;li&gt;在单一文件中，可用连续三个连字号（&amp;mdash;）区分多个文件。

&lt;ul&gt;
&lt;li&gt;另外，还有选择性的连续三个点号（ &amp;hellip; ）用来表示文件结尾。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重复的内容可使从参考标记星号 ( * )复制到锚点标记（ &amp;amp; ）。&lt;/li&gt;
&lt;li&gt;指定格式可以使用两个惊叹号 ( !! )，后面接上名称。&lt;/li&gt;
&lt;li&gt;文件中的单一文件可以使用指导指令，使用方法是百分比符号( % )。有两个指导指令在YAML1.1版中被定义：

&lt;ul&gt;
&lt;li&gt;%YAML 指导指令，用来识别文件的YAML版本。&lt;/li&gt;
&lt;li&gt;%TAG 指导指令，被用在URI的前缀标记。这个方法在标记节点的类型时相当有用。
YAML在使用逗号及冒号时，后面都必须接一个空白字符，所以可以在字符串或数值中自由加入分隔符号( 例如：5,280 或 &lt;a href=&#34;http://www.wikipedia.org&#34;&gt;http://www.wikipedia.org&lt;/a&gt; ) 而不需要使用引号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有两个特殊符号在YAML中被保留，有可能在未来的版本被使用&amp;ndash;（ @ ）和（ ` ）。&lt;/p&gt;

&lt;h3 id=&#34;sect-参考小抄&#34;&gt;&amp;sect;参考小抄&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;%YAML 1.1   # Reference card
---
Collection indicators:
    &#39;? &#39; : Key indicator.
    &#39;: &#39; : Value indicator.
    &#39;- &#39; : Nested series entry indicator.
    &#39;, &#39; : Separate in-line branch entries.
    &#39;[]&#39; : Surround in-line series branch.
    &#39;{}&#39; : Surround in-line keyed branch.
Scalar indicators:
    &#39;&#39;&#39;&#39; : Surround in-line unescaped scalar (&#39;&#39; escaped &#39;).
    &#39;&amp;quot;&#39;  : Surround in-line escaped scalar (see escape codes below).
    &#39;|&#39;  : Block scalar indicator.
    &#39;&amp;gt;&#39;  : Folded scalar indicator.
    &#39;-&#39;  : Strip chomp modifier (&#39;|-&#39; or &#39;&amp;gt;-&#39;).
    &#39;+&#39;  : Keep chomp modifier (&#39;|+&#39; or &#39;&amp;gt;+&#39;).
    1-9  : Explicit indentation modifier (&#39;|1&#39; or &#39;&amp;gt;2&#39;).
           # Modifiers can be combined (&#39;|2-&#39;, &#39;&amp;gt;+1&#39;).
Alias indicators:
    &#39;&amp;amp;&#39;  : Anchor property.
    &#39;*&#39;  : Alias indicator.
Tag property: # Usually unspecified.
    none    : Unspecified tag (automatically resolved by application).
    &#39;!&#39;     : Non-specific tag (by default, &amp;quot;!!map&amp;quot;/&amp;quot;!!seq&amp;quot;/&amp;quot;!!str&amp;quot;).
    &#39;!foo&#39;  : Primary (by convention, means a local &amp;quot;!foo&amp;quot; tag).
    &#39;!!foo&#39; : Secondary (by convention, means &amp;quot;tag:yaml.org,2002:foo&amp;quot;).
    &#39;!h!foo&#39;: Requires &amp;quot;%TAG !h! &amp;lt;prefix&amp;gt;&amp;quot; (and then means &amp;quot;&amp;lt;prefix&amp;gt;foo&amp;quot;).
    &#39;!&amp;lt;foo&amp;gt;&#39;: Verbatim tag (always means &amp;quot;foo&amp;quot;).
Document indicators:
    &#39;%&#39;  : Directive indicator.
    &#39;---&#39;: Document header.
    &#39;...&#39;: Document terminator.
Misc indicators:
    &#39; #&#39; : Throwaway comment indicator.
    &#39;`@&#39; : Both reserved for future use.
Special keys:
    &#39;=&#39;  : Default &amp;quot;value&amp;quot; mapping key.
    &#39;&amp;lt;&amp;lt;&#39; : Merge keys from another mapping.
Core types: # Default automatic tags.
    &#39;!!map&#39; : { Hash table, dictionary, mapping }
    &#39;!!seq&#39; : { List, array, tuple, vector, sequence }
    &#39;!!str&#39; : Unicode string
More types:
    &#39;!!set&#39; : { cherries, plums, apples }
    &#39;!!omap&#39;: [ one: 1, two: 2 ]
Language Independent Scalar types:
    { ~, null }              : Null (no value).
    [ 1234, 0x4D2, 02333 ]   : [ Decimal int, Hexadecimal int, Octal int ]
    [ 1_230.15, 12.3015e+02 ]: [ Fixed float, Exponential float ]
    [ .inf, -.Inf, .NAN ]    : [ Infinity (float), Negative, Not a number ]
    { Y, true, Yes, ON  }    : Boolean true
    { n, FALSE, No, off }    : Boolean false
    ? !!binary &amp;gt;
        R0lG...BADS=
    : &amp;gt;-
        Base 64 binary value.
Escape codes:
 Numeric   : { &amp;quot;\x12&amp;quot;: 8-bit, &amp;quot;\u1234&amp;quot;: 16-bit, &amp;quot;\U00102030&amp;quot;: 32-bit }
 Protective: { &amp;quot;\\&amp;quot;: &#39;\&#39;, &amp;quot;\&amp;quot;&amp;quot;: &#39;&amp;quot;&#39;, &amp;quot;\ &amp;quot;: &#39; &#39;, &amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;: TAB }
 C         : { &amp;quot;\0&amp;quot;: NUL, &amp;quot;\a&amp;quot;: BEL, &amp;quot;\b&amp;quot;: BS, &amp;quot;\f&amp;quot;: FF, &amp;quot;\n&amp;quot;: LF, &amp;quot;\r&amp;quot;: CR,
               &amp;quot;\t&amp;quot;: TAB, &amp;quot;\v&amp;quot;: VTAB }
 Additional: { &amp;quot;\e&amp;quot;: ESC, &amp;quot;\_&amp;quot;: NBSP, &amp;quot;\N&amp;quot;: NEL, &amp;quot;\L&amp;quot;: LS, &amp;quot;\P&amp;quot;: PS }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: YAML参考链接在 &lt;a href=&#34;https://yaml.org/refcard.html&#34; title=&#34;YAML Reference card&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;

&lt;!--more--&gt;</description>
    </item>
    
    <item>
      <title>FAQs: ssh</title>
      <link>http://alimy.me/post/dev_201811252059/</link>
      <pubDate>Sun, 25 Nov 2018 20:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811252059/</guid>
      <description>&lt;h4 id=&#34;sect-解决ssh登录后闲置时间过长而断开连接&#34;&gt;&amp;sect;解决ssh登录后闲置时间过长而断开连接&lt;/h4&gt;

&lt;p&gt;通过终端连接服务器时，当鼠标和键盘长时间不操作，服务器就会自动断开连接，解决此问题的方法如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一、
修改/etc/ssh/sshd_config配置文件，找到ClientAliveCountMax（单位为分钟）修改你想要的值，
执行service sshd reload&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法二、
找到所在用户的.ssh目录,如root用户该目录在：/root/.ssh/
在该目录创建config文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /root/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加入下面一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerAliveInterval 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，重新开启root用户的shell，则ssh远程服务器的时候，
不会因为长时间操作断开。应该是加入这句之后，ssh客户端会每隔一
段时间自动与ssh服务器通信一次，所以长时间操作不会断开。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法三、
修改/etc/profile配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增加：TMOUT=1800
这样30分钟没操作就自动LOGOUT&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法四、
利用expect 模拟键盘动作，在闲置时间之内模拟地给个键盘响应,将下列代码保存为xxx，然后用expect执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect  
set timeout 60  
spawn ssh user@host   
  interact {          
        timeout 300 {send &amp;quot;\x20&amp;quot;}  
  } 
expect xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着按提示输入密码就可以了，这样每隔300秒就会自动打一个空格(\x20)，具体的时间间隔可以根据具体情况设置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法五、
如果你在windows下通过工具连接，可以设置为
secureCRT：选项&amp;mdash;终端&amp;mdash;反空闲 中设置每隔多少秒发送一个字符串，或者是NO-OP协议包
putty：putty -&amp;gt; Connection -&amp;gt; Seconds between keepalives ( 0 to turn off ), 默认为0, 改为300.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法六、&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务端配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/sshd_config
ClientAliveInterval 60     #服务端主动向客户端请求响应的间隔
ClientAliveCountMax 10    #服务器发出请求后客户端没有响应的次数达到一定值就自动断开
sudo restart ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端配置 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/ssh/ssh_config  #或~/.ssh/config

TCPKeepAlive=yes
ServerAliveInterval 60   #客户端主动向服务端请求响应的间隔
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i &amp;lt;key-file&amp;gt; -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveInterval=30 ubuntu@&amp;lt;ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-重用&#34;&gt;&amp;sect;重用&lt;/h4&gt;

&lt;p&gt;如果你用mac本的话，很不方便的是没有clone功能，新窗口时需要重新输入繁琐的用户名和密码，对于经常排查线上问题的程序猿来说是一件很悲催的事 情，同样幸运的是ssh提供了连接重用功能，这个功能的原理很简单，开一个ssh连接放在后台，以后再需要用ssh到同样的远程主机时，ssh会直接用这 个连接的socket文件，不再创建新的连接了，同理，也不需要进行用户身份验证了，是不是很happy，只需要新建文件~/.ssh/config并输 入如下命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-bad-owner-or-permissions-on-home-ssh-config&#34;&gt;&amp;sect;Bad owner or permissions on $HOME/.ssh/config&lt;/h4&gt;

&lt;p&gt;The ssh with RHEL 4 is a lot more anal about security checking. In my case, it was the fact that $HOME/.ssh/config was group-writable which was causing it to barf. To fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
$ chmod 600 *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this error message is kind of stupid, since $HOME/.ssh had permissions 700 on it, and $HOME had 750 permissions on it. If any process managed to evade those permissions, changing the permissions on the config file would be similarly defeated.&lt;/p&gt;

&lt;h4 id=&#34;sect-在那些没退出的-ssh-会话里用-优雅-的断开连接&#34;&gt;&amp;sect;在那些没退出的 ssh 会话里用 ~. “优雅” 的断开连接&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ ~.
$ man ssh
...
ESCAPE CHARACTERS
     ...

     The supported escapes (assuming the default `~&#39;) are:

     ~.      Disconnect.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>sshuttle：不需配置的 VPN</title>
      <link>http://alimy.me/post/dev_201811250757/</link>
      <pubDate>Sun, 25 Nov 2018 07:57:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811250757/</guid>
      <description>&lt;p&gt;sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle，按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。&lt;/p&gt;

&lt;p&gt;sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sshuttle/sshuttle
$ cd sshuttle
$ sudo ./setup.py install
$ sshuttle -r username@sshserver 0.0.0.0/0 -vv
Starting sshuttle proxy.
[local sudo] Password: 
firewall manager: Starting firewall with Python version 2.7.15
firewall manager: ready method name nat.
IPv6 enabled: False
UDP enabled: False
DNS enabled: False
User enabled: False
Binding redirector: 12300 12299
TCP redirector listening on (&#39;127.0.0.1&#39;, 12299).
TCP redirector listening with &amp;lt;socket._socketobject object at 0x7f5eb68b1c90&amp;gt;.
Starting client with Python version 2.7.15
c : connecting to server...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.vpsee.com/2011/05/sshuttle-a-simple-instant-vpn/&#34; title=&#34;sshuttle as vpn&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppArmor的前世今生和基本使用</title>
      <link>http://alimy.me/post/dev_201811171435/</link>
      <pubDate>Sat, 17 Nov 2018 14:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811171435/</guid>
      <description>&lt;h4 id=&#34;一-mac和dac-一些前置知识&#34;&gt;一：MAC和DAC (一些前置知识)&lt;/h4&gt;

&lt;p&gt;DAC(Discretionary Access Control)，自主访问控制，是最常用的一类访问控制机制，意思为主体（文件所有者）可以自主指定系统中其它用户对其文件的所有权，最典型的就是Linux的&amp;rdquo;拥有者/同组用户/其他&amp;rdquo;。这种方式虽然为用户提供了很大的灵活性，但是缺乏必要的安全性&lt;/p&gt;

&lt;p&gt;MAC(Mandatory Access Control)，强制访问控制,在这种机制下，系统中的每一个进程，每一个文件，每一个IPC主体都被管理员按照严格的规则设置了相应的安全属性，不能被用户和其它直接或间接的修改。&lt;/p&gt;

&lt;h4 id=&#34;二-apparmor-https-gitlab-com-apparmor-apparmor-apparmor-in-gitlab&#34;&gt;二：&lt;a href=&#34;https://gitlab.com/apparmor/apparmor&#34; title=&#34;AppArmor in GitLab&#34;&gt;AppArmor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由于SELinux使用复杂，适用于对安全要求特别高的企业或者组织，为了简化操作，就推出了AppArmor，所以可以说AppArmor脱胎于SELinux，但与SELinux基于角色的MAC不同的是，AppArmor是与程序绑定的基于路径的MAC，也就是说如果路径发生改变，策略就会失效。一般的Linux的系统，都会内置以上两种MAC其中的一种，这也意味着，你需要对文件（其它）进行操作，你需要同时通过DAC和 MAC的检测。&lt;/p&gt;

&lt;p&gt;AppArmor有两种工作模式：enforcement、complain/learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enforcement – 在这种模式下，配置文件里列出的限制条件都会得到执行，并且对于违反这些限制条件的程序会进行日志记录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Complain – 在这种模式下，配置文件里的限制条件不会得到执行，AppArmor只是对程序的行为进行记录。例如程序可以写一个在配置文件里注明只读的文件，但AppArmor不会对程序的行为进行限制，只是进行记录。这种模式也叫学习模式，如果某个程序的行为不符合其配置文件的限制，可以将其行为记录到系统日志，并且可以根据程序的行为，将日志转换成配置文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AppArmor可以对程序进行多方面的限制，详细可以看官方文档，这里只提供几个基本的例子：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文件系统的访问控制   例：  /home/Desktop/a.c rw 表示程序可以对/home/Desktop/a.c 进行读和写。&lt;/li&gt;
&lt;li&gt;资源限制   例： set rlimit as&amp;lt;=1M ，表示该程序可以使用的虚拟内存小于等于1M&lt;/li&gt;
&lt;li&gt;访问网络   例： network inet tcp ,表示该程序可以在IPV4的情况下使用TCP协议 　&lt;/li&gt;
&lt;li&gt;capability条目 例：capability setgid，表示程序进行setgid操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;三-基本使用&#34;&gt;三：基本使用&lt;/h4&gt;

&lt;p&gt;ubuntu自带AppArmor，所以以ubuntu14.04为例。
最好先安装了apparmor的管理工具套装：apt-get install apparmor-utils&lt;/p&gt;

&lt;p&gt;测试程序源码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
int main(int argc, char *argv[])  
{  
 　　FILE *f;  
 　　int nn, i;   char ch;   
 　　if(3 == argc){   
  　　　　f = fopen(argv[1], &amp;quot;w&amp;quot;);   
  　 if(f == NULL){                          printf(&amp;quot;Open file %s with write ERROR\n&amp;quot;, argv[1]);  
   　　return 2;  
　　　}   
  　nn = strlen(argv[2]);   
   i = 0;   
   while(i &amp;lt; nn){   
   　　fputc(argv[2][i], f);  
   　　++i; 
  　}  
  fclose(f); 
  }else if(argc == 2){  
  　　f = fopen(argv[1], &amp;quot;r&amp;quot;);  
  　　if(NULL == f){  
   　　　　printf(&amp;quot;Open file %s with read ERROR\n&amp;quot;, argv[1]);  
   　　　　return 2;  
  　　}   
  　　while((ch=fgetc(f)) != EOF){   
   　　　　printf(&amp;quot;%c&amp;quot;, ch);  
 　　 }   
  　　printf(&amp;quot;\n&amp;quot;); 
  　　fclose(f); 
 }else{ 
  　　printf(&amp;quot;Usage: test file **\n&amp;quot;);   
  　　return 3;  
 } 
 
　　 return 0;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本功能是对，文件进行读写，使用如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　$　./test a.c &amp;quot;hello,world&amp;quot;  #进行写
　$　./test a.c  #进行读
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以根据 aa-genprof 生成配置文件，生成的文件在/etc/apparmor.d下，文件名为home.jdchen.test&lt;/p&gt;

&lt;p&gt;生成的文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于apparmor采取类似于白名单的机制，所以不能进行任何操作。
现在给配置文件添加可写的权限并重新加载。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last Modified: Fri Nov 11 03:54:40 2016
#include &amp;lt;tunables/global&amp;gt;

/home/jdchen/test {
  #include &amp;lt;abstractions/base&amp;gt;
    /home/jdchen/a.c w，

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后介绍几个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ Start : sudo /etc/init.d/apparmor start   #启动
$ Stop : sudo /etc/init.d/apparmor stop   #停止
$ reload: sudo /etc/init.d/apparmor reload 重新加载
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在修改配置之后，需要重载：&lt;/p&gt;

&lt;p&gt;可以试着查看一下日志，节选：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ov 11 04:23:53 ubuntu kernel: [ 2419.881291] audit_printk_skb: 15 callbacks suppressed
Nov 11 04:23:53 ubuntu kernel: [ 2419.881306] audit: type=1400 audit(1478867033.872:204): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4108 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
Nov 11 04:24:07 ubuntu kernel: [ 2433.212034] audit: type=1400 audit(1478867047.204:205): apparmor=&amp;quot;DENIED&amp;quot; operation=&amp;quot;open&amp;quot; profile=&amp;quot;/home/jdchen/test&amp;quot; name=&amp;quot;/home/jdchen/a.c&amp;quot; pid=4111 comm=&amp;quot;test&amp;quot; requested_mask=&amp;quot;r&amp;quot; denied_mask=&amp;quot;r&amp;quot; fsuid=0 ouid=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不需要配置，可以直接将配置文件删除。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(备注: 原文的链接在 &lt;a href=&#34;https://www.cnblogs.com/0xJDchen/p/6055531.html&#34; title=&#34;Apparmor的前世今生和基本使用&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Athens:香港服务器Docker部署</title>
      <link>http://alimy.me/post/dev_201811111946/</link>
      <pubDate>Sun, 11 Nov 2018 19:46:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201811111946/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;go1.11开始加入module功能支持GOPROXY，解决go依赖包下载问题(你懂的！),Athens应运而生。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gomods.io/&#34; title=&#34;Athens&#34;&gt;官网介绍&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Athens is a project building on top of vgo (or go1.11+) trying to bring dependencies closer to you so you can count on repeatable builds even at a time when VCS is down.&lt;/p&gt;

&lt;p&gt;The big goal of Athens is to provide a new place where dependencies — not code — live. Dependencies are immutable blobs of code and associated metadata that come from Github. They live in storage that Athens controls.&lt;/p&gt;

&lt;h4 id=&#34;docker部署&#34;&gt;Docker部署&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像&lt;a href=&#34;https://hub.docker.com/r/gomods/proxy/&#34; title=&#34;Athens&#39;s docker image&#34;&gt;gomods/proxy:latest&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker volume create data-athens
$ docker run -d --name athens-proxy --restart always -p 3000:3000 \
    -v data-athens:/var/lib/athens \
    -e ATHENS_DISK_STORAGE_ROOT=/var/lib/athens \ 
    -e ATHENS_STORAGE_TYPE=disk \
    gomods/proxy:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-memory-backend-defualt&#34;&gt;Use Memory Backend (Defualt)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d --name athens-proxy --restart always -p 3000:3000 gomods/proxy:latest
$ docker logs -f athens-proxy # display logs
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Hello, Rustacean</title>
      <link>http://alimy.me/post/day_2018090119142/</link>
      <pubDate>Sat, 01 Sep 2018 19:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/day_2018090119142/</guid>
      <description>&lt;pre&gt;&lt;code&gt;fn main() {
    let greetings = [&amp;quot;Hello&amp;quot;, &amp;quot;Hola&amp;quot;, &amp;quot;Bonjour&amp;quot;,
                     &amp;quot;Ciao&amp;quot;, &amp;quot;こんにちは&amp;quot;, &amp;quot;안녕하세요&amp;quot;,
                     &amp;quot;Cześć&amp;quot;, &amp;quot;Olá&amp;quot;, &amp;quot;Здравствуйте&amp;quot;,
                     &amp;quot;Chào bạn&amp;quot;, &amp;quot;您好&amp;quot;, &amp;quot;Hallo&amp;quot;,
                     &amp;quot;Hej&amp;quot;, &amp;quot;Ahoj&amp;quot;, &amp;quot;سلام&amp;quot;,&amp;quot;สวัสดี&amp;quot;];

    for (num, greeting) in greetings.iter().enumerate() {
        print!(&amp;quot;{} : &amp;quot;, greeting);
        match num {
            0 =&amp;gt;  println!(&amp;quot;This code is editable and runnable!&amp;quot;),
            1 =&amp;gt;  println!(&amp;quot;¡Este código es editable y ejecutable!&amp;quot;),
            2 =&amp;gt;  println!(&amp;quot;Ce code est modifiable et exécutable !&amp;quot;),
            3 =&amp;gt;  println!(&amp;quot;Questo codice è modificabile ed eseguibile!&amp;quot;),
            4 =&amp;gt;  println!(&amp;quot;このコードは編集して実行出来ます！&amp;quot;),
            5 =&amp;gt;  println!(&amp;quot;여기에서 코드를 수정하고 실행할 수 있습니다!&amp;quot;),
            6 =&amp;gt;  println!(&amp;quot;Ten kod można edytować oraz uruchomić!&amp;quot;),
            7 =&amp;gt;  println!(&amp;quot;Este código é editável e executável!&amp;quot;),
            8 =&amp;gt;  println!(&amp;quot;Этот код можно отредактировать и запустить!&amp;quot;),
            9 =&amp;gt;  println!(&amp;quot;Bạn có thể edit và run code trực tiếp!&amp;quot;),
            10 =&amp;gt; println!(&amp;quot;这段代码是可以编辑并且能够运行的！&amp;quot;),
            11 =&amp;gt; println!(&amp;quot;Dieser Code kann bearbeitet und ausgeführt werden!&amp;quot;),
            12 =&amp;gt; println!(&amp;quot;Den här koden kan redigeras och köras!&amp;quot;),
            13 =&amp;gt; println!(&amp;quot;Tento kód můžete upravit a spustit&amp;quot;),
            14 =&amp;gt; println!(&amp;quot;این کد قابلیت ویرایش و اجرا دارد!&amp;quot;),
            15 =&amp;gt; println!(&amp;quot;โค้ดนี้สามารถแก้ไขได้และรันได้&amp;quot;),
            _ =&amp;gt;  {},
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错，今天开始，正式入坑&lt;a href=&#34;https://www.rust-lang.org&#34; title=&#34;Rust official site&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;，我要成为&lt;a href=&#34;http://www.rustacean.net/&#34; title=&#34;Hello, crustaceans&#34;&gt;&lt;strong&gt;Rustacean&lt;/strong&gt;&lt;/a&gt;（Rust社区的成员被称为 Rustacean）的一员！我已经是一名Gopher（Golang程序猿的昵称），日常就是使用Go写写bug，研究一下大佬们的代码，然后继续写自个儿的bug，标准的Gopher节奏，WTF～&lt;/p&gt;

&lt;p&gt;话说，&lt;a href=&#34;https://golang.org&#34; title=&#34;Go official site&#34;&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/a&gt;的吉祥物是Gopher（囊地鼠），陆上跑地欢；Rust的吉祥物是Crab（螃蟹），海里游地慌；巧合吗，很有意思！既如此，已经入坑了陆上跑地欢的&lt;code&gt;Go&lt;/code&gt;，再入手个海里游地慌的&lt;code&gt;Rust&lt;/code&gt;，又有何妨，乐哉!似乎还有一个&lt;code&gt;Swift&lt;/code&gt;，吉祥物是天上飞的雨燕， 也是计划入手的一门语言，但不是现在（项目暂时没用上,不急）， 到时候就海陆空全齐了， 哈哈哈～&lt;/p&gt;

&lt;p&gt;欲攻其事，必先善其器，各门语言有他们擅长的使用场景，都有他们各自溜的舞台，项目需要或适合什么语言去构建，自然就要入手去使用，达到最好运行效果！ 学过很多语言，但日常编程用的最多的还是Go和Java， 嗯哼， 之所以还入手Rust语言，除了项目用的上，更简单的原因就是：看上了&lt;a href=&#34;https://github.com/tikv/tikv&#34; title=&#34;TikV in GitHub&#34;&gt;&lt;strong&gt;TiKV&lt;/strong&gt;&lt;/a&gt; ~&lt;em&gt;So Easy To Nice&lt;/em&gt;~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SRE:3节点部署TiKV用于测试功能</title>
      <link>http://alimy.me/post/dev_201808191316/</link>
      <pubDate>Sun, 19 Aug 2018 13:16:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201808191316/</guid>
      <description>&lt;h4 id=&#34;源起&#34;&gt;源起&lt;/h4&gt;

&lt;p&gt;闲置几台屌丝版腾讯云服务器（2 core &lt;code&gt;CPU&lt;/code&gt; 4GB &lt;code&gt;Memory&lt;/code&gt; 40GB &lt;code&gt;Disk&lt;/code&gt;)，难得清闲，用其中的3台部署一套TiKV用于测试功能和代码研究。&lt;/p&gt;

&lt;h4 id=&#34;节点分布&#34;&gt;节点分布&lt;/h4&gt;

&lt;p&gt;使用Docker进行部署,官方镜像pingcap/pd:v2.0.6、pingcap/tikv:v2.0.6&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|    Name   |   Host IP   |  Services  |  Docker Volume  |  Data Path  |
| Node1(TB) | 172.22.0.6  |    PD1     |     pd-data     |    /data    |
| Node2(TD) | 172.22.0.10 |    PD2     |     pd-data     |    /data    |
| Node3(TE) | 172.22.0.15 |    PD3     |     pd-data     |    /data    |
| Node1(TB) | 172.22.0.6  |   TiKV1    |     tikv-data   |    /data    |
| Node2(TD) | 172.22.0.10 |   TiKV2    |     tikv-data   |    /data    |
| Node3(TE) | 172.22.0.15 |   TiKV3    |     tikv-data   |    /data    |
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;准备工作&#34;&gt;准备工作&lt;/h4&gt;

&lt;p&gt;三节点（Node1/Node2/Node3)都执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker pull pingcap/pd:v2.0.6  
sudo docker pull pingcap/tikv:v2.0.6  
sudo docker volume create pd-data  
sudo docker volume create tikv-data

export TBIP=&amp;quot;172.21.0.6&amp;quot;
export TDIP=&amp;quot;172.21.0.10&amp;quot;
export TEIP=&amp;quot;172.21.0.15&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;部署pd&#34;&gt;部署PD&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In Node1(TB)&amp;gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd1 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd1&amp;quot; \
--data-dir=&amp;quot;/data/pd1&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TBIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TBIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node2(TD)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd2 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd2&amp;quot; \
--data-dir=&amp;quot;/data/pd2&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TDIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TDIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node3(TE)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name pd3 \
-p 2379:2379 \
-p 2380:2380 \
-v pd-data:/data \
pingcap/pd:v2.0.6 \
--name=&amp;quot;pd3&amp;quot; \
--data-dir=&amp;quot;/data/pd3&amp;quot; \
--client-urls=&amp;quot;http://0.0.0.0:2379&amp;quot; \
--advertise-client-urls=&amp;quot;http://${TEIP}:2379&amp;quot; \
--peer-urls=&amp;quot;http://0.0.0.0:2380&amp;quot; \
--advertise-peer-urls=&amp;quot;http://${TEIP}:2380&amp;quot; \
--initial-cluster=&amp;quot;pd1=http://${TBIP}:2380,pd2=http://${TDIP}:2380,pd3=http://${TEIP}:2380&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;部署tikv&#34;&gt;部署TiKV&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In Node1(TB)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv1 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TBIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv1&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node2(TD)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv2 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TDIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv2&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In Node3(TE)&amp;gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -d --restart=always --name tikv3 \
--ulimit nofile=82920:82920 \
-p 20160:20160 \
-v tikv-data:/data \
pingcap/tikv:v2.0.6 \
--addr=&amp;quot;0.0.0.0:20160&amp;quot; \
--advertise-addr=&amp;quot;${TEIP}:20160&amp;quot; \
--data-dir=&amp;quot;/data/tikv3&amp;quot; \
--pd=&amp;quot;${TBIP}:2379,${TDIP}:2379,${TEIP}:2379&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;检验是否部署完成&#34;&gt;检验是否部署完成&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查看PD的成员 (任意节点中执行)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl ${TAIP}:2379/v2/members
或（使用httpie）
http ${TAIP}:2379/v2/members
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看TiKV节点 (任意节点中执行)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl ${TAIP}:2379/pd/api/v1/stores
或（使用httpie）
http ${TAIP}:2379/pd/api/v1/stores
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tikv-api-简单使用&#34;&gt;TiKV API 简单使用&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/pingcap/tidb/config&amp;quot;
    &amp;quot;github.com/pingcap/tidb/store/tikv&amp;quot;
)

func main() {
    cli, err := tikv.NewRawKVClient([]string{&amp;quot;:2379&amp;quot;}, config.Security{})
    if err != nil {
        panic(err)
    }
    defer cli.Close()

    fmt.Printf(&amp;quot;cluster ID: %d\n&amp;quot;, cli.ClusterID())

    key := []byte(&amp;quot;Company&amp;quot;)
    val := []byte(&amp;quot;PingCAP&amp;quot;)

    // put key into tikv
    err = cli.Put(key, val)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;Successfully put %s:%s to tikv\n&amp;quot;, key, val)

    // get key from tikv
    val, err = cli.Get(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;found val: %s for key: %s\n&amp;quot;, val, key)

    // delete key from tikv
    err = cli.Delete(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;key: %s deleted\n&amp;quot;, key)

    // get key again from tikv
    val, err = cli.Get(key)
    if err != nil {
        panic(err)
    }
    fmt.Printf(&amp;quot;found val: %s for key: %s\n&amp;quot;, val, key)
}

// output:
// INFO[0000] [pd] create pd client with endpoints [192.168.199.113:2379]
// INFO[0000] [pd] leader switches to: http://127.0.0.1:2379, previous:
// INFO[0000] [pd] init cluster id 6554145799874853483
// cluster ID: 6554145799874853483
// Successfully put Company:PingCAP to tikv
// found val: PingCAP for key: Company
// key: Company deleted
// found val:  for key: Company
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意要点&#34;&gt;注意要点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;在部署TiKV时， 如果按官方文档部署， 有的使用环境下会出现因为Docker容器内最大文件打开数小于82920导致启动TiKV服务失败, 需要添加&lt;code&gt;--ulimit nofile=82920:82920&lt;/code&gt;选项使用docker启动TiKV&lt;/li&gt;
&lt;li&gt;PD先部署启动完成后再去部署TiKV&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pingcap.com/docs/tikv/deploy-tikv-using-docker/&#34; title=&#34;deploy-tikv-using-docker&#34;&gt;Docker部署TiKV官方文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go modules</title>
      <link>http://alimy.me/post/dev_201807232147/</link>
      <pubDate>Mon, 23 Jul 2018 21:47:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807232147/</guid>
      <description>&lt;h4 id=&#34;sect-definition&#34;&gt;&amp;sect;Definition&lt;/h4&gt;

&lt;p&gt;A module is a collection of related go packages. Modules are the unit of
source code interchange and versionning.&lt;/p&gt;

&lt;h4 id=&#34;sect-quick-history&#34;&gt;&amp;sect;Quick history&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go before 1.5: populating &lt;em&gt;GOPATH&lt;/em&gt; with &lt;code&gt;go get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go 1.5 and after: dependency vendoring is introduced.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/vgo&#34;&gt;vgo&lt;/a&gt; is proposed as a prototype for Go modules support.&lt;/li&gt;
&lt;li&gt;Go 1.11 (beta): &lt;code&gt;vgo&lt;/code&gt; is being merged and refined as &lt;code&gt;go mod&lt;/code&gt; (experimental).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-terminology&#34;&gt;&amp;sect;Terminology&lt;/h4&gt;

&lt;p&gt;This article refers to recurrent expressions. Let&amp;rsquo;s clarify them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module root&amp;rdquo;&lt;/em&gt;: the directory containing the file named &lt;code&gt;go.mod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Module path&amp;rdquo;&lt;/em&gt;: the import path prefix corresponding to the module root.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Main module&amp;rdquo;&lt;/em&gt;: the module containing the directory where the &lt;code&gt;go&lt;/code&gt; command
is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-module-structure&#34;&gt;&amp;sect;Module structure&lt;/h4&gt;

&lt;p&gt;A module is a tree of Go source files to which is added a file named &lt;em&gt;go.mod&lt;/em&gt;.
It contains the module import name, and the declaration of dependency
requirements, exclusions and replacements. Its content would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;module my/thing
  
require (
        one/thing v1.3.2
        other/thing v2.5.0 // indirect
        ...
)

exclude (
        bad/thing v0.7.3
)

replace (
        src/thing 1.0.2 =&amp;gt; dst/thing v1.1.0
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that a dependency not directly imported in the module&amp;rsquo;s source code by
an import statement is indentified as &lt;em&gt;indirect&lt;/em&gt; in the file.&lt;/p&gt;

&lt;p&gt;A module can contain other modules, in which case their content is excluded
from the parent module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20180723215300.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alongside &lt;em&gt;go.mod&lt;/em&gt;, a file named &lt;code&gt;go.sum&lt;/code&gt; may be present. This file retains
cryptographic cheksums of module dependencies, if any. It is used to verify
that cached dependencies meet module requirements.&lt;/p&gt;

&lt;p&gt;A module root can reside &lt;strong&gt;anywhere&lt;/strong&gt; on the filesystem, whatever is the
current &lt;em&gt;GOPATH&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sect-module-dependencies&#34;&gt;&amp;sect;Module dependencies&lt;/h4&gt;

&lt;p&gt;Dependencies are downloaded and stored in &lt;code&gt;GOPATH/src/mod&lt;/code&gt;. A direct
consequence is that the use of a &lt;em&gt;vendor&lt;/em&gt; directory is now obsolete.&lt;/p&gt;

&lt;p&gt;What does this new structure looks like? Suppose we are working on a module
that depends on &lt;em&gt;github.com/me/lib&lt;/em&gt; at version &lt;em&gt;1.0.0&lt;/em&gt;. For such a case, in
&lt;em&gt;GOPATH/src/mod&lt;/em&gt; we would find:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://alimy.me/images/post/20180723215301.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What we can observe is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies source trees are placed at the root of this directory, with a
slight change: the import path is suffixed with &lt;code&gt;@version&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Source archives retrieved or built from VCS are stored in the &lt;em&gt;download&lt;/em&gt;
folder.&lt;/li&gt;
&lt;li&gt;VCS data is stored in the &lt;em&gt;vcs&lt;/em&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-enabling-go-modules-support&#34;&gt;&amp;sect;Enabling Go modules support&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;Go 1.11beta2&lt;/em&gt;, the environment variable &lt;code&gt;GO111MODULE&lt;/code&gt; controls whether
module support is enabled or disabled. It accepts three values: &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;,
&lt;code&gt;auto&lt;/code&gt; (default).&lt;/p&gt;

&lt;p&gt;If set to &lt;em&gt;&amp;ldquo;on&amp;rdquo;&lt;/em&gt;, module support is enabled whatever path we are in.&lt;/p&gt;

&lt;p&gt;If set to &lt;em&gt;&amp;ldquo;off&amp;rdquo;&lt;/em&gt;, it is permanently disabled.&lt;/p&gt;

&lt;p&gt;If unset or set to &lt;em&gt;&amp;ldquo;auto&amp;rdquo;&lt;/em&gt;, module support is enabled outside of
&lt;em&gt;GOPATH&lt;/em&gt; only if the current directory is a module root or one of
its subdirectories.&lt;/p&gt;

&lt;h4 id=&#34;sect-integration&#34;&gt;&amp;sect;Integration&lt;/h4&gt;

&lt;p&gt;Go modules are integrated with Go tools, for instance upon invocation of
commands such as &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go install&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt; appropriate
actions will fire up like populating the cache, creating or updating &lt;em&gt;go.mod&lt;/em&gt;
and &lt;em&gt;go.sum&lt;/em&gt; etc.&lt;/p&gt;

&lt;h4 id=&#34;sect-autoformat&#34;&gt;&amp;sect;Autoformat&lt;/h4&gt;

&lt;p&gt;You should never have to run these commands on your own since they are
invoked by other commands, but for the sake of completeness, let&amp;rsquo;s mention
that &lt;code&gt;go mod -fmt&lt;/code&gt; is the equivalent of &lt;code&gt;go fmt&lt;/code&gt; for &lt;em&gt;go.mod&lt;/em&gt; and &lt;em&gt;go.sum&lt;/em&gt;
files and that &lt;code&gt;go mod -fix&lt;/code&gt; do some smart things in order to keep &lt;em&gt;go.mod&lt;/em&gt;
clean, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rewriting non-canonical version identifiers to semantic versioning form.&lt;/li&gt;
&lt;li&gt;Removing duplicates.&lt;/li&gt;
&lt;li&gt;Updating requirements to reflect exclusions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sect-initialization&#34;&gt;&amp;sect;Initialization&lt;/h4&gt;

&lt;p&gt;To create &lt;em&gt;go.mod&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have to pass the command an import path with &lt;code&gt;-module &amp;lt;path&amp;gt;&lt;/code&gt; if the
module root lives outside a VCS.&lt;/p&gt;

&lt;p&gt;For the sake of backward compatibility and in order to ease the transition
process, module creation has support for popular dependency management tools
like &lt;code&gt;dep&lt;/code&gt;, &lt;code&gt;glide&lt;/code&gt;, &lt;code&gt;glock&lt;/code&gt;, &lt;code&gt;godep&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h4 id=&#34;sect-synchronization&#34;&gt;&amp;sect;Synchronization&lt;/h4&gt;

&lt;p&gt;In order to clean up unused dependencies or to fetch new ones, use the sync
option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-adding-excluding-and-replacing-dependencies&#34;&gt;&amp;sect;Adding, excluding and replacing dependencies&lt;/h4&gt;

&lt;p&gt;Two possibilities: either edit &lt;em&gt;go.mod&lt;/em&gt; by hand or use the CLI. The latter
comes with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# require a new dependency
go mod -require one/thing@version

# drop a requirement
go mod -droprequire one/thing

# exclude a dependency
go mod -exclude bad/thing@version

# drop an exclusion
go mod -dropexclude bad/thing@version

# replace a dependency
go mod -replace src/thing@version=dst/thing@version

# drop a replacement
go mod -dropreplace src/thing@version
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-dependency-graph&#34;&gt;&amp;sect;Dependency graph&lt;/h4&gt;

&lt;p&gt;To print the graph of module dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -graph
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-generating-vendor&#34;&gt;&amp;sect;Generating &lt;em&gt;vendor&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;If for backward compatibility reasons you need to ship your application with
vendoring, you can generate the &lt;em&gt;vendor&lt;/em&gt; directory from &lt;em&gt;go.mod&lt;/em&gt; thanks to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod -vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sect-getting-help&#34;&gt;&amp;sect;Getting help&lt;/h4&gt;

&lt;p&gt;Don&amp;rsquo;t hesistate to refer to &lt;code&gt;go help mod&lt;/code&gt; and &lt;code&gt;go help modules&lt;/code&gt; for further
details about Go module support!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://systemdump.io/posts/2018-07-22-go-modules&#34; title=&#34;go modules&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guide: gorilla/mux</title>
      <link>http://alimy.me/post/dev_201807151843/</link>
      <pubDate>Sun, 15 Jul 2018 18:43:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807151843/</guid>
      <description>&lt;p&gt;The name mux stands for &amp;ldquo;HTTP request multiplexer&amp;rdquo;. Like the standard
&lt;code&gt;http.ServeMux&lt;/code&gt;, &lt;code&gt;mux.Router&lt;/code&gt; matches incoming requests against a list of
registered routes and calls a handler for the route that matches the URL
or other conditions. The main features are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Requests can be matched based on URL host, path, path prefix, schemes,
  header and query values, HTTP methods or using custom matchers.
* URL hosts, paths and query values can have variables with an optional
  regular expression.
* Registered URLs can be built, or &amp;quot;reversed&amp;quot;, which helps maintaining
  references to resources.
* Routes can be used as subrouters: nested routes are only tested if the
  parent route matches. This is useful to define groups of routes that
  share common conditions like a host, a path prefix or other repeated
  attributes. As a bonus, this optimizes request matching.
* It implements the http.Handler interface so it is compatible with the
  standard http.ServeMux.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start registering a couple of URL paths and handlers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  r := mux.NewRouter()
  r.HandleFunc(&amp;quot;/&amp;quot;, HomeHandler)
  r.HandleFunc(&amp;quot;/products&amp;quot;, ProductsHandler)
  r.HandleFunc(&amp;quot;/articles&amp;quot;, ArticlesHandler)
  http.Handle(&amp;quot;/&amp;quot;, r)
  log.Fatal(http.ListenAndServe(&amp;quot;:12345&amp;quot;, nil))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we register three routes mapping URL paths to handlers. This is
equivalent to how &lt;code&gt;http.HandleFunc()&lt;/code&gt; works: if an incoming request URL matches
one of the paths, the corresponding handler is called passing
&lt;code&gt;(http.ResponseWriter, *http.Request)&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;Paths can have variables. They are defined using the format &lt;code&gt;{name}&lt;/code&gt; or
&lt;code&gt;{name:pattern}&lt;/code&gt;. If a regular expression pattern is not defined, the matched
variable will be anything until the next slash. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/products/{key}&amp;quot;, ProductHandler)
r.HandleFunc(&amp;quot;/articles/{category}/&amp;quot;, ArticlesCategoryHandler)
r.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;, ArticleHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Groups can be used inside patterns, as long as they are non-capturing &lt;code&gt;(?:re)&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HandleFunc(&amp;quot;/articles/{category}/{sort:(?:asc|desc|new)}&amp;quot;, ArticlesCategoryHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names are used to create a map of route variables which can be retrieved
calling mux.Vars():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vars := mux.Vars(request)
category := vars[&amp;quot;category&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if any capturing groups are present, mux will panic() during parsing. To prevent
this, convert any capturing groups to non-capturing, e.g. change&lt;code&gt;&amp;quot;/{sort:(asc|desc)}&amp;quot;&lt;/code&gt; to
&lt;code&gt;&amp;quot;/{sort:(?:asc|desc)}&amp;quot;&lt;/code&gt;. This is a change from prior versions which behaved unpredictably
when capturing groups were present.&lt;/p&gt;

&lt;p&gt;And this is all you need to know about the basic usage. More advanced options
are explained below.&lt;/p&gt;

&lt;p&gt;Routes can also be restricted to a domain or subdomain. Just define a host
pattern to be matched. They can also have variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
// Only matches if domain is &amp;quot;www.example.com&amp;quot;.
r.Host(&amp;quot;www.example.com&amp;quot;)
// Matches a dynamic subdomain.
r.Host(&amp;quot;{subdomain:[a-z]+}.domain.com&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are several other matchers that can be added. To match path prefixes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.PathPrefix(&amp;quot;/products/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or HTTP methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Methods(&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or URL schemes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Schemes(&amp;quot;https&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or header values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Headers(&amp;quot;X-Requested-With&amp;quot;, &amp;quot;XMLHttpRequest&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or query values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.Queries(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or to use a custom matcher function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {
    return r.ProtoMajor == 0
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and finally, it is possible to combine several matchers in a single route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HandleFunc(&amp;quot;/products&amp;quot;, ProductsHandler).
  Host(&amp;quot;www.example.com&amp;quot;).
  Methods(&amp;quot;GET&amp;quot;).
  Schemes(&amp;quot;http&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the same matching conditions again and again can be boring, so we have
a way to group several routes that share the same requirements.
We call it &lt;code&gt;subrouting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say we have several URLs that should only match when the
host is &lt;code&gt;www.example.com&lt;/code&gt;. Create a route for that host and get a &lt;code&gt;subrouter&lt;/code&gt;
from it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.Host(&amp;quot;www.example.com&amp;quot;).Subrouter()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then register routes in the subrouter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s.HandleFunc(&amp;quot;/products/&amp;quot;, ProductsHandler)
s.HandleFunc(&amp;quot;/products/{key}&amp;quot;, ProductHandler)
s.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;), ArticleHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The three URL paths we registered above will only be tested if the domain is
&lt;code&gt;www.example.com&lt;/code&gt;, because the subrouter is tested first. This is not
only convenient, but also optimizes request matching. You can create
subrouters combining any attribute matchers accepted by a route.&lt;/p&gt;

&lt;p&gt;Subrouters can be used to create domain or path &lt;code&gt;namespaces&lt;/code&gt;: you define
subrouters in a central place and then parts of the app can register its
paths relatively to a given subrouter.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more thing about subroutes. When a subrouter has a path prefix,
the inner routes use it as base for their paths:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.PathPrefix(&amp;quot;/products&amp;quot;).Subrouter()
// &amp;quot;/products/&amp;quot;
s.HandleFunc(&amp;quot;/&amp;quot;, ProductsHandler)
// &amp;quot;/products/{key}/&amp;quot;
s.HandleFunc(&amp;quot;/{key}/&amp;quot;, ProductHandler)
// &amp;quot;/products/{key}/details&amp;quot;
s.HandleFunc(&amp;quot;/{key}/details&amp;quot;, ProductDetailsHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the path provided to &lt;code&gt;PathPrefix()&lt;/code&gt; represents a &amp;ldquo;wildcard&amp;rdquo;: calling
&lt;code&gt;PathPrefix(&amp;quot;/static/&amp;quot;).Handler(...)&lt;/code&gt;means that the handler will be passed any
request that matches&lt;code&gt;&amp;quot;/static/*&amp;quot;&lt;/code&gt;. This makes it easy to serve static files with mux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
    var dir string

    flag.StringVar(&amp;amp;dir, &amp;quot;dir&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;the directory to serve files from. Defaults to the current dir&amp;quot;)
    flag.Parse()
    r := mux.NewRouter()

    // This will serve files under http://localhost:8000/static/&amp;lt;filename&amp;gt;
    r.PathPrefix(&amp;quot;/static/&amp;quot;).Handler(http.StripPrefix(&amp;quot;/static/&amp;quot;, http.FileServer(http.Dir(dir))))

    srv := &amp;amp;http.Server{
        Handler:      r,
        Addr:         &amp;quot;127.0.0.1:8000&amp;quot;,
        // Good practice: enforce timeouts for servers you create!
        WriteTimeout: 15 * time.Second,
        ReadTimeout:  15 * time.Second,
    }

    log.Fatal(srv.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how to build registered URLs.&lt;/p&gt;

&lt;p&gt;Routes can be named. All routes that define a name can have their URLs built,
or &amp;ldquo;reversed&amp;rdquo;. We define a name calling &lt;code&gt;Name()&lt;/code&gt; on a route. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;, ArticleHandler).
  Name(&amp;quot;article&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build a URL, get the route and call the &lt;code&gt;URL()&lt;/code&gt; method, passing a sequence of
&lt;code&gt;key/value&lt;/code&gt; pairs for the route variables. For the previous route, we would do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and the result will be a url.URL with the following path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/articles/technology/42&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also works for host and query value variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.Host(&amp;quot;{subdomain}.domain.com&amp;quot;).
  Path(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;).
  Queries(&amp;quot;filter&amp;quot;, &amp;quot;{filter}&amp;quot;).
  HandlerFunc(ArticleHandler).
  Name(&amp;quot;article&amp;quot;)

// url.String() will be &amp;quot;http://news.domain.com/articles/technology/42?filter=gorilla&amp;quot;
url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;,
                                 &amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;,
                                 &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;,
                                 &amp;quot;filter&amp;quot;, &amp;quot;gorilla&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All variables defined in the route are required, and their values must
conform to the corresponding patterns. These requirements guarantee that a
generated URL will always match a registered route &amp;ndash; the only exception is
for explicitly defined &amp;ldquo;build-only&amp;rdquo; routes which never match.&lt;/p&gt;

&lt;p&gt;Regex support also exists for matching Headers within a route. For example, we could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.HeadersRegexp(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/(text|json)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and the route will match both requests with a Content-Type of &lt;code&gt;application/json&lt;/code&gt; as well as
&lt;code&gt;application/text&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a way to build only the URL host or path for a route:
use the methods URLHost() or URLPath() instead. For the previous route,
we would do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// &amp;quot;http://news.domain.com/&amp;quot;
host, err := r.Get(&amp;quot;article&amp;quot;).URLHost(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;)

// &amp;quot;/articles/technology/42&amp;quot;
path, err := r.Get(&amp;quot;article&amp;quot;).URLPath(&amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you use subrouters, host and path defined separately can be built
as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
s := r.Host(&amp;quot;{subdomain}.domain.com&amp;quot;).Subrouter()
s.Path(&amp;quot;/articles/{category}/{id:[0-9]+}&amp;quot;).
  HandlerFunc(ArticleHandler).
  Name(&amp;quot;article&amp;quot;)

// &amp;quot;http://news.domain.com/articles/technology/42&amp;quot;
url, err := r.Get(&amp;quot;article&amp;quot;).URL(&amp;quot;subdomain&amp;quot;, &amp;quot;news&amp;quot;,
                                 &amp;quot;category&amp;quot;, &amp;quot;technology&amp;quot;,
                                 &amp;quot;id&amp;quot;, &amp;quot;42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mux supports the addition of middlewares to a Router, which are executed in the order they are added if a match is found, including its subrouters. Middlewares are (typically) small pieces of code which take one request, do something with it, and pass it down to another middleware or the final handler. Some common use cases for middleware are request logging, header manipulation, or ResponseWriter hijacking.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type MiddlewareFunc func(http.Handler) http.Handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed to it, and then calls the handler passed as parameter to the MiddlewareFunc (closures can access variables from the context where they are created).&lt;/p&gt;

&lt;p&gt;A very basic middleware which logs the URI of the request being handled could be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func simpleMw(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Do stuff here
        log.Println(r.RequestURI)
        // Call the next handler, which can be another middleware in the chain, or the final handler.
        next.ServeHTTP(w, r)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Middlewares can be added to a router using &lt;code&gt;Router.Use()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r := mux.NewRouter()
r.HandleFunc(&amp;quot;/&amp;quot;, handler)
r.Use(simpleMw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more complex authentication middleware, which maps session token to users, could be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define our struct
type authenticationMiddleware struct {
    tokenUsers map[string]string
}

// Initialize it somewhere
func (amw *authenticationMiddleware) Populate() {
    amw.tokenUsers[&amp;quot;00000000&amp;quot;] = &amp;quot;user0&amp;quot;
    amw.tokenUsers[&amp;quot;aaaaaaaa&amp;quot;] = &amp;quot;userA&amp;quot;
    amw.tokenUsers[&amp;quot;05f717e5&amp;quot;] = &amp;quot;randomUser&amp;quot;
    amw.tokenUsers[&amp;quot;deadbeef&amp;quot;] = &amp;quot;user0&amp;quot;
}

// Middleware function, which will be called for each request
func (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        token := r.Header.Get(&amp;quot;X-Session-Token&amp;quot;)

        if user, found := amw.tokenUsers[token]; found {
            // We found the token in our map
            log.Printf(&amp;quot;Authenticated user %s\n&amp;quot;, user)
            next.ServeHTTP(w, r)
        } else {
            http.Error(w, &amp;quot;Forbidden&amp;quot;, http.StatusForbidden)
        }
    })
}

r := mux.NewRouter()
r.HandleFunc(&amp;quot;/&amp;quot;, handler)

amw := authenticationMiddleware{}
amw.Populate()

r.Use(amw.Middleware)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The handler chain will be stopped if your middleware doesn&amp;rsquo;t call &lt;code&gt;next.ServeHTTP()&lt;/code&gt; with the corresponding parameters. This can be used to abort a request if the middleware writer wants to.&lt;/p&gt;

&lt;p&gt;(Origin official document is &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/mux&#34; title=&#34;gorilla/mux document&#34;&gt;&lt;em&gt;Here&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/gorilla/mux&#34; title=&#34;gorilla/mux source code in GitHub&#34;&gt;&lt;em&gt;Source code in GitHub&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker: 对Docker Remote API进行认证</title>
      <link>http://alimy.me/post/dev_201807012219/</link>
      <pubDate>Sun, 01 Jul 2018 22:19:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807012219/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;建立证书授权中心&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/docker
$ cd /etc/docker
$ echo 01 | sudo tee ca.csl
$ sudo openssl genrsa -des3 -out ca-key.pem
$ sudo openssl req -new -x509 -days 365 -key ca-key.pem -out ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建服务器的证书签名请求和密钥&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl genrsa -des3 -out server-key.pem
$ sudo openssl req -new -key server-key.pem -out server.csr
$ sudo openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem
$ sudo openssl rsa -in server-key.pem -out server-key.pem
$ sudo chmod 0600 /etc/docker/server-key.pem /etc/docker/server-cert.pem /etc/docker/ca-key.pem /etc/docker/ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置Docker守护进程 (/etc/docker/daemon.json on Linux systems, or C:\ProgramData\docker\config\daemon.json on Windows.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;debug&amp;quot;: true,
  &amp;quot;tls&amp;quot;: true,
  &amp;quot;tlscacert&amp;quot;: &amp;quot;/etc/docker/ca.pem&amp;quot;,
  &amp;quot;tlscert&amp;quot;: &amp;quot;/etc/docker/server-cert.pem&amp;quot;,
  &amp;quot;tlskey&amp;quot;: &amp;quot;/etc/docker/server-key.pem&amp;quot;,
  &amp;quot;hosts&amp;quot;: [&amp;quot;tcp://&amp;lt;config of CN&amp;gt;:2376&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建客户端证书和密钥&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl genrsa -des3 -out client-key.pem
$ sudo openssl req -new -key client-key.pem -out client.csr
$ echo extendedKeyUsage = clientAuth &amp;gt; extfile.config
$ sudo openssl x509 -req -days 365 -in client.csr -CA ca.pem -CAkey ca-key.pem -out client-cert.pem -extfile extfile.cnf
$ sudo openssl rsa -in client-key.pem -out client-key.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置Docker客户端开启认证功能&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/.docker
$ cp ca.pem ~/.docker/ca.pem
$ cp client-key.pem ~/.docker/key.pem
$ cp client-cert.pem ~/.docker/cert.pem
$ chmod 0600 ~/.docker/key.pem ~/.docker/cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;测试TLS认证过的连接&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker -H=&amp;lt;config of CN&amp;gt;:2376 --tlsverify info
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;可以添加环境变量(~/.bashrc)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_HOST=&amp;lt;config of CN&amp;gt;:2376
alias docker=&#39;docker --tlsverify&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>存储系统: 札记</title>
      <link>http://alimy.me/post/dev_201807011459/</link>
      <pubDate>Sun, 01 Jul 2018 14:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201807011459/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/3292.html&#34; title=&#34;Finding a needle in Haystack: Facebook’s photo storage&#34;&gt;经典论文翻译导读之《Finding a needle in Haystack: Facebook’s photo storage》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;amp;mid=2247483679&amp;amp;idx=1&amp;amp;sn=584dbd80aa08fa1188627ad725680928&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1208L9z4yXKLW60rPph2ZmMn#rd&#34; title=&#34;微信序列号生成器架构设计及演变&#34;&gt;万亿级调用系统：微信序列号生成器架构设计及演变&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5322</title>
      <link>http://alimy.me/post/dev_201806301842/</link>
      <pubDate>Sat, 30 Jun 2018 18:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201806301842/</guid>
      <description>&lt;h3 id=&#34;add-new-dockerfile-docker-ce-for-docker-ce-v17-06-to-build-gogs-s-docker-image&#34;&gt;Add new Dockerfile.docker-ce for docker-ce(&amp;gt;=v17.06) to build Gogs&amp;rsquo;s docker image&lt;/h3&gt;

&lt;p&gt;Docker-CE can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the&lt;code&gt;FROM&lt;/code&gt; instruction sine release version of v17.06. The Dockerfile&amp;rsquo;s &lt;code&gt;FROM&lt;/code&gt; instruction like below:&lt;/p&gt;

&lt;h4 id=&#34;from&#34;&gt;FROM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt; [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;[@&amp;lt;digest&amp;gt;] [AS &amp;lt;name&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Optionally a name can be given to a new build stage by adding &lt;code&gt;AS&lt;/code&gt; name to the &lt;code&gt;FROM&lt;/code&gt; instruction. The name can be used in subsequent &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;COPY --from=&amp;lt;name|index&amp;gt;&lt;/code&gt; instructions to refer to the image built in this stage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find Docker-ce official document &lt;a href=&#34;https://docs.docker.com/v17.06/engine/reference/builder/#from&#34; title=&#34;Docker official Document&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use this patch to build docker image if  docker-ce that version &amp;gt;=v17.06 is installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;docker version
Client:
 Version:      18.03.1-ce
 API version:  1.37
 Go version:   go1.9.5
 Git commit:   9ee9f40
 Built:        Thu Apr 26 07:20:16 2018
 OS/Arch:      linux/amd64
 Experimental: false
 Orchestrator: swarm

Server:
 Engine:
  Version:      18.03.1-ce
  API version:  1.37 (minimum version 1.12)
  Go version:   go1.9.5
  Git commit:   9ee9f40
  Built:        Thu Apr 26 07:23:58 2018
  OS/Arch:      linux/amd64
  Experimental: false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Build docker image&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd $GOPATH/src/github.com/gogs/gogs
&amp;gt; docker build -t &amp;lt;your/image-tag&amp;gt; -f Dockerfile.docker-ce .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile.docker-ce&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.10.3-alpine AS binarybuilder
# Install build deps
RUN apk --no-cache --no-progress add --virtual build-deps build-base git linux-pam-dev
WORKDIR /go/src/github.com/gogs/gogs
COPY . .
RUN make build TAGS=&amp;quot;sqlite cert pam&amp;quot;

FROM alpine:3.7
# Install system utils &amp;amp; Gogs runtime dependencies
ADD https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64 /usr/sbin/gosu
RUN chmod +x /usr/sbin/gosu \
  &amp;amp;&amp;amp; echo http://dl-2.alpinelinux.org/alpine/edge/community/ &amp;gt;&amp;gt; /etc/apk/repositories \
  &amp;amp;&amp;amp; apk --no-cache --no-progress add \
    bash \
    ca-certificates \
    curl \
    git \
    linux-pam \
    openssh \
    s6 \
    shadow \
    socat \
    tzdata

ENV GOGS_CUSTOM /data/gogs

# Configure LibC Name Service
COPY docker/nsswitch.conf /etc/nsswitch.conf

WORKDIR /app/gogs
COPY docker ./docker
COPY templates ./templates
COPY public ./public
COPY --from=binarybuilder /go/src/github.com/gogs/gogs/gogs .

RUN ./docker/finalize-docker-ce.sh

# Configure Docker Container
VOLUME [&amp;quot;/data&amp;quot;]
EXPOSE 22 3000
ENTRYPOINT [&amp;quot;/app/gogs/docker/start.sh&amp;quot;]
CMD [&amp;quot;/bin/s6-svscan&amp;quot;, &amp;quot;/app/gogs/docker/s6/&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gogs/gogs/pull/5322&#34; title=&#34;Gogs PR-5322&#34;&gt;Note a PR-5322 for Gogs.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gogs: PR-5262</title>
      <link>http://alimy.me/post/dev_201806040842/</link>
      <pubDate>Mon, 04 Jun 2018 08:42:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201806040842/</guid>
      <description>&lt;h3 id=&#34;fix-make-build-failure-when-enviroment-of-gopath-have-multiple-items&#34;&gt;Fix make build failure when enviroment of &lt;code&gt;GOPATH&lt;/code&gt; have multiple items&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ make
go install &amp;quot;-v&amp;quot; -ldflags &#39;-X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildTime=2018-06-04 06:17:19 UTC&amp;quot; -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildGitHash=c08aab90ec696b7fcc56b8da0a468e74d266b89e&amp;quot;&#39; -tags &#39;&amp;quot;&amp;quot;&#39;
cp &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39; .
cp: cannot stat &#39;/home/alimy/art/ago:/home/alimy/art/arg/bin/gogs&#39;: No such file or directory
Makefile:36: recipe for target &#39;build&#39; failed
make: *** [build] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scene &lt;code&gt;GOPATH&lt;/code&gt; have two item (/home/alimy/art/ago and /home/alimy/art/arg) and gogs source is not in first &lt;code&gt;GOPATH&lt;/code&gt; items, when excecute &lt;code&gt;go install ...&lt;/code&gt; will install to path that contain the source of gogs&amp;rsquo;s &lt;code&gt;GOPATH&lt;/code&gt; items. when cp gogs file back will occur error like above.
this patch fixed this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alimy@rover gogs]$ echo $GOPATH
/home/alimy/art/ago:/home/alimy/art/arg
[alimy@rover gogs]$ pwd
/home/alimy/art/arg/src/github.com/gogs/gogs
[alimy@rover gogs]$ echo ${PWD%%src*}
/home/alimy/art/arg/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also when have multiple item in &lt;code&gt;GOPATH&lt;/code&gt; env you should do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=$HOME/art/ago:$HOME/art/arg
export PATH=$GOROOT/bin:${GOPATH//://bin:}/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gogs&amp;rsquo;s Makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDFLAGS += -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildTime=$(shell date -u &#39;+%Y-%m-%d %I:%M:%S %Z&#39;)&amp;quot;
LDFLAGS += -X &amp;quot;github.com/gogs/gogs/pkg/setting.BuildGitHash=$(shell git rev-parse HEAD)&amp;quot;

DATA_FILES := $(shell find conf | sed &#39;s/ /\\ /g&#39;)
LESS_FILES := $(wildcard public/less/gogs.less public/less/_*.less)
GENERATED  := pkg/bindata/bindata.go public/css/gogs.css

OS := $(shell uname)

TAGS = &amp;quot;&amp;quot;
BUILD_FLAGS = &amp;quot;-v&amp;quot;

RELEASE_ROOT = &amp;quot;release&amp;quot;
RELEASE_GOGS = &amp;quot;release/gogs&amp;quot;
NOW = $(shell date -u &#39;+%Y%m%d%I%M%S&#39;)
GOVET = go tool vet -composites=false -methods=false -structtags=false
GOPATH = $(shell echo $${PWD%%src*})

.PHONY: build pack release bindata clean

.IGNORE: public/css/gogs.css

all: build

check: test

dist: release

web: build
	./gogs web

govet:
	$(GOVET) gogs.go
	$(GOVET) models pkg routes

build: $(GENERATED)
	go install $(BUILD_FLAGS) -ldflags &#39;$(LDFLAGS)&#39; -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

build-dev: $(GENERATED) govet
	go install $(BUILD_FLAGS) -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

build-dev-race: $(GENERATED) govet
	go install $(BUILD_FLAGS) -race -tags &#39;$(TAGS)&#39;
	cp &#39;$(GOPATH)/bin/gogs&#39; .

pack:
	rm -rf $(RELEASE_GOGS)
	mkdir -p $(RELEASE_GOGS)
	cp -r gogs LICENSE README.md README_ZH.md templates public scripts $(RELEASE_GOGS)
	rm -rf $(RELEASE_GOGS)/public/config.codekit $(RELEASE_GOGS)/public/less
	cd $(RELEASE_ROOT) &amp;amp;&amp;amp; zip -r gogs.$(NOW).zip &amp;quot;gogs&amp;quot;

release: build pack

bindata: pkg/bindata/bindata.go

pkg/bindata/bindata.go: $(DATA_FILES)
	go-bindata -o=$@ -ignore=&amp;quot;\\.DS_Store|README.md|TRANSLATORS|auth.d&amp;quot; -pkg=bindata conf/...

less: public/css/gogs.css

public/css/gogs.css: $(LESS_FILES)
	@type lessc &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; lessc $&amp;lt; &amp;gt;$@ || echo &amp;quot;lessc command not found, skipped.&amp;quot;

clean:
	go clean -i ./...

clean-mac: clean
	find . -name &amp;quot;.DS_Store&amp;quot; -print0 | xargs -0 rm

test:
	go test -cover -race ./...

fixme:
	grep -rnw &amp;quot;FIXME&amp;quot; cmd routers models pkg

todo:
	grep -rnw &amp;quot;TODO&amp;quot; cmd routers models pkg

# Legacy code should be remove by the time of release
legacy:
	grep -rnw &amp;quot;LEGACY&amp;quot; cmd routes models pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gogs/gogs/pull/5262&#34; title=&#34;Gogs PR-5262&#34;&gt;Note a PR-5322 for Gogs.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
