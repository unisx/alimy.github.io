<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Alimy on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/</link>
    
    
    <copyright>&amp;copy;2016, Alimy; all rights reserved.</copyright>
    <updated>Sat, 03 Mar 2018 09:46:00 CST</updated>
    
    <item>
      <title>Golang Tutorial: Create HTTPS Server use net/http</title>
      <link>http://alimy.me/post/dev_201803030946/</link>
      <pubDate>Sat, 03 Mar 2018 09:46:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803030946/</guid>
      <description>&lt;p&gt;It is simple to craete a HTTPS Server use net/http, see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net/http&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type SimpleHandler struct {
	Name string
}

func (h *SimpleHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;%s: Hello World!&amp;quot;, h.Name)
}

func main() {
	server := http.Server{
		Addr:    &amp;quot;127.0.0.1:8080&amp;quot;,
		Handler: &amp;amp;SimpleHandler{Name: &amp;quot;SimpleServer&amp;quot;},
	}
	server.ListenAndServeTLS(&amp;quot;cert.pem&amp;quot;, &amp;quot;key.pem&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We can use golang&amp;rsquo;s crypto libraries to create SSL certificates that used in simple https server above. see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;crypto/rand&amp;quot;
	&amp;quot;crypto/x509/pkix&amp;quot;
	&amp;quot;math/big&amp;quot;
	&amp;quot;crypto/x509&amp;quot;
	&amp;quot;encoding/pem&amp;quot;
	&amp;quot;net&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
	&amp;quot;crypto/rsa&amp;quot;
)

const (
	certFileName = &amp;quot;cert.pem&amp;quot;
	keyFileName  = &amp;quot;key.pem&amp;quot;
)

func main() {
	max := new(big.Int).Lsh(big.NewInt(1), 128)
	serialNumber, _ := rand.Int(rand.Reader, max)
	subject := pkix.Name{
		Organization:       []string{&amp;quot;Manning Publications Co.&amp;quot;},
		OrganizationalUnit: []string{&amp;quot;Books&amp;quot;},
		CommonName:         &amp;quot;Go Web Programming&amp;quot;,
	}

	template := x509.Certificate{
		SerialNumber: serialNumber,
		Subject:      subject,
		NotBefore:    time.Now(),
		NotAfter:     time.Now().Add(365 * 24 * time.Hour),
		KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
		ExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},
		IPAddresses:  []net.IP{net.ParseIP(&amp;quot;127.0.0.1&amp;quot;)},
	}

	pk, _ := rsa.GenerateKey(rand.Reader, 2048)

	derBytes, _ := x509.CreateCertificate(rand.Reader, &amp;amp;template, &amp;amp;template, &amp;amp;pk.PublicKey, pk)
	certOut, _ := os.Create(certFileName)
	pem.Encode(certOut, &amp;amp;pem.Block{Type: &amp;quot;CERTIFICATE&amp;quot;, Bytes: derBytes})
	certOut.Close()

	keyOut, _ := os.Create(keyFileName)
	pem.Encode(keyOut, &amp;amp;pem.Block{Type: &amp;quot;RSA PRIVATE KEY&amp;quot;, Bytes: x509.MarshalPKCS1PrivateKey(pk)})
	keyOut.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s code is reference from the simple code in book &lt;a href=&#34;https://github.com/sausheong/gwp.git&#34; title=&#34;Go Web Programming code repository&#34;&gt;&amp;lt;&lt;strong&gt;Go Web Programming&lt;/strong&gt;&amp;gt;&lt;/a&gt; and this link is &lt;a href=&#34;http://gitbus.com/alimy/dugo.git&#34; title=&#34;My Go Programming code repository&#34;&gt;&lt;em&gt;My Code repository&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拯救者</title>
      <link>http://alimy.me/post/art_201803030843/</link>
      <pubDate>Sat, 03 Mar 2018 08:43:01 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201803030843/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20180303084300.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20180303084300.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;行者无忌（&lt;a href=&#34;http://alimy.me/images/post/20180303084300.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>陶渊明 -「桃花源记」</title>
      <link>http://alimy.me/post/arc_201604151010/</link>
      <pubDate>Fri, 15 Apr 2016 10:10:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201604151010/</guid>
      <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;晋太元中，武陵人捕鱼为业。缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷，渔人甚异之。复前行，欲穷其林。&lt;/p&gt;

&lt;p&gt;　　林尽水源，便得一山，山有小口，仿佛若有光。便舍船，从口入。初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。&lt;/p&gt;

&lt;p&gt;　　见渔人，乃大惊，问所从来。具答之。便要还家，设酒杀鸡作食。村中闻有此人，咸来问讯。自云先世避秦时乱，率妻子邑人来此绝境，不复出焉，遂与外人间隔。问今是何世，乃不知有汉，无论魏晋。此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食。停数日，辞去。此中人语云：“不足为外人道也。”&lt;/p&gt;

&lt;p&gt;　　既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷，不复得路。&lt;/p&gt;

&lt;p&gt;　　南阳刘子骥，高尚士也，闻之，欣然规往。未果，寻病终，后遂无问津者。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老子 - 「道 德 經」</title>
      <link>http://alimy.me/post/arc_201604150952/</link>
      <pubDate>Fri, 15 Apr 2016 09:52:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201604150952/</guid>
      <description>&lt;h4 id=&#34;第-一-章&#34;&gt;第 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。  
无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。  
故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。  
此 两 者 ， 同 出 而 异 名 ， 同 谓 之 玄 。  
玄 之 又 玄 ， 众 妙 之 门 。  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-章&#34;&gt;第 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 皆 知 美 之 为 美 ， 斯 恶 已 。  
皆 知 善 之 为 善 ， 斯 不 善 已 。  
有 无 相 生 ， 难 易 相 成 ， 长 短 相 形 ，  
高 下 相 盈 ， 音 声 相 和 ， 前 后 相 随 。  
恒 也 。 是 以 圣 人 处 无 为 之 事 ，  
行 不 言 之 教 ﹔ 万 物 作 而 弗 始 ，  
生 而 弗 有 ， 为 而 弗 恃 ， 功 成 而 不 居 。   
夫 唯 弗 居 ， 是 以 不 去 。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;第-三-章&#34;&gt;第 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;不 尚 贤 ， 使 民 不 争   
不 贵 难 得 之 货 ， 使 民 不 为 盗 ﹔   
不 见 可 欲 ， 使 民 心 不 乱 。   
是 以 圣 人 之 治 ，   
虚 其 心 ，   
实 其 腹 ，  
弱 其 志 ，   
强 其 骨 。   
常 使 民 无 知 无 欲 。   
使 夫 智 者 不 敢 为 也 。   
为 无 为 ， 则 无 不 治 。   
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-章&#34;&gt;第 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 冲 ， 而 用 之 或 不 盈 。
渊 兮 ， 似 万 物 之 宗 ﹔ 湛 兮 ， 似 或 存 。
吾 不 知 谁 之 子 ， 象 帝 之 先 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-章&#34;&gt;第 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 地 不 仁 ， 以 万 物 为 刍 狗 ﹔ 圣 人 不 仁 ， 以 百 姓 为 刍 狗 。
天 地 之 间 ， 其 犹 橐 钥 乎 。 虚 而 不 屈 ， 动 而 愈 出 。
多 言 数 穷 ， 不 如 守 中 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-章&#34;&gt;第 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;谷 神 不 死 ， 是 谓 玄 牝 。
玄 牝 之 门 ， 是 谓 天 地 根 。帛系 若 存 ， 用 之 不 勤 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-章&#34;&gt;第 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 长 地 久 。
天 地 所 以 能 长 且 久 者 ，
以 其 不 自 生 ， 故 能 长 生 。
是 以 圣 人 后 其 身 而 身 先 ﹔ 外 其 身 而 身 存 。
非 以 其 无 私 邪 。
故 能 成 其 私 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-八-章&#34;&gt;第 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;上 善 若 水 。
水 善 利 万 物 而 不 争 ，
处 众 人 之 所 恶 ， 故 几 于 道 。
居 善 地 ， 心 善 渊 ， 与 善 仁 ，
言 善 信 ， 政 善 治 ， 事 善 能 ，
动 善 时 。 夫 唯 不 争 ， 故 无 尤 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-九-章&#34;&gt;第 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;持 而 盈 之 ， 不 如 其 已 ﹔
揣 而 锐 之 ， 不 可 长 保 。
金 玉 满 堂 ， 莫 之 能 守 ﹔
富 贵 而 骄 ， 自 遗 其 咎 。
功 遂 身 退 ， 天 之 道 也 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-章&#34;&gt;第 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;载 营 魄 抱 一 ， 能 无 离 乎 。
专 气 致 柔 ， 能 如 婴 儿 乎 。
涤 除 玄 鉴 ， 能 如 疵 乎 。
爱 国 治 民 ， 能 无 为 乎 。
天 门 开 阖 ， 能 为 雌 乎 。
明 白 四 达 ， 能 无 知 乎 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-一-章&#34;&gt;第 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;三 十 辐 ， 共 一 毂 ， 当 其 无 ， 有 车 之 用 。
埏 埴 以 为 器 ， 当 其 无 ， 有 器 之 用 。
凿 户 牖 以 为 室 ， 当 其 无 ， 有 室 之 用 。
故 有 之 以 为 利 ， 无 之 以 为 用 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-二-章&#34;&gt;第 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;五 色 令 人 目 盲 ﹔ 五 音 令 人 耳 聋 ﹔ 五 味 令 人 口 爽 ﹔
驰 骋 畋 猎 ， 令 人 心 发 狂 ﹔ 难 得 之 货 ， 令 人 行 妨 。
是 以 圣 人 为 腹 不 为 目 ， 故 去 彼 取 此 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-三-章&#34;&gt;第 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;宠 辱 若 惊 ， 贵 大 患 若 身 。
何 谓 宠 辱 若 惊 。
宠 为 下 ， 得 之 若 惊 ， 失 之 若 惊 ， 是 谓 宠 辱 若 惊 。
何 谓 贵 大 患 若 身 。
吾 所 以 有 大 患 者 ， 为 吾 有 身 ，
及 吾 无 身 ， 吾 有 何 患 。
故 贵 以 身 为 天 下 ， 若 可 寄 天 下 ﹔
爱 以 身 为 天 下 ， 若 可 托 天 下 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-四-章&#34;&gt;第 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;视 之 不 见 ， 名 曰 夷 ﹔
听 之 不 闻 ， 名 曰 希 ﹔
搏 之 不 得 ， 名 曰 微 。
此 三 者 不 可 致 诘 ， 故 混 而 为 一 。
其 上 不 皦 ， 其 下 不 昧 。
绳 绳 兮 不 可 名 ， 复 归 于 物 。
是 谓 无 状 之 状 ， 无 物 之 象 ， 是 谓 惚 恍 。
迎 之 不 见 其 首 ， 随 之 不 见 其 后 。
执 古 之 道 ， 以 御 今 之 有 。
能 知 古 始 ， 是 谓 道 纪 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-五-章&#34;&gt;第 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;古 之 善 为 道 者 ， 微 妙 玄 通 ， 深 不 可 识 。
夫 唯 不 可 识 ， 故 强 为 之 容 ：
豫 兮 若 冬 涉 川 ﹔
犹 兮 若 畏 四 邻 ﹔
俨 兮 其 若 客 ﹔
涣 兮 其 若 凌 释 ﹔
敦 兮 其 若 朴 ﹔
旷 兮 其 若 谷 ﹔
混 兮 其 若 浊 ﹔
澹 兮 其 若 海 ﹔
飂 兮 若 无 止 。
孰 能 浊 以 静 之 徐 清 。
孰 能 安 以 动 之 徐 生 。
保 此 道 者 ， 不 欲 盈 。
夫 唯 不 盈 ， 故 能 蔽 而 新 成 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-六-章&#34;&gt;第 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;致 虚 极 ， 守 静 笃。
万 物 并 作 ， 吾 以 观 复。
夫 物 芸 芸 ， 各 复 归 其 根 。
归 根 曰 静 ， 静 曰 复 命 。
复 命 曰 常 ， 知 常 曰 明 。
不 知 常 ， 妄 作 凶 。
知 常 容 ， 容 乃 公 ，
公 乃 全 ， 全 乃 天 ，
天 乃 道 ， 道 乃 久 ， 没 身 不 殆 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-七-章&#34;&gt;第 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;太 上 ， 不 知 有 之 ﹔
其 次 ， 亲 而 誉 之 ﹔
其 次 ， 畏 之 ﹔
其 次 ， 侮 之 。
信 不 足 焉 ， 有 不 信 焉 。
悠 兮 其 贵 言 。
功 成 事 遂 ， 百 姓 皆 谓 ： 「 我 自 然 」 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-八-章&#34;&gt;第 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;大 道 废 ， 有 仁 义 ﹔ 智 慧 出 ， 有 大 伪 ﹔
六 亲 不 和 ， 有 孝 慈 ﹔ 国 家 昏 乱 ， 有 忠 臣 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-十-九-章&#34;&gt;第 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;绝 圣 弃 智 ， 民 利 百 倍 ﹔
绝 仁 弃 义 ， 民 复 孝 慈 ﹔
绝 巧 弃 利 ， 盗 贼 无 有 。
此 三 者 以 为 文 ， 不 足 。
故 令 有 所 属 ： 见 素 抱 朴 ， 少 思 寡 欲 ， 绝 学 无 忧 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-章&#34;&gt;第 二 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;唯 之 与 阿 ， 相 去 几 何 。
之 与 恶 ， 相 去 若 何 。
人 之 所 畏 ， 不 可 不 畏 。
荒 兮 ， 其 未 央 哉 。
众 人 熙 熙 ， 如 享 太 牢 ， 如 春 登 台 。
我 独 泊 兮 ， 其 未 兆 ﹔
沌 沌 兮 ， 如 婴 儿 之 未 孩 ﹔
儽 儽 兮 ， 若 无 所 归 。
众 人 皆 有 余 ， 而 我 独 若 遗 。 我 愚 人 之 心 也 哉 。
俗 人 昭 昭 ， 我 独 昏 昏 。
俗 人 察 察 ， 我 独 闷 闷 。
众 人 皆 有 以 ， 而 我 独 顽 且 鄙 。
我 独 异 于 人 ， 而 贵 食 母 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-一-章&#34;&gt;第 二 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;孔 德 之 容 ， 惟 道 是 从 。
道 之 为 物 ， 惟 恍 惟 惚 。
惚 兮 恍 兮 ， 其 中 有 象 ﹔ 恍 兮 惚 兮 ， 其 中 有 物 。
窈 兮 冥 兮 ， 其 中 有 精 ﹔ 其 精 甚 真 ， 其 中 有 信 。
自 今 及 古 ， 其 名 不 去 ， 以 阅 众 甫 。
吾 何 以 知 众 甫 之 状 哉 。 以 此 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-二-章&#34;&gt;第 二 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;曲 则 全 ， 枉 则 直 ， 洼 则 盈 ，
敝 则 新 ， 少 则 得 ， 多 则 惑 。
是 以 圣 人 抱 一 为 天 下 式 。
不 自 见 ， 故 明 ﹔
不 自 是 ， 故 彰 ﹔
不 自 伐 ， 故 有 功 ﹔
不 自 矜 ， 故 长 。
夫 唯 不 争 ， 故 天 下 莫 能 与 之 争 。
古 之 所 谓 「 曲 则 全 」 者 ， 岂 虚 言 哉 。
诚 全 而 归 之 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-三-章&#34;&gt;第 二 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;希 言 自 然 。
故 飘 风 不 终 朝 ， 骤 雨 不 终 日 。
孰 为 此 者 。
天 地 。 天 地 尚 不 能 久 ， 而 况 于 人 乎 。
故 从 事 于 道 者 ， 同 于 道 ﹔
德 者 ， 同 于 德 ﹔ 失 者 ， 同 于 失 。
同 于 道 者 ， 道 亦 乐 得 之 ﹔
同 于 德 者 ， 德 亦 乐 得 之 ﹔
同 于 失 者 ， 失 亦 乐 得 之 。
信 不 足 焉 ， 有 不 信 焉 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-四-章&#34;&gt;第 二 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;企 者 不 立 ﹔ 跨 者 不 行 ﹔
自 见 者 不 明 ﹔ 自 是 者 不 彰 ﹔
自 伐 者 无 功 ﹔ 自 矜 者 不 长 。
其 在 道 也 ， 曰 ： 余 食 赘 形 。
物 或 恶 之 ， 故 有 道 者 不 处 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-五-章&#34;&gt;第 二 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;有 物 混 成 ， 先 天 地 生 。
寂 兮 寥 兮 ， 独 立 而 不 改 ，
周 行 而 不 殆 ， 可 以 为 天 地 母 。
吾 不 知 其 名 ， 强 字 之 曰 道 ， 强 为 之 名 曰 大 。
大 曰 逝 ， 逝 曰 远 ， 远 曰 反 。
故 道 大 ， 天 大 ， 地 大 ， 人 亦 大 。
域 中 有 四 大 ， 而 人 居 其 一 焉 。
人 法 地 ， 地 法 天 ， 天 法 道 ， 道 法 自 然 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-六-章&#34;&gt;第 二 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;重 为 轻 根 ， 静 为 躁 君 。
是 以 君 子 终 日 行 不 离 辎 重 。
虽 有 荣 观 ， 燕 处 超 然 。
奈 何 万 乘 之 主 ， 而 以 身 轻 天 下 。
轻 则 失 根 ， 躁 则 失 君 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-七-章&#34;&gt;第 二 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;善 行 无 辙 迹 ， 善 言 无 瑕 谪 ﹔
善 数 不 用 筹 策 ﹔ 善 闭 无 关 楗 而 不 可 开 ，
善 结 无 绳 约 而 不 可 解 。
是 以 圣 人 常 善 救 人 ， 故 无 弃 人 ﹔
常 善 救 物 ， 故 无 弃 物 。
是 谓 袭 明 。
故 善 人 者 ， 不 善 人 之 师 ﹔
不 善 人 者 ， 善 人 之 资 。
不 贵 其 师 ， 不 爱 其 资 ，
虽 智 大 迷 ， 是 谓 要 妙 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-八-章&#34;&gt;第 二 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;知 其 雄 ， 守 其 雌 ， 为 天 下 溪 。
为 天 下 溪 ， 常 德 不 离 ， 复 归 于 婴 儿 。
知 其 白 ， 守 其 辱 ， 为 天 下 谷 。
为 天 下 谷 ， 常 德 乃 足 ， 复 归 于 朴 。
知 其 白 ， 守 其 黑 ， 为 天 下 式 。
为 天 下 式 ， 常 德 不 忒 ， 复 归 于 无 极 。
朴 散 则 为 器 ， 圣 人 用 之 ，
则 为 官 长 ， 故 大 智 不 割 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-二-十-九-章&#34;&gt;第 二 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;将 欲 取 天 下 而 为 之 ， 吾 见 其 不 得 已 。
天 下 神 器 ， 不 可 为 也 ， 不 可 执 也 。
为 者 败 之 ， 执 者 失 之 。
是 以 圣 人 无 为 ， 故 无 败 ﹔
无 执 ， 故 无 失。
夫 物 或 行 或 随 ﹔ 或 嘘 或 吹 ﹔
或 强 或 羸 ﹔ 或 载 或 隳 。
是 以 圣 人 去 甚 ， 去 奢 ， 去 泰 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-章&#34;&gt;第 三 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;以 道 佐 人 主 者 ， 不 以 兵 强 天 下 。
其 事 好 远 。
师 之 所 处 ， 荆 棘 生 焉 。
大 军 之 后 ， 必 有 凶 年 。
善 有 果 而 已 ， 不 以 取 强 。
果 而 勿 矜 ， 果 而 勿 伐 ， 果 而 勿 骄 。
果 而 不 得 已 ， 果 而 勿 强 。
物 壮 则 老 ， 是 谓 不 道 ， 不 道 早 已 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-一-章&#34;&gt;第 三 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;夫 兵 者 ， 不 祥 之 器 ，
物 或 恶 之 ， 故 有 道 者 不 处 。
君 子 居 则 贵 左 ， 用 兵 则 贵 右 。
兵 者 不 祥 之 器 ， 非 君 子 之 器 ，
不 得 已 而 用 之 ， 恬 淡 为 上 。
胜 而 不 美 ， 而 美 之 者 ， 是 乐 杀 人 。
夫 乐 杀 人 者 ， 则 不 可 得 志 于 天 下 矣 。
吉 事 尚 左 ， 凶 事 尚 右 。
偏 将 军 居 左 ， 上 将 军 居 右 ， 言 以 丧 礼 处 之 。
杀 人 之 众 ， 以 悲 哀 泣 之 ， 战 胜 以 丧 礼 处 之 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-二-章&#34;&gt;第 三 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 常 无 名 朴 。
虽 小 ， 天 下 莫 能 臣 。
侯 王 若 能 守 之 ， 万 物 将 自 宾 。
天 地 相 合 ， 以 降 甘 露 ， 民 莫 之 令 而 自 均 。
始 制 有 名 ， 名 亦 既 有 ，
夫 亦 将 知 止 ， 知 止 可 以 不 殆 。
譬 道 之 在 天 下 ， 犹 川 谷 之 于 江 海 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-三-章&#34;&gt;第 三 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;知 人 者 智 ， 自 知 者 明 。
胜 人 者 有 力 ， 自 胜 者 强 。
知 足 者 富 。
强 行 者 有 志 。
不 失 其 所 者 久 。
死 而 不 亡 者 寿 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-四-章&#34;&gt;第 三 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;大 道 泛 兮 ， 其 可 左 右 。
万 物 恃 之 以 生 而 不 辞 ， 功 成 而 不 有 。
衣 养 万 物 而 不 为 主 ， 可 名 于 小 ﹔
万 物 归 焉 而 不 为 主 ， 可 名 为 大 。
以 其 终 不 自 为 大 ， 故 能 成 其 大 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-五-章&#34;&gt;第 三 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;执 大 象 ， 天 下 往 。
往 而 不 害 ， 安 平 泰 。
乐 与 饵 ， 过 客 止 。
道 之 出 口 ， 淡 乎 其 无 味 ，
视 之 不 足 见 ， 听 之 不 足 闻 ， 用 之 不 足 既 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-六-章&#34;&gt;第 三 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;将 欲 歙 之 ， 必 故 张 之 ﹔ 将 欲 弱 之 ， 必 故 强 之 ﹔
将 欲 废 之 ， 必 故 兴 之 ﹔ 将 欲 取 之 ， 必 故 与 之 。
是 谓 微 明 。
柔 弱 胜 刚 强 。
鱼 不 可 脱 于 渊 ， 国 之 利 器 不 可 以 示 人 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-七-章&#34;&gt;第 三 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 常 无 为 而 无 不 为 。
侯 王 若 能 守 之 ， 万 物 将 自 化 。
化 而 欲 作 ， 吾 将 镇 之 以 无 名 之 朴 。
镇 之 以 无 名 之 朴 ， 夫 将 不 欲 。
不 欲 以 静 ， 天 下 将 自 正 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-八-章&#34;&gt;第 三 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;上 德 不 德 ， 是 以 有 德 ﹔
下 德 不 失 德 ， 是 以 无 德 。
上 德 无 为 而 无 以 为 ﹔
下 德 无 为 而 有 以 为 。
上 仁 为 之 而 无 以 为 ﹔
上 义 为 之 而 有 以 为 。
上 礼 为 之 而 莫 之 应 ，
则 攘 臂 而 扔 之 。
故 失 道 而 后 德 ， 失 德 而 后 仁 ，
失 仁 而 后 义 ， 失 义 而 后 礼 。
夫 礼 者 ， 忠 信 之 薄 ， 而 乱 之 首 。
前 识 者 ， 道 之 华 ， 而 愚 之 始 。
是 以 大 丈 夫 处 其 厚 ， 不 居 其 薄 ﹔
处 其 实 ， 不 居 其 华 。 故 去 彼 取 此 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-三-十-九-章&#34;&gt;第 三 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;昔 之 得 一 者 ：
天 得 一 以 清 ﹔
地 得 一 以 宁 ﹔
神 得 一 以 灵 ﹔
谷 得 一 以 生 ﹔
侯 得 一 以 为 天 下 正 。
其 致 之 也 ， 谓 天 无 以 清 ， 将 恐 裂 ﹔
地 无 以 宁 ， 将 恐 废 ﹔
神 无 以 灵 ， 将 恐 歇 ﹔
谷 无 以 盈 ， 将 恐 竭 ﹔
万 物 无 以 生 ， 将 恐 灭 ﹔
侯 王 无 以 正 ， 将 恐 蹶 。
故 贵 以 贱 为 本 ， 高 以 下 为 基 。
是 以 侯 王 自 称 孤 、 寡 、 不 谷 。
此 非 以 贱 为 本 邪 。 非 乎 。 故 致 誉 无 誉 。
是 故 不 欲 琭 琭 如 玉 ， 珞 珞 如 石 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-章&#34;&gt;第 四 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;反 者 道 之 动 ﹔ 弱 者 道 之 用 。
天 下 万 物 生 于 有 ， 有 生 于 无 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-一-章&#34;&gt;第 四 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;上 士 闻 道 ， 勤 而 行 之 ﹔ 中 士 闻 道 ， 若 存 若 亡 ﹔
下 士 闻 道 ， 大 笑 之 。 不 笑 不 足 以 为 道 。
故 建 言 有 之 ：
明 道 若 昧 ﹔
进 道 若 退 ﹔
夷 道 若 颣 ﹔
上 德 若 谷 ﹔
广 德 若 不 足 ﹔
建 德 若 偷 ﹔
质 真 若 渝 ﹔
大 白 若 辱 ﹔
大 方 无 隅 ﹔
大 器 晚 成 ﹔
大 音 希 声 ﹔
大 象 无 形 ﹔
道 隐 无 名 。
夫 唯 道 ， 善 贷 且 成 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-二-章&#34;&gt;第 四 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 生 一 ， 一 生 二 ， 二 生 三 ， 三 生 万 物 。
万 物 负 阴 而 抱 阳 ， 冲 气 以 为 和 。
人 之 所 恶 ， 唯 孤 、 寡 、 不 谷 ， 而 王 公 以 为 称 。
故 物 或 损 之 而 益 ， 或 益 之 而 损 。
人 之 所 教 ， 我 亦 教 之 。
强 梁 者 不 得 其 死 ， 吾 将 以 为 教 父 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-三-章&#34;&gt;第 四 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 之 至 柔 ， 驰 骋 天 下 之 至 坚 。
无 有 入 无 间 ， 吾 是 以 知 无 为 之 有 益 。
不 言 之 教 ， 无 为 之 益 ， 天 下 希 及 之 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-四-章&#34;&gt;第 四 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;名 与 身 孰 亲 。 身 与 货 孰 多 。 得 与 亡 孰 病 。
甚 爱 必 大 费 ﹔ 多 藏 必 厚 亡 。
故 知 足 不 辱 ， 知 止 不 殆 ， 可 以 长 久 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-五-章&#34;&gt;第 四 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;大 成 若 缺 ， 其 用 不 弊 。
大 盈 若 冲 ， 其 用 不 穷 。
大 直 若 屈 ， 大 巧 若 拙 ， 大 辩 若 讷 。
静 胜 躁 ， 寒 胜 热 。 清 静 为 天 下 正 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-六-章&#34;&gt;第 四 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 有 道 ， 却 走 马 以 粪 。
天 下 无 道 ， 戎 马 生 于 郊 。
祸 莫 大 于 不 知 足 ﹔ 咎 莫 大 于 欲 得 。
故 知 足 之 足 ， 常 足 矣 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-七-章&#34;&gt;第 四 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;不 出 户 ， 知 天 下 ﹔ 不 窥 牖 ， 见 天 道 。
其 出 弥 远 ， 其 知 弥 少 。
是 以 圣 人 不 行 而 知 ， 不 见 而 明 ， 不 为 而 成 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-八-章&#34;&gt;第 四 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;为 学 日 益 ， 为 道 日 损 。
损 之 又 损 ， 以 至 于 无 为 。
无 为 而 无 不 为 。
取 天 下 常 以 无 事 ， 及 其 有 事 ， 不 足 以 取 天 下 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-四-十-九-章&#34;&gt;第 四 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;圣 人 常 无 心 ， 以 百 姓 心 为 心 。
善 者 ， 吾 善 之 ﹔ 不 善 者 ， 吾 亦 善 之 ﹔ 德 善 。
信 者 ， 吾 信 之 ﹔ 不 信 者 ， 吾 亦 信 之 ﹔ 德 信 。
圣 人 在 天 下 ， 歙 歙 焉 ， 为 天 下 浑 其 心 ，
百 姓 皆 注 其 耳 目 ， 圣 人 皆 孩 之 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-章&#34;&gt;第 五 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;出 生 入 死 。
生 之 徒 ， 十 有 三 ﹔
死 之 徒 ， 十 有 三 ﹔
人 之 生 ， 动 之 于 死 地 ， 亦 十 有 三 。
夫 何 故 。
以 其 生 之 厚 。
盖 闻 善 摄 生 者 ， 路 行 不 遇 兕 虎 ， 入 军 不 被 甲 兵 ﹔
兕 无 所 投 其 角 ， 虎 无 所 用 其 爪 ， 兵 无 所 容 其 刃 。
夫 何 故 。 以 其 无 死 地 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-一-章&#34;&gt;第 五 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 生 之 ， 德 畜 之 ， 物 形 之 ， 势 成 之 。
是 以 万 物 莫 不 尊 道 而 贵 德 。
道 之 尊 ， 德 之 贵 ， 夫 莫 之 命 而 常 自 然 。
故 道 生 之 ， 德 畜 之 ﹔
长 之 育 之 ﹔ 成 之 熟 之 ﹔ 养 之 覆 之 。
生 而 不 有 ， 为 而 不 恃 ，
长 而 不 宰 。 是 谓 玄 德 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-二-章&#34;&gt;第 五 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 有 始 ， 以 为 天 下 母 。
既 得 其 母 ， 以 知 其 子 ，
复 守 其 母 ， 没 身 不 殆 。
塞 其 兑 ， 闭 其 门 ， 终 身 不 勤 。
开 其 兑 ， 济 其 事 ， 终 身 不 救 。
见 小 曰 明 ， 守 柔 曰 强 。
用 其 光 ， 复 归 其 明 ， 无 遗 身 殃 ﹔ 是 为 袭 常 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-三-章&#34;&gt;第 五 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;使 我 介 然 有 知 ， 行 于 大 道 ， 唯 施 是 畏 。
大 道 甚 夷 ， 而 人 好 径 。
朝 甚 除 ， 田 甚 芜 ， 仓 甚 虚 ﹔
服 文 采 ， 带 利 剑 ， 厌 饮 食 ，
财 货 有 余 ﹔ 是 为 盗 夸 。
非 道 也 哉 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-四-章&#34;&gt;第 五 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;善 建 者 不 拔 ，
善 抱 者 不 脱 ， 子 孙 以 祭 祀 不 辍 。
修 之 于 身 ， 其 德 乃 真 ﹔
修 之 于 家 ， 其 德 乃 余 ﹔
修 之 于 乡 ， 其 德 乃 长 ﹔
修 之 于 邦 ， 其 德 乃 丰 ﹔
修 之 于 天 下 ， 其 德 乃 普 。
故 以 身 观 身 ，
以 家 观 家 ， 以 乡 观 乡 ，
以 邦 观 邦 ， 以 天 下 观 天 下 。
吾 何 以 知 天 下 然 哉 。 以 此 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-五-章&#34;&gt;第 五 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;含 「 德 」 之 厚 ， 比 于 赤 子 。
毒 虫 不 螫 ， 猛 兽 不 据 ， 攫 鸟 不 搏 。
骨 弱 筋 柔 而 握 固 。
未 知 牝 牡 之 合 而 峻 作 ， 精 之 至 也 。
终 日 号 而 不 嗄 ， 和 之 至 也 。
知 和 曰 「 常 」 ，
知 常 曰 「 明 」 。
益 生 曰 祥 。 心 使 气 曰 强 。
物 壮 则 老 ， 谓 之 不 道 ， 不 道 早 已 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-六-章&#34;&gt;第 五 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;知 者 不 言 ， 言 者 不 知 。
挫 其 锐 ， 解 其 纷 ， 和 其 光 ，
同 其 尘 ， 是 谓 「 玄 同 」 。
故 不 可 得 而 亲 ， 不 可 得 而 疏 ﹔
不 可 得 而 利 ， 不 可 得 而 害 ﹔
不 可 得 而 贵 ， 不 可 得 而 贱 。 故 为 天 下 贵 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-七-章&#34;&gt;第 五 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;以 正 治 国 ， 以 奇 用 兵 ， 以 无 事 取 天 下 。
吾 何 以 知 其 然 哉 。 以 此 ：
天 下 多 忌 讳 ， 而 民 弥 贫 ﹔
人 多 利 器 ， 国 家 滋 昏 ﹔
人 多 伎 巧 ， 奇 物 滋 起 ﹔
法 令 滋 彰 ， 盗 贼 多 有 。
故 圣 人 云 ：
「 我 无 为 ， 而 民 自 化 ﹔
我 好 静 ， 而 民 自 正 ﹔
我 无 事 ， 而 民 自 富 ﹔
我 无 欲 ， 而 民 自 朴 。 」
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-八-章&#34;&gt;第 五 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;其 政 闷 闷 ， 其 民 淳 淳 ﹔
其 政 察 察 ， 其 民 缺 缺 。
是 以 圣 人 方 而 不 割 ， 廉 而 不 刿 ，
直 而 不 肆 ， 光 而 不 耀 。
祸 兮 福 之 所 倚 ， 福 兮 祸 之 所 伏 。
孰 知 其 极 。 其 无 正 也 。
正 复 为 奇 ， 善 复 为 妖 。
人 之 迷 ， 其 日 固 久 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-五-十-九-章&#34;&gt;第 五 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;治 人 事 天 ， 莫 若 啬 。
夫 唯 啬 ， 是 谓 早 服 ﹔
早 服 谓 之 重 积 德 ﹔ 重 积 德 则 无 不 克 ﹔
无 不 克 则 莫 知 其 极 ﹔ 莫 知 其 极 ， 可 以 有 国 ﹔
有 国 之 母 ， 可 以 长 久 ﹔
是 谓 深 根 固 柢 ， 长 生 久 视 之 道 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-章&#34;&gt;第 六 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;治 大 国 ， 若 烹 小 鲜 。
以 道 莅 天 下 ， 其 鬼 不 神 ﹔
非 其 鬼 不 神 ， 其 神 不 伤 人 ﹔
非 其 神 不 伤 人 ， 圣 人 亦 不 伤 人 。
夫 两 不 相 伤 ， 故 德 交 归 焉 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-一-章&#34;&gt;第 六 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;大 邦 者 下 流 ， 天 下 之 牝 ，
天 下 之 交 也 。
牝 常 以 静 胜 牡 ， 以 静 为 下 。
故 大 邦 以 下 小 邦 ， 则 取 小 邦 ﹔
小 邦 以 下 大 邦 ， 则 取 大 邦 。
故 或 下 以 取 ， 或 下 而 取 。
大 邦 不 过 欲 兼 畜 人 ， 小 邦 不 过 欲 入 事 人 。
夫 两 者 各 得 所 欲 ， 大 者 宜 为 下 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-二-章&#34;&gt;第 六 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;道 者 万 物 之 奥 。 善 人 之 宝 ， 不 善 人 之 所 保 。
美 言 可 以 市 尊 ， 美 行 可 以 加 人 。
人 之 不 善 ， 何 弃 之 有 。
故 立 天 子 ， 置 三 公 ，
虽 有 拱 璧 以 先 驷 马 ，
不 如 坐 进 此 道 。
古 之 所 以 贵 此 道 者 何 。
不 曰 ： 求 以 得 ， 有 罪 以 免 邪 。 故 为 天 下 贵 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-三-章&#34;&gt;第 六 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;为 无 为 ， 事 无 事 ， 味 无 味 。
图 难 于 其 易 ， 为 大 于 其 细 ﹔
天 下 难 事 ， 必 作 于 易 ，
天 下 大 事 ， 必 作 于 细 。
是 以 圣 人 终 不 为 大 ， 故 能 成 其 大 。
夫 轻 诺 必 寡 信 ， 多 易 必 多 难 。
是 以 圣 人 犹 难 之 ， 故 终 无 难 矣 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-四-章&#34;&gt;第 六 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;其 安 易 持 ， 其 未 兆 易 谋 。
其 脆 易 泮 ， 其 微 易 散 。
为 之 于 未 有 ， 治 之 于 未 乱 。
合 抱 之 木 ， 生 于 毫 末 ﹔
九 层 之 台 ， 起 于 累 土 ﹔
千 里 之 行 ， 始 于 足 下。
民 之 从 事 ， 常 于 几 成 而 败 之 。
慎 终 如 始 ， 则 无 败 事 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-五-章&#34;&gt;第 六 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;古 之 善 为 道 者 ， 非 以 明 民 ， 将 以 愚 之 。
民 之 难 治 ， 以 其 智 多 。
故 以 智 治 国 ， 国 之 贼 ﹔
不 以 智 治 国 ， 国 之 福 。
知 此 两 者 亦 稽 式 。
常 知 稽 式 ， 是 谓 「 玄 德 」 。
「 玄 德 」 深 矣 ， 远 矣 ， 与 物 反 矣 ， 然 后 乃 至 大 顺 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-六-章&#34;&gt;第 六 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;江 海 之 所 以 能 为 百 谷 王 者 ，
以 其 善 下 之 ， 故 能 为 百 谷 王 。
是 以 圣 人 欲 上 民 ， 必 以 言 下 之 ﹔
欲 先 民 ， 必 以 身 后 之 。
是 以 圣 人 处 上 而 民 不 重 ， 处 前 而 民 不 害 。
是 以 天 下 乐 推 而 不 厌 。
以 其 不 争 ， 故 天 下 莫 能 与 之 争 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-七-章&#34;&gt;第 六 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 皆 谓 我 道 大 ， 似 不 肖 。
夫 唯 大 ， 故 似 不 肖 。
若 肖 ， 久 矣 其 细 也 夫 。
我 有 三 宝 ， 持 而 保 之 。
一 曰 慈 ，
二 曰 俭 ，
三 曰 不 敢 为 天 下 先 。
慈 故 能 勇 ﹔ 俭 故 能 广 ﹔
不 敢 为 天 下 先 ， 故 能 成 器 长 。
今 舍 慈 且 勇 ﹔ 舍 俭 且 广 ﹔
舍 后 且 先 ﹔ 死 矣 。
夫 慈 以 战 则 胜 ， 以 守 则 固 。
天 将 救 之 ， 以 慈 卫 之 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-八-章&#34;&gt;第 六 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;善 为 士 者 ， 不 武 ﹔
善 战 者 ， 不 怒 ﹔
善 胜 敌 者 ， 不 与 ﹔
善 用 人 者 ， 为 之 下 。
是 谓 不 争 之 德 ，
是 谓 用 人 之 力 ，
是 谓 配 天 古 之 极 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-六-十-九-章&#34;&gt;第 六 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;用 兵 有 言 ：
「 吾 不 敢 为 主 ， 而 为 客 ﹔
不 敢 进 寸 ， 而 退 尺 。 」
是 谓 行 无 行 ﹔ 攘 无 臂 ﹔
扔 无 敌 ﹔ 执 无 兵 。
祸 莫 大 于 轻 敌 ， 轻 敌 几 丧 吾 宝 。
故 抗 兵 相 若 ， 哀 者 胜 矣 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-章&#34;&gt;第 七 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;吾 言 甚 易 知 ， 甚 易 行 。
天 下 莫 能 知 ， 莫 能 行 。
言 有 宗 ， 事 有 君 。
夫 唯 无 知 ， 是 以 不 我 知 。
知 我 者 希 ， 则 我 者 贵 。
是 以 圣 人 被 褐 而 怀 玉 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-一-章&#34;&gt;第 七 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;知 不 知 ， 尚 矣 ﹔ 不 知 知 ， 病 也 。
圣 人 不 病 ， 以 其 病 病 。
夫 唯 病 病 ， 是 以 不 病 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-二-章&#34;&gt;第 七 十 二 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;民 不 畏 威 ，
则 大 威 至 。
无 狎 其 所 居 ，
无 厌 其 所 生 。
夫 唯 不 厌 ，
是 以 不 厌 。
是 以 圣 人 自 知 不 自 见 ﹔
自 爱 不 自 贵 。
故 去 彼 取 此 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-三-章&#34;&gt;第 七 十 三 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;勇 于 敢 则 杀 ， 勇 于 不 敢 则 活 。
此 两 者 ， 或 利 或 害 。
天 之 所 恶 ， 孰 知 其 故 。
天 之 道 ，
不 争 而 善 胜 ， 不 言 而 善 应 ，
不 召 而 自 来 ， 繟 然 而 善 谋 。
天 网 恢 恢 ， 疏 而 不 失 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-四-章&#34;&gt;第 七 十 四 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;民 不 畏 死 ， 奈 何 以 死 惧 之 。
若 使 民 常 畏 死 ， 而 为 奇 者 ，
吾 得 执 而 杀 之 ， 孰 敢 。
常 有 司 杀 者 杀 。
夫 代 司 杀 者 杀 ， 是 谓 代 大 匠 斲 ，
夫 代 大 匠 斲 者 ， 希 有 不 伤 其 手 矣 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-五-章&#34;&gt;第 七 十 五 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;民 之 饥 ， 以 其 上 食 税 之 多 ， 是 以 饥 。
民 之 难 治 ， 以 其 上 之 有 为 ， 是 以 难 治 。
民 之 轻 死 ， 以 其 上 求 生 之 厚 ， 是 以 轻 死 。
夫 唯 无 以 生 为 者 ， 是 贤 于 贵 生 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-六-章&#34;&gt;第 七 十 六 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;人 之 生 也 柔 弱 ， 其 死 也 坚 强 。
草 木 之 生 也 柔 脆 ， 其 死 也 枯 槁 。
故 坚 强 者 死 之 徒 ， 柔 弱 者 生 之 徒 。
是 以 兵 强 则 灭 ， 木 强 则 折 。
强 大 处 下 ， 柔 弱 处 上 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-七-章&#34;&gt;第 七 十 七 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 之 道 ， 其 犹 张 弓 欤 。
高 者 抑 之 ， 下 者 举 之 ﹔
有 余 者 损 之 ， 不 足 者 补 之 。
天 之 道 ， 损 有 余 而 补 不 足 。
人 之 道 ， 则 不 然 ， 损 不 足 以 奉 有 余 。
孰 能 有 余 以 奉 天 下 ， 唯 有 道 者 。
是 以 圣 人 为 而 不 恃 ， 功 成 而 不 处 ， 其 不 欲 见 贤 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-八-章&#34;&gt;第 七 十 八 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;天 下 莫 柔 弱 于 水 ， 而 攻 坚 强 者 莫 之 能 胜 ， 以 其 无 以 易 之 。
弱 之 胜 强 ， 柔 之 胜 刚 ，
天 下 莫 不 知 ， 莫 能 行 。
是 以 圣 人 云 ：
「 受 国 之 垢 ， 是 谓 社 稷 主 ﹔
受 国 不 祥 ， 是 为 天 下 王 。 」
正 言 若 反 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-七-十-九-章&#34;&gt;第 七 十 九 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;和 大 怨 ， 必 有 余 怨 ﹔
报 怨 以 德 ， 安 可 以 为 善 。
是 以 圣 人 执 左 契 ， 而 不 责 于 人 。
有 德 司 契 ， 无 德 司 彻 。
天 道 无 亲 ， 常 与 善 人 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-八-十-章&#34;&gt;第 八 十 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;小 国 寡 民 。
使 有 什 伯 之 器 而 不 用 ﹔
使 民 重 死 而 不 远 徙 。
虽 有 舟 舆 ， 无 所 乘 之 ，
虽 有 甲 兵 ， 无 所 陈 之 。
使 民 复 结 绳 而 用 之 。
甘 其 食 ， 美 其 服 ， 安 其 居 ， 乐 其 俗 。
邻 国 相 望 ， 鸡 犬 之 声 相 闻 ，
民 至 老 死 ， 不 相 往 来 。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第-八-十-一-章&#34;&gt;第 八 十 一 章&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;信 言 不 美 ， 美 言 不 信 。
善 者 不 辩 ， 辩 者 不 善 。
知 者 不 博 ， 博 者 不 知 。
圣 人 不 积 ， 既 以 为 人 己 愈 有 ，
既 以 与 人 己 愈 多 。
天 之 道 ， 利 而 不 害 ﹔
圣 人 之 道 ， 为 而 不 争 。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go - See what packages my app imports</title>
      <link>http://alimy.me/post/dev_201604101827/</link>
      <pubDate>Sun, 10 Apr 2016 18:27:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201604101827/</guid>
      <description>&lt;p&gt;It’s often practical to see what packages your app is importing. Unfortunately there isn’t a simple way to do that, however it is doable via the go list tool and using templates.&lt;/p&gt;

&lt;p&gt;Go to your app and run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example with the clirescue refactoring example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoBootcamp/clirescue
$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; | xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
github.com/GoBootcamp/clirescue/cmdutil
github.com/GoBootcamp/clirescue/trackerapi
github.com/GoBootcamp/clirescue/user
github.com/codegangsta/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want the list to also contain standard packages, edit the template and use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{.ImportPath}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>爱</title>
      <link>http://alimy.me/post/art_201604091521/</link>
      <pubDate>Sat, 09 Apr 2016 15:21:01 CST</pubDate>
      
      <guid>http://alimy.me/post/art_201604091521/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alimy.me/images/post/20160409152101.jpg&#34; title=&#34;点击查看大图&#34;&gt;&lt;img src=&#34;http://alimy.me/images/post/20160409152100.webp&#34; alt=&#34;图片加载中...使用支持Webp的浏览器可以加速查看&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;繁星点点（&lt;a href=&#34;http://alimy.me/images/post/20160409152101.webp&#34; title=&#34;webp格式图片&#34;&gt;查看大图&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go - EBNF</title>
      <link>http://alimy.me/post/dev_201604021445/</link>
      <pubDate>Sat, 02 Apr 2016 14:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201604021445/</guid>
      <description>&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;

&lt;p&gt;The syntax is specified using Extended Backus-Naur Form (EBNF):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Production  = production_name &amp;quot;=&amp;quot; [ Expression ] &amp;quot;.&amp;quot; .
Expression  = Alternative { &amp;quot;|&amp;quot; Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ &amp;quot;…&amp;quot; token ] | Group | Option | Repetition .
Group       = &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Option      = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Repetition  = &amp;quot;{&amp;quot; Expression &amp;quot;}&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Productions are expressions constructed from terms and the following operators, in increasing precedence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lower-case production names are used to identify lexical tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes &amp;ldquo;&amp;rdquo; or back quotes ``.

The form a … b represents the set of characters from a through b as alternatives. The horizontal ellipsis … is also used elsewhere in the spec to informally denote various enumerations or code snippets that are not further specified. The character … (as opposed to the three characters &amp;hellip;) is not a token of the Go language.&lt;/p&gt;

&lt;h3 id=&#34;go-ebnf&#34;&gt;Go EBNF&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newline        = /* the Unicode code point U+000A */ .
unicode_char   = /* an arbitrary Unicode code point except newline */ .
unicode_letter = /* a Unicode code point classified as &amp;quot;Letter&amp;quot; */ .
unicode_digit  = /* a Unicode code point classified as &amp;quot;Number, decimal digit&amp;quot; */ .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Letters and digits&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;letter        = unicode_letter | &amp;quot;_&amp;quot; .
decimal_digit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; .
octal_digit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot; .
hex_digit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;identifier = letter { letter | unicode_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keywords&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators and Delimiters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;     +=    &amp;amp;=     &amp;amp;&amp;amp;    ==    !=    (    )    +
|     -=    |=     ||    &amp;lt;     &amp;lt;=    [    ]    -
^     *=    ^=     &amp;lt;-    &amp;gt;     &amp;gt;=    {    }    *
/    &amp;lt;&amp;lt;    /=    &amp;lt;&amp;lt;=    ++    =     :=    ,    ;
%    &amp;gt;&amp;gt;    %=    &amp;gt;&amp;gt;=    --    !     ...   .    :
     &amp;amp;^          &amp;amp;^=
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integer literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( &amp;quot;1&amp;quot; … &amp;quot;9&amp;quot; ) { decimal_digit } .
octal_lit   = &amp;quot;0&amp;quot; { octal_digit } .
hex_lit     = &amp;quot;0&amp;quot; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hex_digit { hex_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Floating-point literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float_lit = decimals &amp;quot;.&amp;quot; [ decimals ] [ exponent ] |
            decimals exponent |
            &amp;quot;.&amp;quot; decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( &amp;quot;e&amp;quot; | &amp;quot;E&amp;quot; ) [ &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; ] decimals .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imaginary literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imaginary_lit = (decimals | float_lit) &amp;quot;i&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rune literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\a   U+0007 alert or bell
\b   U+0008 backspace
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 horizontal tab
\v   U+000b vertical tab
\\   U+005c backslash
\&#39;   U+0027 single quote  (valid escape only within rune literals)
\&amp;quot;   U+0022 double quote  (valid escape only within string literals)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;rune_lit         = &amp;quot;&#39;&amp;quot; ( unicode_value | byte_value ) &amp;quot;&#39;&amp;quot; .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` &amp;quot;x&amp;quot; hex_digit hex_digit .
little_u_value   = `\` &amp;quot;u&amp;quot; hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` &amp;quot;U&amp;quot; hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; | &amp;quot;f&amp;quot; | &amp;quot;n&amp;quot; | &amp;quot;r&amp;quot; | &amp;quot;t&amp;quot; | &amp;quot;v&amp;quot; | `\` | &amp;quot;&#39;&amp;quot; | `&amp;quot;` ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = &amp;quot;`&amp;quot; { unicode_char | newline } &amp;quot;`&amp;quot; .
interpreted_string_lit = `&amp;quot;` { unicode_value | byte_value } `&amp;quot;` .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type      = TypeName | TypeLit | &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
            SliceType | MapType | ChannelType .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Numeric types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uint8       the set of all unsigned  8-bit integers (0 to 255)
uint16      the set of all unsigned 16-bit integers (0 to 65535)
uint32      the set of all unsigned 32-bit integers (0 to 4294967295)
uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)

int8        the set of all signed  8-bit integers (-128 to 127)
int16       the set of all signed 16-bit integers (-32768 to 32767)
int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)
int64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

float32     the set of all IEEE-754 32-bit floating-point numbers
float64     the set of all IEEE-754 64-bit floating-point numbers

complex64   the set of all complex numbers with float32 real and imaginary parts
complex128  the set of all complex numbers with float64 real and imaginary parts

byte        alias for uint8
rune        alias for int32

uint     either 32 or 64 bits
int      same size as uint
uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Array types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ArrayType   = &amp;quot;[&amp;quot; ArrayLength &amp;quot;]&amp;quot; ElementType .
ArrayLength = Expression .
ElementType = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SliceType = &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;make([]T, length, capacity)
make([]int, 50, 100)
new([100]int)[0:50]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Struct types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StructType     = &amp;quot;struct&amp;quot; &amp;quot;{&amp;quot; { FieldDecl &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
AnonymousField = [ &amp;quot;*&amp;quot; ] TypeName .
Tag            = string_lit .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pointer types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PointerType = &amp;quot;*&amp;quot; BaseType .
BaseType    = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionType   = &amp;quot;func&amp;quot; Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = &amp;quot;(&amp;quot; [ ParameterList [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
ParameterList  = ParameterDecl { &amp;quot;,&amp;quot; ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ &amp;quot;...&amp;quot; ] Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interface types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InterfaceType      = &amp;quot;interface&amp;quot; &amp;quot;{&amp;quot; { MethodSpec &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MapType     = &amp;quot;map&amp;quot; &amp;quot;[&amp;quot; KeyType &amp;quot;]&amp;quot; ElementType .
KeyType     = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Channel types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ChannelType = ( &amp;quot;chan&amp;quot; | &amp;quot;chan&amp;quot; &amp;quot;&amp;lt;-&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; &amp;quot;chan&amp;quot; ) ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;chan T          // can be used to send and receive values of type T
chan&amp;lt;- float64  // can only be used to send float64s
&amp;lt;-chan int      // can only be used to receive ints

chan&amp;lt;- chan int    // same as chan&amp;lt;- (chan int)
chan&amp;lt;- &amp;lt;-chan int  // same as chan&amp;lt;- (&amp;lt;-chan int)
&amp;lt;-chan &amp;lt;-chan int  // same as &amp;lt;-chan (&amp;lt;-chan int)
chan (&amp;lt;-chan int)

make(chan int, 100)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type identity&lt;/p&gt;

&lt;p&gt;Two types are either identical or different.&lt;/p&gt;

&lt;p&gt;Two named types are identical if their type names originate in the same TypeSpec. A named and an unnamed type are always different. Two unnamed types are identical if the corresponding type literals are identical, that is, if they have the same literal structure and corresponding components have identical types. In detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Two &lt;strong&gt;array&lt;/strong&gt; types are identical if they have identical element types and the same array length.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;slice&lt;/strong&gt; types are identical if they have identical element types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;struct&lt;/strong&gt; types are identical if they have the same sequence of fields, and if corresponding fields have the same names, and identical types, and identical tags. Two anonymous fields are considered to have the same name. Lower-case field names from different packages are always different.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;pointer&lt;/strong&gt; types are identical if they have identical base types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;function&lt;/strong&gt; types are identical if they have the same &lt;em&gt;number of parameters and result values, corresponding parameter and result types&lt;/em&gt; are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;interface&lt;/strong&gt; types are identical if they have the same set of methods with the same names and identical function types. Lower-case method names from different packages are always different. The order of the methods is irrelevant.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;map&lt;/strong&gt; types are identical if they have identical key and value types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;channel&lt;/strong&gt; types are identical if they have identical value types and the same direction.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignability&lt;/p&gt;

&lt;p&gt;A value x is assignable to a variable of type T (&amp;ldquo;x is assignable to T&amp;rdquo;) in any of these cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;x&amp;rsquo;s type is identical to T.&lt;/li&gt;
&lt;li&gt;x&amp;rsquo;s type V and T have identical underlying types and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;T is an interface type and x implements T.&lt;/li&gt;
&lt;li&gt;x is a bidirectional channel value, T is a channel type, x&amp;rsquo;s type V and T have identical element types, and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;x is the predeclared identifier nil and T is a pointer, function, slice, map, channel, or interface type.&lt;/li&gt;
&lt;li&gt;x is an untyped constant representable by a value of type T.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blocks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Block = &amp;quot;{&amp;quot; StatementList &amp;quot;}&amp;quot; .
StatementList = { Statement &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Declarations and scope&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Predeclared identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Types:
    bool byte complex64 complex128 error float32 float64
    int int8 int16 int32 int64 rune string
    uint uint8 uint16 uint32 uint64 uintptr

Constants:
    true false iota

Zero value:
    nil

Functions:
    append cap close complex copy delete imag len
    make new panic print println real recover
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exported identifiers&lt;/p&gt;

&lt;p&gt;An identifier may be exported to permit access to it from another package. An identifier is exported if both:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the first character of the identifier&amp;rsquo;s name is a Unicode upper case letter (Unicode class &amp;ldquo;Lu&amp;rdquo;); and&lt;/li&gt;
&lt;li&gt;the identifier is declared in the package block or it is a field name or method name.
All other identifiers are not exported.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uniqueness of identifiers&lt;/p&gt;

&lt;p&gt;Given a set of identifiers, an identifier is called unique if it is different from every other in the set. Two identifiers are different if they are spelled differently, or if they appear in different packages and are not exported. Otherwise, they are the same.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Constant declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ConstDecl      = &amp;quot;const&amp;quot; ( ConstSpec | &amp;quot;(&amp;quot; { ConstSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ConstSpec      = IdentifierList [ [ Type ] &amp;quot;=&amp;quot; ExpressionList ] .

IdentifierList = identifier { &amp;quot;,&amp;quot; identifier } .
ExpressionList = Expression { &amp;quot;,&amp;quot; Expression } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iota
Within a constant declaration, the predeclared identifier iota represents successive untyped integer constants. It is reset to 0 whenever the reserved word const appears in the source and increments after each ConstSpec. It can be used to construct a set of related constants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ( // iota is reset to 0
    c0 = iota  // c0 == 0
    c1 = iota  // c1 == 1
    c2 = iota  // c2 == 2
)

const ( // iota is reset to 0
    a = 1 &amp;lt;&amp;lt; iota  // a == 1
    b = 1 &amp;lt;&amp;lt; iota  // b == 2
    c = 3          // c == 3  (iota is not used but still incremented)
    d = 1 &amp;lt;&amp;lt; iota  // d == 8
)

const ( // iota is reset to 0
    u         = iota * 42  // u == 0     (untyped integer constant)
    v float64 = iota * 42  // v == 42.0  (float64 constant)
    w         = iota * 42  // w == 84    (untyped integer constant)
)

const x = iota  // x == 0  (iota has been reset)
const y = iota  // y == 0  (iota has been reset)

const (
    bit0, mask0 = 1 &amp;lt;&amp;lt; iota, 1&amp;lt;&amp;lt;iota - 1  // bit0 == 1, mask0 == 0
    bit1, mask1                           // bit1 == 2, mask1 == 1
    _, _                                  // skips iota == 2
    bit3, mask3                           // bit3 == 8, mask3 == 7
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypeDecl     = &amp;quot;type&amp;quot; ( TypeSpec | &amp;quot;(&amp;quot; { TypeSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
TypeSpec     = identifier Type .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;type IntArray [16]int

type (
    Point struct{ x, y float64 }
    Polar Point
)

type TreeNode struct {
    left, right *TreeNode
    value *Comparable
}

type Block interface {
    BlockSize() int
    Encrypt(src, dst []byte)
    Decrypt(src, dst []byte)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The declared type does not inherit any methods bound to the existing type, but the method set of an interface type or of elements of a composite type remains unchanged:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A Mutex is a data type with two methods, Lock and Unlock.
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }

// NewMutex has the same composition as Mutex but its method set is empty.
type NewMutex Mutex

// The method set of the base type of PtrMutex remains unchanged,
// but the method set of PtrMutex is empty.
type PtrMutex *Mutex

// The method set of *PrintableMutex contains the methods
// Lock and Unlock bound to its anonymous field Mutex.
type PrintableMutex struct {
    Mutex
}

// MyBlock is an interface type that has the same method set as Block.
type MyBlock Block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A type declaration may be used to define a different boolean, numeric, or string type and attach methods to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type TimeZone int

const (
    EST TimeZone = -(5 + iota)
    CST
    MST
    PST
)

func (tz TimeZone) String() string {
    return fmt.Sprintf(&amp;quot;GMT%+dh&amp;quot;, tz)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VarDecl     = &amp;quot;var&amp;quot; ( VarSpec | &amp;quot;(&amp;quot; { VarSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
VarSpec     = IdentifierList ( Type [ &amp;quot;=&amp;quot; ExpressionList ] | &amp;quot;=&amp;quot; ExpressionList ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Short variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ShortVarDecl = IdentifierList &amp;quot;:=&amp;quot; ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is shorthand for a regular variable declaration with initializer expressions but no types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;var&amp;quot; IdentifierList = ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() returns two values
_, y, _ := coord(p)  // coord() returns three values; only interested in y coordinate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike regular variable declarations, a short variable declaration may redeclare variables provided they were originally declared earlier in the same block (or the parameter lists if the block is the function body) with the same type, and at least one of the non-blank variables is new. As a consequence, redeclaration can only appear in a multi-variable short declaration. Redeclaration does not introduce a new variable; it just assigns a new value to the original.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // redeclares offset
a, a := 1, 2       // illegal: double declaration of a or no new variable if a was declared elsewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Short variable declarations may appear only inside functions. In some contexts such as the initializers for &amp;ldquo;if&amp;rdquo;, &amp;ldquo;for&amp;rdquo;, or &amp;ldquo;switch&amp;rdquo; statements, they can be used to declare local temporary variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionDecl = &amp;quot;func&amp;quot; FunctionName ( Function | Signature ) .
FunctionName = identifier .
Function     = Signature FunctionBody .
FunctionBody = Block .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodDecl   = &amp;quot;func&amp;quot; Receiver MethodName ( Function | Signature ) .
Receiver     = Parameters .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Operand     = Literal | OperandName | MethodExpr | &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Qualified identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QualifiedIdent = PackageName &amp;quot;.&amp;quot; identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Composite literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | &amp;quot;[&amp;quot; &amp;quot;...&amp;quot; &amp;quot;]&amp;quot; ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = &amp;quot;{&amp;quot; [ ElementList [ &amp;quot;,&amp;quot; ] ] &amp;quot;}&amp;quot; .
ElementList   = KeyedElement { &amp;quot;,&amp;quot; KeyedElement } .
KeyedElement  = [ Key &amp;quot;:&amp;quot; ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionLit = &amp;quot;func&amp;quot; Function .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Primary expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PrimaryExpr =
    Operand |
    Conversion |
    PrimaryExpr Selector |
    PrimaryExpr Index |
    PrimaryExpr Slice |
    PrimaryExpr TypeAssertion |
    PrimaryExpr Arguments .

Selector       = &amp;quot;.&amp;quot; identifier .
Index          = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Slice          = &amp;quot;[&amp;quot; ( [ Expression ] &amp;quot;:&amp;quot; [ Expression ] ) |
                  ( [ Expression ] &amp;quot;:&amp;quot; Expression &amp;quot;:&amp;quot; Expression )
                 &amp;quot;]&amp;quot; .
TypeAssertion  = &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
Arguments      = &amp;quot;(&amp;quot; [ ( ExpressionList | Type [ &amp;quot;,&amp;quot; ExpressionList ] ) [ &amp;quot;...&amp;quot; ] [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Selectors&lt;/p&gt;

&lt;p&gt;For a primary expression x that is not a package name, the selector expression&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;denotes the field or method f of the value x (or sometimes *x; see below). The identifier f is called the (field or method) selector; it must not be the blank identifier. The type of the selector expression is the type of f. If x is a package name, see the section on qualified identifiers.&lt;/p&gt;

&lt;p&gt;A selector f may denote a field or method f of a type T, or it may refer to a field or method f of a nested anonymous field of T. The number of anonymous fields traversed to reach f is called its depth in T. The depth of a field or method f declared in T is zero. The depth of a field or method f declared in an anonymous field A in T is the depth of f in A plus one.&lt;/p&gt;

&lt;p&gt;The following rules apply to selectors:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For a value x of type T or *T where T is not a pointer or interface type, x.f denotes the field or method at the shallowest depth in T where there is such an f. If there is not exactly one f with shallowest depth, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;For a value x of type I where I is an interface type, x.f denotes the actual method with name f of the dynamic value of x. If there is no method with name f in the method set of I, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;As an exception, if the type of x is a named pointer type and (*x).f is a valid selector expression denoting a field (but not a method), x.f is shorthand for (*x).f.&lt;/li&gt;
&lt;li&gt;In all other cases, x.f is illegal.&lt;/li&gt;
&lt;li&gt;If x is of pointer type and has the value nil and x.f denotes a struct field, assigning to or evaluating x.f causes a run-time panic.&lt;/li&gt;
&lt;li&gt;If x is of interface type and has the value nil, calling or evaluating the method x.f causes a run-time panic.
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodExpr    = ReceiverType &amp;quot;.&amp;quot; MethodName .
ReceiverType  = TypeName | &amp;quot;(&amp;quot; &amp;quot;*&amp;quot; TypeName &amp;quot;)&amp;quot; | &amp;quot;(&amp;quot; ReceiverType &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Index expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[x]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[low : high]

a[low : high : max]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type assertions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.(T)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f(a1, a2, … an)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Passing arguments to &amp;hellip; parameters&lt;/p&gt;

&lt;p&gt;Given the function and calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Greeting(prefix string, who ...string)
Greeting(&amp;quot;nobody&amp;quot;)
Greeting(&amp;quot;hello:&amp;quot;, &amp;quot;Joe&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Eileen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the slice s and call&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s := []string{&amp;quot;James&amp;quot;, &amp;quot;Jasmine&amp;quot;}
Greeting(&amp;quot;goodbye:&amp;quot;, s...)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = &amp;quot;||&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | rel_op | add_op | mul_op .
rel_op     = &amp;quot;==&amp;quot; | &amp;quot;!=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; | &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; .
add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .

unary_op   = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;^&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operator precedence&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Precedence    Operator
5             *  /  %  &amp;lt;&amp;lt;  &amp;gt;&amp;gt;  &amp;amp;  &amp;amp;^
4             +  -  |  ^
3             ==  !=  &amp;lt;  &amp;lt;=  &amp;gt;  &amp;gt;=
2             &amp;amp;&amp;amp;
1             ||
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arithmetic operators&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sum                    integers, floats, complex values, strings&lt;/li&gt;
&lt;li&gt;difference             integers, floats, complex values&lt;/li&gt;
&lt;li&gt;product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp;    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&amp;amp;^   bit clear (AND NOT)    integers&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;   left shift             integer &amp;lt;&amp;lt; unsigned integer
&amp;gt;&amp;gt;   right shift            integer &amp;gt;&amp;gt; unsigned integer
```&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comparison operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==    equal
!=    not equal
&amp;lt;     less
&amp;lt;=    less or equal
&amp;gt;     greater
&amp;gt;=    greater or equal
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;&amp;amp;    conditional AND    p &amp;amp;&amp;amp; q  is  &amp;quot;if p then q else false&amp;quot;
||    conditional OR     p || q  is  &amp;quot;if p then true else q&amp;quot;
!     NOT                !p      is  &amp;quot;not p&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Address operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;x
&amp;amp;a[f(2)]
&amp;amp;Point{2, 3}
*p
*pf(x)

var x *int = nil
*x   // causes a run-time panic
&amp;amp;*x  // causes a run-time panic
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Receive operator&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v1 := &amp;lt;-ch
v2 = &amp;lt;-ch
f(&amp;lt;-ch)
&amp;lt;-strobe  // wait until clock pulse and discard received value

x, ok = &amp;lt;-ch
x, ok := &amp;lt;-ch
var x, ok = &amp;lt;-ch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Conversion = Type &amp;quot;(&amp;quot; Expression [ &amp;quot;,&amp;quot; ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Statement =
    Declaration | LabeledStmt | SimpleStmt |
    GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
    FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
    DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Empty statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EmptyStmt = .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Labeled statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LabeledStmt = Label &amp;quot;:&amp;quot; Statement .
Label       = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExpressionStmt = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following built-in functions are not permitted in statement context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SendStmt = Channel &amp;quot;&amp;lt;-&amp;quot; Expression .
Channel  = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IncDec statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IncDecStmt = Expression ( &amp;quot;++&amp;quot; | &amp;quot;--&amp;quot; ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignments&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Assignment = ExpressionList assign_op ExpressionList .

assign_op = [ add_op | mul_op ] &amp;quot;=&amp;quot; .

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IfStmt = &amp;quot;if&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] Expression Block [ &amp;quot;else&amp;quot; ( IfStmt | Block ) ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExprSwitchStmt = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] [ Expression ] &amp;quot;{&amp;quot; { ExprCaseClause } &amp;quot;}&amp;quot; .
ExprCaseClause = ExprSwitchCase &amp;quot;:&amp;quot; StatementList .
ExprSwitchCase = &amp;quot;case&amp;quot; ExpressionList | &amp;quot;default&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch x.(type) {
// cases
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;TypeSwitchStmt  = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] TypeSwitchGuard &amp;quot;{&amp;quot; { TypeCaseClause } &amp;quot;}&amp;quot; .
TypeSwitchGuard = [ identifier &amp;quot;:=&amp;quot; ] PrimaryExpr &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; &amp;quot;type&amp;quot; &amp;quot;)&amp;quot; .
TypeCaseClause  = TypeSwitchCase &amp;quot;:&amp;quot; StatementList .
TypeSwitchCase  = &amp;quot;case&amp;quot; TypeList | &amp;quot;default&amp;quot; .
TypeList        = Type { &amp;quot;,&amp;quot; Type } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ForStmt = &amp;quot;for&amp;quot; [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ForClause = [ InitStmt ] &amp;quot;;&amp;quot; [ Condition ] &amp;quot;;&amp;quot; [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RangeClause = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] &amp;quot;range&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Range expression                          1st value          2nd value

array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, &amp;lt;-chan E       element  e  E
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GoStmt = &amp;quot;go&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelectStmt = &amp;quot;select&amp;quot; &amp;quot;{&amp;quot; { CommClause } &amp;quot;}&amp;quot; .
CommClause = CommCase &amp;quot;:&amp;quot; StatementList .
CommCase   = &amp;quot;case&amp;quot; ( SendStmt | RecvStmt ) | &amp;quot;default&amp;quot; .
RecvStmt   = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] RecvExpr .
RecvExpr   = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Return statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReturnStmt = &amp;quot;return&amp;quot; [ ExpressionList ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Break statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BreakStmt = &amp;quot;break&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Continue statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ContinueStmt = &amp;quot;continue&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goto statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GotoStmt = &amp;quot;goto&amp;quot; Label .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fallthrough statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FallthroughStmt = &amp;quot;fallthrough&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defer statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DeferStmt = &amp;quot;defer&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Source file organization&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SourceFile       = PackageClause &amp;quot;;&amp;quot; { ImportDecl &amp;quot;;&amp;quot; } { TopLevelDecl &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Package clause&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PackageClause  = &amp;quot;package&amp;quot; PackageName .
PackageName    = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Import declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ImportDecl       = &amp;quot;import&amp;quot; ( ImportSpec | &amp;quot;(&amp;quot; { ImportSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ImportSpec       = [ &amp;quot;.&amp;quot; | PackageName ] ImportPath .
ImportPath       = string_lit .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Import declaration          Local name of Sin

import   &amp;quot;lib/math&amp;quot;         math.Sin
import m &amp;quot;lib/math&amp;quot;         m.Sin
import . &amp;quot;lib/math&amp;quot;         Sin

import _ &amp;quot;lib/math&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Size and alignment guarantees&lt;/p&gt;

&lt;p&gt;For the numeric types, the following sizes are guaranteed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type                                 size in bytes

byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following minimal alignment properties are guaranteed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a variable x of any type: unsafe.Alignof(x) is at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of array type: unsafe.Alignof(x) is the same as unsafe.Alignof(x[0]), but at least 1.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A struct or array type has size zero if it contains no fields (or elements, respectively) that have a size greater than zero. Two distinct zero-size variables may have the same address in memory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: The Go Programming Language Specification is &lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile:简介</title>
      <link>http://alimy.me/post/dev_201603242255/</link>
      <pubDate>Thu, 24 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603242255/</guid>
      <description>&lt;p&gt;Make 可以简化编译过程，如果有一个近百个源文件的项目，如果有个文件更改后工程需要重新编译，那么一直用gcc -c a.c这些个命令敲来敲去会屎人的。运行make时候，他会寻找指定目录下（默认是 .）的 Makefile 文件并且分析依赖关系进行必要的编译。&lt;/p&gt;

&lt;h3 id=&#34;makefile文件的基本格式很简单&#34;&gt;Makefile文件的基本格式很简单：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;目标文件： 依赖文件1 依赖文件2 依赖文件3 。。。。
[tab]编译命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的意思是目标文件是依赖于冒号后面几个文件的，如果这些依赖文件有更新的，那么其目标文件也需要更新。&lt;/p&gt;

&lt;p&gt;Makefile 中可能有很多以上条目，他们共同组成了一个有向无回路图（DAG图），这样可以传递依赖。make 命令会把 Makefile 文件的第一个目标文件作为默认目标，当执行 make 命令时，make 会考察这个目标文件的依赖关系，进行编译。也可以指定，比如这个 Makefile：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main: a.o b.o
[tab]gcc -o main a.o b.o
a.o : a.c c.h
[tab]gcc -c a.c -o a.o
b.o: b.c c.h
[tab]gcc -c b.c -o b.o
// [tab]的意思是这里用tab字符代替，不能有其他的什么字符
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在命令行里执行make，分析关系并生成main，如果是make a.o那么他只会编译到 a.o 。

当然我们还可以设定伪目标，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clean：
[tab]rm a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样执行make clean的时候就把.o文件清除了,这里不会生成什么文件,只进行一些操作,更清楚的做法是在前面加上以下语句:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY : clean install dest [其他伪目标]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面来说下变量，Makefile 里的变量按惯例是大写，包括数字字母下划线。当我们需要一个变量的值的时候，通常用 ${NAME} 或者 $(NAME)。他有好几种变量定义的方法。&lt;/p&gt;

&lt;p&gt;首先是常规法，就是&lt;code&gt;A=content&lt;/code&gt;，等号两边可以有空格，和shell不一样。&lt;/p&gt;

&lt;p&gt;其次是递归法，比如&lt;code&gt;A=$(B)，B=$(C)，C=haha&lt;/code&gt;，那么当寻找A的定义的时候就会去找B，然后再找C，变量展开的时候就是当他被引用的时候，这种方法效率比较低，因为如果他引用了函数，那么每次展开都要调用函数，而且可能会出现无限递归&lt;code&gt;（A=$(B),B=$(A)）&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后是直接展开法。这个很容易理解，就像是c语言是按照顺序执行的，当变量定义的时候这个变量就已经展开了（如果他引用了变量A，引用的是他定义时候A的值），当被引用的时候就直接用他代表的字符串替代。但是他用的不是等号 是 := ,比如 &lt;code&gt;A:=hello，A:=$(B)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;还有嵌套定义： &lt;code&gt;A=B,B=haha,V=$($(A))&lt;/code&gt;类似于这种的V的值是haha&lt;/p&gt;

&lt;p&gt;最后是替换引用定义，他会替换后缀，有个例子很好 &lt;code&gt;foo := a.o b.o c.o ,bar := $(foo:.o=.c)&lt;/code&gt;,我们可以知道bar的值就是&lt;code&gt;a.c b.c c.c&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;变量还有分类&#34;&gt;变量还有分类：&lt;/h3&gt;

&lt;p&gt;1.预定义变量，当使用隐式规则的时候他会派上用场，常用的有以下几个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC   c编译器的名称（默认gcc？）
CPP    c预编译器名称（默认$(CC) -E）
CXX c++编译器的名称(默认g++)
CFLAGS c编译器选项,无默认值
CXXFLAGS c++编译器选项,无默认值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.自动变量,常用有以下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$@:表示当前规则中的完整目标文件名
$*:不包含扩展名的目标文件名
$&amp;lt;:当前规则中第一个依赖文件名
$^:当前规则所有文件列表
$%:当目标为库文件时,表示库文件名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.环境变量,Makefile对环境变量是可见的,可以引用.&lt;/p&gt;

&lt;p&gt;Makefile还有个常用的东东就是隐式规则,make会自己推导.比如说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c：a.o b.o
[tab]gcc -o c a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时我们可以省略下面的命令，直接用第一行就行。make自动分析生成a，此时预定义变量就有用了，CC，CFLAGS等也派上了用场。&lt;/p&gt;

&lt;p&gt;由于把握不了隐式规则的底线和能力，我还是觉得隐式规则应用的不要太多太复杂影响阅读为好。。&lt;/p&gt;

&lt;h3 id=&#34;make的工作过程大概是以下几步&#34;&gt;make的工作过程大概是以下几步&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;读取Makefile，根据make的选项查找Makefile
初始化Makefile，将Makefile中的变量进行替换，如果Makefile中包含其他文件，则加载他&lt;/li&gt;
&lt;li&gt;解释规则，对其中的执行规则进行解析，推导隐藏规则，为目标建立关系链&lt;/li&gt;
&lt;li&gt;分析变更，根据依赖关系和时间戳，判断有木有变化。&lt;/li&gt;
&lt;li&gt;执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;编译的基本流程&#34;&gt;编译的基本流程&lt;/h3&gt;

&lt;p&gt;基本过程是以下四步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;c(.c) 和 c++(.cc, .cpp, .cxx) 的源文件&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;gcc -E a.c -o a.i   // 如果不加-o参数，gcc会把处理过的源文件放到标准输出中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.预处理后的源文件。c源文件预处理后后缀为 .i , c++为 .ii 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -S a.i  //会在当前文件夹下生成a.s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.编译后生成的汇编源代码。后缀为 .s , .S 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -c a.s
//只进行汇编生成目标文件,.o结尾的目标文件可以用
//(ar crv libabc.a a.o b.o c.o )打包成形如lib×××.a的静态库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.目标文件与库文件进行链接，生成可执行文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc a.o //在当前文件夹下生成a.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中任何一种状态，用 gcc 如果不加 -c ， -E ， -S 选项都会直接生成可执行文件，如果加上了选项，可以由之前任一状态生成所需要的文件（如 gcc -S a.c 可以直接生成 a.s，gcc -c a.i 可以直接生成 a.o ）。如果是c++直接换用g++命令就行。&lt;/p&gt;

&lt;p&gt;另外 &lt;code&gt;gcc -v&lt;/code&gt;可以输出编译过程的配置和版本信息。&lt;/p&gt;

&lt;h3 id=&#34;gcc-警告提示&#34;&gt;gcc 警告提示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-fsyntax-only   检查程序中的语法错误，不产生输出信息
-w 禁止所有警告信息
-Wunused 声明了木有用
-Wmain main函数定义不常规
-Wall 提供所有警告
-pedantic-errors 允许ansi c标准列出的全部信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他常用选项&#34;&gt;其他常用选项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-g 加入调试信息，gdb调试的时候要用。&lt;/li&gt;
&lt;li&gt;-On 优化选项。这里的n可以用0-3来替代。数字越大优化效果越好，-O0表示不进行优化。优化可能针对硬件进行优化，也可能针对代码优化（删除公共表达式，循环优化，删除无用信息）。优化可能大大增加编译时间和内存，他通常会将循环或函数展开，使他们以内联的方式进行，不是通过函数调用，这样可以显著提高性能，不过调试最好不要用优化选项。&lt;/li&gt;
&lt;li&gt;-l 指定要用到的库，注意这里之后要加的是库的名字，如果是多线程，可能要用到pthread库，那么此时就要加上 -lpthread ，这样gcc就会到库目录中找名为libpthread.so（lib×××.so）的文件，如果是静态库的话是libpthread.a( lib×××.a)（貌似gcc先找动态库，再找静态库？）。&lt;/li&gt;
&lt;li&gt;-L 指定所需要的库所在的文件夹。系统先寻找标准位置，再寻找指定位置（标准库一般在/lib或/usr/lib）。&lt;/li&gt;
&lt;li&gt;-I 指定头文件的寻找路径。先找标准的，后找指定的（标准的一般在/usr/include）。&lt;/li&gt;
&lt;li&gt;-static 只用静态库,再拿上面那个例子，如果加上-static，系统就会只寻找libpthread.a文件。&lt;/li&gt;
&lt;li&gt;-shared 生成动态库（共享库）文件，形如 libxxx.so （gcc -shared dang.o -o libdang.so）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/make-gcc-guide/&#34; title=&#34;GCC Makefile&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Valve</title>
      <link>http://alimy.me/post/ark_201603242135/</link>
      <pubDate>Thu, 24 Mar 2016 21:35:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242135/</guid>
      <description>&lt;p&gt;Valve 虽然从来是『有再一再二，没有再三再四』，但是不得不承认，无论是半条命还是 steam，都称得上『划时代』。&lt;/p&gt;

&lt;h3 id=&#34;名不见经传的英雄-unlikely-heroes&#34;&gt;名不见经传的英雄 Unlikely Heroes&lt;/h3&gt;

&lt;p&gt;1996年，微软已经从一个小作坊成长为世界上最富有的公司之一，最早的一批员工都已经成为了百万富翁。其中两名老员工一直爱玩游戏，现在有了足够的资金做自己想做的事情，他们决定成立自己的公司。&lt;/p&gt;

&lt;p&gt;不幸的是，他们对游戏开发毫无经验，只参与过操作系统以及功能性产品的编写，后来一个好友将他们介绍给了著名的id软件创始人——约翰·卡马克，卡马克说服他们应该拿到Quake引擎的许可并做一个游戏。他们同意了，并认为追寻梦想的时机已到。&lt;/p&gt;

&lt;p&gt;加布·纽维尔和麦克·哈灵顿为新公司想了几个名字，包括果蝇、全息盒子以及犀牛疤痕(Rhino Scar)，但最后他们选定了一个很简单的名字阀门(VALVE)。&lt;/p&gt;

&lt;p&gt;和卡马克见面后，纽维尔和哈灵顿创建了他们的公司，并在纽维尔的婚礼遮天正式注册成立。&lt;/p&gt;

&lt;p&gt;【G胖 加布·纽维尔 Valve创始人】：我最初建立一家游戏公司的动机带有一定社会性，我很享受与一帮聪明人一起工作，创造能影响不同群体的游戏。1996年，我在想有哪些选择，在这个问题上我又很大的自由，环游世界，度个假什么的。我最喜欢Valve的一点就是这种特定的工作环境。&lt;/p&gt;

&lt;p&gt;不同于Bungie仅靠一人慢慢白手起家，Valve想立马就开始制作高预算游戏，两个人是远远不够的，尤其这两人还从来没做过游戏。于是Valve便开始物色人才，他们的做法不同于当时业界的标准，不仅招募专业人士，还有MOD作者。他们意识到某些mod作者可能比专业人士更有天赋。伺候Valve便开始开辟新的疆土。&lt;/p&gt;

&lt;p&gt;公司完全依靠两位创始人的资金运作，这样一来公司便承担得起一般小工作室承受不了的风险。然而仅有两个想追梦的人还远远不够，没有人看好他们，找到一个愿意发行他们作品的发行商几乎不可能。尤其当纽维尔和哈灵顿宣称游戏采用了极其复杂的技术时，发行商们不相信他们能兑现诺言，最后他们找上了“雪乐山在线”(SIERRA Online)，雪乐山刚好打算发行一款3D动作游戏，最好使用Quake引擎制作。Valve团队令他们印象深刻，有了足够的信心与其展开合作，即使失败了，仅仅一款游戏的合约也让雪乐山有退路。

年轻的Valve在1997年E3展上公开了他们的游戏——《半条命(Half Life)》。游戏展现出来的技术和氛围，使其很快成为了展会上的热点。他们做到了，
似乎这款游戏注定要大卖。但到了《半条命》本应发售的假日季时，Valve团队意识到产品还未完成，发售日不得不延期。但问题是，他们的发行商雪乐山已经开始广告攻势并视其为年度大作。当Valve宣布延期时，合作关系差点因此破裂。除此之外，他们决定重新审视游戏，在一年的研发时间里，团队摸索出很多尚未加入游戏中的新点子。于是Valve迈出了冒险的一步，推翻多数内容并回炉重做，以加入很多新点子。多数开发商都不会愿意推翻重做，但纽维尔和哈灵顿愿意不惜代价这么做。&lt;/p&gt;

&lt;p&gt;【G胖】：每一个Valve迷都知道，Valve的游戏总延期，不是吗？在资源、质量和发售日这几个要素中，我们总是会优先选择延期发售来提高质量。我们的想法是延期总比遗臭万年要好。&lt;/p&gt;

&lt;p&gt;随着回炉重做，游戏继续延期，从98年春延期到了98年夏，继续延期到了98年秋，又延期到了98年感恩节。11月时一个游戏Demo泄露到了网上引起轰动，《半条命》成为了年度热点游戏，此时游戏甚至未发售。&lt;/p&gt;

&lt;p&gt;万众期待下《半条命》终于在1998年11月上市，市场反响良好。与传统利用过场动画的叙事方式（如毁灭公爵3D, Duke Nukem 3D）和压根不讲剧情（DOOM）不同，《半条命》始终以主角戈登·弗里曼的视点进行，另外故事都是实时呈现的，让玩家代入感倍增，而不只是一个旁观者。&lt;/p&gt;

&lt;p&gt;通过脚本，有很多有趣的事件在玩家周围发生，从同事被怪物吃掉，到场景破坏。尤其是游戏的开场部分，大段对话后伴随着实验事故，给人感觉如同互动电影一般。另外游戏的画面与人物动作史无前例。所有者一切都超出了人们的预期。由两个无游戏开发经验的人组成的新公司做出了年度最佳游戏。《半条命》最终成为一个颇具传奇性的游戏系列，时至今日仍旧是销量最高的游戏之一，更何况1998年时的游戏市场规模远不能与今天相比。&lt;/p&gt;

&lt;p&gt;随着游戏的成功，大家都想知道何时会有续作。他们会发现《半条命》的未来不仅由Valve创造，玩家自己也参与其中。&lt;/p&gt;

&lt;h3 id=&#34;半条命的第二春-half-life-s-afterlife&#34;&gt;半条命的第二春 Half-Life’s Afterlife&lt;/h3&gt;

&lt;p&gt;《半条命》的空前成功中可以得出以下结论：&lt;/p&gt;

&lt;p&gt;Valve赢得了豪赌并由此发达
世界需要更多的《半条命》
【G胖】：我和麦克都有操作系统及相关产品编程的背景，我们当时很确定失败不可避免，根本就没有理由相信我们会成功。总的来说从商业角度出发我们有些焦虑，问题不是之前的工作完成的如何，而是接下来该干什么。&lt;/p&gt;

&lt;p&gt;Valve明白下一个项目需要花“一点”时间，在这段时期gearbox被给予开发资料片的任务——《针锋相对(Opposing Force)》。资料片足够成功，第二个资料片《蓝色沸点(Blue Shift)》【TODO 这里翻译可能有误】的制作也顺理成章。游戏发生的时间地点与原版完全一样，但以不同角色的角度讲述整个故事。《针锋相对》里扮演的是与戈登·弗里曼为敌的海军陆战队员，《蓝色沸点》则扮演的是基地保安巴尼，和原版一样都是以科学定律命名。《针锋相对》指的是牛顿第三定律，《蓝色沸点》值的是多普勒效应。尽管销量不错，但留给人们的印象并不深。制作MOD，即允许玩家深度挖掘游戏代码并改写成新游戏，这一做法被某些工作室接受，比如id软件，而其他多数开发商则不允许。Valve决定向mod社区打开阀门，因为本身公司的很多雇员也来自那里。&lt;/p&gt;

&lt;p&gt;【G胖】：《半条命》的特征之一就是被mod社区广泛接受。麦克和我都有操作系统编程经验，在我们研发操作系统时总是在想我们所编写的程序间接创造的价值。你所编写的工具被用来从其他消费者那创造价值。一个好的工具对于一个大公司的价值与在澳大利亚开发《军团要塞》的两个孩子来说其实差别不大。&lt;/p&gt;

&lt;p&gt;随着《半条命》大量源代码的开放，很快网上便充斥着各种MOD，其中少数几个素质几乎与原版比肩。《胜利之日(Day of Defeat)》是一款二战射击游戏；《团队要塞(Team Fortress)》是一款很受欢迎的Quake mod，应玩家要求制作了《半条命》版。&lt;/p&gt;

&lt;p&gt;但《半条命》最受欢迎也是世上最成功的MOD是——《反恐精英(Counter-Strike)》。作为一款团队回合制多人射击游戏，几乎完全重写了原作。原作的多人模式就是全员无差别大乱斗，当时的FPS多人游戏基本都是如此。《反恐精英》于1996年6月进行了首次Beta测试，不到一年，mod团队就因为游戏太受欢迎被Valve收编。&lt;/p&gt;

&lt;p&gt;Valve之后买下了之前提到了所有3个MOD，这3个MOD之后都成为了商业化品牌。开发商一般都不愿放出自己的源代码，担心会对自己的品牌构成威胁。Valve证明了与mode社区的开放关系其实能增加销量，毕竟想要玩DOD或者CS还得先购买《半条命》。&lt;/p&gt;

&lt;p&gt;【G胖】：多多沟通、信任并与玩家社区合作，就能获得更好的娱乐体验，从长远来说你的生意也能因此获得更多利润。&lt;/p&gt;

&lt;p&gt;与多数游戏刚发售时销量很高，随后便一路走低不同，《半条命》一直保持着稳定的销量，玩家也有越来越多的理由继续玩下去。不过除去这些项目，大多数人都更像知道Valve下一步打算做什么。这么多年Valve没有放出一点消息，于是流言四起。&lt;/p&gt;

&lt;p&gt;直到2003年E3展《半条命》发售5年后，Valve终于再次出手，向世界展示了没人能像他们一样做出《半条命》&lt;/p&gt;

&lt;h3 id=&#34;续作风波-the-trouble-with-sequels&#34;&gt;续作风波 The Trouble with Sequels&lt;/h3&gt;

&lt;p&gt;2003年E3展上《半条命2》的公布，在玩家群里引起轰动。依靠第一部建立起来的声望，所有人的翘首以盼2003年9月发售日的到来。就在游戏即将发售的时候，意想不到的事发生了。Valve的服务器被黑了，游戏源代码、地图、皮肤被匿名黑客窃取，这是游戏史上最严重的黑客事件之一。失窃的代码足以构建数个可玩的场景，这个泄露版充满了BUG，而且多数时候都很无聊，总之不具备可玩性。更糟的是Valve一次宣布游戏不能在03年内发售。&lt;/p&gt;

&lt;p&gt;【G胖】：我们已经花费数年开发《半条命2》，我们的压力很大，不仅是长时间的工作，还担心产品设计和技术上的风险。有的员工十分不安，我们制作数年的心血以一种完成度极低的形态在网上大量传播，这事令我十分痛苦。就像是一大帮人用女性角色与一个科学家XXOO的场面做新品推荐一样。有人走进我的办公室问我，公司是不是要停业了，我们是不是应该忘掉《半条命2》去做点别的，因为这个产品已经被泄露事件毁了。&lt;/p&gt;

&lt;p&gt;Valve立即联系了FBI，对黑客是谁展开调查。但Valve与玩家社区也一直保持着良好的关系，决定利用这一条件帮助调查。加布·纽维尔在论坛公开确认了泄露事件，并请求在线社区帮忙找出黑客。G胖得到了压倒性的支持，在玩家回复中也逐渐弄清楚了泄露的代码是如何在网上传播开的。尽管FBI和玩家们都作出了努力，黑客的身份一直是个谜。直到黑客自己现身说法，解释了他如何黑进服务器，并向Valve索取一个职位。Axel Gembe描述了黑客行为的细节，他利用了微软Outlook的发件箱安全漏洞。并声称自己并不是一个坏人而且真心实意愿意为Valve工作。Valve欣然答应，并通知了联邦调查局为其设下圈套。不幸的是Gembe觉察到了圈套，决定不离开德国，最终他被德国警察逮捕。&lt;/p&gt;

&lt;p&gt;可能是还觉得不够有戏剧性，Valve与发行商陷入了合同纠纷。在亚洲，人们更多的在网吧玩PC游戏，而非在家用电脑上，这就使得网吧成为了主要市场。发行商“威望迪环球(VIVEND UNIVERSAL)”宣称他们买断了网吧销售权，而Valve则坚持他们有权通过数字发行在网吧销售游戏。&lt;/p&gt;

&lt;p&gt;卡发着意识到自己处于一个尴尬境地，那就是和帮他们卖游戏的人打官司。这个纠纷在游戏发售后依旧持续数月，最终庭外和解。经过一系列跳票，《半条命2》终于在2004年11月16日上市，历经6年制作，负面新闻不断，玩家们担心是否能达到前作的高度。&lt;/p&gt;

&lt;p&gt;幸运的是，玩家的超高期待是值得的。&lt;/p&gt;

&lt;h3 id=&#34;半条命的二次方-half-times-two&#34;&gt;半条命的二次方 Half Times Two&lt;/h3&gt;

&lt;p&gt;《半条命2》于2004年11月16日上市，巧合的是，此时距离另一款备受期待的科幻射击游戏上市不过一周。这部作品的名字开头也是“HAL”——《光环2(HALO 2)》。尽管《光环2》属于年度大作之一，但即便是士官长也难掩戈登·弗里曼的光环。&lt;/p&gt;

&lt;p&gt;《半条命2》在发售前就已经开辟了新的疆土，超强的source图像引擎已经被用于更新CS，在《半条命2》发售前便可以开玩。这一切由Steam带来，Steam由Valve研发并包含：数字版权管理、软件商店，之后还添加了玩家社区。Steam允许玩家在线购买游戏，并直接通过Valve服务器进行下载，服务器会检测游戏是否合法。&lt;/p&gt;

&lt;p&gt;【G胖】：我们认为这对游戏开发商来说是个好机会，我们改变了游戏的发行和更新方式。我们开始寻找眼光独到的开发商帮助我们编写这个系统，让像我们这样的游戏开发商和软件开发者登陆这个平台，之前没人这么做过着实令人惊讶。一个本地的开发团队有意接手此项目，我们便开始了合作，让他们主导steam团队，最后这波人在两年内相继离职，所这可能并不是最明智的做法。&lt;/p&gt;

&lt;p&gt;Seam甚至允许用户在游戏发售前预先下载游戏，当然在发售日之前你还是进不了游戏，但时间一到就能立刻开玩，不需要再进行额外的下载，这标志着游戏业向数字发行方向迈出的一大步。如此一来Valve便不用付钱给发行商，利润自然也大大提高。这一新的发行方式正逐渐改变游戏业界的面貌，Valve是这一变革的先行者。&lt;/p&gt;

&lt;p&gt;《半条命2》的游戏本身也是一款杰作，在这款氛围独特的游戏里，双眼所及之处都充满了故事。Valve构建了一个活生生的世界，NPC有着很高的AI，从凶恶的敌人到惊恐的平民，NPC都有生动的面部表情和嘴唇同步，精彩的台词和专业的配音。&lt;/p&gt;

&lt;p&gt;玩家将再次扮演戈登·弗里曼，这次弗里曼将在一个已经被外星人占领的世界中作战。除了著名的source图像引擎，《半条命2》还使用了当时最为先进和精确的物理引擎。这就使得HL2里能够设置几个物理谜题，作为激烈战斗之后的调剂，这也使重力枪有了用武之地。这把枪能够举起并投掷游戏中的任何物体，玩起来各种欢乐。Valve在游戏发售后添加了更多内容，购买《半条命2》的人已经免费获得了CS:S，之后还添加了《半条命2：死亡竞赛》以及一个技术演示《消失的海岸线》，V社果然很良心。《消失的海岸线》甚至还包含了开发者评论内容，这在业界是前无古人的。&lt;/p&gt;

&lt;p&gt;和前作一样，《半条命2》易于制作MOD，在steam上既可以运行官方产品也能运行mod，多年后依然有大量MOD推出。其中最受欢迎的是Garry’smod，与其说是游戏，不如说是个物理沙盒。mod允许玩家利用游戏的物理系统建造出能想象出的任何东西，极大的提高了玩家的创造力。&lt;/p&gt;

&lt;p&gt;所有这一切造就了HL2的巨大成功。游戏评论者们爱它，玩家们膜拜它，总之深受广大消费者的欢迎，Valve再次完成了不可能的任务。随后HL2还登陆了Xbox、Xbox360和PS3，PC游戏界的杰作终于登陆了游戏主机。和前作一样HL2也成为了史上最具影响力和销量最高的游戏之一。但是Valve不打算再等6年才发售下一部作品，公司再次突破桎梏，改变了他们制作游戏的方式。&lt;/p&gt;

&lt;h3 id=&#34;游戏革新者-game-changer&#34;&gt;游戏革新者 Game Changer&lt;/h3&gt;

&lt;p&gt;Valve并没有直接开始制作《半条命3》，而是为《半条命2》做几个资料片，这一点并没有什么稀奇的，但是在制作的过程中，Valve意识到可以借此机会实验改变游戏开发和消费者的游戏体验方式。一般来说一个小组制作流程数十小时的作品，售价一般为50-60美元，这些游戏制作非常花费时间，通常为2-3年或者像HL2这样花了6年。&lt;/p&gt;

&lt;p&gt;但Valve就想为什么不直接用HL2的source引擎，只做小小的升级，在短时间内制作一个流程相对短的游戏，仅售20美元。最后的结果就是独立资料片，按Valve的说法叫章节化，巧妙地命名为《半条命2：第一章》（不需要本体即可独立运行）&lt;/p&gt;

&lt;p&gt;【G胖】：总的来说我们不认为定价属于某种策略，你得给人们一些选择，在产品之间有比较。价格因素能吸引大量不同的消费者，从而提高收入。我们在《半条命2》上运用的章节化做法本身对游戏内容的主干没什么影响。&lt;/p&gt;

&lt;p&gt;第一章紧接着原作的结局，可以看到结局之后发生了什么。采用和HL2相同的图像和物理引擎，游戏本身依旧发生在17号城市。研发团队能很快从概念设计进入到实施阶段，因为一切都是现成的。&lt;/p&gt;

&lt;p&gt;在原作发售后仅仅一年半，《第一章》以20美元的超低价开卖，提供了一个6小时的单人战役，让戈登·弗里曼重返被在原作中被他毁坏的城市。游戏本身对故事进程的推进不大，敌人也和原作基本相同，与其说是独立作品，不如说是对原作的拓展。尽管如此，销量依然不错，毕竟玩家们未曾想到这么快就能开始新的冒险。&lt;/p&gt;

&lt;p&gt;在《第一章》获得商业成功后，所有人都翘首等待《第二章》，但他们等到的却是《橙盒版(The Orange Box)》。《橙盒版》是五款游戏的合集，却仅售一款游戏的价格，包含已发售的《半条命2》和《第一章》，以及新游戏《第二章》《军团要塞2》，以及解密游戏《传送门(Portal)》。距离《第一章》发售过去近一年，这是谁都没有预料到的。Valve的这种行为是一场豪赌：捆绑销售的销量会比拆开单卖的销量更多吗？&lt;/p&gt;

&lt;p&gt;【G胖】：我们有一款全新的游戏《传送门》，我们想试探一下市场，《橙盒版》提供了媒介。我们有《第二章》和《军团要塞2》这样备受期待的作品，给《传送门》一个推广的机会，与其他游戏捆绑让尽可能多的人玩到这款游戏。即使《传送门》失败了也没什么，这毕竟是一款解谜游戏，本身就是一个很小众的游戏类型。&lt;/p&gt;

&lt;p&gt;捆绑销售大获成功，每人都能各取所需。这次也证明Valve可以发售多平台游戏，因为PC版与XBOX360版同步上市。不幸的是，V社发现PS3的开发环境很糟，所以PS3版是依靠第三方帮忙移植的。&lt;/p&gt;

&lt;p&gt;《第二章》把玩家和忠实的伙伴Alyx带到了17号城市之外，探索新地点，遭遇新敌人。本作同样包含6个小时的战役，但内容和故事比第一章丰富许多。&lt;/p&gt;

&lt;p&gt;《军团要塞2》走的是风格化欢乐向路线，成为一款卡通化，有多兵种选择的射击游戏。&lt;/p&gt;

&lt;p&gt;《传送门》是10年间最具创新性的大作，第一人称射击解谜游戏，彻底改变你的空间思考方式。尽管游戏流程只有3小时，但引人入胜的玩法和谜题以及别出心裁的结尾曲已经使这款作品成为了圈内的传奇。&lt;/p&gt;

&lt;p&gt;随着意料之中的《第二章》以及意料之外的《军团要塞2》和《传送门》的发售，每个人都在想《第三章》会和什么游戏捆绑。但Valve再次出人意料，将视线远离《半条命》，转向了一个全新的游戏，于2008年公开。一款让猎头蟹都显得如同乖狗狗一般的恐怖游戏。&lt;/p&gt;

&lt;h3 id=&#34;治疗感染-一次一颗子弹-beyond-the-crowbar-and-beyond&#34;&gt;治疗感染，一次一颗子弹 Beyond the Crowbar… And Beyond&lt;/h3&gt;

&lt;p&gt;《求生之路》是一款僵尸射击游戏，但又与其他同类游戏有着明显的差异。游戏注重玩家间的团队合作，玩家将操控由4人组成的幸存者团队，单人游戏时其他队友由电脑操控。和《半条命》一样，游戏通过一段段突然发生的战斗营造出一种紧张氛围，令人毛骨悚然。为了达到这种效果，Valve创造了“导演”系统，一个会根据玩家行为i不端改变的系统。&lt;/p&gt;

&lt;p&gt;举个例子，加入四个高玩一路碾压，“导演”会产生更少的弹药和医疗包，并产生更多的僵尸群，顺便把路上的灯也给关了。假如是一个菜鸟与三名电脑同伴，游戏会减少僵尸数量并提供更多的医疗包。如此一来，每次的游戏体验都不会完全一样，大大增极爱了重复可玩性。&lt;/p&gt;

&lt;p&gt;考虑到僵尸在娱乐文化中的再次流行以及Valve的良好形象，游戏大卖完全在意料之中，V社还承诺会在DLC中添加更多内容。但Valve从不按常理出牌，Valve震惊了业界，他们宣布立即开始了《求生之路2》的开发，尽在1代一年后便发售。如此短的时间便推出续作是前所未有的，人们担心Valve会赶工发售游戏。&lt;/p&gt;

&lt;p&gt;【G胖】：《求生之路1》发售之后，我们想开始做《求生之路2》并且快速完成，也许我们是太过在意这个。这样不是很酷吗？《半条命1》延期一年，《半条命2》也延期一年，《半条命2：第三章》影子都没有。我们长期因为延期饱受批评，认为我们的进度管理很糟糕。我们就想“其实我们可以在一年的时间里做出L4D2”。本以为人们的反应会是“Valve终于不延期了，实在太酷了”。而事实上有些人觉得这很不科学，他们不认为这是Valve的一大进步，而把这当做是V社“变了”的信号，觉得我们会砸了牌子。&lt;/p&gt;

&lt;p&gt;更糟的是，《求生之路》粉丝和《半条命》粉丝都觉得遭到了背叛。《求生之路》玩家担心续作会挤掉1代DLC制作并且分化两代的玩家。一些不满的玩家开始建立群组号召抵制续作，不到一个月就有成千上万的玩家加入。与此同时，苦等《第三章》的玩家希望破灭，因为比起猎头蟹僵尸，V社似乎对病毒感染僵尸更有兴趣。&lt;/p&gt;

&lt;p&gt;V社一向很关注玩家群体，G胖本人公开回应了玩家们的顾虑，声明1代还会继续推出DLC和升级补丁。事实上V社也已经发布了两个DLC，包含新的多人模式和一个新的剧情。&lt;/p&gt;

&lt;p&gt;【G胖】：做完《求生之路2》后团队里没人说“好吧，我们在一年内做出L4D3吧”&lt;/p&gt;

&lt;p&gt;尽管发生了抵制活动，L4D2的预定量依旧超过1代。然而作为一个以亲近玩家为荣的公司，《求生之路2》引发的论战可能是自HL2泄露事件以来最大的一次倒退。&lt;/p&gt;

&lt;p&gt;【G胖】：我们并为预料到玩家会如此反应，我们完全理解玩家为何会有这些顾虑，我们应该解释一下，作为《求生之路2》发售前准备工作的一部分，不幸的是我们没有这么做，结果就是一帮人发起了抵制活动，我们的责任就是打消这些人的顾虑，我们得和他们对话，确保他们明白我们怎么想的，决策是如何做出的，安抚他们。这是Valve一直以来的传统哲学，让玩家们能继续支持《求生之路1》并创造价值。最后我们邀请两位抵制活动的发起人来到公司总部，问题是所有人都说他们并无恶意，我们提供机会让他们坐下来试玩，这招似乎很管用，让玩家社区觉得他们的想法得到了重视。通过Steam平台，我们可以看到抵制小组内拥有L4D1的玩家购买L4D2的比例其实比全球范围内的L4D1小组要高。也就是说我们很好的打消了顾虑，向他们表明了我们的计划，发售时玩家的情绪比刚公布时平静许多。&lt;/p&gt;

&lt;p&gt;有件事多年以来一直没变，那就是V社不按常理出牌。从游戏研发到发布数字平台，V社一直在小心翼翼地审视自己和整个业界以寻找新的路子推陈出新。和其他行业一样，多数游戏小组一直做固定的系列或游戏类型，只做很小的创新以保证销量，但Valve总是不走寻常路，偶尔也会遇到一些麻烦，但每次都能将危机化解，游戏大卖，叫好又叫座，
这一切都归功于之前从未制作过游戏，但清楚的知道自己想要什么的两个人。&lt;/p&gt;

&lt;p&gt;（正义之子面对有悖于常理的世界，会使其天翻地覆）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-valve/&#34; title=&#34;游戏发展史 - Valve&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Bioware</title>
      <link>http://alimy.me/post/ark_201603242125/</link>
      <pubDate>Thu, 24 Mar 2016 21:25:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242125/</guid>
      <description>&lt;p&gt;一个公司能够成为欧美 RPG 玩家心目中『经典』的代言，不得不说是有两把刷子的。&lt;/p&gt;

&lt;h3 id=&#34;启程-setting-out&#34;&gt;启程 Setting Out&lt;/h3&gt;

&lt;p&gt;1995年，电子游戏已经不再只是孩子的玩具，即使是医生也可能成为玩家。就在这一年，三名医学院毕业生决定在投身医药行业之前做出自己的游戏。就是这样， Ray Muzyka, Greg Zeschuk和Augustine Yip在Zeschuk的地下室创建了自己的公司。谁能想到这样一个组合最后能成为RPG巨匠？他们的名字代表着精品——Bioware.&lt;/p&gt;

&lt;p&gt;公司制作的第一款游戏叫做《超钢战神》，这是1996年的一款为MS-DOS平台执着的第一人称载具射击游戏。Bioware尝试提升游戏画面表现，将可变形地表作为一大卖点。游戏还有着复杂的背景故事，在那个年代多数射击游戏内容都只是枪枪枪，这种级别的游戏内涵着实不平常，这也成为了公司以后的立足之本。&lt;/p&gt;

&lt;p&gt;《超钢战神》之后Muzyka和Zeschuk想要继续制作游戏，但作为创业伙伴的Augustine Yip决定投身医药行业，离开了公司。尽管如此Bioware还是继续制作了他们的下一款游戏《战场：无垠》并且开始寻找发行商。当interplay旗下的黑岛工作室看过游戏之后，他们并不想仅仅发行游戏，而是想将其打造为公司的标志品牌，并授权Bioware将《战场》做成一款官方D&amp;amp;D规则游戏，结果就是1998年的《博德之门》。&lt;/p&gt;

&lt;p&gt;故事发生在AD&amp;amp;D第二版规则设定的“遗忘之地”，游戏保有一切RPG的特性，从移动、攻击到施法，一切结果都是通过计算获得的。Bioware明智地决定让这一过程对玩家不可见，如此一来，即便是从未看过AD&amp;amp;D规则书的玩家也能很快上手，投身进“遗忘之地”之中。游戏是实时进行的，这在D&amp;amp;D电子游戏里尚属首例，玩家可以在战斗开始前按下“暂停”，选择每个队友的进攻路线，再继续游戏观看战略实施。游戏还拥有当时的顶尖画质，充分利用了PC业界的新技术——专用独立显卡。不同于《暗黑破坏神》的杀杀杀&amp;amp;刷刷刷，《博德之门》将重心放在了剧情上，引人入胜的史诗般任务至少花费数十小时，一个法师学徒为其师父报仇的故事都能谋杀玩家的大量时间。支线任务大多也和主线一样有趣，D&amp;amp;D饭也能遇到很多设定中的著名角色并与之互动，对很多玩家来说是梦想成真。虽然画面在今天看来已经过时，但时至今日博德之门依旧是游戏史上剧情最佳的游戏之一。这还没完，游戏提供了多人模式，允许好友组队一起完成任务。这是首款能这么做的PC RPG，这使得游戏大受欢迎，因为核心玩家能在游戏中一路帮助他缺乏经验的朋友。所有这一切成就了1998年最卖座的游戏之一，成为一代RPG名作。&lt;/p&gt;

&lt;p&gt;仅仅成立3年并推出两部作品，Bioware从医生的爱好成为了业界领导者，这一切都来得太快，没人知道他们能否将这股劲头保持下去。幸运的是，Bioware的成功之路才刚刚开始。
&lt;/p&gt;

&lt;h3 id=&#34;组队-gaining-allies&#34;&gt;组队 Gaining Allies&lt;/h3&gt;

&lt;p&gt;三名医学院毕业生决定转行，他们建立了一个叫做Bioware的游戏公司。他们的第一款游戏《超钢战神》并没有在业界引起多大反响，而他们的第二部作品就是角色扮演名作《博德之门》，一夜之间便成为了炙手可热得工作室。Bioware想要继续制作这一系列，但同时又不想固定只做一种类型的游戏。刚好《博德之门》的发行方黑岛，说需要一个开发商制作Shiny小组的MDK续作。我们的RPG大师决定同时制作三款游戏：一款要比原作更庞大的续作，一款全新的RPG，一款他们从未涉足过的3D设计游戏。&lt;/p&gt;

&lt;p&gt;和Shiny小组之前的作品一样，MDK是一款风格搞怪的欢乐向游戏。当得知将由《博德之门》小组制作游戏时，MDK粉丝们感到很不安，担心他们会把游戏做得太文艺。幸运的是，即使是医生也懂得欣赏拿枪的战狗，Bioware完全接受了MDK的搞怪风格，续作保持了前作的精彩和幽默。&lt;/p&gt;

&lt;p&gt;疯狂科学家，会说话的狗，一代的倒霉蛋清洁工悉数回归，这一次三人都是可玩的角色。更妙的是三人的玩法完全不同，彰显了三人个性的不同。科学家注重解谜，战狗注重射击，清洁工则是在平台间跳来跳去。三种游戏方式都很精妙好玩，这令玩家喜出望外。2000年游戏发售时获得的评价颇高，很多人认为MDK2已经超越了前作，Bioware作品依旧保持了良好的口碑。事实证明他们不仅仅只会照着D&amp;amp;D规则书做游戏。除此之外，MDK2也是公司初次涉足游戏机，DC版是与PC版同步开发的，这一经验对公司之后的作品十分重要。&lt;/p&gt;

&lt;p&gt;好像是觉得2000年仅发布一部大作还不够，晚些时候，Bioware还发布了《博德之门2：安姆的阴影》。在1代取得成功之后，B社明白得付出很多努力才对得起1代建立起的名声。尽管有压力，并且很多组员忙于其他项目，发售后《博德之门2》依旧广受好评——更大，更好，比前作更漂亮。博德之门2相比于一代突破并不大，但是2代将1代已有的优点进一步完善近乎完美。游戏还有着出色得剧情以及数百小时的流程，被认为是史上最佳RPG之一。&lt;/p&gt;

&lt;p&gt;如果《博德之门1》使Bioware成为了一个3A厂，《博德之门2》则巩固了这一地位。两个项目完成之后，公司还有一个项目尚未完成，依靠对质量和细节的关注，B社使《博德之门》成为了一个成功的品牌，他们也聪明地意识到Mod对销量带来的贡献。考虑到网游越来越受欢迎，公司决定将单人战役，多人体验和MOD工具三合一，让玩家自行选择喜欢的游戏方式。&lt;/p&gt;

&lt;p&gt;5年的开发之后，最终《无冬之夜》于2002年发售，这又是一款设定在“遗忘之地”的D&amp;amp;D游戏，包含大量任务和颇具深度的剧情，既可以单人游戏也可以多人合作。随《无冬之夜》一起发售的还有开发工具包，事实上就是Bioware编写游戏使用的同款工具包，最棒的是工具包支持多人游戏，也就是说可以很容易地做出多人mod。不出意料，网上很快就出现了各种类型的mod，从全新的战役，到无双割草，再到网游化mod，这一切只需要一款游戏的价格。再一次的，一款杰作诞生了。这已经使《无冬之夜》成为史上内容最丰富的游戏之一，但这对Bioware来说还不够，他们还将D&amp;amp;D的一大特色带进了游戏里，《无冬之夜》包含了地下城主多人模式，地下城主（DM）可以在其他玩家进行任务时实时添加游戏内容，这成就了变幻莫测的游戏体验，DM可以随心所欲设计冒险任务。令人激动的，富有挑战性的，或者让人玩不下去，完全取决于个人喜好，就像经典的纸笔D&amp;amp;D游戏玩法一样。&lt;/p&gt;

&lt;p&gt;同时开发三款游戏，全都叫好又叫座，Bioware无疑称霸了美式RPG市场，同时也涉足了游戏机市场，似乎两位加拿大医生的事业已经到达巅峰。但当他们公布下一款作品时，Bioware向世人揭示了他们的梦想是星辰大海。&lt;/p&gt;

&lt;h3 id=&#34;升级-leveling-up&#34;&gt;升级 Leveling Up&lt;/h3&gt;

&lt;p&gt;2002年，加拿大开发商Bioware，从只能在创始人的地下室办公，一跃成为业界顶尖工作室。《博德之门》系列和MDK2大获成功后，《无冬之夜》同样也叫好又叫座。但其实早在这些游戏发售前，就有一个发行商与Bioware接洽，帮他们制作第一款RPG。于是乎Bioware和“卢卡斯艺术”共同宣布，《无冬之夜》后公司将开发《旧共和国武士》&lt;/p&gt;

&lt;p&gt;“卢卡斯艺术”在1999年底便初次与Bioware接触，询问是否能制作一款基于星战EP2的游戏。随着谈判的深入，Bioware也可以选择将设定改到电影发生前的4000年，只要B社愿意。意识到这么做有更大的创作自由而不必拘泥于电影的剧情，Bioware选择将时间设定在很久很久很久以前。“卢卡斯艺术”想要他们制作一款家用机游戏，在审视了市场上现有的游戏机后，Bioware选择了即将发售的微软XBOX，因为他们认为XBOX的开发环境最好。另外这也使其成为XBOX上的首款RPG，再加上《星球大战》的名号，大卖是板上钉钉的事情，而他们押对宝了。&lt;/p&gt;

&lt;p&gt;当游戏于2003年发售时，经过数次为了保证质量的延期，发售后不仅星战迷，连评论家也赞不绝口。Bioware在星战科幻背景下编写了一个原创故事，塑造了一个形象生动的角色。游戏在剧情与故事之间找到了平衡，这样一来玩家不仅能带入故事中，还能玩得很开心。&lt;/p&gt;

&lt;p&gt;另外Knights of the Old Republic和B社之前作品的差异没有想象中那么大，回合战斗系统依旧基于第三版D&amp;amp;D规则，但有了光剑、激光枪和原力，游戏带来的妥妥是史诗般的星战体验。游戏不仅在商业上获得巨大成功，还拿到了一堆“年度最佳游戏”奖，时至今日依旧是最好的星战游戏之一，要知道星战游戏多如牛毛。一款续作自然也是板上钉钉，但Bioware将开发转交给了另一个开发商，此举震惊了游戏界。比起成为另一家专职星战游戏的开发商，他们更愿意制作自己的原创游戏。&lt;/p&gt;

&lt;p&gt;在发布了PC版之后，Bioware又开始同步开发多个项目。在制作了多年的授权项目之后，他们决定回归制作自己的游戏。2004年，B社公布了一个全新的奇幻RPG《龙腾世纪》，花了足足五年这款游戏方才面世。2005年他们发布了《翡翠帝国》，一款游戏机平台上的动作RPG，自B社处女座《超钢战神》发售9年后的首款非授权游戏。&lt;/p&gt;

&lt;p&gt;终于完成从回合制到实时战斗的跳跃，B社将叙事与紧张的战斗相结合。游戏背景的灵感来自香港功夫片，和其他Bioware游戏一样，游戏有着众多角色和史诗般的任务，除了拥有会记录你行为的道德系统外，还可以选择发展几段恋情。《翡翠帝国》获得的媒体评价很高，但是玩家受众群没有B社想象的多。游戏销量按其他小组的水平来讲还算不错，但与《博德之门》和《旧共和国武士》相比，仅有Bioware的名字还不足以大卖。另外这款游戏也让B社意识到，游戏的开发成本在成倍增长。即使有之前的成功，他们也得更加商业化，才有自己保质保量地做出他们想要的游戏。&lt;/p&gt;

&lt;p&gt;2005年Bioware与Pandemic工作室合并，这是另一家与“卢卡斯艺术”合作过的工作室。如今两家公司的资源整合到了一起，B社准备好了制作它的下一款杰作。他们意识到游戏类型的界限已经越来越模糊，Bioware的下一个项目将是一款RPG与射击游戏的混合体，令公司走进了高清时代。&lt;/p&gt;

&lt;h3 id=&#34;属性提升-upgrading-stats&#34;&gt;属性提升 Upgrading Stats&lt;/h3&gt;

&lt;p&gt;自2004年就有传言说Bioware在制作一款RPG与射击混合的游戏，但直到2005年10月他们才正式公布《质量效益》，《质量效益》被设定为一个科幻史诗三部曲。虽然他们曾经制作过MDK2，但《质量效益》是公司首次制作核心向射击游戏。一般来说射击游戏的剧情都很弱，B社想将它们擅长的高质量剧情与“虚幻3引擎”相结合，借此同时吸引RPG玩家和射击游戏玩家。和其他Bioware游戏一样，经过数次延期，终于在2007年11月登陆XBOX360。&lt;/p&gt;

&lt;p&gt;《质量效益》完全改变了RPG处理对话的方式，不同于在角色头顶冒出对话框或者将画面拉到角色面前的做法，《质量效益》中的对话采用了多角度运镜手法。另外《质量效益》还打破了RPG中只有一方开口说话的传统，主角拥有全程语音，不论玩家选择的角色是男是女。除此之外，B社重新构建了道德衡量标准，并不仅仅是简单的正邪选择，所有的抉择都偏向道德的灰色地带，代表不同的处事信条，迫使玩家在做出选择时得动动脑子，相比市场上的其他游戏更具挑战性。&lt;/p&gt;

&lt;p&gt;《质量效益》有着丰富的内容，充满细节的世界观，有血有肉的角色以及史诗般的任务。不幸的是，游戏在拥有出色表现力的同时，还有着频繁的贴图载入延迟问题，极大的破坏了玩家的代入感。为了赶上已经数次延期的发售日，最终导致多数支线任务都很鸡肋。与游戏故事氛围不相称的糟糕设计系统。另外不得不提一下电梯，原本设计目的是为了让游戏在漫长的载入过程中能与NPC队友进行互动，这却成为了游戏的显著缺点之一。最终瑕不掩瑜，质量效益广受玩家和媒体的赞誉，同时也是2007年圣诞购物季销量最高的游戏之一。&lt;/p&gt;

&lt;p&gt;然而2008年1月，游戏因为性爱场面受到了媒体关注，专栏作家Kevin McCullough发布一篇博客信口雌黄，随后上了福克斯新闻并在节目中以“SEXBOX”为标题，声称游戏允许青少年玩家能在游戏中推倒一切，而且全程可操控，正面全裸高清无码。不幸的是，这一切全是胡扯，这款M级游戏仅包含两段非互动的朦胧性爱场面。此事证明很多人眼中游戏依旧是儿童的玩物，比起暴力，人们对色情话题更为敏感。这一切都没有影响游戏的销售，晚些时候PC版也顺利发售。&lt;/p&gt;

&lt;p&gt;尽管又一款游戏大卖，Bioware明白如果想让成功延续，就得有更多的资源。于是乎，2008年，B社与Pandemic小组的合资公司被EA收购。9月份，公司出品了被EA收购后制作的首款游戏，游戏由世嘉发行，NDS平台游戏《索尼克编年史：黑暗兄弟会》。这是世嘉吉祥物的首款RPG，索尼克需要在朋友们的帮助下解开谜题使世界免遭毁灭，听起来很耳熟是么？&lt;/p&gt;

&lt;p&gt;俗套的剧情加上略为无脑的玩法，对于Bioware来说有些异乎寻常。本作的媒体评价只能说是一般，然而本作也因为忠实于索尼克系列的世界观而受到好评，在近几年的索尼克游戏里亦算佳作。&lt;/p&gt;

&lt;p&gt;2009年初，有了EA的资金支持，Bioware又一次同时开发多个项目，以至于在蒙特利尔建立了一个新的小组，专门帮忙处理人手不足的项目。同年6月，EA宣布Bioware与另一家RPG开发商“Mythic娱乐”合并，也就是说EA让B社全权主导Mythic。B社原工作室保持不变，Mythic直接由B社领导。换言之，EA的整个RPG部门均由这个加拿大开发商领导。&lt;/p&gt;

&lt;p&gt;同月，B社发布了他们的第二款手持设备游戏，iOS平台的《质量效益：银河》。这是一款两小时流程的俯视角射击游戏，展现出Bioware将《质量效益》打造成一个多媒体品牌的渴望。&lt;/p&gt;

&lt;p&gt;公司09年真正的大手笔是制作了五年的《龙腾世纪：起源》。自《无冬之夜》后B社再次回归奇幻题材，游戏允许玩家在开始主线前从6个起源故事中选择一个，当然你还是得招募队友帮助你阻止邪恶势力。与以往的B社游戏不同，龙腾世纪更加成人向，战斗过后角色满身是血，即便是好人战斗时也十分无情。不顾《质量效益》引发的争议，《龙腾世纪》也可以发生几段恋情，并且最后啪啪啪，包括同性之间的恋情。整个游戏包含数十小时的流程，尤其当玩家想体验所有六个起源故事时。游戏在PC，Xbox360和PS3上的销量还不错，但作为《博德之门》的精神续作并没有对业绩造成太大冲击。&lt;/p&gt;

&lt;p&gt;接下来，Bioware与2010年1月发布了《质量效益2》，这是首款会根据前作存档改变剧情的游戏，换言之，你在1代做出的决定会直接影响到2代。职业大幅平衡，更好的战斗体验，画面提升加上更快的电梯，不仅保持了《质量效益》的好名声，还在此基础上进一步发扬光大。&lt;/p&gt;

&lt;p&gt;与此同时Bioware还在制作另一款大作：《星球大战：旧共和国》。这是B社首次涉足网游领域，我们的单机巨人能否在网游界立足？本作号称是史上首款全程语音网游，包括多语言支持。有着《星球大战》的名号，公司意识到这个项目会变得非常巨大，需要一个工作室专门负责该项目，于是他们在德克萨斯州建立了Bioware奥斯汀分部，专职制作这款游戏。与此同时Bioware宣称他们还有尚未公布的游戏正在制作中，是续作还是全新的作品？&lt;/p&gt;

&lt;p&gt;他们已经宣布《质量效益3》在制作中（资料为2010年数据）。尽管他们也在尝试射击游戏和网游，但有一点始终未变：他们坚信任何游戏类型都可以拥有一个好的剧情故事。多数工作室把重心优先放在玩法而将剧情放在次要地位的时候，B社证明了对于细节的追求，复杂的道德选择，有血有肉的人物塑造一样能使游戏大卖。优秀的艺术设计，颇具代入感的游戏玩法，Bioware建立了只出精品的良好声誉，不论制作的是何种题材类型的游戏。&lt;/p&gt;

&lt;p&gt;15年来一直在改变业界，而一切的开端不过是几个医生的个人爱好。&lt;/p&gt;

&lt;p&gt;（光口头说是不够的，如果你这么轻易就被说服，我反而会失望，你亲自去瞧瞧吧）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-bioware/&#34; title=&#34;游戏发展史 - Bioware&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史:Interplay</title>
      <link>http://alimy.me/post/ark_201603242105/</link>
      <pubDate>Thu, 24 Mar 2016 21:05:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242105/</guid>
      <description>&lt;p&gt;Interplay 对于新玩家而言已经过于陌生了，虽然早已不复往昔，但是给游戏业界留下的财富，仍旧不可估量。&lt;/p&gt;

&lt;p&gt;新星崛起 Meteoric Rise&lt;/p&gt;

&lt;p&gt;布莱恩·法戈的高中生涯都在 Apple II 游戏的陪伴下度过，毕业后他想到，如果自己去设计游戏，做出来的作品搞不好比手头这些都好玩。于是1992年他以Saber 软件公司的名义制作了《恶魔熔炉》，当时孤立一人的他，花费了整整一半的预算，在电脑杂志《Softtalk》上刊登了一则广告。之后为了吸引零售商进货，他又冒充普通玩家打电话给商店，询问能否买到杂志上宣传的这款酷毙了的新游戏。&lt;/p&gt;

&lt;p&gt;计谋奏效了，零售商们也开始从 Saber 软件公司订购这款游戏，他们完全没有想到的是：所谓 Saber 实际上是一人企业，而他就是冒名电话背后的始作俑者。凭着这款游戏，法戈得到了 Boom 集团的关注，后一年他被吸收到该集团为他们工作，然而，当 Boom 的一次董事会以大打出手作结时，法戈意识到是该另立门户了。于是他召集死党，在1983年城里了自己的公司。&lt;/p&gt;

&lt;p&gt;当时的他们对未来毫无头绪，然而他们没有料想到，公司将要经历的一系列大起大落是如此充满戏剧性，在整个游戏史上也属罕见。这家公司从小工作室起家，发展成为一流发行商，最后却不幸破产。当年也全亏他们慧眼识英雄，才扶持了暴雪、Bioware 和 Treyarch 这些如今行业的巨头。且听我以吟游诗人的曲调，将 Interplay 娱乐公司的这段兴衰史娓娓道来。&lt;/p&gt;

&lt;p&gt;起初的 Interplay 并没有什么大作为，仅仅从事一些现有游戏的跨平台移植工作，甚至还从一家军事分包商处接活。最后他们终于同Activision达成协议，从事原创游戏开发。1984年他们的首部作品，冒险游戏《Mindshadow》问世，该作一定程度上基于罗伯特·卢德伦的小说《谍影重重》。在游戏中失忆的主角必须收集线索，找回自己不为人知的过去。游戏获得了一定的成功，Interplay 在原创游戏开发方面也借此迈出了一步。仅一年后，Interplay 出品了第一款真正意义上的大作《遗忘故事第一张：吟游诗人传奇》（冰城传奇），这款角色扮演游戏大量借鉴了《巫术》系列，而后者在病危获得官方授权的情况下，完美地运用了龙与地下城（DND）的规则体系。相比之下《吟游诗人传奇》要精致的多：多色彩，游戏音效和背景音乐的加入，使得 DND 式的冒险历程更为引人入胜。

尽管游戏剧情比较单一，但是开场动画中由一名吟游诗人讲述故事，而后玩家亲身经历冒险的设计，仍令人耳目一新。如同之前的《巫术》，《吟游诗人传奇》中也采用了搜集装备加上练级这种令人欲罢不能的设计。此外，想你的发行商专业化的市场宣传也功不可没，这家初来乍到的新兴企业名为：Electronic Art，EA。尘埃落定后《吟游诗人传奇》一共卖出了30万份，按照1985年的标准这是很惊人的，Interplay 由此从无名小卒一跃成为行业大亨。他们的初衷是把《遗忘故事》做成一个系列，然而本作一炮打响的同时也带来了意料之外的问题，玩家们总是以《吟游诗人传奇》来称呼它。Interplay 原本计划再出两部续作，分别命名为《大法师传奇》和《盗贼传奇》，如今 EA 告诉 Interplay 说，不管他们原本计划如何，现在续作必须得叫做《吟游诗人传奇2》和《吟游诗人传奇3》。当《吟游诗人传奇》的续作陆续获得成功时，也证明了 EA 这家发行商绝非泛泛之辈。Interplay 如今是佳绩不断，如同80年代后期的大部分发行商一样，他们着力于每年推出好几部作品。1988年《吟游诗人传奇3》和《Neuromancer》，后者由威廉·吉布森的著名计算机科幻小说改编。不过 Interplay 在88年最为重量级的作品还要数《废土》，一款以核战后美国西南地区为背景的，充满着道德争议的 RPG 游戏。当时这种崭新的游戏理念前所未闻，玩家可任意探索庞大的游戏世界，而不受单线式流程设计的束缚；游戏有着丰富的剧情，多种多样的角色阵容；地牢采用重复进入时不会复位的设计，而是能够记忆玩家已经杀死了哪些怪物，解开了哪些谜题；但是最具革命性的一点是，与以往 RPG 不同，游戏中不再是善恶分明的黑白世界，玩家的选择往往位于道德的中间灰色地带，有时玩家面临的处境相当灰暗，触及到其他游戏所不敢涉足的禁区。&lt;/p&gt;

&lt;p&gt;这是 Interplay 又一款成功大作，发行商仍然是 EA。此时，Interplay 终于决定不再听命于人，决定要自主发行，此时距公司最初成立仅过去短短五年。他们自己发行了《战斗国际象棋》——只是普通的国际象棋，但是加入了其他国际象棋不具备的要素——暴力。在这款国际象棋中，吃子的时候不是简单的吃，而是通过像素动画，将两枚棋子之间为争夺方格而展开的殊死决战充分表现一番，这项貌似无足轻重的小改变成功吸引了玩家，本作也获得了不错的销量。时值80年代末期90年代伊始，Interplay 意得志满，似乎达到了世界巅峰。在布莱恩·法戈和团队的努力之下，公司发展成为了 RPG 界的重量级开发商，自主发行也很成功，还有最后一道疆界需要征服，即成为其他游戏公司的发行商。看到 Activision 和 EA 从自己的游戏中获取大量利润提成，他们意识到这才是最盈利的方式。如今 Interplay 认为自己的机会来了，决定孤注一掷。当时游戏业还属于新生产业，Interplay 决定把筹码压在一些初出茅庐但颇具才华的新生小组上。&lt;/p&gt;

&lt;p&gt;最早的一批中，三名自称 Silicon&amp;amp;Synapse 的大学毕业生赫然在列，1991年 Interplay 发行了《RPM赛车》，这是超任平台上第一款由美国公司制作的游戏。这对于 Interplay 来说意义非凡，因为至今他们只在 PC 平台上有所建树，如果能成功跨越到主机平台上，他们就能一跃成为行业佼佼者。之后几年，Silicon&amp;amp;Synapse 持续开发了《失落的维京人》《摇滚赛车》等主机作品。最终 Interplay 提出全面并购这家小公司，然后后者（现已更名为暴雪娱乐）志不在此，当时的 Interplay 并不知道这意味着多大的损失。此时 Interplay 作为开发商仍然硕果累累，1992年他们获得了将原版《星际迷航》改编成游戏的授权，这个消息当时没有引起什么关注，该剧集已经持续播放了几十年，而现在的孩子们都只知道新的《下一代》系列续集。然而《星际迷航——25周年纪念版》在商业销量和评论口碑方面都成为了第一款真正成功的《星际迷航》改编游戏。在之后的 CDROM 版中 Interplay 甚至将原班演员齐聚一堂为游戏角色配音，一个游戏能有这般待遇，挺不错了。&lt;/p&gt;

&lt;p&gt;90年代里，Interplay 保留了扶持新兴公司的好传统。1995年他们发行了 Parallax 软件公司制作的《天旋地转》，当时它一般被视为《DOOM》的模仿作品，其实更应该说是启发了《DOOM》的一些游戏的后继作品，类似《银河飞将》。凭借六轴控制，逼真的画面和令人流连忘返的多人模式，《天旋地转》撑了一款小众崇拜作品。Parallax 而后分成 Outrage 和 Volition 两家公司，而后数年，Volition 都委托 Interplay进行游戏发行。他们的《自由空间》系列被认为是一直以来最优秀的太空模拟游戏之一。之后在1996年 Interplay 发行了两部机甲题材游戏，但并未激起很大的波澜。Interplay 内部制作的《铁血兵团》是公司涉足战略类型的首部作品，在 Westwood 工作室推出《命令与征服》后，该游戏类型一夜之间变得火爆。《铁血兵团》与前者有很多共同点，不同之处在于是回合制而非即时。尽管如此，游戏得到了评论界很高的赞誉，许多评论家都声称《铁血兵团》比《命令与征服》更优秀。遗憾的是，玩家们并不这么想，这从本作效良平平上也能看出。同年 Interplay 发行了机甲对战游戏《破碎钢铁》，该作也算不上成功。考虑到本作是由毫无娱乐行业经验的学生制作而成，倒也算不上惊讶。尽管如此，Interplay 同这几名毛头小子保持了良好的关系，后者自称为 Bioware。Interplay 当时没有料到，这几个加拿大小子最终会成为自己最关键的商业伙伴。&lt;/p&gt;

&lt;p&gt;1997年的 Interplay 对另一家公司寄予厚望，希望能借助后者跻身顶尖发行商的行列。Shiny 娱乐公司凭借《蚯蚓战士》系列在全球市场获得了成功，衍生的玩具，T 恤和动画片也接踵而至，Shiny 当时正在开发新的《孤胆枪手》系列，其上也炒作也达到了白热化的程度。如果有什么游戏注定会成为经典大作，那么非《孤胆枪手》莫属。自然而然的，Interplay 不只满足于签订发行协议了，他们直接把整家公司买下。最终在几年的万众瞩目和媒体关注后，《孤胆枪手》终于问世，销量却很一般。虽不能说这是款失败作品，却无疑令人失望。而后 Interplay 再度寄希望于 Shiny 的《Wild 9》试图占领主机市场，结果却令他们再度失望。总而言之，看起来 Interplay 只能专注于 PC 市场，而后者的利润正在一点点被主机平台瓜分。尽管形势不利，Interplay 旗下仍然有几款拿得出手的好游戏。Stainless Games 的《死亡赛车》疯狂到了极致，将道德伦理都抛诸九霄云外，玩家通过冲撞行人，摧毁对手车辆获得分数，游戏中还大胆采用了比较原始的物理引擎，尽管如此，玩家们却为之狂热。&lt;/p&gt;

&lt;p&gt;1997年还有一款大作值得一提，这是一款回归《废土》的新作，系列的所有权仍归 EA 所有，Interplay 只得从零开始设计一个新系列，《辐射》系列由此诞生。同《废土》一样，辐射是一款颠覆传统道德观的核战后题材 RPG，这次在游戏中，玩家也同样必须作出残酷的决定，而没有轻松的路线可选。幸亏有其中的黑色幽默，赋予整个游戏以后总末日狂欢的意味。艺术设计采用上世界50年代通俗小说的复古风，有着机器人，镭射枪和阴极线管。广阔的世界任玩家探索，升级系统设计既有深度又容易上手，众多角色也令人过目不忘。对于同时期游戏来说，本作的配音阵容也是空前强大，其中包括 Richard Dean Anderson，Keith David 和 Tony Shalhoub，Ron Perlman 则是旁白。如同远足《废土》一样，《辐射》也引起了巨大的轰动，然而在销量方面却无法同《最终幻想7》等大作抗衡，最终败于下风。这给人的感觉是无论 Interplay 再怎么努力突破，再怎么获得评论界的满口赞誉，他们的销量始终比不过竞争对手。而现在，长期不利经营的后果也开始呈现。&lt;/p&gt;

&lt;p&gt;此时 Interplay 业务庞大，发行游戏的数量丝毫不亚于 Activision 或者 EA。游戏发行需要庞大的资金投入，但 Interplay 惨淡的销售业绩却难以提供有力的支持。在利润收入方面，PC 成功作品同主机平台成功作品完全无法相提并论，如果 Interplay 无法在主机上尽快打出一块招牌或者让更多的产品扭亏为盈，他们的前景恐怕很不乐观。事实证明，之后的发展比他们想象的要糟糕得多。&lt;/p&gt;

&lt;p&gt;巨星陨落 Meteoric Crash&lt;/p&gt;

&lt;p&gt;成立15年的 Interplay 从一场白日梦起头，发展撑了业内举足轻重的发行商。在创立人布莱恩·法戈的领导下，公司出品的《吟游诗人传奇》《废土》等 RPG 都获得了相当的成功。他们趁热打铁，开始涉足游戏发行。首先他们自主发行了《战斗国际象棋》，而后不久便开始为其他公司发行游戏，其中就包括暴雪和 Bioware 的处女作。在1998年，Interplay 的发行量同 Activision 和 EA 等发行巨头已经旗鼓相当，而这两家公司都曾经为 Interplay 发行过游戏。&lt;/p&gt;

&lt;p&gt;在外人看来，他们是被所有新兴企业羡慕的楷模，这群年轻人通过投身热爱的游戏事业打造了一个帝国。然而即使在令人炫目的成功下，Interplay的处境仍然岌岌可危，游戏发行是一项耗资巨大的业务，如果不能多发行几部销量火爆的大作，就根本毫无利润可言。遗憾的是，即使像 Interplay 自主制作的《辐射》等大销量作品也无法弥补公司赤字。尽管 Interplay 最为重量级的游戏系列接下来即将登场，无奈生不逢时，也未能挽回最终的败局。&lt;/p&gt;

&lt;p&gt;赚到不少钱之后，法戈培养了艺术收藏这个爱好，并成为画家 Gil Bruvel 的崇拜者。当法戈知道 Bruvel 也涉足3D 电脑艺术时，他想到了一个主意：请 Bruvel 为一款点选式冒险游戏做美工，如果能融入文学，神话和宗教的话，新游戏将会有着更为成熟的基调。游戏将探讨原罪与救赎等深层话题，通识彻底颠覆传统。简而言之，这个游戏将作出大胆尝试，把游戏媒介从简单的『玩』上升到艺术高度，然而失败了。1998年出品的《光与暗：预言》是一款七拼八凑的游戏，矫揉造作的同时令人困惑不解，敢于吃螃蟹的少数玩家最后也冷落了它。评论界认为本作有一些闪光的设计，并对其推陈出新的大胆尝试表示赞赏。然而这些都无法掩饰剧情晦涩难懂，过程单调重复的硬伤。当销量不尽人意时，也就不足为奇了。在发行前，游戏就经手了两家制作组，Interplay 还专门邀请好莱坞明星配音，并为 Bruvel 的美工设计支付相当的报酬。换言之，公司在这个游戏上做了很大投入，无奈血本无归。本作可说是 Interplay 所面临困境的缩影，在高瞻远瞩，不遗余力拼搏的同时，缺乏有力的后援。Interplay 一心一意推动创新的努力并为得到应有的回报。&lt;/p&gt;

&lt;p&gt;同年早些时候，他们发行了由新的开发商 Treyarch 制作的《剑下亡魂》，游戏采用较原始的动作控制技术，即鼠标控制主角握剑的手，移动鼠标即挥剑。可惜手感欠佳，这个重要的特性也沦为噱头，Interplay 寄希望于新意的尝试再次落空。&lt;/p&gt;

&lt;p&gt;在这个多事之秋，Interplay 做出了上市的决定。如今回想起来，当时并非 IPO 的最佳时机，然而募股事务需要很长的时间准备，一旦启动便无退路。1998年6月，Interplay 正式公开招股，期望借此筹得一些迫切需要的资金。正如他们的游戏一样，招股的结果并未达到期望。最初他们希望能达到8到10美元的每股价格，事实却是当天闭市时的牌价只有6美元。了解到公司产品不卖座的情况，投资者们十分谨慎，这令 Interplay 大失所望。讽刺的是，仅数个月后 Interplay 发行的游戏便接连引起轰动，其中包括公司历史上最为成功的一款经典作品。&lt;/p&gt;

&lt;p&gt;9月他们发行了黑岛工作室的《辐射2》，且问黑岛工作室是哪位？黑岛工作室即当初制作第一代《辐射》的原班小组，如今他们也有了自己的品牌。之后黑岛继而推出了一系列大作，其中大多数基于 DND 的世界观设定。至于《辐射2》，同前作相比并无太大改变，但增加了大量内容，也如同前作一样，本作只能说是勉强成功，但扔不足以扭转 Interplay 的不利局面。之后在1998年11月，Interplay 发行了 Bioware 的第二款游戏，后者的处女作《破碎钢铁》成绩不佳，在吸取经验教训后，他们继而推出了基于 DND 背景的第二款作品，期望能取得更好的销量。事实证明《博德之门》实际上成为了 Interplay 整个生涯中最重量级的系列。《破碎钢铁》的剧情较为空洞，而《博德之门》却是一款充斥着许多经典角色的亦真亦幻的史诗大作，其庞大的世界任玩家探索。游戏采用快节奏而充满乐趣的设计，同时又不失策略性。DND 爱好者们发现，这款游戏完全忠实于他们熟知的规则体系，堪称完美。随着消息在玩家中不胫而走，Interplay 忽然意识到这群加拿大小子创造了一款经典，然而事不随人愿，《博德之门》操作太复杂，无法在主机上实现，也就是说 Interplay 仍然无法进军利润最为丰厚的家用机市场。尽管《博德之门》有了这样的成绩，Interplay 的季度财政结算仍然是亏损，接下来情况还会变得更糟。&lt;/p&gt;

&lt;p&gt;1999年《天旋地转3》和《自由空间2》遭到了预料之外的挫败，其原因或许是同期发售的这两款游戏过于相似。造化弄人的是，他们之后发行的由 Xatrix 制作的风格粗犷的犯罪游戏《黑街太保》刚好同哥伦比亚高校枪击案撞到一起，于是沃尔玛和百思买等大型零售商纷纷将其下架。当时 Interplay 有几个项目被取消，并正在进行公司重组，其结果就是他们字啊99年的亏损比去年更大了。之后数年我们又见到了几款成功作品，例如 Bioware 的《博德之门2》和《孤胆枪手2》，黑岛的《异域镇魂曲》和《冰风谷传奇》等，但总体而言，他们发行的大部分游戏都成绩平平。&lt;/p&gt;

&lt;p&gt;最终是壮士断腕的时候了，1999年法国科技公司 Titus 互动从 Interplay 购买了大量股权，而后在2001年，他们又提高股份获取了控制权。如今 Titus 享有所有的决策权，并为 Interplay 提供一些资金，事情似乎有了转机，然而这其实就是终章的开始。Titus 公司的创始人和 CEO 埃尔韦·卡昂在 Titus 取得控制权后成为了 Interplay 的新总裁。上任之后，他首先关闭了发行部门，从此 Interplay 只从事游戏开发，由 Vivendi 负责发行。自此公司失去了曾经的行业重要地位，当然，考虑到他们之前作为发行商不断亏损，这算是一个正确的决策。然而卡昂和 Interplay 创始人布莱恩·法戈的关系，只能说是水火不容。2002年1月，接管仅几个月后，法戈离开了公司。公司的决策过程已经完全不让他参与，他完全不能接受在自己的公司里当个局外人。选择自我放逐后，他成立了新的工作室，其名字也十分贴切：InXile 娱乐（与『流亡』 in exile 同音）。&lt;/p&gt;

&lt;p&gt;如今的 Interplay 已经切断了其最重要的历史渊源，随之而来的其他动荡也在意料之中。手头拮据的卡昂开始转让公司旗下的知识产权，并持续吃老本吃了好几年。首先在2002年4月，他以4700万美院的价格把《孤胆枪手》的制作组 Shiny 娱乐卖给了 Infogrames，同时转让的还有《黑客帝国》系列电影的游戏改编权。这不能算贱卖，但失去 Shiny 的损失也是无法挽回的。不幸的是，Interplay 随即受到曾经的得力伙伴 Bioware 的起诉，卡昂领导的 Interplay 不再从事游戏发行，因而尝试将 Bioware 游戏的发行权转授给他人，但并未征求后者意见。义愤填膺的 Bioware 采取了法律手段，与此同时 Bioware 同《天旋地转》的制作方 Parallax 共同起诉 Interplay，理由是拖欠版权费，安检最终庭外和解，且双方同意 Interplay 不再参与 Bioware 的下部作品《无冬之夜》。这些消息还不够坏吗？继而，因其市价不足1美元，Interplay 的股票在2002年10月被纳斯达克退市，2003年 Interplay 因合同违约被自己的发行商 Vivendi 起诉，在此期间，公司每个季度的财政仍然在亏损，最终，不可避免的事情发生了。2003年12月，Interplay 关闭了黑岛工作室——公司自己的制作部门，此时黑岛刚刚完成《博德之门：黑暗联盟2》的制作，正在展开《辐射》下一部续作的开发，其代号为 Van Buren，黑岛的一大批成员预见到了结局，已经纷纷离开另起炉灶，这就是黑曜石娱乐的由来。&lt;/p&gt;

&lt;p&gt;『黑曜石』的成员们很快同 Bioware 取得联系，迅速开始合作开发一部续作，2004年的《星战共和国武士2》得以问世。如今的 Interplay作为游戏公司，既不制作游戏，也没有发行游戏，公司最后仅剩下几个游戏版权，包括《蚯蚓战士》《孤胆枪手》《博德之门》及《辐射》等等。作为 Interplay 最后的盈利手段只有将这些版权转让或授权出去，曾经的行业巨头已经跌到了谷底。&lt;/p&gt;

&lt;p&gt;劫后余波 Life in the Crater&lt;/p&gt;

&lt;p&gt;Interplay 始于创始人布莱恩·法戈眼中自信的光芒，凭借着雄心壮志和早期几部成功作品，公司很快跻身游戏业强者之林，在自行开发的同时，也为其他公司发行游戏。然而在90年代后期，Interplay 的大势已去，尽管已经成 RPG 类型的翘楚，他们的游戏没有一款真正获得突破性的成功。更糟的是，自从家用机一跃成为最盈利的游戏平台以来，Interplay 一直无法跨越 PC 和家用机之间的鸿沟。从2000年开始，形势不断下滑，公司每个季度的财政结算持续亏损。法国公司 Titus 互动购买了 Interplay 的控制股权，其所有人卡昂也成为 Interplay 的新总裁。很快地，Interplay 的发行部门被关闭，法戈离开了公司，而卡昂开始变卖旗下的工作室和产权，最终在2003年末，Interplay 停止了游戏开发，从此他们既不再开发游戏，也不发行游戏，手头仅剩下数款游戏版权。在这种情况下，大多数游戏公司都会选择认输，然而在过去这十年间，Interplay 勉力支撑了过来并几乎回归公众焦点，最后却还是功亏一篑。&lt;/p&gt;

&lt;p&gt;总之，形势相当不利，而后在2004年6月，加州政府的人员上门了，什么原因呢？原来 Interplay 已经几个星期没有给员工发工资了，而薪金保险的提供商也未能偿付，这是违反加州法律的。同时，不缴纳州税也是违反加州法律的，还有，不缴纳联邦税是违反联邦法的，猜猜 Interplay 还有什么没缴纳的？别忘了 Interplay 还欠着房东40万美元的租金。不过卡昂很快就在新的办公楼重新开工，并获得了加州的许可，不过还有个小问题，卡昂的另一家公司 Titus（即 Interplay 的母公司）碰巧破产了，并且也没有钱为员工结算工资。卡昂的所作所为并没有给人信息或让人觉得他是能够力挽狂澜的救星，在2004年到2007年这段时间 Interplay 都默默无闻，偶尔会出现消息说采用 Interplay 版权的游戏将问世，而后又沉寂下去。在最难以预料的情况下，救星降临了。&lt;/p&gt;

&lt;p&gt;角色扮演游戏大厂 Bethesda 突发奇想要出品一款《辐射》游戏，鉴于两家公司的规模悬殊，他们不满足于租用版权，而是要直接买断。2007年 Bethesda 以600万美元的价格买下了这个有着十年历史的系列，双方同时约定，卡昂获得授权制作一款辐射网游，前提是自行筹资，并在规定时间内启动开发。重复一遍，Bethesda 依法『授权Interplay』制作一款辐射网游！根据卡昂的弟弟 Eric 所说，该网友的开发权价值不菲，假如 Inerplay 没有得到授权，转让费就会高达5000万美元，而非600万。Bethesda 继而推出《辐射3》并获得了巨大成功，堪称历史上最成功的 RPG之一。他们最终将《辐射》品牌成功移植到了主机上，实现了 Interplay 的夙愿。突如其来的，《辐射》又再度成为了炙手可热的游戏系列，这正是 Interplay 所需要的，他们的辐射网游也将随之一步登天。然而在2009年9月，Bethesda 一纸诉状将 Interplay 告上法庭，根据合同 Interplay 必须在规定时间内着手网游的开发，如今时间已经超过。此外，趁着新的辐射热，Interplay 又将九班《辐射》游戏再度打包发售，鉴于系列的版权已经易主给 Bethesda，后者声称这是违法的。这场版权争夺战持续了许久，在法庭争端最激烈时，Bethesda 声称当他们授权 Interplay 开发『辐射网游』时，本意是『一款叫做《辐射》的网游』，换言之，同《辐射》系列有关的一切都禁止在游戏中采用：包括武器、角色、场景和著名的 Pip-Boy。根据 Bethesda 的说法，授权范围甚至不包括经典的辐射徽标，Interplay 所能做的，只是制作一款网游并取名为《辐射》。Interplay 无疑提出了抗议，他们认为『辐射网游』的授权本质上就等同于他们可以采用其中的情节、世界背景和一切要素，他们同时还声称网游的开发已经在进行了，当然，实际的开发成果谁也没见过。在此基础上，Interplay 进而提出犹豫 Bethesda 的违约行为，《辐射》系列的版权应当归还给他们。总而言之 Interplay 的处境十分不堪，2001年6月，公司的手头现金仅有3000美元，其债务却高达300万美元，他们通知投资方可能需要裁员。考虑到他们仅有11名员工，这可不是件小事情。即使他们在同 Bethesda 的反诉讼中胜出，也只能取得开发辐射游戏的授权，却不具备实施所需的资金。当然，他们至今还有手握《蚯蚓战士》和《博德之门》的版权，如果能授权或转让出去，应该能获得一些资金，这种商业模式真够诡异的。&lt;/p&gt;

&lt;p&gt;无论当今遭遇如何，Interplay 为整个游戏业界留下的财富仍然有目共睹。暴雪如今是动视暴雪的持股方（虽然现在又分离了），他们的《魔兽争霸》《星际争霸》和《暗黑破坏神》都是有史以来最成功的游戏系列，初出茅庐的他们得到过 Interplay 的扶持。Bioware 如今负责 EA 的整个 RPG 部门，他们制作的一些游戏受到评论界有史以来的最高赞誉，初出茅庐的他们得到过 Interplay 的支持。Treyarch 继而开发了《使命召唤》系列，其中最新的《黑色行动》荣登美国历史上最卖座游戏的宝座，初出茅庐的他们也得到过Interplay 的扶持。由《辐射》原班人马组成的黑曜石娱乐，最终以《辐射：新维加斯》回归到了他们所热爱的游戏系列，他们自己说，假如黑岛没有关闭，那么《新维加斯》的故事就是他们当年在续作中想要表现的。至于 Interplay 创始人布莱恩·法戈新成立的 InXile 公司，则刚刚发行了他们的最新游戏《猎杀：恶魔熔炉》，引领着我们回归到那个最初的起点&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-interplay/&#34; title=&#34;游戏发展史 - Interplay&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏发展史：Blizzard</title>
      <link>http://alimy.me/post/ark_201603242059/</link>
      <pubDate>Thu, 24 Mar 2016 20:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/ark_201603242059/</guid>
      <description>&lt;p&gt;暴雪的大名已如雷贯耳，虽然现在也面临着一些困难，但是回顾往昔，光芒依旧耀眼。&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;就读于加州大学洛杉矶分校的迈克·默汉曾经对同学这样恶作剧：当艾伦·艾德涵暂时离开电脑时，默汉迅速把艾伦的电脑密码改成了 JOE，毫不知情的艾伦回来输入密码，竟然成功登陆了。这时轮到默汉大吃一惊，艾德涵究竟是怎么做到的？于是他招认了自己的恶作剧，然后请教艾德涵是如何破解的，然而，后者的惊讶程度丝毫不亚于默汉，他不过是输入了自己的密码而已。默汉终于明白了其中关键：由于机缘巧合，艾德涵自己的密码也刚好是 JOE。此后两人成为挚友，他们关系之好，最终又成为商业上的合作伙伴，之后20年中他们的工作室制作了数十款精品游戏，不仅成为游戏史上最伟大的传奇之一，更晋升为行业巨头，屹立于整个娱乐产业。他们的公司如此受欢迎，甚至拥有自己的年度大会。且不论两人是否还把 JOE 作为密码，在产品制作的完美程度和持续的卓越方面，世界上几乎少有同行能够同暴雪娱乐并驾齐驱，这是毋庸置疑的。&lt;/p&gt;

&lt;p&gt;毕业之际，艾伦·艾德涵觉得这是实现理想的最佳时机，他热衷玩游戏，为何不以制作游戏为业呢？但是他不甘心在大公司当低级程序员，而是想自己当老板，自己决定工作计划。艾德涵决定创立自己的公司，于是他联系迈克·默汉，邀请他入伙，同时还联系了另外一名同学弗兰克·皮尔斯。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】我与艾伦通过熟人认识，当时很凑巧，因为我确实很想制作游戏，觉得是一项很酷的事业，却苦于不知道如何着手，而艾伦对于自己想做的事情有着明确计划和确切的愿景，他想做的事刚好也是我感兴趣的，因为我少走了很多弯路，我们能够相遇是很幸运的。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】公司成立的第一天我才和弗兰克首次见面，当时我正在说话，一个陌生人出现了，于是我闭住了嘴，然后就这么结识了。&lt;/p&gt;

&lt;p&gt;1991年2月8日，三人在加州科斯塔梅萨建立了他们的工作室『硅与神经键Silicon&amp;amp;Synapse』，艾德涵担任总裁，默汉担任副总裁，皮尔斯则是程序员。他们决心不紧要制作出伟大的游戏，更要在其过程中享受到乐趣。

【弗兰克·皮尔斯】其实当初我和迈克都不太相信自己的公司能够这么成功，但是艾伦充满激情，积极乐观，他一直以为，如果几个聪明的头脑集思广益，自然能找出最正确的做事方式，无论是制作游戏还是别的。艾伦做事的原则是从不懈怠，他坚信只要大家投入时间精力，就没有克服不了的难关。艾伦说过，制作游戏并非火箭科技那样高深，只要我们几个聪明人齐心协力，也能同顶级公司一决高下。&lt;/p&gt;

&lt;p&gt;当年他们便崭露头角，在 Commodore64平台早期游戏《毁灭赛车》的启发下，1991年他们为超级任天堂这个新机种开发了《RPM 赛车》。『硅与神经键』如今成为第一家为超任开发游戏的美国工作室，这是个良好的开端。1992年略有不同，这一年他们没有开发原创游戏，而是把已经把发行的游戏移植到其他平台。例如他们把《指环王》移植到 Amiga 平台，《战斗国际象棋》移植到 Windows 等等。游戏移植并非什么激动人心的工作，但报酬不错。原创游戏的开发无疑还是他们的热情所在，同年，硅与神经键在许多平台上发行了《失落的维京人》，在略为老套的剧情中，三名维京人主角被邪恶的 Tomator 吸入太空船中，必须尽力逃脱。作为一款平台跳跃游戏，本作加入了独一无二的要素，玩家能在三名维京人中任意切换，利用每个角色独有的能力来解开谜题。这是一款单人操纵多角色的游戏，通过杰出的艺术设计和幽默感，硅与神经键独树一帜的个性和卓越的制作水平得到了首次体现，这些品质而后都成为了暴雪的代名词。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】作为我们的第一款完全原创游戏，《失落的维京人》有着特殊意义，开发过程中我们都很开心，学到了很多游戏设计的经验以及让玩家通过重复完成动作来实现目标的重要性。《失落的维京人》受欢迎程度之高，在街上遇到熟人都会问今天你玩了吗？这个游戏优秀之处在于它以难以阐明的魅力牢牢吸引了大众，太酷了。&lt;/p&gt;

&lt;p&gt;《失落的维京人》成为工作室早期作品的典型，并在1995年出品了续作。1993年《摇滚赛车》在超任和世嘉上推出，硅与神经键的名声渐响，同年他们获得《电子游戏》杂志办法的最佳软件开发商奖项。麻烦的是，工作室的名字不太到位，硅与神经键原本用来象征科技和创造力的结合，然而合作的商家中没有一个知道神经键是个啥，名字起得让人疑惑不解，这对新生企业不利。于是他们改名混沌工作室，希望借此被更多人熟知。此外还有更大的问题接踵而来：首先，尽管成员都是凭借兴趣爱好走到一起，工作氛围却一点都不轻松。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】我记得在创立之初自己特别拼命，每天都超时工作，一直持续几周，与当时相比，现在的工作规划实在太轻松了，在来到硅与神经键之前我从事航空业，早晨7点就上班，转行到游戏业之后我习惯不改：早上7:00-7:30到公司，埋头工作10到12小时之多。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】7点上班对我来说是天方夜谭，但是我加夜班到很晚。&lt;/p&gt;

&lt;p&gt;火上浇油的是，虽然取得一些成绩，他们在财务方面却很困难。尽管只有15名员工，创始人们却不得不透支之际的信用卡以支付工资，有时候甚至要啃老。当父母的资助也不再可行时，他们知道必须痛定思痛了。1994年，混沌工作室开始对两份并购提议作出正式考量，一份来自大发行商 Interplay公司，另一份来自教育软件开发商戴维斯及联营公司。起初，二选一的答案看似毫无悬念，新兴企业应当寻求行业巨鳄的庇护，然而再三考虑后，他们意识到要加入 Interplay 就得甘当一枚不起眼的螺丝钉，失去自主权，相反戴维斯及联营公司在游戏业初来乍到，因此在产品开发方面愿意给予工作室全面自主。面对两难抉择，他们最终在业界菜鸟一边压下了赌注，最终戴维斯公司以一千万美元并购了混沌工作室，这对于当时的他们无异于雪中送炭。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】戴维斯的这次并购极为关键，它加速了我们的成长。公众所不了解的是，直到这次并购之前我们的预算一直很紧张，当时办公室甚至没有局域网，大家需要轮流用电脑等等。我们希望挺过来之后，能够实现资金自主和自主发行产品。并购后再也不用担心发不出工资，还有了新的高速局域网，我们终于能真正专注到制作游戏上。&lt;/p&gt;

&lt;p&gt;当一切趋于稳定，他们发现不能再用混沌这个名字，商标权已经归属另一家软件公司，他们必须再度改名。几乎选定为食人魔工作室后，又被戴维斯的大老板否决，最后艾德涵翻字典找到了七个备选词，长期讨论后敲定了一个既酷又得到管理层首肯的名字，就是暴雪娱乐。即使在发展之初，因为不愿把自己局限到一种媒体，暴雪公司一开始就选定『娱乐』而不是『游戏』这个词，他们从不缺乏雄心壮志。同年，改头换面的暴雪娱乐受到发行商 Sunsoft 委托，将漫画史上最重要的大事件《超人之死》改编成游戏，8月《超人浴火重生》在超任上发行。这是一款简单的横版过关游戏，不过主角可是超人。游戏终章里主角没有打败最终 boss，而是同归于尽，之后玩家控制剩下的四名超人之一重新游戏，只有在五名超人都通关后才能看到真正结局。《超人浴火重生》这款作品无愧于暴雪公司响当当的名号，创立仅三年，他们就被娱乐界最大的巨头之一点名为其制作游戏。九月，暴雪公司在超任和 DOS 平台吓发布了一款新的原创射击动作游戏《黑色荆棘》。为了使人物动作尽可能逼真，工作人员把弗兰克·皮尔斯的动作拍摄下来，再把录像转化为游戏画面，这一技术被称为 Photoscoping。《黑色荆棘》同样以特立独行的艺术风格和怪诞幽默著称，在逐步形成的暴雪风格上又跨出了一步。至此1994年重大事件不断，公司被并购后又更名，其发行的两款游戏，一款以家喻户晓的超人作为题材，另一款则是原创的《黑色荆棘》，小规模的发行商能做到这份上，无疑是硕果累累。事实上他们远未满足，还计划在圣诞节发布一款小作品——《魔兽争霸》为94年画上完美句号。&lt;/p&gt;

&lt;p&gt;早在1992年，Westwood 工作室发行了《沙丘魔堡2》这款战略游戏，游戏要求玩家利用资源发展建筑，而后通过建筑生产单位来与敌人作战，本作特点如此鲜明，最终发展成全新的游戏类型，称为即时战略或 RTS。该作算是小有收获，但是直到1994年，还没有一款跟风作品出炉。暴雪公司却别出心裁，要另辟蹊径。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】《沙丘魔堡2》问世时我们觉得大为震撼，感觉这种游戏题材真是酷毙，沙丘2仅限单人，我们就想，即时战略中如果能多人对战岂不是碉堡了。当然，那时我们都局限在魔幻题材下，专注魔幻30年可是我们的成功秘诀啊。&lt;/p&gt;

&lt;p&gt;考虑到即时战略游戏的复杂性不适合手柄，《魔兽争霸》成为暴雪公司第一款 PC 专属作品，这也是他们首款自主发行的游戏，同时利用戴维斯和联营公司已然发展成熟的销售网络。游戏中两个种族的平衡性近乎完美，这是因为双方本质上一样，除少许例外，每个种族的攻击力和血量都相等。尽管如此，游戏画面堪称美轮美奂，魔幻背景的情节也是引人入胜，此外更有局域网多人对战模式，也允许技术宅们采用 IP 直连。尽管有这些限制，游戏引发的狂热对战浪潮真正是前所未有，作为沙丘2之后仅有的一款即时战略游戏，市场前景无法估量。《魔兽争霸：兽与人》一上市便受到欢迎，销售业绩颇佳，虽然算不上里程碑式的成功，但上级公司戴维斯即联营公司已经为续作开了绿灯。暴雪公司如今算是走上了正轨，有足够的资金进一步发展并逐步拥有了粉丝群，更重要的是，他们有着完全的创造自主权，这一切，仅仅在四年内就已经做到了。《魔兽争霸》问世后，他们又信心续作能更上一层楼，其实结果让他们自己都吃惊。&lt;/p&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;p&gt;从加州大学洛杉矶分校毕业后，三个好朋友决定放手一搏成立自己的游戏公司。『硅与神经键』在超任上出品的《RPM 赛车》获得成功，并成为第一家为该平台开发游戏的美国公司。在制作几部移植作品之后，他们继而推出了《失落的维京人》和《摇滚赛车》等原创作品。1994年，这家新兴企业经历了不少变动，包括被戴维斯及联营公司并购，以及更名为暴雪娱乐，除了平台动作游戏《黑色荆棘》外，暴雪还推出了《魔兽争霸：兽与人》，魔兽作为整个即时战略类型游戏的第二款作品，更引入了前所未有的多人游戏模式，该作在评论界广受好评，全球销量也不错，暴雪公司逐渐得以立足，《魔兽争霸》成为了公司自主发行的首款游戏。时值1995年，暴雪在计划开发数款续作的同时，也在着手扩展公司的发行业务，期间暴雪逐渐脱颖而出，成为行业的佼佼者。&lt;/p&gt;

&lt;p&gt;1994年暴雪再度接受委托，制作一款 DC 漫画超级英雄题材的游戏，《正义超人大对决》把漫画书的偶像英雄们带进格斗世界，此时格斗游戏作为新的游戏类型很受欢迎。发行商 Acclaim 召集了数家开发商共同开发，其中暴雪负责超任版本的制作，世嘉版则由位于红木城的 Condor 娱乐工作室开发。尽管两个小组之前没有合作经验，暴雪的 CEO 艾伦·艾德涵在一次大会上同 Condor 的几名负责人偶然会过面。之后在1995年1月，暴雪公司接到了一个意料之外的电话，是 Condor 打来的，后者正在开发一款完全原创的新游戏，想要找发行商。他们找遍了所有的大发行商，甚至连小一些的发行商也找过，但都无功而返，发行商们都认为 Condor 一定是秀逗了：这家工作室毫无 PC 平台的经验，却妄想开发一款史诗题材的粘土动画式回合制动作 RPG。如今 Condor 小组饥不择食，转而向在大会上仅有一面之缘的暴雪求助。暴雪在这个项目上看到了一些与众不同的东西，他们认为将有机会出品一款前所未有的崭新佳作，最后他们同意签约，Condor也有幸成为第一家为发行商暴雪制作游戏的公司，这款游戏的名称暂定为《暗黑破坏神》。&lt;/p&gt;

&lt;p&gt;在 Condor 权力着手开发的同时，暴雪的《失落维京人2》也推出了，三名勇敢的主角再次被 Tomator 外星人绑架，不过这次他们学会了用外星人的武器武装自己，甚至还有龙和狼人加入队伍。从游戏性来说角色数量和能力都增加了，不过3名角色的限制还在。2代虽然没有带来前作那样的轰动，却也受到了好评。此时暴雪正在开发另一款续作，这是一款各方面都超越前作的游戏。《魔兽争霸2：黑潮》于1995年12月出品，表面看来同初代极为相似，都是魔幻背景的即时战略游戏，有着相似度颇高的两个种族，然而通过对几百个细节的关注，续作真正将该模式提升到了完美的极致。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】可以说，魔兽2是第一款真正体现出暴雪精益求精风格的作品，通过千锤百炼制作出一款精品。虽然之前的作品也并非泛泛之辈，但是此时我们才真正展现了才华。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我同意，并且魔兽2可以说是各方面都更进一步，游戏人数增加，解析度提高，有海陆空三军。我们在魔兽上投入已经一年，因而小组很清楚自己在开发时应该要做什么。&lt;/p&gt;

&lt;p&gt;在《魔兽2》的许多改进中，对 RTS 类型最具重要意义的是持续存在的战争迷雾。在之前的即时战略中，地图区域探索过之后就持续可见了，魔兽2则不同，只有当玩家的单位正位于一个区域时，才能看到该处的状况，侦查因而成为对战中的关键之一，该设计被战略类游戏广泛采用。在本作中，暴雪的幽默和个性发展成了一种标志性的特色，无论是史诗剧情，还是单位的回应方式都大放异彩。游戏中充满生机的世界观，加上独有的个性从此成为暴雪与众不同的标志。另外2待最显著的改进都在多人游戏方面，对战不仅仅局限于一对一，分组对战中每组可容纳多达4名玩家，由此引入了大规模混战以及惊人的战略复杂性。然而在连接方式上，仍然仅限于局域网或 IP 直连。不过年内早些时候，几名爱好者编写了外挂程序，使得游戏跨域局域网在互联网上对战成为可能，这个程序名叫 Kali。这款并非暴雪操刀的第三方程序为魔兽2推波助澜，使其获得了空前的成功。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】魔兽争霸一代很酷很有乐趣，但是在玩家社群方面颇受限制。我认为凭借互联网发展起来的魔兽2玩家群体对我们至关重要，他们的忠诚是无价的。&lt;/p&gt;

&lt;p&gt;此时还有一场对战正在如火如荼地进行，这就是暴雪公司和即时战略元祖 Westwood 之间的较量。仅在魔兽2发售前几个月他们推出了《命令与征服》，另一款制作精良的战略游戏大作。两款近似的大作接踵而至，使得 RTS 类型空前火热。当然两款游戏各有其重视的拥趸群，互联网上也掀起一场关于孰优孰劣的大论战。至今不变的只有一点，对于狂热的粉丝来说，萝卜白菜各有所爱这种事情真是让人难以接受啊。当然，多亏这些唇枪舌战，两款游戏更为引人注目了。在暴雪方面，魔兽2的销量继而暴涨，仅在4个月内就售出50万份，对于1995年的一家小工作室来说，这是惊人的成绩，最终该作的销量甚至超过了神器的100万份，在当时少有游戏能享受此殊荣，对于10个月的开发期来说，这算是挺不错了。&lt;/p&gt;

&lt;p&gt;在魔兽2已经颇具人气后，暴雪决定趁热打铁出资料片，由于他们自己正忙于新项目抽不开身，便将《黑暗之门》的开发交给 Cyberlore 工作室，后者于1996年完成了制作。同时 Condor 正在不遗余力进行《暗黑破坏神》这款回合制粘土动画动作游戏的制作，并取得了不错的进度。然而，新的发行商暴雪坚持要让他们做出一些改动：首先，要求他们把粘土动画改为3D 动画，此时3D 正在迅速崛起成为未来的新标准，而粘土动画这种方式也太怪异了；此外暴雪还希望 Condor 将回合制改成即时。Condor 起初的反应是抗拒，因为目前为止的制作都是围绕回合制来进行的。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】两个工作室之间的沟通有了障碍，当时同他们工作室的远距离交涉是个很大的挑战，我们自己还很稚嫩，在项目管理方面初来乍到，他们也是头一次涉足游戏制作业，总之加上地理上的距离，使得我们的合作颇具挑战性。最后他们同意制作一份技术掩饰，测试实际的游戏效果。&lt;/p&gt;

&lt;p&gt;Condor 立即就意识到采用即时方式后，游戏变得更为引人入胜了，于是他们把即时方式彻底应用到游戏中。很快暴雪就意识到，Condor 的这个项目将会是个惊天动地的大作，他们不满足于仅仅做发行商了，他们要自己拥有《暗黑破坏神》。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】Condor 正在开发《暗黑破坏神》并且进展相当顺利，彼此合作也很愉快，我们想把他们吸收过来成为兄弟工作室，于是同联营公司即我们的母公司提出了这个想法，他们也很有兴趣，于是不久后 Condor 成为了暴雪北方。&lt;/p&gt;

&lt;p&gt;在1996年E3上，该作品终于向公众展示了庐山真面目并引起了很大反响，这种新颖的游戏设计真的是前所未见。凭借魔兽2，暴雪已经成为世界上最炙手可热的开发商之一，在同年 E3上，暴雪公司还有两项重大事件要发表：首先是 Battle.net 这个免费的在线多人游戏服务平台将同《暗黑破坏神》捆绑提供，玩家们无需再从 Kali 等第三方软件处寻求帮助。暴雪开始提供自己精心打造的联网服务，以供玩家通过互联网进行随机多人游戏。其次发表的第二项内容就不怎么让人惊喜了，这就是『无聊的魔兽争霸科幻山寨版』，连名字也如出一辙——《星际争霸》。最先暴雪的展台上有3个屏幕用于《暗黑破坏神》，另外三个用于《星际争霸》，到了展会结束时，星际被缩减到只有一个屏幕了。星际同去年的魔兽2相比，画面上没什么进步，游戏方式也是平淡无奇，当暴雪北方正在着力制作一款前所未有的创新作品的同时，他们的南方兄弟小组却似乎在用旧创意炒冷饭。展会后，暴雪必须要决定《星际争霸》何去何从，游戏已经有了相当的开发进度，而得到的反响却只能说差强人意。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】那届 E3有很多开发中的即时战略游戏参展，全都令人耳目一新，我们回到公司后开始讨论 RTS 类型的现状以及发展方向，并且意识到应该在《星际争霸》上做到百尺竿头更进一步。&lt;/p&gt;

&lt;p&gt;最后他们做出了艰难的决定，将目前的进度放弃从头开始制作，而不是勉强发布一款平庸作品。之后几年内《星际争霸》从人们视野中消失了。与此同时《暗黑破坏神》却充分吸引了公众的关注，大有不征服市场不罢休之势，然而为了确保品质，暴雪未能按计划在1995年圣诞假日发售游戏。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】《暗黑破坏神》的收尾工作到了关键时期，暴雪南方的员工们也临时到北方分部协助工作，而 Battle.net 的开发则在暴雪南方这边进行，我们在 Battle.net 平台的开发和暗黑的开发之间协调，并为即将发售的游戏提供支持。实际上《星际争霸》小组的大部分成员也被我们指派去协助暗黑的开发。人们所不知道的是，在《暗黑破坏神》中加入 Battle.net 支持这个决定是在游戏快接近完成时才做出的，因为这个点子太新，在上面投入的时间也短。&lt;/p&gt;

&lt;p&gt;整个 Battle.net 的开发只用了几个月，实际上游戏于12月26日开发完成，刚好比圣诞节晚了一天，最终，游戏于1997年1月2日发售并引起了巨大的轰动。《暗黑破坏神》中的 RPG 升级体系和动作要素相辅相成，无疑是最完美的游戏设计，通过史诗般的剧情来完美衬托游戏过程，构成了引人入胜的世界观，更别处心裁的是，每个玩家经历的游戏体验都不同。这全靠随机声称的地牢设计，使得玩家每次冒险时见到的地形、物品和怪物都不一样，暗黑由此获得了杰出的重复可玩性，对于设计一成不变的游戏来说，这是不可企及的。此外玩家还能同他人结伴进入地牢冒险，游戏支持多人合作模式，最多同时支持4名英雄联手对敌。遗憾的是，在合作模式中没有关闭互伤这一选项，杀死盟友这种事情时有发生，这导致不少玩家故意杀光盟友以博得一笑，多么的邪恶啊！&lt;/p&gt;

&lt;p&gt;除去游戏本身优越的品质外，《暗黑破坏神》也是暴雪采用专门小组制作剧情动画的首款作品，后者的任务是制作高品质预渲染的过场动画，为暴雪的游戏增光添彩，使其在同行间脱颖而出。以今天的眼光看这些开场画面颇为过时了，但它们代表着暴雪公司另一个标志性特色的开端。以上这些结合在一起，为暴雪公司带来又一款里程碑式的成功作品。《暗黑破坏神》最终销量也超过了100万，这是暴雪在魔兽2之后紧接着第二次实现这一成绩，当时能达到这个销量的游戏寥寥无几。暴雪公司如今已跻身整个行业最杰出的开发商之列，他们的游戏无论在制作精美度、表现方式和个性上都难有人与之并驾齐驱。他们当前唯一的问题就是那款舅舅不疼姥姥不爱的『魔兽科幻版山寨』，改进游戏质量的尝试也已停滞。现在的问题是：《星际争霸》究竟能否脱胎换骨，成为不愧于暴雪大名的又一款佳作？&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;1997年末的暴雪正是鸿运当头，从三名怀着梦想的毕业生这一平凡的起点，发展到连续出品两款销量百万的游戏，公司获得了空前成功。《魔兽争霸2》作为即时战略游戏有着热衷于对战的庞大拥趸群，而《暗黑破坏神》中角色扮演和动作珠联璧合的形式堪称前所未有。《魔兽争霸2》由位于加州欧文的暴雪总部（暴雪南方）出品，而《暗黑破坏神》则由位于圣马特奥的首家分公司暴雪北方制作，凭借两款大作和两家颇具实力的公司，暴雪似乎已然屹立 PC 市场。然而问题来了，欧文团队当前的项目在首次测试中遭到失败，除了游戏背景设定在太空之外，这款新作其实与《魔兽争霸》八九不离十，甚至名字听起来也相当一致——《星际争霸》。1996年 E3上的玩家和评论家们对这款新作丝毫不感冒，不过凭借着麾下的两款超级大作，暴雪能够调用足够的人力物力重新来过。所以，当北方小组开始着手开发《暗黑破坏神2》的时候，南方小组则推倒了《星际争霸》的全部进度，从零开始设计。&lt;/p&gt;

&lt;p&gt;《暗黑破坏神》广受欢迎，资料片也毫无悬念地推出了，不过如同魔兽的资料片《黑暗之门》，《地狱火》并非由暴雪自己操刀制作，而是外包给 Synergistic 软件公司并于1997年11月发行。暴雪北方手头有更为紧要的工作：出品一款完整的续作，此时离二代问世还有数年。而南方小组的《星际争霸》终于开始收尾，并在1998年3月面世，这款游戏的里里外外都被重新制作一遍，从而在外观、游戏体验和手感上都焕然一新。其本质仍然是一款围绕资源、建筑和单位的即时战略游戏，但却有着革命性的彻底改变：三大种族不再彼此雷同，而是每个都独一无二，一个种族的玩法要套用到另一种族就完全行不通，这使得任何一场赛事中的战略以指数级复杂化，根据对手种族的不同，玩家必须要采取不同的打法，此外《星际争霸》的故事叙述水平更是登峰造极。《魔兽争霸》的剧情引人入胜，但仅限在人物之间的过场部分由旁白来讲述，兽族和人族的剧情体验明显一分为二，并无关联。《星际争霸》与此相反，整个剧情一气呵成，从人族开始，接着是残暴的虫族，最后以高等外星文明神族收尾，故事通过形形色色的角色之间的互动来讲述，其中许多角色都可以在任务中实际操作，这些角色在任务过程中甚至还会继续交流。换言之，剧情叙述和游戏过程一起构成了天衣无缝的娱乐体验，没有任何一款即时战略游戏能够与之媲美。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我们认为背景故事对于玩家的投入度相当重要，首先要让玩家觉得自己在游戏中的行为师出有名，但最重要的是，暴雪的核心价值是游戏性第一，游戏性就是一切东西的核心，从游戏性角度出发，如果一种设计比其他设计更有趣，我们就会尝试从剧情方面来迎合游戏性的需求。&lt;/p&gt;

&lt;p&gt;此外还有一个卖点，就是所谓多人对战，《星际争霸》全面支持暴雪的 Battle.net 服务，用于多人对战，尽管理论上同《魔兽争霸2》相比没有太多改变，三个截然不同的种族再加上多姿多彩的战略深度，在多人游戏中得以发挥到极致。《星际争霸》让人真正废寝忘食，到了史无前例的地步，那么销量究竟如何呢？可以这么说《魔兽争霸2》和《暗黑破坏神》各发行一百万份实现了巨大的商业成功，《星际争霸》也卖出一百万份，而且仅仅是在韩国这一个国家里。在韩国，一百万的销售量已经占到其人口的百分之二，再算上全球其他市场的销量，《星际争霸》一跃成为有史以来最畅销的 PC 游戏之一。&lt;/p&gt;

&lt;p&gt;专业游戏联盟如雨后春笋般诞生，《星际争霸》也成为运动赛事中的竞技项目，问世十年后仍经久不衰——对于瞬息万变的游戏业来说，十年就是永恒。在韩国《星际争霸》至今仍然是一项重大观赏性运动，与传统运动分庭抗礼。最后《星际争霸》的累计销量达到了惊人的1100万份。在此之前暴雪已经跻身世界最成功的游戏开发商之列，现在更是天下无敌，从剧情到手法，再到表现形式，他们重新定义了战略游戏，甚至整个游戏媒介本身，该游戏影响之深远，甚至在1999年5月，发现号航天飞机执行首次国际空间站对接任务时也携带了一份。暴雪本可以做一部平庸作品了事，但凭借着对完美的执着，《星际争霸》成为了永恒经典。当然其资料片也很快跟进，如暴雪早期其他游戏一样，前两款资料片由第三方制作，由 Aztec New Media 制作发行的《起义》讲述了同主线剧情平行发展的分支故事，三个种族各有一套战役；《反攻》由 Stardock 开发，其本质基本相同，也是每个种族一套新战役，两套资料片在评论界波澜不惊，发行量也不大，如今它们已经被遗忘，无法购买得到。&lt;/p&gt;

&lt;p&gt;终于在1998年11月，《星际争霸》的最后一款资料片问世，并引起了前所未有的巨大轰动。《母巢之战》从每个方面对游戏做出了核心上的彻底改进，非但延续了剧情，还引导其进入了全新的领域，同时针对多人对战进行了全新设计和扩充。该资料片显然不是由第三方制作，而是由暴雪自己在 Sapphire 公司的协助下亲自操刀完成。《星际争霸》的资料片中，只有《母巢之战》至今还广为流传。其后很长一段时间内，星际系列都没有发行续作。&lt;/p&gt;

&lt;p&gt;暴雪接二连三的辉煌令人头晕目眩，人们往往忽视了他们的失败作品。《魔兽争霸：氏族之王》计划成为一款关于萨尔个人经历的冒险游戏，讲述一名逃跑的兽族奴隶如何陈伟氏族之王的故事。不幸的是，尽管部分暴雪员工对该作抱有相当的热情，其他人却不以为然，他们认为该游戏不符合暴雪的黄金标准，而且在98年2D和冒险游戏已经倍受冷落，另一个障碍源于该作的开发商 Animation Magic 远在俄罗斯，造成暴雪和他们之间的沟通困难，更糟的是当这款游戏正准备发行时，LucasArts 抢先发布了《猴岛小英雄3》和《冥界狂想曲》，暴雪意识到这两款优秀作品真正将冒险类游戏发挥到了极致，远远超过《氏族之王》。这是相当严峻的，如果他们迎头而上，照原计划发行游戏，玩家们会感觉这只是暴雪的一部跟风之作。最后的消息是，在离预订完成时间只有3个月的时候，暴雪取消了这个项目，他们再度贯彻了要么不做，要么做到完美的准则。&lt;/p&gt;

&lt;p&gt;1998年还有一项重大改变：最早提出成立工作室的共同创始人艾伦·艾德涵辞去了暴雪总裁一职，作为总裁他一直从事商务领域的工作，因为期望回归到游戏制作上来，于是他和另一位创始人迈克·默汉交换了职位，后者至今扔担任该职。1999年暴雪公司没有大的动作，没有发行作品，甚至《暗黑破坏神2》也只预订在圣诞假期旺季发行，其延迟发售无疑让拥趸失望，然而此时人们已经习惯了暴雪为持续改进作品而跳票的方式，9月他们宣布《魔兽争霸3》即将发表，该作集公司最擅长的两种游戏类型于一身：即时战略和角色扮演，即时对暴雪来说这也是很激进的。游戏有六个种族，游戏视角始终以主角的英雄单位作为核心，类似《暗黑破坏神》，其他单位根据英雄发出的指令动作，而不是由玩家直接操控。游戏将采用无缝衔接的场景，由角色之间的对话场景来代替载入画面，除了期待暴雪下一部完美大作之外，粉丝们别无他求，全盘接受。然而有个小问题：在公开宣布后，暴雪制作了游戏概念的内部试玩版——效果连他们自己都讨厌。着手实验了自己的想法后，他们在意识到它有多糟糕。于是在2000年的 E3上暴雪发表了爆炸性消息：他们已经在着手全面改变《魔兽争霸3》，在保持英雄单位重要性的同时，使其更加接近传统即时战略，这也遭到了反对，因为这代表又一次延期，同时给人一种暴雪拒绝创新，却返回到保守安全领域的感觉。&lt;/p&gt;

&lt;p&gt;人们再次议论纷纷，暴雪的游戏虽然品质优良却缺乏根本的创新，然而仅在一个月后暴雪就挽回了名声：2000年6月《暗黑破坏神2》终于问世，在最后一年里，初代的制作组暴雪北方日复一日埋头苦干，只为实现让续作在所有方面都超越前作的初衷。《暗黑破坏神2》有着更丰富的剧情，更庞大的关卡，更多的职业，全新的技能和各式各样种类繁多的武器装备，如此多的游戏内容的制作使得小组成员几乎崩溃，但最后证明这是值得的。《暗黑破坏神2》是一款当之无愧的动作游戏经典，游戏主角在地狱烈焰中的英勇征战令人热血沸腾，游戏当然不是没有缺点的，同4年前的初代相比，画质并无飞跃，游戏首发的几周内 Battle.net 服务也经常崩溃。但游戏在直观、流畅的操作和令人废寝忘食的游戏性方面脱颖而出，以上都是瑕不掩瑜。《暗黑破坏神2》成为了暴雪迄今销售最快的游戏，问世仅一个月就卖出了一百万份，本作经常被誉为游戏史上最优秀的动作 RPG，毋庸置疑的说，暴雪公司现在已经是全世界最受推崇最成功的游戏开发商之一，他们发行的每一款作品都能轻松达到百万销量，并随即成为游戏业的经典作品。暴雪已然称霸了90年代，而新世纪00年代也将成为他们的囊中之物，此时距暴雪成立甚至还不到十年。&lt;/p&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;p&gt;自90年代起的10年间，暴雪娱乐从起初的无名小卒发展为如今的 PC 游戏界大亨，早起的《魔兽争霸》和《暗黑破坏神》的成功，推动了其续作达到新的高峰，经历了艰难的起步后《星际争霸》创造的传奇达到了艺术的高度。自1995年起，每款单机游戏至少卖出了100万份，且逐年递增。暴雪在创造方向和财政上都享有自由，他们的所有想法都得以实现，把游戏做成他们理想中的那样大胆而多样化。但出于各种原因，2000年年初时公司经历了数次挫折且几名高管卸任，最终仅有两款《魔兽争霸》系列的游戏见到了黎明的曙光，这两款游戏跻身于史上最知名最具影响力和最成功的游戏行列当中。即使是在糟糕透顶的时候，暴雪响当当的名号仍然如雷贯耳。&lt;/p&gt;

&lt;p&gt;1998年11月，在完成了资料片《星际争霸：母巢之战》后，暴雪在加州欧文地区的主团队氛围两拨，一拨队伍负责新一代实时策略游戏《魔兽争霸3》，而另一组筹备全新科幻角色扮演游戏《Nomad》，遗憾的是《Nomad》 还没来得及对外宣布就胎死腹中，这就意味着该小组必须另辟项目。此时公司的另一个工作室暴雪北方正红得发紫，在2000年发布了《暗黑破坏神2》后，他们又自行开发了资料片。这种自行开发资料片，而不交给第三方的做法前所未有，如今《母巢之战》起头，暴雪所有的资料片都由游戏的原班人马操刀制作。这种新的策略效果显著：2001年6月发布的《毁灭之王》获得了巨大成功，暴雪北方便趁热打铁着手开发《暗黑破坏神3》，与南部兄弟小组在冒险游戏《魔兽争霸冒险》和《Nomad》项目上屡屡受挫不同，暴雪北方似乎志得意满，他们绝对没有想到，暗黑2将会是他们出品的最后一个游戏。2001年9月，暴雪宣布了一款新作，它是《Nomad》制作小组的后续项目。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】当时许多成员都在玩大型多人在线游戏，在《Nomad》项目毫无进展的时候，我们决定改变方向打造大型多人在线游戏。关于应该采用哪个系列来做网游，以及是创造一个全新世界好，还是尝试利用现有游戏系列的题材好，我们都做了讨论。当开始审视魔兽系列时，我们觉得找到正确的题材了。&lt;/p&gt;

&lt;p&gt;这就是《魔兽世界》的起源，然而按照暴雪的一贯作风，游戏并无确切的发布日期，考虑到小组精益求精的制作态度，游戏很可能数年后才会与玩家见面。同时南方小组正在为其它魔兽系列游戏收尾，2002年7月问世的《魔兽世界3：混乱之治》在初期理念上作出了大幅度的变动，原定的6个种族缩减到了4个，倍受关注的英雄角色并非玩家扮演的主角，而是强化版的单位，也就是说，游戏是传统的即时战略，英雄角色仅用于增色添彩。不过它在某些方面还是领先的：其一，它是暴雪的第一款全3D 游戏，尽管对游戏性没有造成太大的影响；其二，工作室在预渲染过场动画领域更上一层楼，这使得小组能够将单调的剧情叙述变得前所未有的充实，而游戏角色们仍然是焦点，这也也成就了一款注重情节的策略游戏，前无古人。除剧本外，更有暴雪一贯在游戏性方面的完美平衡，以及每个种族的独一无二的设计，所有这些加在一起促成了一款精品，至今仍被认为是最佳策略游戏之一。与《魔兽争霸》前作一样，本作也成为了世界级专业游戏锦标赛的典范。资料片毫无悬念地接踵而至——即2003年的《冰封王座》，与《暗黑破坏神2》一样，资料片同样由原班人马操刀完成，在保有原汁原味的同时确保了同等的高质量。归功于长篇的新剧情以及多人模式添加的多个新单位，资料片几乎是一款全新游戏。&lt;/p&gt;

&lt;p&gt;现今，暴雪旗下三个主要游戏系列都在开发新作品，暴雪北方在开发《暗黑破坏神3》，南方分部着手《星际争霸》的续作以及《魔兽世界》，第三个小组『虚无软件』则在研发全新的《星际争霸》系列作品。2002年启动，预计2003年发布的《星际争霸：幽灵》将成为家用机上的第三人称动作游戏。尽管从1995年后暴雪不再涉足家用机领域，但这款游戏却完美复合家用机的模式，在星际大背景剧情下，故事围绕人族的高级特种兵展开，玩家对此的反馈很不错。暴雪几年内发布了许多截图、预告片以及文章，但游戏本身却不见踪影。按老规矩暴雪将游戏改了又改，发布时间一延再延。此时对《幽灵》团队来说是屋漏偏逢连夜雨，2003年6月《暗黑》项目领导人离开了暴雪北方，这些人起初成立的『秃鹰工作室』被暴雪吸收到麾下，而暴雪本身又是其他集团的子公司，当感觉到自己已经不再参与重大决策且无法保障自身成员的收益和前景时，暴雪北方管理层提出了抗议，他们甚至以辞职威胁获取话语权，不幸的是，辞职得到了批准。&lt;/p&gt;

&lt;p&gt;失去领导人后，《暗黑》团队遭受了无法弥补的损失。祸不单行的是，2004年1月暴雪原团队的领导人也辞职了。艾伦·艾德涵大学毕业后按照自己的想法建立了一个游戏公司，13年后他选择退出。长时间高压的工作打垮了他，如今他希望投身金融领域，他的职位由共同创始人迈克·默汉接替，因而公司并未发生巨变。同年，暴雪停止聘用『虚无软件』公司开发《星际争霸：幽灵》，该游戏至今搁浅无人过问。不过欧文地区团队仍然对《幽灵》信心十足，并且让『飞猿工作室』继续这个项目，『飞猿』最终被暴雪收购，更名为暴雪家用机分布，之后所有暴雪公司的游戏不再外包，全部内部制作，于是《幽灵》的制作得以继续，然后就没有然后了…..与此同时，暴雪自己的续作《星际争霸2》却遥遥无期。&lt;/p&gt;

&lt;p&gt;员工陆续辞职，公司屡屡受挫，有人开始觉得暴雪的巅峰期已经结束。之后在2004年11月，即第一款《魔兽争霸》出品后10周年，《魔兽世界》终于问世。历经4年开发，本作是工作迄今为止规模最大，投资最多的项目，公司成败在此一举。不过暴雪对本作仍然满怀信心，并预期实体店的销量能在第一年达到40万。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】按现在的标准，我们当时的预计销量极为保守。我们在北美的设备能够为40万到50万活跃用户提供支持，当时估计，如果能在北美发展这个数量的用户就谢天谢地了，然后在以此为基础将魔兽系列游戏发展壮大。&lt;/p&gt;

&lt;p&gt;仅仅在第一个月内，他们就如愿以偿，大型多人在线游戏当时还在蹒跚学步阶段，数千玩家汇聚在一个庞大的虚拟世界中，这在当时可是小众游戏，在重点市场如欧洲等地区少有人问津。《魔兽世界》靠离经叛道成为一匹世界级黑马，上述偏见自然也消失殆尽。该游戏类型的优势之一是公司可以向玩家收取月费，从而抵消游戏的开发维护费用。然而当用户群高达数十万之多，就形成了一种盈利模式。在不到一年里，《魔兽世界》用户增加到了史无前例的400万，每名用户的月费加起来，使得本作成为获利最高的单款游戏。否定论者说暴雪在走下坡路，而《魔兽世界》做出了有力的回击，数年来本作的人气有增无减，原班人马制作的每款资料片都在发售后被抢购一空，创造了记录，用户人数从600万逐渐增长到现今的1200万。这首先说明游戏的销售量至少也有1200万，再考虑到有些玩家购买游戏后又停止了付费，实际销量应该更高。另一方面，如果把全球所有玩家的付费加个总和，意味着暴雪仅靠月费每年就能赚取10亿美元，在过去整个游戏史上这是闻所未闻的。&lt;/p&gt;

&lt;p&gt;是什么让人们对它如此着迷？和其他暴雪游戏相同，本作并无任何真正意义上的全新内容，游戏紧贴已然成型的大型多人在线游戏模式，以魔幻角色扮演为题材，着重升级和装备搜集，然则同其他暴雪产品一样，游戏的方方面面都被加工到了完美境界，游戏十分直观友好，任何瑕疵都由负责平衡性的部门快速修正，美工华丽而亲切，战斗体验在大型多人在线游戏中被公认为最佳。当然《魔兽》的金字招牌自首发起就吸引了大批玩家，总体来说，对于打造了数款精品大作，屡屡超越大众期待的暴雪来说，《魔兽世界》是一个新奇迹，到达游戏业巅峰后，暴雪公司再度登峰造极，已经很难有其他公司与之并驾齐驱。凭借着《魔兽世界》带来的这笔意外之财，暴雪接下来的发展势不可挡。当然，他们还得接着运营《魔兽争霸》，这带来了一些问题。尽管他们的大型多人在线巨作获得空前成功，其他项目并为从中受益。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】对《魔兽争霸》玩家社群的支持成为我们的优先工作，尤其在 WOW 发布初期。我甚至觉得如果 WOW没有获得意想不到的成功，《星际争霸2》的推出应该还能更早一些。&lt;/p&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;p&gt;2000到2005年间暴雪娱乐状况不佳，由于辞职不断和大量烂尾项目，暴雪娱乐似乎要跌下游戏霸主的宝座，但是这一切随着2004年11月《魔兽世界》的发行而改变，这个大型多人在线游戏一炮打响，成为有史以来最火爆的游戏。接下来的几年，该游戏的付费人数超过了1200万，如此可观的收益流在整个游戏界是史无前例的，意外的收获本该让暴雪能够率性而为，然而游戏的火爆度始料未及，暴雪不得不勉力扩员，确保在支持《魔兽世界》的同时还能顾及其它项目。暴雪手头已经有大量未完成的游戏，此时同魔兽系列无关的游戏统统问题不断，发行严重滞后，如今最大的问题在于，暴雪能否应付《魔兽世界》突如其来的成功？&lt;/p&gt;

&lt;p&gt;尽管《魔兽世界》如此成功令人难以置信，暴雪其他的项目依然处于挣扎之中，例如暴雪北方小组制作的《暗黑破坏神3》就迟迟无法完工，虽有暗黑这面金字招牌，续作却难以与时俱进，开发团队始终想不出有趣的设计点子，更糟糕的是，按照2005年的标准，游戏画面已经颇为过时，加上暴雪北方管理人也在2003年辞职，使得《暗黑破坏神3》最终失去了方向，最后，位于加利福尼亚欧文的暴雪南方公司的执行者们不得不做出一个艰难的决定，在希望对开发团队加紧管理但却难以远距离操控的情况下，他们于2005年8月决定关闭暴雪北方，同时告知前员工们可以选择到欧文继续开发《暗黑破坏神3》。一部分人加入了南方公司，另一部分人选择离开，但不管是走是留，这一巨变对制作组的自身文化和创作独立性都造成了打击，导致了《暗黑破坏神3》项目流产，此后《暗黑破坏神3》的开发又回到原点。正如暴雪的一贯作风，《暗黑破坏神3》从大众的视野中消失了数年。但2005年也有好的消息，10月，首届暴雪嘉年华拉开了帷幕，这是由暴雪主办的大型粉丝集会。本届参加者可以第一时间试玩《魔兽世界》资料片和《星际争霸：幽灵》，后者是开发中的家用机动作游戏。拥趸们也有机会同游戏的开发者——他们的偶像们见面，这次的大会极为成功，在2006年平息一年后，从2007年起暴雪嘉年华正式成为每年一度的活动，其规模逐年增加也并非巧合，从2009年起暴雪甚至不再出席E3，从此暴雪不用再对游戏社群大力宣传招揽，而是由后者自觉地参与进来。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】如今我们有其他的宣传场合，如暴雪嘉年华，期间我们向粉丝们展示一些尚未测试的游戏，让他们有机会体验试玩，我们同时有机会倾听玩家对该游戏的第一时间反馈。基于第一印象的反馈信息极为珍贵，这也是唯一的机会。&lt;/p&gt;

&lt;p&gt;尽管《星际争霸：幽灵》在暴雪嘉年华上得以抛头露面，本作却再度遭到挫折。XBOX360于2005年11月发售后，暴雪清楚 PS3和 Wii 也将随之推出，暴雪不断跳票直到游戏完美方才发售的作风在 PC 上一帆风顺，然而在家用机平台上却遭到了意想不到的麻烦，这就是家用机的更新换代。为 PS2、GameCube 和初代 XBOX 主机开发的《星际争霸：幽灵》，在消耗了大量的时间和金钱后，突然沦为上一代主机的游戏，甚至离完成之日还远。2006 年3月新一轮的筛选开始了，暴雪宣布该作将无限期延迟。《幽灵》一直到现在还在推迟，其实等同于取消开发，现在已经没有人在开发《星际争霸：幽灵》，员工早已经分配到魔兽和暗黑团队了，这些小问题都丝毫不影响《魔兽世界》迅速崛起和称霸游戏界。2006年5月暴雪自豪地宣布将同好莱坞的传奇影像工作室合作打造魔兽题材电影，不久又宣布《蜘蛛侠》的导演山姆·雷米加入到该项目，之后根据暴雪的典型作风，此事淡出视线，至今仍不为人知。&lt;/p&gt;

&lt;p&gt;几年过去，暴雪除了推出一个又一个魔兽资料片，再没有其它动作，然而2008年公司有了重大动向，即发行巨头 Activision和维旺迪游戏合并了，你问这与暴雪何干？1994年新兴的暴雪被戴维斯及联营公司所收购，后者被 CUC 国际收购，后者不久又和 HFS 集团合并成为 CENDANT 公司，CENDANT 被指控做假帐之后，又被卖给法国哈维斯下属的娱乐部门，后者同一年又被维旺迪收购，维旺迪 vivendi 与2007年12月宣布同游戏发行巨头 Activision 合并，获得多数控股权并成立合资公司，以上都听明白了吗？&lt;/p&gt;

&lt;p&gt;2008年7月时交易完成，合资形成的超级公司在利润方面无疑是业界之最，一半 Activision 一半 vivendi 组成的合资企业并不叫做动视维旺迪，而是叫动视暴雪。暴雪坚持要把自己的名头打出去，实际上他们最初希望公司叫做暴雪动视，最后暴雪做出妥协，允许游戏界首屈一指的 Activision 把名字放在前面而自己屈居第二，这是暴雪崇高地位的不二佐证。在合资公司中暴雪享有前所未闻的自主权，作为独立工作室自主管理，做出计划后仅向动视做出例行通知，直到现在动视对此并无异议，因为暴雪在魔兽上的巨大成功使动视非常满意，今后的合作关系将怎样，我们只能拭目以待（暴雪独立了）。暴雪的自主权使得他们能够维持原有风格，不吝惜时间而努力将游戏做到最好，即时有《幽灵》的前车之鉴，其他两款倍受期待的作品；《星际争霸2》和《暗黑破坏神3》数年来依旧按部就班地进行开发。&lt;/p&gt;

&lt;p&gt;【弗兰克·皮尔斯】这么说吧，即使我们拥有魔兽、星际和暗黑这些知名系列，如果你回顾我们最近10年左右的记录，你可以说我们只是一家魔兽公司，但所有这些系列对我们来说都很重要，对游戏迷也一样重要，最重要的是我们如何将优秀的游戏体验提供给玩家们，而且保持游戏背景世界观的原汁原味，我们希望忠实地实现这点。过去十年来，我们的重点都放在魔兽系列上，最大的挑战在于如何不偏不倚地把三个系列都照顾好，要知道在最近六七年来为了给《魔兽世界》提供持续支持我们付出了极大努力。&lt;/p&gt;

&lt;p&gt;最终在2011年7月，《星际争霸2》在首作问世多年后推出，游戏有着庞大的非线性关卡结构，依靠过场动画衔接的动人情节，游戏中嵌入的冒险要素，改进后的战网服务，对 Mod 社群的强力支持，此外自然还有举世闻名的多人对战模式，12年的辉煌对于游戏界来说已经不仅仅是不朽神话了，凭借寿命超越想象的星际原作和暴雪响当当的名号，《星际争霸2：自由之翼》在发布的当天就销售了100万份，并在头一个月达到了300万份的销售额，同魔兽系列相比这只是一般般，但和其他游戏公司相比，这是惊人的销量。这次发行后《星际争霸2》的故事还远未结束，原版《星际争霸》被分为三部剧情，第一段针对人类，其他两段对应两个外星种族，对于2代来说，暴雪将剧情分割为三个独立的游戏，现在《自由之翼》只是在讲述人类部分的故事而已。《星际争霸2：虫群之心》预计2012年发布，而三部曲的最后一作《星际争霸2：虚空之遗》将为剧情划上完满的句号。三款组拼之间具体会有什么不同，又会提供什么新的特性来吸引玩家？暴雪会吊住大家的胃口，我们只好慢慢等待了。&lt;/p&gt;

&lt;p&gt;除此之外《暗黑破坏神3》这款千呼万唤始出来的大作，在数次停牌和复牌之后终于接近制作的尾声，故事发生在《暗黑破坏神2：毁灭之王》的20年后，使得老玩家可以延续前情，而新玩家可以有崭新的开始，总体来说，游戏性和风格延续旧作，在俯视视角下身怀绝技的英雄凭借着一身极品装备，像割草般击杀大批敌人，数次迭代后，本作在画风上同暴雪其他游戏靠拢，暴雪还表示，近期的《战神》等动作游戏启发他们在《暗黑破坏神3》中加入更多的视觉冲击，引发动作 RPG 中动作要素的回归，同时他们宣称要更强调角色和剧情，实现动作 RPG 中角色扮演内容的复兴，《暗黑破坏神3》将在2011年下半年或2012年上市，这是仅有的一款暴雪向全球正式公布的游戏。&lt;/p&gt;

&lt;p&gt;然而2010年11月30日，一份包含游戏发行目录的内部文件在互联网上泄密，其中提到了前所未知的游戏，包括计划在2013年发布一款代号《泰坦》的作品，据说泄密文件中还包含敏感的财政数据，之后暴雪中国的总经理被开除，一般认为这证明了本次泄密的真实性，的确《泰坦》现已被暴雪证实确有其事，这将是1995年以来暴雪首款不属于魔兽、星际或是暗黑系列的游戏。&lt;/p&gt;

&lt;p&gt;【迈克·默汉】我们已经开始对一款新的多人在线网游进行开发，这并不是《魔兽世界》续作，它是一款崭新的游戏，我们尝试投入这六年在魔兽上得到的经验和教训，打造一款全新的游戏来推动 MMO 类型的发展。&lt;/p&gt;

&lt;p&gt;除了这次泄密的消息，还有传言说暴雪的另一团队真在开发另一个新系列，如果属实，在近10年内除魔兽外并无建树的暴雪，将再一次开拓新的领域。现在已经知道的是，除了魔兽、星际、暗黑、泰坦各有一个开发小组外，还可能有另一对人马在从事新的游戏。如果皇天不负有心人，接下来数年间暴雪将持续发布不同系列下的游戏作品，从而再度成为一个以多款精品游戏而驰名的公司。&lt;/p&gt;

&lt;p&gt;艹，也该是时候了&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/game-history-blizzard/&#34; title=&#34;游戏发展史 - Blizzard&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊斋：白狐</title>
      <link>http://alimy.me/post/arc_201603192259/</link>
      <pubDate>Sat, 19 Mar 2016 22:59:00 CST</pubDate>
      
      <guid>http://alimy.me/post/arc_201603192259/</guid>
      <description>&lt;p&gt;很多年前，一个昭阳四射的清晨，书生坐在树桩上苦读四书五经。书生一贫如洗三餐不饱，家里唯一值钱的就是那两担沉甸甸的书。&lt;/p&gt;

&lt;p&gt;书生每天都坐在这片林子里，随便寻个坐处，读到天黑，日子一天天的就这样在圣贤书中流逝。&lt;/p&gt;

&lt;p&gt;这日黄昏，书生正在读书，读到夕阳遍地时高呼：“书中自有黄金屋，书中自有颜如玉”，突地“吱吱”而鸣声随风而来，书生抬起头来，只见一团白影扑面而至，那是一只晶莹通白的小狐狸，雪白得一尘不染，两只眼珠溜溜而动，口里哀声连连。&lt;/p&gt;

&lt;p&gt;说也来怪，小狐狸奔到书生面前时，竟兀自停住脚步，气喘吁吁。&lt;/p&gt;

&lt;p&gt;书生一把抓住小狐狸，只见小狐狸雪白的后腿上，斜斜地插着一支箭，鲜血顺着箭头沽沽而下，染红了一片。小狐哀鸣几声，双目对着书生，写满了哀怜与乞求。&lt;/p&gt;

&lt;p&gt;书生叹一口气：“小狐狸啊小狐狸，是谁忍心伤你这么深……”&lt;/p&gt;

&lt;p&gt;语音未落，远处蹄声如雷阵阵踏来，小狐狸白溜的身子不停的颤抖，仿佛要从书生手里挣扎逃走，书生急忙捧紧小狐，一咬牙将箭拔出，撕下一片烂衣袍，将小狐狸的伤口包好，轻轻放入宽大的衣袖里，说也来怪，小狐狸竟忍住疼痛，一动不动的躺在书生的袖怀之中。&lt;/p&gt;

&lt;p&gt;书生刚刚端起书，只听得马蹄声轰轰而至，数十匹高大骏马踏青飞来，为头的是一个虬髯大汉，满身华贵地叫道：“兀那书生，可曾见过一只受伤的狐狸逃过？”&lt;/p&gt;

&lt;p&gt;书生抬起头来：“兄台说的可是一只满身雪白的狐狸？”&lt;/p&gt;

&lt;p&gt;虬髯客身旁闪出一团绿影，娇喝道：“正是，正是我射中的那只狐狸，那小畜生呢？”&lt;/p&gt;

&lt;p&gt;书生只闻香风扑面，迎面是一张如花笑脸，书生猛然间惊慌失措，意迷情乱，好半天才回过神来，指着身后结结巴巴的说：“刚刚从这边跑过。”&lt;/p&gt;

&lt;p&gt;少女娇声说道：“多谢书生！我们追！”

猛一挥手，数十骑悠然而来，又悠然而去，只留下银铃般的笑声荡在书生耳里。&lt;/p&gt;

&lt;p&gt;书生喃喃念道：“书中自有黄金屋，书中自有颜如玉”，啪地一声，圣贤书掉到地上竟不察觉。&lt;/p&gt;

&lt;p&gt;小狐狸从袖口里伸出头，啊啊一声叫醒了书生，书生见它的眼里写满了凄美与感谢。&lt;/p&gt;

&lt;p&gt;书生收起心，轻抚狐狸，爱怜地说：“小狐狸，快躲起来，别让人家欺负你。”&lt;/p&gt;

&lt;p&gt;小狐狸顺着衣袖一溜而下，跛着腿，竟通人性，前腿合一朝书生作一个稽首，吱吱几声，雪白的身体扭着一团，竟跳起舞来，只见白影闪闪，小白狐体肢如一，夕阳西下翩翩起舞，书生看得呆了。&lt;/p&gt;

&lt;p&gt;远方突地也传来吱吱之声，小狐狸收住舞步，再朝书生稽首，恋恋不舍地朝同伴而去，三步一回首，依依而别，消失在远山中。书生拍拍衣袍上的尘土，捡起书来重新苦读。&lt;/p&gt;

&lt;p&gt;书生还是每天坐在树林里读书，只是每天傍晚都会沿着树林转一转，聆耳细听着什么，每每有马蹄声响起时，书生会惊喜坐起，只是他再也没遇到过绿衣女郎。&lt;/p&gt;

&lt;p&gt;书生不知道，每天清晨，露叶旁都有一只小白狐，瞪大着灵动的眼珠，一动不动地望着书生，书生高读时，狐狸仍一动不动，仿佛怕打扰了书生的修行。&lt;/p&gt;

&lt;p&gt;书生很奇怪，每天夕阳西下，每当书生对着远山念念不望绿衣女子时，远山上仿佛有一团白影，迎着夕阳翩翩起舞，书生寻过去时，却什么都找不到。&lt;/p&gt;

&lt;p&gt;一天又一天，书生就这样生活着，直到他死去，再也没见过穿绿衣的女子，她和他不属于一个世界。&lt;/p&gt;

&lt;p&gt;大家都说：书生读了一生什么也没得到，当真白读了。书生去时孤单一人，有人却说看到过一只白狐曾出没在书生的床前，又有人说每年书生祭日，坟头都会有人拜祭。&lt;/p&gt;

&lt;p&gt;很多年过去了，大约是一千年吧。&lt;/p&gt;

&lt;p&gt;当年的树林铲平了，这里刚刚建起了一座官邸。&lt;/p&gt;

&lt;p&gt;今天到处张灯结彩，原来是新晋状元新婚大喜的日子，听说状元才高八斗，连皇上也下令将公主许配给他，举国大庆。&lt;/p&gt;

&lt;p&gt;状元郎今天起得特别早，因为管家告诉他，公主的花轿很快就到了，啪啪啪啪……，鞭声撩人，管家急匆匆地闯进来：“公子！公主花轿到了，公主到了。”&lt;/p&gt;

&lt;p&gt;状元郎激动得三步并作一步，冲出门外，揭开轿门：“公主……”但见一身绿装的公主坐在轿里，笑靥如花。状元一阵晕醺：公主好面熟啊，似乎在梦里见过无数次，可却总是记不起来。&lt;/p&gt;

&lt;p&gt;洞房花烛夜，状元与公主四目深情，门突地被撞开，状元定睛一看，是服侍自己多年的丫鬟，丫鬟从小开始照顾状元，喜欢穿一袭白衣，丫鬟走到状元身前一稽首，眼睛里满是泪珠：“公子，丫鬟自幼伺候您，今日要与您道别了。”&lt;/p&gt;

&lt;p&gt;状元猛然阵阵心痛：“为何故？”&lt;/p&gt;

&lt;p&gt;丫鬟撩起裤脚，雪白的腿上留着一道深疤，丫鬟指着公主说：“临走之前，想报当年一箭之仇，请公子赐恩。”状元大惊，双手护住公主：“你到底所为何事？”&lt;/p&gt;

&lt;p&gt;丫鬟泪珠夺眶而出，凄然着望着状元：“公子当年相救之恩，恨不能立时相报，修行千年方能变成人身，殷殷相许，今日公子金榜题名，前缘尽了，以一恩消一恨，望公子珍重。”&lt;/p&gt;

&lt;p&gt;丫鬟再次深深稽首，礼罢退至大庭深处，翩翩起舞，但见皎皎月下，白衣胜雪，似梦似幻，舞到深处，丫鬟吱吱而鸣，声声凄然。&lt;/p&gt;

&lt;p&gt;明月当空，状元喃喃而立，仿佛看到了当年的夕阳、远山，青山高处，那一团白影踏歌而舞，梦里状元满脑是绿影姣容，梦醒时，状元千百寻找的，可是那翩翩白影？&lt;/p&gt;

&lt;p&gt;从那晚后，再也没见过丫鬟，有人传说：在远山深处，夕照时分，总能看到有人在翩翩起舞，状元郎也差人寻过无数次，再没找到过。&lt;/p&gt;

&lt;p&gt;又有人说，那晚丫鬟哀呀而鸣，唱的是一首歌，那歌是这么唱的：&lt;/p&gt;

&lt;p&gt;我是一只修行千年的狐&lt;br /&gt;
千年修行 千年孤独&lt;br /&gt;
夜深人静时 可有人听见我在哭&lt;br /&gt;
灯火阑珊处 可有人看见我跳舞&lt;/p&gt;

&lt;p&gt;我是一只等待千年的狐&lt;br /&gt;
千年等待 千年孤独&lt;br /&gt;
滚滚红尘里 谁又种下了爱的蛊&lt;br /&gt;
茫茫人海中 谁又喝下了爱的毒&lt;/p&gt;

&lt;p&gt;我爱你时 你正一贫如洗寒窗苦读&lt;br /&gt;
离开你时 你正金榜题名洞房花烛&lt;/p&gt;

&lt;p&gt;能不能为你再跳一支舞&lt;br /&gt;
我是你千百年前放生的白狐&lt;br /&gt;
你看衣袂飘飘 衣袂飘飘&lt;br /&gt;
海誓山盟都化做虚无&lt;/p&gt;

&lt;p&gt;能不能为你再跳一支舞&lt;br /&gt;
只为你临别时的那一次回顾&lt;br /&gt;
你看衣袂飘飘 衣袂飘飘&lt;br /&gt;
天长地久都化做虚无&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;新白狐&lt;br /&gt;
演唱：陈瑞&lt;/p&gt;

&lt;p&gt;我是一只爱了千年的狐&lt;br /&gt;
千年爱恋千年孤独&lt;br /&gt;
长夜里你可知我的红妆为谁补&lt;br /&gt;
红尘中你可知我的秀发为谁梳&lt;/p&gt;

&lt;p&gt;我是一只守候千年的狐&lt;br /&gt;
千年守候千年无助&lt;br /&gt;
情到深处看我用美丽为你起舞&lt;br /&gt;
爱到痛时听我用歌声为你倾诉&lt;/p&gt;

&lt;p&gt;寒窗苦读你我海誓山盟&lt;br /&gt;
铭心刻骨&lt;br /&gt;
金榜花烛却是天涯漫漫&lt;br /&gt;
陌路殊途&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年前爱你的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
生生世世都是你的狐&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年来不变的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;/p&gt;

&lt;p&gt;我是一只守候千年的狐&lt;br /&gt;
千年守候千年无助&lt;br /&gt;
情到深处看我用美丽为你起舞&lt;br /&gt;
爱到痛时听我用歌声为你倾诉&lt;/p&gt;

&lt;p&gt;寒窗苦读你我海誓山盟&lt;br /&gt;
铭心刻骨&lt;br /&gt;
金榜花烛确是天涯漫漫&lt;br /&gt;
陌路殊途&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年前爱你的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
生生世世都是你的狐&lt;/p&gt;

&lt;p&gt;能不能让我为爱哭一哭&lt;br /&gt;
我还是千百年来不变的白狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;br /&gt;
多少春去春来朝朝暮暮&lt;br /&gt;
来生来世还做你的狐&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;（忽然想听 陈瑞 唱的《白狐》，从网络收集了相关的资料，这是其中之一）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>http://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;

&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;

&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;

&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.

… that’s it. No, really, that’s it. Bolt is basically a bunch of nested maps. And this simplicity is what makes it so easy to use. There’s no tables to set up, no schemas, no complex querying language to struggle with. Let’s look at a bolt hello world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    “fmt”
    “log”

    “github.com/boltdb/bolt”
)

var world = []byte(“world”)

func main() {
    db, err := bolt.Open(“/home/nate/foo/bolt.db”, 0644, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    key := []byte(“hello”)
    value := []byte(“Hello World!”)

    // store some data
    err = db.Update(func(tx *bolt.Tx) error {
        bucket, err := tx.CreateBucketIfNotExists(world)
        if err != nil {
            return err
        }

        err = bucket.Put(key, value)
        if err != nil {
            return err
        }
        return nil
    })

    if err != nil {
        log.Fatal(err)
    }

    // retrieve the data
    err = db.View(func(tx *bolt.Tx) error {
        bucket := tx.Bucket(world)
        if bucket == nil {
            return fmt.Errorf(“Bucket %q not found!”, world)
        }

        val := bucket.Get(key)
        fmt.Println(string(val))

        return nil
    })

    if err != nil {
        log.Fatal(err)
    }
}

// output:
// Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know what you’re thinking - that seems kinda long. But keep in mind, I fully handled all errors in at least a semi-proper way, and we’re doing all this:&lt;/p&gt;

&lt;p&gt;1.) creating a database&lt;br /&gt;
2.) creating some structure (the “world” bucket)&lt;br /&gt;
3.) storing data to the structure&lt;br /&gt;
4.) retrieving data from the structure.&lt;/p&gt;

&lt;p&gt;I think that’s not too bad in 54 lines of code.&lt;/p&gt;

&lt;p&gt;So let’s look at what that example is really doing. First we call bolt.Open to get the database. This will create the file if necessary, or open it if it exists.&lt;/p&gt;

&lt;p&gt;All reads from or writes to the bolt database must be done within a transaction. You can have as many Readers in read-only transactions at the same time as you want, but only one Writer in a writable transaction at a time (readers maintain a consistent view of the DB while writers are writing).&lt;/p&gt;

&lt;p&gt;To begin, we call db.Update, which takes a function to which it’ll pass a bolt.Tx - bolt’s transaction object. We then create a Bucket (since all data in bolt lives in buckets), and add our key/value pair to it. After the write transaction finishes, we start a read- only transaction with DB.View, and get the values back out.&lt;/p&gt;

&lt;p&gt;What’s great about bolt’s transaction mechanism is that it’s super simple - the scope of the function is the scope of the transaction. If the function passed to Update returns nil, all updates from the transaction are atomically stored to the database. If the function passed to Update returns an error, the transaction is rolled back. This makes bolt’s transactions completely intuitive from a Go developer’s point of view. You just exit early out of your function by returning an error as usual, and bolt Does The Right Thing. No need to worry about manually rolling back updates or anything, just return an error.&lt;/p&gt;

&lt;p&gt;The only other basic thing you may need is to iterate over key/value pairs in a Bucket, in which case, you just call bucket.Cursor(), which returns a Cursor value, which has functions like Next(), Prev() etc that return a key/value pair and work like you’d expect.&lt;/p&gt;

&lt;p&gt;There’s a lot more to the bolt API, but most of the rest of it is more about database statistics and some stuff for more advanced usage scenarios… but the above is all you really need to know to start storing data in a bolt database.&lt;/p&gt;

&lt;p&gt;For a more complex application, just storing strings in the database may not be sufficient, but that’s ok, Go has your back there, too. You can easily use encoding/json or encoding/gob to serialize structs into the database, keyed by a unique name or id. This is what makes it easy for bolt to go from a key/value store to a document store - just have one bucket per document type. Again, the benefit of bolt is low barrier of entry. You don’t have to figure out a whole database schema or install anything to be able to just start dumping data to disk in a performant and manageable way.&lt;/p&gt;

&lt;p&gt;The main drawback of bolt is that there are no queries. You can’t say “give me all foo objects with a name that starts with bar”. You could make your own index in the database and keep it up to date manually. This could be as easy as a slice of IDs serialized into an “indices” bucket for a particular query. Obviously, this is where you start getting into the realm of developing your own relational database, but if you don’t go overboard, it can be nice that all this code is just that - code. It’s not queries in some external DSL, it’s just code like you’d write for an in-memory data store.&lt;/p&gt;

&lt;p&gt;Bolt is not for every application. You must understand your application’s needs and if bolt’s key/value style will be sufficient to fulfill those needs. If it is, I think you’ll be very happy to use such a simple data store with so little mental overhead.&lt;/p&gt;

&lt;p&gt;[edited to clarify reader/writer relationship] Bonus Gob vs. Json benchmark for storing structs in Bolt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkGobEncode  1000000       2191 ns/op
BenchmarkJsonEncode   500000       4738 ns/op
BenchmarkGobDecode  1000000       2019 ns/op
BenchmarkJsonDecode   200000      12993 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://npf.io/2014/07/intro-to-boltdb-painless-performant-persistence/&#34; title=&#34;Intro to BoltDB&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Volley&#43;OkHttp with https</title>
      <link>http://alimy.me/post/dev_201603192245/</link>
      <pubDate>Sat, 19 Mar 2016 22:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192245/</guid>
      <description>&lt;h3 id=&#34;android-network-simple&#34;&gt;Android Network Simple&lt;/h3&gt;

&lt;p&gt;This article shows how to use volley with OkHttp and security your api with https.
本文可以在&lt;a href=&#34;http://www.jianshu.com/p/e58161cbc3a4&#34; title=&#34;Android 网络--我是怎么做的: Volley+OkHttp+Https&#34;&gt;简书&lt;/a&gt;浏览。&lt;/p&gt;

&lt;h3 id=&#34;使用-okhttp-作为传输层的实现&#34;&gt;使用 OkHttp 作为传输层的实现.&lt;/h3&gt;

&lt;p&gt;Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现. 3.0 以上使用HttpUrlConnection, 2.3 以下使用 ApacheHttpStack, 参考&lt;a href=&#34;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&#34;&gt;Android Http Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OkHttp 相较于其它的实现有以下的优点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;http://zh.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;，允许连接同一主机的所有请求分享一个socket。&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，会使用连接池减少请求延迟。&lt;/li&gt;
&lt;li&gt;使用GZIP压缩下载内容，且压缩操作对用户是透明的。&lt;/li&gt;
&lt;li&gt;利用响应缓存来避免重复的网络请求。&lt;/li&gt;
&lt;li&gt;当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。&lt;/li&gt;
&lt;li&gt;如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。

因此使用 OkHttp 作为替代是好的选择.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先用 OkHttp 实现一个新的 &lt;code&gt;HurlStack&lt;/code&gt; 用于构建 Volley 的 requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OkHttpStack extends HurlStack {

    private OkHttpClient okHttpClient;

    /**
     * Create a OkHttpStack with default OkHttpClient.
     */
    public OkHttpStack() {
        this(new OkHttpClient());
    }

    /**
     * Create a OkHttpStack with a custom OkHttpClient
     * @param okHttpClient Custom OkHttpClient, NonNull
     */
    public OkHttpStack(OkHttpClient okHttpClient) {
        this.okHttpClient = okHttpClient;
    }

    @Override
    protected HttpURLConnection createConnection(URL url) throws IOException {
        OkUrlFactory okUrlFactory = new OkUrlFactory(okHttpClient);
        return okUrlFactory.open(url);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用 OkHttpStack 创建新的 Volley requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestQueue = Volley.newRequestQueue(getContext(), new OkHttpStack());
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就行了.&lt;/p&gt;

&lt;h3 id=&#34;使用-https&#34;&gt;使用 Https&lt;/h3&gt;

&lt;p&gt;作为一个有节操的开发者应该使用 Https 来保护用户的数据, Android 开发者网站上文章&lt;a href=&#34;https://developer.android.com/training/articles/security-ssl.html&#34;&gt;Security with HTTPS and SSL&lt;/a&gt;做了详尽的阐述.&lt;/p&gt;

&lt;p&gt;OkHttp 自身是支持 Https 的. 参考文档 &lt;a href=&#34;https://github.com/square/okhttp/wiki/HTTPS&#34;&gt;OkHttp Https&lt;/a&gt;, 直接使用上面的 &lt;code&gt;OkHttpStack&lt;/code&gt; 就可以了, 但是如果遇到服务器开发哥哥使用了自签名的证书(不要问我为什么要用自签名的), 就无法正常访问了.&lt;/p&gt;

&lt;p&gt;网上有很多文章给出的方案是提供一个什么事情都不做的&lt;code&gt;TrustManager&lt;/code&gt; 跳过 &lt;code&gt;SSL&lt;/code&gt; 的验证, 这样做很容受到攻击, Https 也就形同虚设了.&lt;/p&gt;

&lt;p&gt;我采用的方案是将自签名的证书打包入 APK 加入信任.&lt;/p&gt;

&lt;p&gt;好处:
* 应用难以逆向, 应用不再依赖系统的 trust store, 使得 Charles 抓包等工具失效. 要分析应用 API 必须反编译 APK.
* 不用额外购买证书, 省钱&amp;hellip;.
缺点:
* 证书部署灵活性降低, 一旦变更证书必须升级程序.&lt;/p&gt;

&lt;h3 id=&#34;实现步骤&#34;&gt;实现步骤&lt;/h3&gt;

&lt;p&gt;以最著名的自签名网站12306为例说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;导出证书&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo | openssl s_client -connect kyfw.12306.cn:443 2&amp;gt;&amp;amp;1 |  sed -ne &#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#39; &amp;gt; kyfw.12306.cn.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将证书转为 bks 格式
下载最新的bcprov-jdk, 执行下面的命令. storepass 是导出密钥文件的密码.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -importcert -v \
    -trustcacerts \
    -alias 0 \
    -file &amp;lt;(openssl x509 -in kyfw.12306.cn.pem) \
    -keystore kyfw.bks -storetype BKS \
    -providerclass     org.bouncycastle.jce.provider.BouncyCastleProvider \
    -providerpath ./bcprov-jdk16-1.46.jar \
    -storepass asdfqaz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将导出的 kyfw.bks 文件放入 res/raw 文件夹下.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建  &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // A HttpStack implement witch can verify specified self-signed certification.
public class SelfSignSslOkHttpStack extends HurlStack {

  private OkHttpClient okHttpClient;

  private Map&amp;lt;String, SSLSocketFactory&amp;gt; socketFactoryMap;


   // Create a OkHttpStack with default OkHttpClient.
  public SelfSignSslOkHttpStack(Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this(new OkHttpClient(), factoryMap);
  }


  // Create a OkHttpStack with a custom OkHttpClient
  // @param okHttpClient Custom OkHttpClient, NonNull
  public SelfSignSslOkHttpStack(OkHttpClient okHttpClient, Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this.okHttpClient = okHttpClient;
    this.socketFactoryMap = factoryMap;
  }

  @Override
  protected HttpURLConnection createConnection(URL url) throws IOException {
    if (&amp;quot;https&amp;quot;.equals(url.getProtocol()) &amp;amp;&amp;amp; socketFactoryMap.containsKey(url.getHost())) {
        HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(okHttpClient).open(url);
        connection.setSSLSocketFactory(socketFactoryMap.get(url.getHost()));
        return connection;
    } else {
        return  new OkUrlFactory(okHttpClient).open(url);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后用 &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt; 创建 Volley 的 RequestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String[] hosts = {&amp;quot;kyfw.12306.cn&amp;quot;};
int[] certRes = {R.raw.kyfw};
String[] certPass = {&amp;quot;asdfqaz&amp;quot;};
socketFactoryMap = new Hashtable&amp;lt;&amp;gt;(hosts.length);

for (int i = 0; i &amp;lt; certRes.length; i++) {
    int res = certRes[i];
    String password = certPass[i];
    SSLSocketFactory sslSocketFactory = createSSLSocketFactory(context, res, password);
    socketFactoryMap.put(hosts[i], sslSocketFactory);
}

HurlStack stack = new SelfSignSslOkHttpStack(socketFactoryMap);

requestQueue = Volley.newRequestQueue(context, stack);
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;done&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://github.com/dodocat/AndroidNetworkdemo&#34; title=&#34;android network demo&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
