<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Development on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/categories/development/</link>
    
    
    <copyright>&amp;copy;2016, Alimy; all rights reserved.</copyright>
    <updated>Sun, 18 Mar 2018 17:51:00 CST</updated>
    
    <item>
      <title>RFC: DNS</title>
      <link>http://alimy.me/post/dev_201803181751/</link>
      <pubDate>Sun, 18 Mar 2018 17:51:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803181751/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1034&#34; title=&#34;DOMAIN NAMES - CONCEPTS AND FACILITIES&#34;&gt;&lt;strong&gt;DNS - CONCEPTS AND FACILITIES&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1034.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1035&#34; title=&#34;DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION&#34;&gt;&lt;strong&gt;DNS - IMPLEMENTATION AND SPECIFICATION&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1035.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(&lt;a href=&#34;https://tools.ietf.org/html/&#34; title=&#34;IETF Documents&#34;&gt;&lt;strong&gt;IETF Documents&lt;/strong&gt;&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://datatracker.ietf.org/&#34; title=&#34;IETF Datatracker&#34;&gt;&lt;strong&gt;IETF Datatracker&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: SMTP/POP3/IMAP</title>
      <link>http://alimy.me/post/dev_201803181718/</link>
      <pubDate>Sun, 18 Mar 2018 17:18:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803181718/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5321&#34; title=&#34;Simple Mail Transfer Protocol&#34;&gt;&lt;strong&gt;SMTP&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc5321.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1939&#34; title=&#34;Post Office Protocol - Version 3&#34;&gt;&lt;strong&gt;POP3&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1939.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3501&#34; title=&#34; INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1&#34;&gt;&lt;strong&gt;IMAP&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc3501.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(&lt;a href=&#34;https://tools.ietf.org/html/&#34; title=&#34;IETF Documents&#34;&gt;&lt;strong&gt;IETF Documents&lt;/strong&gt;&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://datatracker.ietf.org/&#34; title=&#34;IETF Datatracker&#34;&gt;&lt;strong&gt;IETF Datatracker&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AMP: Accelerated Mobile Pages</title>
      <link>http://alimy.me/post/dev_201803130721/</link>
      <pubDate>Tue, 13 Mar 2018 07:21:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803130721/</guid>
      <description>&lt;p&gt;The AMP Project is an open-source initiative aiming to make the web better for all. The project enables the creation of websites and ads that are consistently fast, beautiful and high-performing across devices and distribution platforms.&lt;/p&gt;

&lt;p&gt;AMP pages are built with 3 core components:&lt;/p&gt;

&lt;h3 id=&#34;amp-html&#34;&gt;AMP HTML ⚡&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ampproject.org/docs/get_started/about-amp.html&#34;&gt;AMP HTML&lt;/a&gt; is a way to build web pages that render with reliable and fast performance. It is our attempt at fixing what many perceive as painfully slow page load times – especially when reading content on the mobile web.  AMP HTML is built on existing web technologies; an AMP page will load (quickly) in any modern browser.&lt;/p&gt;

&lt;p&gt;You can learn more at &lt;a href=&#34;https://www.ampproject.org/&#34;&gt;ampproject.org&lt;/a&gt; including &lt;a href=&#34;https://www.ampproject.org/learn/about-amp/&#34;&gt;what AMP is&lt;/a&gt;, &lt;a href=&#34;https://www.ampproject.org/learn/how-amp-works/&#34;&gt;how it works&lt;/a&gt; and the importance of &lt;a href=&#34;https://www.ampproject.org/docs/guides/validate&#34;&gt;validation in AMP&lt;/a&gt;.  You can also walk through &lt;a href=&#34;https://www.ampproject.org/docs/get_started/create&#34;&gt;creating an AMP page&lt;/a&gt; and read through the &lt;a href=&#34;https://www.ampproject.org/docs/reference/components&#34;&gt;reference docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;amp-js&#34;&gt;AMP JS&lt;/h3&gt;

&lt;p&gt;The AMP JS library ensures the fast rendering of AMP HTML pages.&lt;/p&gt;

&lt;p&gt;The AMP JS library implements all of AMP&amp;rsquo;s best performance practices, manages resource loading and gives you the custom tags mentioned above, all to ensure a fast rendering of your page.&lt;/p&gt;

&lt;p&gt;Among the biggest optimizations is the fact that it makes everything that comes from external resources asynchronous, so nothing in the page can block anything from rendering.&lt;/p&gt;

&lt;p&gt;Other performance techniques include the sandboxing of all iframes, the pre-calculation of the layout of every element on page before resources are loaded and the disabling of slow CSS selectors.&lt;/p&gt;

&lt;p&gt;To learn more about not just the optimizations but the limitations, read the &lt;a href=&#34;https://www.ampproject.org/docs/fundamentals/spec&#34; title=&#34;AMP HTML specification&#34;&gt;&lt;strong&gt;AMP HTML specification&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;amp-cache&#34;&gt;AMP Cache&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Google AMP Cache&lt;/strong&gt; can be used to serve cached AMP HTML pages.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://developers.google.com/amp/cache/&#34; title=&#34;Google AMP Cach&#34;&gt;&lt;strong&gt;Google AMP Cache&lt;/strong&gt;&lt;/a&gt; is a proxy-based content delivery network for delivering all valid AMP documents. It fetches AMP HTML pages, caches them, and improves page performance automatically. When using the Google AMP Cache, the document, all JS files and all images load from the same origin that is using &lt;a href=&#34;https://http2.github.io/&#34; title=&#34;HTTP 2.0 @GitHub&#34;&gt;&lt;strong&gt;HTTP 2.0&lt;/strong&gt;&lt;/a&gt; for maximum efficiency.&lt;/p&gt;

&lt;p&gt;The cache also comes with a built-in validation system which confirms that the page is guaranteed to work, and that it doesn&amp;rsquo;t depend on external resources. The validation system runs a series of assertions confirming the page’s markup meets the AMP HTML specification.&lt;/p&gt;

&lt;p&gt;Another version of the validator comes bundled with every AMP page. This version can log validation errors directly to the browser’s console when the page is rendered, allowing you to see how complex changes in your code might impact performance and user experience.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: HTTP 0.9/1.0/1.1/2.0</title>
      <link>http://alimy.me/post/dev_201803122215/</link>
      <pubDate>Mon, 12 Mar 2018 22:15:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803122215/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.w3.org/Protocols/HTTP/AsImplemented.html&#34; title=&#34;The Original HTTP as defined in 1991&#34;&gt;&lt;strong&gt;HTTP 0.9&lt;/strong&gt; https://www.w3.org/Protocols/HTTP/AsImplemented.html &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1945&#34; title=&#34;Hypertext Transfer Protocol -- HTTP/1.0&#34;&gt;&lt;strong&gt;HTTP 1.0&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc1945.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2616&#34; title=&#34;Hypertext Transfer Protocol -- HTTP/1.1&#34;&gt;&lt;strong&gt;HTTP 1.1&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc2616.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34; title=&#34;Hypertext Transfer Protocol Version 2 -- HTTP/2&#34;&gt;&lt;strong&gt;HTTP 2.0&lt;/strong&gt; RFC https://www.ietf.org/rfc/rfc7540.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(&lt;a href=&#34;https://tools.ietf.org/html/&#34; title=&#34;IETF Documents&#34;&gt;&lt;strong&gt;IETF Documents&lt;/strong&gt;&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://datatracker.ietf.org/&#34; title=&#34;IETF Datatracker&#34;&gt;&lt;strong&gt;IETF Datatracker&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RFC: TLS 1.0/1.1/1.2/1.3</title>
      <link>http://alimy.me/post/dev_201803122145/</link>
      <pubDate>Mon, 12 Mar 2018 21:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803122145/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2246&#34; title=&#34;TLS 1.0&#34;&gt;&lt;strong&gt;TLS 1.0&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc2246.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4346&#34; title=&#34;TLS 1.1&#34;&gt;&lt;strong&gt;TLS 1.1&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc4346.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5246&#34; title=&#34;TLS 1.2&#34;&gt;&lt;strong&gt;TLS 1.2&lt;/strong&gt; RFC http://www.ietf.org/rfc/rfc5246.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-tls-tls13-26&#34; title=&#34;draft-ietf-tls-tls13-26&#34;&gt;&lt;strong&gt;TLS 1.3&lt;/strong&gt; RFC https://www.ietf.org/id/draft-ietf-tls-tls13-26.txt &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(&lt;a href=&#34;https://tools.ietf.org/html/&#34; title=&#34;IETF Documents&#34;&gt;&lt;strong&gt;IETF Documents&lt;/strong&gt;&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://datatracker.ietf.org/&#34; title=&#34;IETF Datatracker&#34;&gt;&lt;strong&gt;IETF Datatracker&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Tutorial: What&#39;s DefaultServeMux in net/http</title>
      <link>http://alimy.me/post/dev_201803031932/</link>
      <pubDate>Sat, 03 Mar 2018 19:34:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803031932/</guid>
      <description>&lt;p&gt;craete a HTTPS Server use net/http and route handle function by DefaultServeMux, see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net/http&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

func hello(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;[%s]: hello!&amp;quot;, r.Host)
}

func world(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;[%s]: world!&amp;quot;, r.Host)
}

func main() {
	server := http.Server{
		Addr: &amp;quot;127.0.0.1:8080&amp;quot;,
	}
	http.HandleFunc(&amp;quot;/hello&amp;quot;, hello)
	http.HandleFunc(&amp;quot;/world&amp;quot;, world)

	log.Fatal(server.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;the http.HandleFunc is defined below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package http

// HandleFunc registers the handler function for the given pattern
// in the DefaultServeMux.
// The documentation for ServeMux explains how patterns are matched.
func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
	DefaultServeMux.HandleFunc(pattern, handler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DefaultServeMux is a ref var of &amp;amp;ServeMux&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DefaultServeMux is the default ServeMux used by Serve.
var DefaultServeMux = &amp;amp;defaultServeMux

var defaultServeMux ServeMux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the method of HandleFunc is defined below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Server

// HandleFunc registers the handler function for the given pattern.
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
	mux.Handle(pattern, HandlerFunc(handler))
}

// The HandlerFunc type is an adapter to allow the use of
// ordinary functions as HTTP handlers. If f is a function
// with the appropriate signature, HandlerFunc(f) is a
// Handler that calls f.
type HandlerFunc func(ResponseWriter, *Request)

// ServeHTTP calls f(w, r).
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
	f(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we see,  the method of HandleFunc convert arg of func(ResponseWriter, *Request) to a http Handler and passed to ServeMux.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: &lt;a href=&#34;http://gitbus.com/alimy/dugo.git&#34; title=&#34;My Go Programming code repository&#34;&gt;&lt;em&gt;My Code repository&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Tutorial: Create HTTPS Server use net/http</title>
      <link>http://alimy.me/post/dev_201803030946/</link>
      <pubDate>Sat, 03 Mar 2018 09:46:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201803030946/</guid>
      <description>&lt;p&gt;It is simple to craete a HTTPS Server use net/http, see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net/http&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type SimpleHandler struct {
	Name string
}

func (h *SimpleHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &amp;quot;%s: Hello World!&amp;quot;, h.Name)
}

func main() {
	server := http.Server{
		Addr:    &amp;quot;127.0.0.1:8080&amp;quot;,
		Handler: &amp;amp;SimpleHandler{Name: &amp;quot;SimpleServer&amp;quot;},
	}
	server.ListenAndServeTLS(&amp;quot;cert.pem&amp;quot;, &amp;quot;key.pem&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We can use golang&amp;rsquo;s crypto libraries to create SSL certificates that used in simple https server above. see code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;crypto/rand&amp;quot;
	&amp;quot;crypto/x509/pkix&amp;quot;
	&amp;quot;math/big&amp;quot;
	&amp;quot;crypto/x509&amp;quot;
	&amp;quot;encoding/pem&amp;quot;
	&amp;quot;net&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
	&amp;quot;crypto/rsa&amp;quot;
)

const (
	certFileName = &amp;quot;cert.pem&amp;quot;
	keyFileName  = &amp;quot;key.pem&amp;quot;
)

func main() {
	max := new(big.Int).Lsh(big.NewInt(1), 128)
	serialNumber, _ := rand.Int(rand.Reader, max)
	subject := pkix.Name{
		Organization:       []string{&amp;quot;Manning Publications Co.&amp;quot;},
		OrganizationalUnit: []string{&amp;quot;Books&amp;quot;},
		CommonName:         &amp;quot;Go Web Programming&amp;quot;,
	}

	template := x509.Certificate{
		SerialNumber: serialNumber,
		Subject:      subject,
		NotBefore:    time.Now(),
		NotAfter:     time.Now().Add(365 * 24 * time.Hour),
		KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
		ExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},
		IPAddresses:  []net.IP{net.ParseIP(&amp;quot;127.0.0.1&amp;quot;)},
	}

	pk, _ := rsa.GenerateKey(rand.Reader, 2048)

	derBytes, _ := x509.CreateCertificate(rand.Reader, &amp;amp;template, &amp;amp;template, &amp;amp;pk.PublicKey, pk)
	certOut, _ := os.Create(certFileName)
	pem.Encode(certOut, &amp;amp;pem.Block{Type: &amp;quot;CERTIFICATE&amp;quot;, Bytes: derBytes})
	certOut.Close()

	keyOut, _ := os.Create(keyFileName)
	pem.Encode(keyOut, &amp;amp;pem.Block{Type: &amp;quot;RSA PRIVATE KEY&amp;quot;, Bytes: x509.MarshalPKCS1PrivateKey(pk)})
	keyOut.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s code is reference from the simple code in book &lt;a href=&#34;https://github.com/sausheong/gwp.git&#34; title=&#34;Go Web Programming code repository&#34;&gt;&amp;lt;&lt;strong&gt;Go Web Programming&lt;/strong&gt;&amp;gt;&lt;/a&gt; and this link is &lt;a href=&#34;http://gitbus.com/alimy/dugo.git&#34; title=&#34;My Go Programming code repository&#34;&gt;&lt;em&gt;My Code repository&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go - See what packages my app imports</title>
      <link>http://alimy.me/post/dev_201604101827/</link>
      <pubDate>Sun, 10 Apr 2016 18:27:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201604101827/</guid>
      <description>&lt;p&gt;It’s often practical to see what packages your app is importing. Unfortunately there isn’t a simple way to do that, however it is doable via the go list tool and using templates.&lt;/p&gt;

&lt;p&gt;Go to your app and run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example with the clirescue refactoring example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoBootcamp/clirescue
$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; | xargs go list -f &#39;{{if not .Standard}}{{.ImportPath}}{{end}}&#39;
github.com/GoBootcamp/clirescue/cmdutil
github.com/GoBootcamp/clirescue/trackerapi
github.com/GoBootcamp/clirescue/user
github.com/codegangsta/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want the list to also contain standard packages, edit the template and use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go list -f &#39;{{join .Deps &amp;quot;\n&amp;quot;}}&#39; |  xargs go list -f &#39;{{.ImportPath}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go - EBNF</title>
      <link>http://alimy.me/post/dev_201604021445/</link>
      <pubDate>Sat, 02 Apr 2016 14:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201604021445/</guid>
      <description>&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;

&lt;p&gt;The syntax is specified using Extended Backus-Naur Form (EBNF):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Production  = production_name &amp;quot;=&amp;quot; [ Expression ] &amp;quot;.&amp;quot; .
Expression  = Alternative { &amp;quot;|&amp;quot; Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ &amp;quot;…&amp;quot; token ] | Group | Option | Repetition .
Group       = &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Option      = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Repetition  = &amp;quot;{&amp;quot; Expression &amp;quot;}&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Productions are expressions constructed from terms and the following operators, in increasing precedence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lower-case production names are used to identify lexical tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes &amp;ldquo;&amp;rdquo; or back quotes ``.

The form a … b represents the set of characters from a through b as alternatives. The horizontal ellipsis … is also used elsewhere in the spec to informally denote various enumerations or code snippets that are not further specified. The character … (as opposed to the three characters &amp;hellip;) is not a token of the Go language.&lt;/p&gt;

&lt;h3 id=&#34;go-ebnf&#34;&gt;Go EBNF&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newline        = /* the Unicode code point U+000A */ .
unicode_char   = /* an arbitrary Unicode code point except newline */ .
unicode_letter = /* a Unicode code point classified as &amp;quot;Letter&amp;quot; */ .
unicode_digit  = /* a Unicode code point classified as &amp;quot;Number, decimal digit&amp;quot; */ .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Letters and digits&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;letter        = unicode_letter | &amp;quot;_&amp;quot; .
decimal_digit = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; .
octal_digit   = &amp;quot;0&amp;quot; … &amp;quot;7&amp;quot; .
hex_digit     = &amp;quot;0&amp;quot; … &amp;quot;9&amp;quot; | &amp;quot;A&amp;quot; … &amp;quot;F&amp;quot; | &amp;quot;a&amp;quot; … &amp;quot;f&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;identifier = letter { letter | unicode_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keywords&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators and Delimiters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;     +=    &amp;amp;=     &amp;amp;&amp;amp;    ==    !=    (    )    +
|     -=    |=     ||    &amp;lt;     &amp;lt;=    [    ]    -
^     *=    ^=     &amp;lt;-    &amp;gt;     &amp;gt;=    {    }    *
/    &amp;lt;&amp;lt;    /=    &amp;lt;&amp;lt;=    ++    =     :=    ,    ;
%    &amp;gt;&amp;gt;    %=    &amp;gt;&amp;gt;=    --    !     ...   .    :
     &amp;amp;^          &amp;amp;^=
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integer literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( &amp;quot;1&amp;quot; … &amp;quot;9&amp;quot; ) { decimal_digit } .
octal_lit   = &amp;quot;0&amp;quot; { octal_digit } .
hex_lit     = &amp;quot;0&amp;quot; ( &amp;quot;x&amp;quot; | &amp;quot;X&amp;quot; ) hex_digit { hex_digit } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Floating-point literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float_lit = decimals &amp;quot;.&amp;quot; [ decimals ] [ exponent ] |
            decimals exponent |
            &amp;quot;.&amp;quot; decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( &amp;quot;e&amp;quot; | &amp;quot;E&amp;quot; ) [ &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; ] decimals .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imaginary literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imaginary_lit = (decimals | float_lit) &amp;quot;i&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rune literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\a   U+0007 alert or bell
\b   U+0008 backspace
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 horizontal tab
\v   U+000b vertical tab
\\   U+005c backslash
\&#39;   U+0027 single quote  (valid escape only within rune literals)
\&amp;quot;   U+0022 double quote  (valid escape only within string literals)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;rune_lit         = &amp;quot;&#39;&amp;quot; ( unicode_value | byte_value ) &amp;quot;&#39;&amp;quot; .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` &amp;quot;x&amp;quot; hex_digit hex_digit .
little_u_value   = `\` &amp;quot;u&amp;quot; hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` &amp;quot;U&amp;quot; hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; | &amp;quot;f&amp;quot; | &amp;quot;n&amp;quot; | &amp;quot;r&amp;quot; | &amp;quot;t&amp;quot; | &amp;quot;v&amp;quot; | `\` | &amp;quot;&#39;&amp;quot; | `&amp;quot;` ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = &amp;quot;`&amp;quot; { unicode_char | newline } &amp;quot;`&amp;quot; .
interpreted_string_lit = `&amp;quot;` { unicode_value | byte_value } `&amp;quot;` .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type      = TypeName | TypeLit | &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
            SliceType | MapType | ChannelType .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Numeric types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uint8       the set of all unsigned  8-bit integers (0 to 255)
uint16      the set of all unsigned 16-bit integers (0 to 65535)
uint32      the set of all unsigned 32-bit integers (0 to 4294967295)
uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)

int8        the set of all signed  8-bit integers (-128 to 127)
int16       the set of all signed 16-bit integers (-32768 to 32767)
int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)
int64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

float32     the set of all IEEE-754 32-bit floating-point numbers
float64     the set of all IEEE-754 64-bit floating-point numbers

complex64   the set of all complex numbers with float32 real and imaginary parts
complex128  the set of all complex numbers with float64 real and imaginary parts

byte        alias for uint8
rune        alias for int32

uint     either 32 or 64 bits
int      same size as uint
uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Array types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ArrayType   = &amp;quot;[&amp;quot; ArrayLength &amp;quot;]&amp;quot; ElementType .
ArrayLength = Expression .
ElementType = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SliceType = &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;make([]T, length, capacity)
make([]int, 50, 100)
new([100]int)[0:50]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Struct types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StructType     = &amp;quot;struct&amp;quot; &amp;quot;{&amp;quot; { FieldDecl &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
AnonymousField = [ &amp;quot;*&amp;quot; ] TypeName .
Tag            = string_lit .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pointer types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PointerType = &amp;quot;*&amp;quot; BaseType .
BaseType    = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionType   = &amp;quot;func&amp;quot; Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = &amp;quot;(&amp;quot; [ ParameterList [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
ParameterList  = ParameterDecl { &amp;quot;,&amp;quot; ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ &amp;quot;...&amp;quot; ] Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interface types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InterfaceType      = &amp;quot;interface&amp;quot; &amp;quot;{&amp;quot; { MethodSpec &amp;quot;;&amp;quot; } &amp;quot;}&amp;quot; .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MapType     = &amp;quot;map&amp;quot; &amp;quot;[&amp;quot; KeyType &amp;quot;]&amp;quot; ElementType .
KeyType     = Type .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Channel types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ChannelType = ( &amp;quot;chan&amp;quot; | &amp;quot;chan&amp;quot; &amp;quot;&amp;lt;-&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; &amp;quot;chan&amp;quot; ) ElementType .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;chan T          // can be used to send and receive values of type T
chan&amp;lt;- float64  // can only be used to send float64s
&amp;lt;-chan int      // can only be used to receive ints

chan&amp;lt;- chan int    // same as chan&amp;lt;- (chan int)
chan&amp;lt;- &amp;lt;-chan int  // same as chan&amp;lt;- (&amp;lt;-chan int)
&amp;lt;-chan &amp;lt;-chan int  // same as &amp;lt;-chan (&amp;lt;-chan int)
chan (&amp;lt;-chan int)

make(chan int, 100)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type identity&lt;/p&gt;

&lt;p&gt;Two types are either identical or different.&lt;/p&gt;

&lt;p&gt;Two named types are identical if their type names originate in the same TypeSpec. A named and an unnamed type are always different. Two unnamed types are identical if the corresponding type literals are identical, that is, if they have the same literal structure and corresponding components have identical types. In detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Two &lt;strong&gt;array&lt;/strong&gt; types are identical if they have identical element types and the same array length.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;slice&lt;/strong&gt; types are identical if they have identical element types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;struct&lt;/strong&gt; types are identical if they have the same sequence of fields, and if corresponding fields have the same names, and identical types, and identical tags. Two anonymous fields are considered to have the same name. Lower-case field names from different packages are always different.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;pointer&lt;/strong&gt; types are identical if they have identical base types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;function&lt;/strong&gt; types are identical if they have the same &lt;em&gt;number of parameters and result values, corresponding parameter and result types&lt;/em&gt; are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;interface&lt;/strong&gt; types are identical if they have the same set of methods with the same names and identical function types. Lower-case method names from different packages are always different. The order of the methods is irrelevant.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;map&lt;/strong&gt; types are identical if they have identical key and value types.&lt;/li&gt;
&lt;li&gt;Two &lt;strong&gt;channel&lt;/strong&gt; types are identical if they have identical value types and the same direction.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignability&lt;/p&gt;

&lt;p&gt;A value x is assignable to a variable of type T (&amp;ldquo;x is assignable to T&amp;rdquo;) in any of these cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;x&amp;rsquo;s type is identical to T.&lt;/li&gt;
&lt;li&gt;x&amp;rsquo;s type V and T have identical underlying types and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;T is an interface type and x implements T.&lt;/li&gt;
&lt;li&gt;x is a bidirectional channel value, T is a channel type, x&amp;rsquo;s type V and T have identical element types, and at least one of V or T is not a named type.&lt;/li&gt;
&lt;li&gt;x is the predeclared identifier nil and T is a pointer, function, slice, map, channel, or interface type.&lt;/li&gt;
&lt;li&gt;x is an untyped constant representable by a value of type T.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blocks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Block = &amp;quot;{&amp;quot; StatementList &amp;quot;}&amp;quot; .
StatementList = { Statement &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Declarations and scope&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Predeclared identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Types:
    bool byte complex64 complex128 error float32 float64
    int int8 int16 int32 int64 rune string
    uint uint8 uint16 uint32 uint64 uintptr

Constants:
    true false iota

Zero value:
    nil

Functions:
    append cap close complex copy delete imag len
    make new panic print println real recover
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exported identifiers&lt;/p&gt;

&lt;p&gt;An identifier may be exported to permit access to it from another package. An identifier is exported if both:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the first character of the identifier&amp;rsquo;s name is a Unicode upper case letter (Unicode class &amp;ldquo;Lu&amp;rdquo;); and&lt;/li&gt;
&lt;li&gt;the identifier is declared in the package block or it is a field name or method name.
All other identifiers are not exported.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uniqueness of identifiers&lt;/p&gt;

&lt;p&gt;Given a set of identifiers, an identifier is called unique if it is different from every other in the set. Two identifiers are different if they are spelled differently, or if they appear in different packages and are not exported. Otherwise, they are the same.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Constant declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ConstDecl      = &amp;quot;const&amp;quot; ( ConstSpec | &amp;quot;(&amp;quot; { ConstSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ConstSpec      = IdentifierList [ [ Type ] &amp;quot;=&amp;quot; ExpressionList ] .

IdentifierList = identifier { &amp;quot;,&amp;quot; identifier } .
ExpressionList = Expression { &amp;quot;,&amp;quot; Expression } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iota
Within a constant declaration, the predeclared identifier iota represents successive untyped integer constants. It is reset to 0 whenever the reserved word const appears in the source and increments after each ConstSpec. It can be used to construct a set of related constants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ( // iota is reset to 0
    c0 = iota  // c0 == 0
    c1 = iota  // c1 == 1
    c2 = iota  // c2 == 2
)

const ( // iota is reset to 0
    a = 1 &amp;lt;&amp;lt; iota  // a == 1
    b = 1 &amp;lt;&amp;lt; iota  // b == 2
    c = 3          // c == 3  (iota is not used but still incremented)
    d = 1 &amp;lt;&amp;lt; iota  // d == 8
)

const ( // iota is reset to 0
    u         = iota * 42  // u == 0     (untyped integer constant)
    v float64 = iota * 42  // v == 42.0  (float64 constant)
    w         = iota * 42  // w == 84    (untyped integer constant)
)

const x = iota  // x == 0  (iota has been reset)
const y = iota  // y == 0  (iota has been reset)

const (
    bit0, mask0 = 1 &amp;lt;&amp;lt; iota, 1&amp;lt;&amp;lt;iota - 1  // bit0 == 1, mask0 == 0
    bit1, mask1                           // bit1 == 2, mask1 == 1
    _, _                                  // skips iota == 2
    bit3, mask3                           // bit3 == 8, mask3 == 7
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypeDecl     = &amp;quot;type&amp;quot; ( TypeSpec | &amp;quot;(&amp;quot; { TypeSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
TypeSpec     = identifier Type .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;type IntArray [16]int

type (
    Point struct{ x, y float64 }
    Polar Point
)

type TreeNode struct {
    left, right *TreeNode
    value *Comparable
}

type Block interface {
    BlockSize() int
    Encrypt(src, dst []byte)
    Decrypt(src, dst []byte)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The declared type does not inherit any methods bound to the existing type, but the method set of an interface type or of elements of a composite type remains unchanged:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A Mutex is a data type with two methods, Lock and Unlock.
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }

// NewMutex has the same composition as Mutex but its method set is empty.
type NewMutex Mutex

// The method set of the base type of PtrMutex remains unchanged,
// but the method set of PtrMutex is empty.
type PtrMutex *Mutex

// The method set of *PrintableMutex contains the methods
// Lock and Unlock bound to its anonymous field Mutex.
type PrintableMutex struct {
    Mutex
}

// MyBlock is an interface type that has the same method set as Block.
type MyBlock Block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A type declaration may be used to define a different boolean, numeric, or string type and attach methods to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type TimeZone int

const (
    EST TimeZone = -(5 + iota)
    CST
    MST
    PST
)

func (tz TimeZone) String() string {
    return fmt.Sprintf(&amp;quot;GMT%+dh&amp;quot;, tz)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VarDecl     = &amp;quot;var&amp;quot; ( VarSpec | &amp;quot;(&amp;quot; { VarSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
VarSpec     = IdentifierList ( Type [ &amp;quot;=&amp;quot; ExpressionList ] | &amp;quot;=&amp;quot; ExpressionList ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Short variable declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ShortVarDecl = IdentifierList &amp;quot;:=&amp;quot; ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is shorthand for a regular variable declaration with initializer expressions but no types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;var&amp;quot; IdentifierList = ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() returns two values
_, y, _ := coord(p)  // coord() returns three values; only interested in y coordinate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike regular variable declarations, a short variable declaration may redeclare variables provided they were originally declared earlier in the same block (or the parameter lists if the block is the function body) with the same type, and at least one of the non-blank variables is new. As a consequence, redeclaration can only appear in a multi-variable short declaration. Redeclaration does not introduce a new variable; it just assigns a new value to the original.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // redeclares offset
a, a := 1, 2       // illegal: double declaration of a or no new variable if a was declared elsewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Short variable declarations may appear only inside functions. In some contexts such as the initializers for &amp;ldquo;if&amp;rdquo;, &amp;ldquo;for&amp;rdquo;, or &amp;ldquo;switch&amp;rdquo; statements, they can be used to declare local temporary variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionDecl = &amp;quot;func&amp;quot; FunctionName ( Function | Signature ) .
FunctionName = identifier .
Function     = Signature FunctionBody .
FunctionBody = Block .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodDecl   = &amp;quot;func&amp;quot; Receiver MethodName ( Function | Signature ) .
Receiver     = Parameters .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Operand     = Literal | OperandName | MethodExpr | &amp;quot;(&amp;quot; Expression &amp;quot;)&amp;quot; .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Qualified identifiers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QualifiedIdent = PackageName &amp;quot;.&amp;quot; identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Composite literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | &amp;quot;[&amp;quot; &amp;quot;...&amp;quot; &amp;quot;]&amp;quot; ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = &amp;quot;{&amp;quot; [ ElementList [ &amp;quot;,&amp;quot; ] ] &amp;quot;}&amp;quot; .
ElementList   = KeyedElement { &amp;quot;,&amp;quot; KeyedElement } .
KeyedElement  = [ Key &amp;quot;:&amp;quot; ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function literals&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FunctionLit = &amp;quot;func&amp;quot; Function .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Primary expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PrimaryExpr =
    Operand |
    Conversion |
    PrimaryExpr Selector |
    PrimaryExpr Index |
    PrimaryExpr Slice |
    PrimaryExpr TypeAssertion |
    PrimaryExpr Arguments .

Selector       = &amp;quot;.&amp;quot; identifier .
Index          = &amp;quot;[&amp;quot; Expression &amp;quot;]&amp;quot; .
Slice          = &amp;quot;[&amp;quot; ( [ Expression ] &amp;quot;:&amp;quot; [ Expression ] ) |
                  ( [ Expression ] &amp;quot;:&amp;quot; Expression &amp;quot;:&amp;quot; Expression )
                 &amp;quot;]&amp;quot; .
TypeAssertion  = &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
Arguments      = &amp;quot;(&amp;quot; [ ( ExpressionList | Type [ &amp;quot;,&amp;quot; ExpressionList ] ) [ &amp;quot;...&amp;quot; ] [ &amp;quot;,&amp;quot; ] ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Selectors&lt;/p&gt;

&lt;p&gt;For a primary expression x that is not a package name, the selector expression&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;denotes the field or method f of the value x (or sometimes *x; see below). The identifier f is called the (field or method) selector; it must not be the blank identifier. The type of the selector expression is the type of f. If x is a package name, see the section on qualified identifiers.&lt;/p&gt;

&lt;p&gt;A selector f may denote a field or method f of a type T, or it may refer to a field or method f of a nested anonymous field of T. The number of anonymous fields traversed to reach f is called its depth in T. The depth of a field or method f declared in T is zero. The depth of a field or method f declared in an anonymous field A in T is the depth of f in A plus one.&lt;/p&gt;

&lt;p&gt;The following rules apply to selectors:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For a value x of type T or *T where T is not a pointer or interface type, x.f denotes the field or method at the shallowest depth in T where there is such an f. If there is not exactly one f with shallowest depth, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;For a value x of type I where I is an interface type, x.f denotes the actual method with name f of the dynamic value of x. If there is no method with name f in the method set of I, the selector expression is illegal.&lt;/li&gt;
&lt;li&gt;As an exception, if the type of x is a named pointer type and (*x).f is a valid selector expression denoting a field (but not a method), x.f is shorthand for (*x).f.&lt;/li&gt;
&lt;li&gt;In all other cases, x.f is illegal.&lt;/li&gt;
&lt;li&gt;If x is of pointer type and has the value nil and x.f denotes a struct field, assigning to or evaluating x.f causes a run-time panic.&lt;/li&gt;
&lt;li&gt;If x is of interface type and has the value nil, calling or evaluating the method x.f causes a run-time panic.
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MethodExpr    = ReceiverType &amp;quot;.&amp;quot; MethodName .
ReceiverType  = TypeName | &amp;quot;(&amp;quot; &amp;quot;*&amp;quot; TypeName &amp;quot;)&amp;quot; | &amp;quot;(&amp;quot; ReceiverType &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Index expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[x]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slice expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[low : high]

a[low : high : max]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type assertions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.(T)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f(a1, a2, … an)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Passing arguments to &amp;hellip; parameters&lt;/p&gt;

&lt;p&gt;Given the function and calls&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Greeting(prefix string, who ...string)
Greeting(&amp;quot;nobody&amp;quot;)
Greeting(&amp;quot;hello:&amp;quot;, &amp;quot;Joe&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Eileen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the slice s and call&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s := []string{&amp;quot;James&amp;quot;, &amp;quot;Jasmine&amp;quot;}
Greeting(&amp;quot;goodbye:&amp;quot;, s...)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = &amp;quot;||&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | rel_op | add_op | mul_op .
rel_op     = &amp;quot;==&amp;quot; | &amp;quot;!=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; | &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; .
add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .

unary_op   = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;^&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Operator precedence&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Precedence    Operator
5             *  /  %  &amp;lt;&amp;lt;  &amp;gt;&amp;gt;  &amp;amp;  &amp;amp;^
4             +  -  |  ^
3             ==  !=  &amp;lt;  &amp;lt;=  &amp;gt;  &amp;gt;=
2             &amp;amp;&amp;amp;
1             ||
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arithmetic operators&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sum                    integers, floats, complex values, strings&lt;/li&gt;
&lt;li&gt;difference             integers, floats, complex values&lt;/li&gt;
&lt;li&gt;product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp;    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&amp;amp;^   bit clear (AND NOT)    integers&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;   left shift             integer &amp;lt;&amp;lt; unsigned integer
&amp;gt;&amp;gt;   right shift            integer &amp;gt;&amp;gt; unsigned integer
```&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comparison operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==    equal
!=    not equal
&amp;lt;     less
&amp;lt;=    less or equal
&amp;gt;     greater
&amp;gt;=    greater or equal
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;&amp;amp;    conditional AND    p &amp;amp;&amp;amp; q  is  &amp;quot;if p then q else false&amp;quot;
||    conditional OR     p || q  is  &amp;quot;if p then true else q&amp;quot;
!     NOT                !p      is  &amp;quot;not p&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Address operators&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;x
&amp;amp;a[f(2)]
&amp;amp;Point{2, 3}
*p
*pf(x)

var x *int = nil
*x   // causes a run-time panic
&amp;amp;*x  // causes a run-time panic
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Receive operator&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v1 := &amp;lt;-ch
v2 = &amp;lt;-ch
f(&amp;lt;-ch)
&amp;lt;-strobe  // wait until clock pulse and discard received value

x, ok = &amp;lt;-ch
x, ok := &amp;lt;-ch
var x, ok = &amp;lt;-ch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Conversion = Type &amp;quot;(&amp;quot; Expression [ &amp;quot;,&amp;quot; ] &amp;quot;)&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Statement =
    Declaration | LabeledStmt | SimpleStmt |
    GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
    FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
    DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Empty statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EmptyStmt = .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Labeled statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LabeledStmt = Label &amp;quot;:&amp;quot; Statement .
Label       = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExpressionStmt = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following built-in functions are not permitted in statement context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SendStmt = Channel &amp;quot;&amp;lt;-&amp;quot; Expression .
Channel  = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IncDec statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IncDecStmt = Expression ( &amp;quot;++&amp;quot; | &amp;quot;--&amp;quot; ) .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assignments&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Assignment = ExpressionList assign_op ExpressionList .

assign_op = [ add_op | mul_op ] &amp;quot;=&amp;quot; .

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IfStmt = &amp;quot;if&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] Expression Block [ &amp;quot;else&amp;quot; ( IfStmt | Block ) ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expression switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExprSwitchStmt = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] [ Expression ] &amp;quot;{&amp;quot; { ExprCaseClause } &amp;quot;}&amp;quot; .
ExprCaseClause = ExprSwitchCase &amp;quot;:&amp;quot; StatementList .
ExprSwitchCase = &amp;quot;case&amp;quot; ExpressionList | &amp;quot;default&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type switches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch x.(type) {
// cases
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;TypeSwitchStmt  = &amp;quot;switch&amp;quot; [ SimpleStmt &amp;quot;;&amp;quot; ] TypeSwitchGuard &amp;quot;{&amp;quot; { TypeCaseClause } &amp;quot;}&amp;quot; .
TypeSwitchGuard = [ identifier &amp;quot;:=&amp;quot; ] PrimaryExpr &amp;quot;.&amp;quot; &amp;quot;(&amp;quot; &amp;quot;type&amp;quot; &amp;quot;)&amp;quot; .
TypeCaseClause  = TypeSwitchCase &amp;quot;:&amp;quot; StatementList .
TypeSwitchCase  = &amp;quot;case&amp;quot; TypeList | &amp;quot;default&amp;quot; .
TypeList        = Type { &amp;quot;,&amp;quot; Type } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ForStmt = &amp;quot;for&amp;quot; [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ForClause = [ InitStmt ] &amp;quot;;&amp;quot; [ Condition ] &amp;quot;;&amp;quot; [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;RangeClause = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] &amp;quot;range&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Range expression                          1st value          2nd value

array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, &amp;lt;-chan E       element  e  E
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GoStmt = &amp;quot;go&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelectStmt = &amp;quot;select&amp;quot; &amp;quot;{&amp;quot; { CommClause } &amp;quot;}&amp;quot; .
CommClause = CommCase &amp;quot;:&amp;quot; StatementList .
CommCase   = &amp;quot;case&amp;quot; ( SendStmt | RecvStmt ) | &amp;quot;default&amp;quot; .
RecvStmt   = [ ExpressionList &amp;quot;=&amp;quot; | IdentifierList &amp;quot;:=&amp;quot; ] RecvExpr .
RecvExpr   = Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Return statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReturnStmt = &amp;quot;return&amp;quot; [ ExpressionList ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Break statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BreakStmt = &amp;quot;break&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Continue statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ContinueStmt = &amp;quot;continue&amp;quot; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goto statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GotoStmt = &amp;quot;goto&amp;quot; Label .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fallthrough statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FallthroughStmt = &amp;quot;fallthrough&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defer statements&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DeferStmt = &amp;quot;defer&amp;quot; Expression .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Source file organization&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SourceFile       = PackageClause &amp;quot;;&amp;quot; { ImportDecl &amp;quot;;&amp;quot; } { TopLevelDecl &amp;quot;;&amp;quot; } .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Package clause&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PackageClause  = &amp;quot;package&amp;quot; PackageName .
PackageName    = identifier .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Import declarations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ImportDecl       = &amp;quot;import&amp;quot; ( ImportSpec | &amp;quot;(&amp;quot; { ImportSpec &amp;quot;;&amp;quot; } &amp;quot;)&amp;quot; ) .
ImportSpec       = [ &amp;quot;.&amp;quot; | PackageName ] ImportPath .
ImportPath       = string_lit .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Import declaration          Local name of Sin

import   &amp;quot;lib/math&amp;quot;         math.Sin
import m &amp;quot;lib/math&amp;quot;         m.Sin
import . &amp;quot;lib/math&amp;quot;         Sin

import _ &amp;quot;lib/math&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Size and alignment guarantees&lt;/p&gt;

&lt;p&gt;For the numeric types, the following sizes are guaranteed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type                                 size in bytes

byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following minimal alignment properties are guaranteed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a variable x of any type: unsafe.Alignof(x) is at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of array type: unsafe.Alignof(x) is the same as unsafe.Alignof(x[0]), but at least 1.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A struct or array type has size zero if it contains no fields (or elements, respectively) that have a size greater than zero. Two distinct zero-size variables may have the same address in memory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: The Go Programming Language Specification is &lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile:简介</title>
      <link>http://alimy.me/post/dev_201603242255/</link>
      <pubDate>Thu, 24 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603242255/</guid>
      <description>&lt;p&gt;Make 可以简化编译过程，如果有一个近百个源文件的项目，如果有个文件更改后工程需要重新编译，那么一直用gcc -c a.c这些个命令敲来敲去会屎人的。运行make时候，他会寻找指定目录下（默认是 .）的 Makefile 文件并且分析依赖关系进行必要的编译。&lt;/p&gt;

&lt;h3 id=&#34;makefile文件的基本格式很简单&#34;&gt;Makefile文件的基本格式很简单：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;目标文件： 依赖文件1 依赖文件2 依赖文件3 。。。。
[tab]编译命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的意思是目标文件是依赖于冒号后面几个文件的，如果这些依赖文件有更新的，那么其目标文件也需要更新。&lt;/p&gt;

&lt;p&gt;Makefile 中可能有很多以上条目，他们共同组成了一个有向无回路图（DAG图），这样可以传递依赖。make 命令会把 Makefile 文件的第一个目标文件作为默认目标，当执行 make 命令时，make 会考察这个目标文件的依赖关系，进行编译。也可以指定，比如这个 Makefile：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main: a.o b.o
[tab]gcc -o main a.o b.o
a.o : a.c c.h
[tab]gcc -c a.c -o a.o
b.o: b.c c.h
[tab]gcc -c b.c -o b.o
// [tab]的意思是这里用tab字符代替，不能有其他的什么字符
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在命令行里执行make，分析关系并生成main，如果是make a.o那么他只会编译到 a.o 。

当然我们还可以设定伪目标，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clean：
[tab]rm a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样执行make clean的时候就把.o文件清除了,这里不会生成什么文件,只进行一些操作,更清楚的做法是在前面加上以下语句:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY : clean install dest [其他伪目标]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面来说下变量，Makefile 里的变量按惯例是大写，包括数字字母下划线。当我们需要一个变量的值的时候，通常用 ${NAME} 或者 $(NAME)。他有好几种变量定义的方法。&lt;/p&gt;

&lt;p&gt;首先是常规法，就是&lt;code&gt;A=content&lt;/code&gt;，等号两边可以有空格，和shell不一样。&lt;/p&gt;

&lt;p&gt;其次是递归法，比如&lt;code&gt;A=$(B)，B=$(C)，C=haha&lt;/code&gt;，那么当寻找A的定义的时候就会去找B，然后再找C，变量展开的时候就是当他被引用的时候，这种方法效率比较低，因为如果他引用了函数，那么每次展开都要调用函数，而且可能会出现无限递归&lt;code&gt;（A=$(B),B=$(A)）&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后是直接展开法。这个很容易理解，就像是c语言是按照顺序执行的，当变量定义的时候这个变量就已经展开了（如果他引用了变量A，引用的是他定义时候A的值），当被引用的时候就直接用他代表的字符串替代。但是他用的不是等号 是 := ,比如 &lt;code&gt;A:=hello，A:=$(B)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;还有嵌套定义： &lt;code&gt;A=B,B=haha,V=$($(A))&lt;/code&gt;类似于这种的V的值是haha&lt;/p&gt;

&lt;p&gt;最后是替换引用定义，他会替换后缀，有个例子很好 &lt;code&gt;foo := a.o b.o c.o ,bar := $(foo:.o=.c)&lt;/code&gt;,我们可以知道bar的值就是&lt;code&gt;a.c b.c c.c&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;变量还有分类&#34;&gt;变量还有分类：&lt;/h3&gt;

&lt;p&gt;1.预定义变量，当使用隐式规则的时候他会派上用场，常用的有以下几个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC   c编译器的名称（默认gcc？）
CPP    c预编译器名称（默认$(CC) -E）
CXX c++编译器的名称(默认g++)
CFLAGS c编译器选项,无默认值
CXXFLAGS c++编译器选项,无默认值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.自动变量,常用有以下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$@:表示当前规则中的完整目标文件名
$*:不包含扩展名的目标文件名
$&amp;lt;:当前规则中第一个依赖文件名
$^:当前规则所有文件列表
$%:当目标为库文件时,表示库文件名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.环境变量,Makefile对环境变量是可见的,可以引用.&lt;/p&gt;

&lt;p&gt;Makefile还有个常用的东东就是隐式规则,make会自己推导.比如说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c：a.o b.o
[tab]gcc -o c a.o b.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时我们可以省略下面的命令，直接用第一行就行。make自动分析生成a，此时预定义变量就有用了，CC，CFLAGS等也派上了用场。&lt;/p&gt;

&lt;p&gt;由于把握不了隐式规则的底线和能力，我还是觉得隐式规则应用的不要太多太复杂影响阅读为好。。&lt;/p&gt;

&lt;h3 id=&#34;make的工作过程大概是以下几步&#34;&gt;make的工作过程大概是以下几步&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;读取Makefile，根据make的选项查找Makefile
初始化Makefile，将Makefile中的变量进行替换，如果Makefile中包含其他文件，则加载他&lt;/li&gt;
&lt;li&gt;解释规则，对其中的执行规则进行解析，推导隐藏规则，为目标建立关系链&lt;/li&gt;
&lt;li&gt;分析变更，根据依赖关系和时间戳，判断有木有变化。&lt;/li&gt;
&lt;li&gt;执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;编译的基本流程&#34;&gt;编译的基本流程&lt;/h3&gt;

&lt;p&gt;基本过程是以下四步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;c(.c) 和 c++(.cc, .cpp, .cxx) 的源文件&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;gcc -E a.c -o a.i   // 如果不加-o参数，gcc会把处理过的源文件放到标准输出中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.预处理后的源文件。c源文件预处理后后缀为 .i , c++为 .ii 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -S a.i  //会在当前文件夹下生成a.s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.编译后生成的汇编源代码。后缀为 .s , .S 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -c a.s
//只进行汇编生成目标文件,.o结尾的目标文件可以用
//(ar crv libabc.a a.o b.o c.o )打包成形如lib×××.a的静态库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.目标文件与库文件进行链接，生成可执行文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc a.o //在当前文件夹下生成a.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中任何一种状态，用 gcc 如果不加 -c ， -E ， -S 选项都会直接生成可执行文件，如果加上了选项，可以由之前任一状态生成所需要的文件（如 gcc -S a.c 可以直接生成 a.s，gcc -c a.i 可以直接生成 a.o ）。如果是c++直接换用g++命令就行。&lt;/p&gt;

&lt;p&gt;另外 &lt;code&gt;gcc -v&lt;/code&gt;可以输出编译过程的配置和版本信息。&lt;/p&gt;

&lt;h3 id=&#34;gcc-警告提示&#34;&gt;gcc 警告提示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-fsyntax-only   检查程序中的语法错误，不产生输出信息
-w 禁止所有警告信息
-Wunused 声明了木有用
-Wmain main函数定义不常规
-Wall 提供所有警告
-pedantic-errors 允许ansi c标准列出的全部信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他常用选项&#34;&gt;其他常用选项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-g 加入调试信息，gdb调试的时候要用。&lt;/li&gt;
&lt;li&gt;-On 优化选项。这里的n可以用0-3来替代。数字越大优化效果越好，-O0表示不进行优化。优化可能针对硬件进行优化，也可能针对代码优化（删除公共表达式，循环优化，删除无用信息）。优化可能大大增加编译时间和内存，他通常会将循环或函数展开，使他们以内联的方式进行，不是通过函数调用，这样可以显著提高性能，不过调试最好不要用优化选项。&lt;/li&gt;
&lt;li&gt;-l 指定要用到的库，注意这里之后要加的是库的名字，如果是多线程，可能要用到pthread库，那么此时就要加上 -lpthread ，这样gcc就会到库目录中找名为libpthread.so（lib×××.so）的文件，如果是静态库的话是libpthread.a( lib×××.a)（貌似gcc先找动态库，再找静态库？）。&lt;/li&gt;
&lt;li&gt;-L 指定所需要的库所在的文件夹。系统先寻找标准位置，再寻找指定位置（标准库一般在/lib或/usr/lib）。&lt;/li&gt;
&lt;li&gt;-I 指定头文件的寻找路径。先找标准的，后找指定的（标准的一般在/usr/include）。&lt;/li&gt;
&lt;li&gt;-static 只用静态库,再拿上面那个例子，如果加上-static，系统就会只寻找libpthread.a文件。&lt;/li&gt;
&lt;li&gt;-shared 生成动态库（共享库）文件，形如 libxxx.so （gcc -shared dang.o -o libdang.so）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(注意: 原文的链接在 &lt;a href=&#34;http://wdxtub.com/2016/03/20/make-gcc-guide/&#34; title=&#34;GCC Makefile&#34;&gt;&lt;em&gt;这里&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>http://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;

&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;

&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;

&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.

… that’s it. No, really, that’s it. Bolt is basically a bunch of nested maps. And this simplicity is what makes it so easy to use. There’s no tables to set up, no schemas, no complex querying language to struggle with. Let’s look at a bolt hello world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    “fmt”
    “log”

    “github.com/boltdb/bolt”
)

var world = []byte(“world”)

func main() {
    db, err := bolt.Open(“/home/nate/foo/bolt.db”, 0644, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    key := []byte(“hello”)
    value := []byte(“Hello World!”)

    // store some data
    err = db.Update(func(tx *bolt.Tx) error {
        bucket, err := tx.CreateBucketIfNotExists(world)
        if err != nil {
            return err
        }

        err = bucket.Put(key, value)
        if err != nil {
            return err
        }
        return nil
    })

    if err != nil {
        log.Fatal(err)
    }

    // retrieve the data
    err = db.View(func(tx *bolt.Tx) error {
        bucket := tx.Bucket(world)
        if bucket == nil {
            return fmt.Errorf(“Bucket %q not found!”, world)
        }

        val := bucket.Get(key)
        fmt.Println(string(val))

        return nil
    })

    if err != nil {
        log.Fatal(err)
    }
}

// output:
// Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know what you’re thinking - that seems kinda long. But keep in mind, I fully handled all errors in at least a semi-proper way, and we’re doing all this:&lt;/p&gt;

&lt;p&gt;1.) creating a database&lt;br /&gt;
2.) creating some structure (the “world” bucket)&lt;br /&gt;
3.) storing data to the structure&lt;br /&gt;
4.) retrieving data from the structure.&lt;/p&gt;

&lt;p&gt;I think that’s not too bad in 54 lines of code.&lt;/p&gt;

&lt;p&gt;So let’s look at what that example is really doing. First we call bolt.Open to get the database. This will create the file if necessary, or open it if it exists.&lt;/p&gt;

&lt;p&gt;All reads from or writes to the bolt database must be done within a transaction. You can have as many Readers in read-only transactions at the same time as you want, but only one Writer in a writable transaction at a time (readers maintain a consistent view of the DB while writers are writing).&lt;/p&gt;

&lt;p&gt;To begin, we call db.Update, which takes a function to which it’ll pass a bolt.Tx - bolt’s transaction object. We then create a Bucket (since all data in bolt lives in buckets), and add our key/value pair to it. After the write transaction finishes, we start a read- only transaction with DB.View, and get the values back out.&lt;/p&gt;

&lt;p&gt;What’s great about bolt’s transaction mechanism is that it’s super simple - the scope of the function is the scope of the transaction. If the function passed to Update returns nil, all updates from the transaction are atomically stored to the database. If the function passed to Update returns an error, the transaction is rolled back. This makes bolt’s transactions completely intuitive from a Go developer’s point of view. You just exit early out of your function by returning an error as usual, and bolt Does The Right Thing. No need to worry about manually rolling back updates or anything, just return an error.&lt;/p&gt;

&lt;p&gt;The only other basic thing you may need is to iterate over key/value pairs in a Bucket, in which case, you just call bucket.Cursor(), which returns a Cursor value, which has functions like Next(), Prev() etc that return a key/value pair and work like you’d expect.&lt;/p&gt;

&lt;p&gt;There’s a lot more to the bolt API, but most of the rest of it is more about database statistics and some stuff for more advanced usage scenarios… but the above is all you really need to know to start storing data in a bolt database.&lt;/p&gt;

&lt;p&gt;For a more complex application, just storing strings in the database may not be sufficient, but that’s ok, Go has your back there, too. You can easily use encoding/json or encoding/gob to serialize structs into the database, keyed by a unique name or id. This is what makes it easy for bolt to go from a key/value store to a document store - just have one bucket per document type. Again, the benefit of bolt is low barrier of entry. You don’t have to figure out a whole database schema or install anything to be able to just start dumping data to disk in a performant and manageable way.&lt;/p&gt;

&lt;p&gt;The main drawback of bolt is that there are no queries. You can’t say “give me all foo objects with a name that starts with bar”. You could make your own index in the database and keep it up to date manually. This could be as easy as a slice of IDs serialized into an “indices” bucket for a particular query. Obviously, this is where you start getting into the realm of developing your own relational database, but if you don’t go overboard, it can be nice that all this code is just that - code. It’s not queries in some external DSL, it’s just code like you’d write for an in-memory data store.&lt;/p&gt;

&lt;p&gt;Bolt is not for every application. You must understand your application’s needs and if bolt’s key/value style will be sufficient to fulfill those needs. If it is, I think you’ll be very happy to use such a simple data store with so little mental overhead.&lt;/p&gt;

&lt;p&gt;[edited to clarify reader/writer relationship] Bonus Gob vs. Json benchmark for storing structs in Bolt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkGobEncode  1000000       2191 ns/op
BenchmarkJsonEncode   500000       4738 ns/op
BenchmarkGobDecode  1000000       2019 ns/op
BenchmarkJsonDecode   200000      12993 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://npf.io/2014/07/intro-to-boltdb-painless-performant-persistence/&#34; title=&#34;Intro to BoltDB&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Volley&#43;OkHttp with https</title>
      <link>http://alimy.me/post/dev_201603192245/</link>
      <pubDate>Sat, 19 Mar 2016 22:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603192245/</guid>
      <description>&lt;h3 id=&#34;android-network-simple&#34;&gt;Android Network Simple&lt;/h3&gt;

&lt;p&gt;This article shows how to use volley with OkHttp and security your api with https.
本文可以在&lt;a href=&#34;http://www.jianshu.com/p/e58161cbc3a4&#34; title=&#34;Android 网络--我是怎么做的: Volley+OkHttp+Https&#34;&gt;简书&lt;/a&gt;浏览。&lt;/p&gt;

&lt;h3 id=&#34;使用-okhttp-作为传输层的实现&#34;&gt;使用 OkHttp 作为传输层的实现.&lt;/h3&gt;

&lt;p&gt;Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现. 3.0 以上使用HttpUrlConnection, 2.3 以下使用 ApacheHttpStack, 参考&lt;a href=&#34;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&#34;&gt;Android Http Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OkHttp 相较于其它的实现有以下的优点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;http://zh.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;，允许连接同一主机的所有请求分享一个socket。&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，会使用连接池减少请求延迟。&lt;/li&gt;
&lt;li&gt;使用GZIP压缩下载内容，且压缩操作对用户是透明的。&lt;/li&gt;
&lt;li&gt;利用响应缓存来避免重复的网络请求。&lt;/li&gt;
&lt;li&gt;当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。&lt;/li&gt;
&lt;li&gt;如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。

因此使用 OkHttp 作为替代是好的选择.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先用 OkHttp 实现一个新的 &lt;code&gt;HurlStack&lt;/code&gt; 用于构建 Volley 的 requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OkHttpStack extends HurlStack {

    private OkHttpClient okHttpClient;

    /**
     * Create a OkHttpStack with default OkHttpClient.
     */
    public OkHttpStack() {
        this(new OkHttpClient());
    }

    /**
     * Create a OkHttpStack with a custom OkHttpClient
     * @param okHttpClient Custom OkHttpClient, NonNull
     */
    public OkHttpStack(OkHttpClient okHttpClient) {
        this.okHttpClient = okHttpClient;
    }

    @Override
    protected HttpURLConnection createConnection(URL url) throws IOException {
        OkUrlFactory okUrlFactory = new OkUrlFactory(okHttpClient);
        return okUrlFactory.open(url);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用 OkHttpStack 创建新的 Volley requestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestQueue = Volley.newRequestQueue(getContext(), new OkHttpStack());
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就行了.&lt;/p&gt;

&lt;h3 id=&#34;使用-https&#34;&gt;使用 Https&lt;/h3&gt;

&lt;p&gt;作为一个有节操的开发者应该使用 Https 来保护用户的数据, Android 开发者网站上文章&lt;a href=&#34;https://developer.android.com/training/articles/security-ssl.html&#34;&gt;Security with HTTPS and SSL&lt;/a&gt;做了详尽的阐述.&lt;/p&gt;

&lt;p&gt;OkHttp 自身是支持 Https 的. 参考文档 &lt;a href=&#34;https://github.com/square/okhttp/wiki/HTTPS&#34;&gt;OkHttp Https&lt;/a&gt;, 直接使用上面的 &lt;code&gt;OkHttpStack&lt;/code&gt; 就可以了, 但是如果遇到服务器开发哥哥使用了自签名的证书(不要问我为什么要用自签名的), 就无法正常访问了.&lt;/p&gt;

&lt;p&gt;网上有很多文章给出的方案是提供一个什么事情都不做的&lt;code&gt;TrustManager&lt;/code&gt; 跳过 &lt;code&gt;SSL&lt;/code&gt; 的验证, 这样做很容受到攻击, Https 也就形同虚设了.&lt;/p&gt;

&lt;p&gt;我采用的方案是将自签名的证书打包入 APK 加入信任.&lt;/p&gt;

&lt;p&gt;好处:
* 应用难以逆向, 应用不再依赖系统的 trust store, 使得 Charles 抓包等工具失效. 要分析应用 API 必须反编译 APK.
* 不用额外购买证书, 省钱&amp;hellip;.
缺点:
* 证书部署灵活性降低, 一旦变更证书必须升级程序.&lt;/p&gt;

&lt;h3 id=&#34;实现步骤&#34;&gt;实现步骤&lt;/h3&gt;

&lt;p&gt;以最著名的自签名网站12306为例说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;导出证书&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo | openssl s_client -connect kyfw.12306.cn:443 2&amp;gt;&amp;amp;1 |  sed -ne &#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#39; &amp;gt; kyfw.12306.cn.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将证书转为 bks 格式
下载最新的bcprov-jdk, 执行下面的命令. storepass 是导出密钥文件的密码.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -importcert -v \
    -trustcacerts \
    -alias 0 \
    -file &amp;lt;(openssl x509 -in kyfw.12306.cn.pem) \
    -keystore kyfw.bks -storetype BKS \
    -providerclass     org.bouncycastle.jce.provider.BouncyCastleProvider \
    -providerpath ./bcprov-jdk16-1.46.jar \
    -storepass asdfqaz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将导出的 kyfw.bks 文件放入 res/raw 文件夹下.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建  &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // A HttpStack implement witch can verify specified self-signed certification.
public class SelfSignSslOkHttpStack extends HurlStack {

  private OkHttpClient okHttpClient;

  private Map&amp;lt;String, SSLSocketFactory&amp;gt; socketFactoryMap;


   // Create a OkHttpStack with default OkHttpClient.
  public SelfSignSslOkHttpStack(Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this(new OkHttpClient(), factoryMap);
  }


  // Create a OkHttpStack with a custom OkHttpClient
  // @param okHttpClient Custom OkHttpClient, NonNull
  public SelfSignSslOkHttpStack(OkHttpClient okHttpClient, Map&amp;lt;String, SSLSocketFactory&amp;gt; factoryMap) {
    this.okHttpClient = okHttpClient;
    this.socketFactoryMap = factoryMap;
  }

  @Override
  protected HttpURLConnection createConnection(URL url) throws IOException {
    if (&amp;quot;https&amp;quot;.equals(url.getProtocol()) &amp;amp;&amp;amp; socketFactoryMap.containsKey(url.getHost())) {
        HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(okHttpClient).open(url);
        connection.setSSLSocketFactory(socketFactoryMap.get(url.getHost()));
        return connection;
    } else {
        return  new OkUrlFactory(okHttpClient).open(url);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后用 &lt;code&gt;SelfSignSslOkHttpStack&lt;/code&gt; 创建 Volley 的 RequestQueue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String[] hosts = {&amp;quot;kyfw.12306.cn&amp;quot;};
int[] certRes = {R.raw.kyfw};
String[] certPass = {&amp;quot;asdfqaz&amp;quot;};
socketFactoryMap = new Hashtable&amp;lt;&amp;gt;(hosts.length);

for (int i = 0; i &amp;lt; certRes.length; i++) {
    int res = certRes[i];
    String password = certPass[i];
    SSLSocketFactory sslSocketFactory = createSSLSocketFactory(context, res, password);
    socketFactoryMap.put(hosts[i], sslSocketFactory);
}

HurlStack stack = new SelfSignSslOkHttpStack(socketFactoryMap);

requestQueue = Volley.newRequestQueue(context, stack);
requestQueue.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;done&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://github.com/dodocat/AndroidNetworkdemo&#34; title=&#34;android network demo&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>50 Shades of Go</title>
      <link>http://alimy.me/post/dev_201603182045/</link>
      <pubDate>Fri, 18 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603182045/</guid>
      <description>&lt;p&gt;Go is a simple and fun language, but, like any other language, it has a few gotchas&amp;hellip; Many of those gotchas are not entirely Go&amp;rsquo;s fault. Some of these mistakes are natural traps if you are coming from another language. Others are due to faulty assumptions and missing details.&lt;/p&gt;

&lt;p&gt;A lot of these gotchas may seem obvious if you took the time to learn the language reading the official spec, wiki, mailing list discussions, many great posts and presentations by Rob Pike, and the source code. Not everybody starts the same way though and that&amp;rsquo;s OK. If you are new to Go the information here will save you hours debugging your code.&lt;/p&gt;

&lt;p&gt;This post covers Go 1.5 and below.&lt;/p&gt;

&lt;h3 id=&#34;total-beginner&#34;&gt;Total Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;Unused Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;Unused Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;Redeclaring Variables Using Short Variable Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;Accidental Variable Shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8&#34;&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#10&#34;&gt;Map Capacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#11&#34;&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12&#34;&gt;Array Function Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13&#34;&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#14&#34;&gt;Slices and Arrays Are One-Dimensional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#15&#34;&gt;Accessing Non-Existing Map Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#16&#34;&gt;Strings Are Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#17&#34;&gt;Conversions Between Strings and Byte Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#18&#34;&gt;Strings and Index Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#19&#34;&gt;Strings Are Not Always UTF8 Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#20&#34;&gt;String Length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#21&#34;&gt;Missing Comma In Multi-Line Slice/Array/Map Literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22&#34;&gt;log.Fatal and log.Panic Do More Than Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23&#34;&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24&#34;&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#25&#34;&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#26&#34;&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#27&#34;&gt;Increments and Decrements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#28&#34;&gt;Bitwise NOT Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#29&#34;&gt;Operator Precedence Differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#30&#34;&gt;Unexported Structure Fields Are Not Encoded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#31&#34;&gt;App Exits With Active Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32&#34;&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33&#34;&gt;Sending to an Closed Channel Causes a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34&#34;&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#35&#34;&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;intermediate-beginner&#34;&gt;Intermediate Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#36&#34;&gt;Closing HTTP Response Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#37&#34;&gt;Closing HTTP Connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#38&#34;&gt;Unmarshalling JSON Numbers into Interface Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#39&#34;&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#40&#34;&gt;Recovering From a Panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#41&#34;&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;for range&amp;rdquo; Clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42&#34;&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43&#34;&gt;Slice Data Corruption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#44&#34;&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#45&#34;&gt;Type Declarations and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#46&#34;&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#47&#34;&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#48&#34;&gt;Deferred Function Call Argument Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#49&#34;&gt;Deferred Function Call Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#50&#34;&gt;Failed Type Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#51&#34;&gt;Blocked Goroutines and Resource Leaks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;advanced-beginner&#34;&gt;Advanced Beginner:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#52&#34;&gt;Using Pointer Receiver Methods On Value Instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#53&#34;&gt;Updating Map Value Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#54&#34;&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#55&#34;&gt;Stack and Heap Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#56&#34;&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#57&#34;&gt;Read and Write Operation Reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#58&#34;&gt;Preemptive Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-1-a-opening-brace-can-t-be-placed-on-a-separate-line&#34;&gt;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt;Opening Brace Can&amp;rsquo;t Be Placed on a Separate Line&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most other languages that use braces you get to choose where you place them. Go is different. You can thank automatic semicolon injection (without lookahead) for this behavior. Yes, Go does have semicolons :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main()  
{ //error, can&#39;t have the opening brace on a separate line
    fmt.Println(&amp;quot;hello there!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(&amp;quot;works!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-2-a-unused-variables&#34;&gt;&lt;a name=&#34;2&#34;&gt;&lt;/a&gt;Unused Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have an unused variable your code will fail to compile. There&amp;rsquo;s an exception though. You must use variables you declare inside functions, but it&amp;rsquo;s OK if you have unused global variables. It&amp;rsquo;s also OK to have unused function arguments.&lt;/p&gt;

&lt;p&gt;If you assign a new value to the unused variable your code will still fail to compile. You need to use the variable value somehow to make the compiler happy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var gvar int //not an error

func main() {  
    var one int   //error, unused variable
    two := 2      //error, unused variable
    var three int //error, even though it&#39;s assigned 3 on the next line
    three = 3

    func(unused string) {
        fmt.Println(&amp;quot;Unused arg. No compile error&amp;quot;)
    }(&amp;quot;what?&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox473116179/main.go:6: one declared and not used /tmp/sandbox473116179/main.go:7: two declared and not used /tmp/sandbox473116179/main.go:8: three declared and not used
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var one int
    _ = one

    two := 2
    fmt.Println(two)

    var three int
    three = 3
    one = three

    var four int
    four = four
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to comment out or remove the unused variables :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-3-a-unused-imports&#34;&gt;&lt;a name=&#34;3&#34;&gt;&lt;/a&gt;Unused Imports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your code will fail to compile if you import a package without using any of its exported functions, interfaces, structures, or variables.&lt;/p&gt;

&lt;p&gt;If you really need the imported package you can use the blank identifier, _ , as its package name to avoid this compilation failure. The blank identifier is used to import packages for their side effects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox627475386/main.go:4: imported and not used: &amp;quot;fmt&amp;quot; /tmp/sandbox627475386/main.go:5: imported and not used: &amp;quot;log&amp;quot; /tmp/sandbox627475386/main.go:6: imported and not used: &amp;quot;time&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    _ &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = log.Println

func main() {  
    _ = time.Now
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to remove or comment out the unused imports :-) The goimports tool can help you with that.&lt;/p&gt;

&lt;h3 id=&#34;a-name-4-a-short-variable-declarations-can-be-used-only-inside-functions&#34;&gt;&lt;a name=&#34;4&#34;&gt;&lt;/a&gt;Short Variable Declarations Can Be Used Only Inside Functions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

myvar := 1 //error

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox265716165/main.go:3: non-declaration statement outside function body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

var myvar = 1

func main() {  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-5-a-redeclaring-variables-using-short-variable-declarations&#34;&gt;&lt;a name=&#34;5&#34;&gt;&lt;/a&gt;Redeclaring Variables Using Short Variable Declarations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t redeclare a variable in a standalone statement, but it is allowed in multi-variable declarations where at least one new variable is also declared.&lt;/p&gt;

&lt;p&gt;The redeclared variable has to be in the same block or you&amp;rsquo;ll end up with a shadowed variable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one := 1 //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox706333626/main.go:5: no new variables on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    one := 0
    one, two := 1,2

    one,two = two,one
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-6-a-can-t-use-short-variable-declarations-to-set-field-values&#34;&gt;&lt;a name=&#34;6&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use Short Variable Declarations to Set Field Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  data.result, err := work() //error
  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:18: non-name data.result on left side of :=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though there&amp;rsquo;s a ticket to address this gotcha it&amp;rsquo;s unlikely to change because Rob Pike likes it &amp;ldquo;as is&amp;rdquo; :-)&lt;/p&gt;

&lt;p&gt;Use temporary variables or predeclare all your variables and use the standard assignment operator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;fmt&amp;quot;
)

type info struct {  
  result int
}

func work() (int,error) {  
    return 13,nil  
  }

func main() {  
  var data info

  var err error
  data.result, err = work() //ok
  if err != nil {
    fmt.Println(err)
    return
  }

  fmt.Printf(&amp;quot;info: %+v\n&amp;quot;,data) //prints: info: {result:13}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-7-a-accidental-variable-shadowing&#34;&gt;&lt;a name=&#34;7&#34;&gt;&lt;/a&gt;Accidental Variable Shadowing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The short variable declaration syntax is so convenient (especially for those coming from a dynamic language) that it&amp;rsquo;s easy to treat it like a regular assignment operation. If you make this mistake in a new code block there will be no compiler error, but your app will not do what you expect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := 1
    fmt.Println(x)     //prints 1
    {
        fmt.Println(x) //prints 1
        x := 2
        fmt.Println(x) //prints 2
    }
    fmt.Println(x)     //prints 1 (bad if you need 2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very common trap even for experienced Go developers. It&amp;rsquo;s easy to make and it could be hard to spot.&lt;/p&gt;

&lt;p&gt;You can use the vet command to find some of these problems. By default, vet will not perform any shadowed variable checks. Make sure to use the -shadow flag: go tool vet -shadow your_file.go&lt;/p&gt;

&lt;p&gt;Note that the vet command will not report all shadowed variables. Use go-nyet for more aggressive shadowed variable detection.&lt;/p&gt;

&lt;h3 id=&#34;a-name-8-a-can-t-use-nil-to-initialize-a-variable-without-an-explicit-type&#34;&gt;&lt;a name=&#34;8&#34;&gt;&lt;/a&gt;Can&amp;rsquo;t Use &amp;ldquo;nil&amp;rdquo; to Initialize a Variable Without an Explicit Type&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;nil&amp;rdquo; identifier can be used as the &amp;ldquo;zero value&amp;rdquo; for interfaces, functions, pointers, maps, slices, and channels. If you don&amp;rsquo;t specify the variable type the compiler will fail to compile your code because it can&amp;rsquo;t guess the type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x = nil //error

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox188239583/main.go:4: use of untyped nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x interface{} = nil

    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-9-a-using-nil-slices-and-maps&#34;&gt;&lt;a name=&#34;9&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Slices and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to add items to a &amp;ldquo;nil&amp;rdquo; slice, but doing the same with a map will produce a runtime panic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var s []int
    s = append(s,1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var m map[string]int
    m[&amp;quot;one&amp;quot;] = 1 //error

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-10-a-map-capacity&#34;&gt;&lt;a name=&#34;10&#34;&gt;&lt;/a&gt;Map Capacity&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can specify the map capacity when it&amp;rsquo;s created, but you can&amp;rsquo;t use the cap() function on maps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    m := make(map[string]int,99)
    cap(m) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox326543983/main.go:5: invalid argument m (type map[string]int) for cap
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-11-a-strings-can-t-be-nil&#34;&gt;&lt;a name=&#34;11&#34;&gt;&lt;/a&gt;Strings Can&amp;rsquo;t Be &amp;ldquo;nil&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha for developers who are used to assigning &amp;ldquo;nil&amp;rdquo; identifiers to string variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string = nil //error

    if x == nil { //error
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment /tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    var x string //defaults to &amp;quot;&amp;quot; (zero value)

    if x == &amp;quot;&amp;quot; {
        x = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-12-a-array-function-arguments&#34;&gt;&lt;a name=&#34;12&#34;&gt;&lt;/a&gt;Array Function Arguments&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr [3]int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [1 2 3] (not ok if you need [7 2 3])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original array data use array pointer types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := [3]int{1,2,3}

    func(arr *[3]int) {
        (*arr)[0] = 7
        fmt.Println(arr) //prints &amp;amp;[7 2 3]
    }(&amp;amp;x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []int{1,2,3}

    func(arr []int) {
        arr[0] = 7
        fmt.Println(arr) //prints [7 2 3]
    }(x)

    fmt.Println(x) //prints [7 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-13-a-unexpected-values-in-slice-and-array-range-clauses&#34;&gt;&lt;a name=&#34;13&#34;&gt;&lt;/a&gt;Unexpected Values in Slice and Array &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can happen if you are used to the &amp;ldquo;for-in&amp;rdquo; or &amp;ldquo;foreach&amp;rdquo; statements in other languages. The &amp;ldquo;range&amp;rdquo; clause in Go is different. It generates two values: the first value is the item index while the second value is the item data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for v := range x {
        fmt.Println(v) //prints 0, 1, 2
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;}

    for _, v := range x {
        fmt.Println(v) //prints a, b, c
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-14-a-slices-and-arrays-are-one-dimensional&#34;&gt;&lt;a name=&#34;14&#34;&gt;&lt;/a&gt;Slices and Arrays Are One-Dimensional&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may seem like Go supports multi-dimensional arrays and slices, but it doesn&amp;rsquo;t. Creating arrays of arrays or slices of slices is possible though. For numerical computation apps that rely on dynamic multi-dimensional arrays it&amp;rsquo;s far from ideal in terms of performance and complexity.&lt;/p&gt;

&lt;p&gt;You can build dynamic multi-dimensional arrays using raw one-dimensional arrays, slices of &amp;ldquo;independent&amp;rdquo; slices, and slices of &amp;ldquo;shared data&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;If you are using raw one-dimensional arrays you are responsible for indexing, bounds checking, and memory reallocations when the arrays need to grow.&lt;/p&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;independent&amp;rdquo; slices is a two step process. First, you have to create the outer slice. Then, you have to allocate each inner slice. The inner slices are independent of each other. You can grow and shrink them without affecting other inner slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := 2
    y := 4

    table := make([][]int,x)
    for i:= range table {
        table[i] = make([]int,y)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a dynamic multi-dimensional array using slices of &amp;ldquo;shared data&amp;rdquo; slices is a three step process. First, you have to create the data &amp;ldquo;container&amp;rdquo; slice that will hold raw data. Then, you create the outer slice. Finally, you initialize each inner slice by reslicing the raw data slice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    h, w := 2, 4

    raw := make([]int,h*w)
    for i := range raw {
        raw[i] = i
    }
    fmt.Println(raw,&amp;amp;raw[4])
    //prints: [0 1 2 3 4 5 6 7] &amp;lt;ptr_addr_x&amp;gt;

    table := make([][]int,h)
    for i:= range table {
        table[i] = raw[i*w:i*w + w]
    }

    fmt.Println(table,&amp;amp;table[1][0])
    //prints: [[0 1 2 3] [4 5 6 7]] &amp;lt;ptr_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a spec/proposal for multi-dimensional arrays and slices, but it looks like it&amp;rsquo;s a low priority feature at this point in time.&lt;/p&gt;

&lt;h3 id=&#34;a-name-15-a-accessing-non-existing-map-keys&#34;&gt;&lt;a name=&#34;15&#34;&gt;&lt;/a&gt;Accessing Non-Existing Map Keys&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner
This is a gotcha for developers who expect to get &amp;ldquo;nil&amp;rdquo; identifiers (like it&amp;rsquo;s done in other languages). The returned value will be &amp;ldquo;nil&amp;rdquo; if the &amp;ldquo;zero value&amp;rdquo; for the corresponding data type is &amp;ldquo;nil&amp;rdquo;, but it&amp;rsquo;ll be different for other data types. Checking for the appropriate &amp;ldquo;zero value&amp;rdquo; can be used to determine if the map record exists, but it&amp;rsquo;s not always reliable (e.g., what do you do if you have a map of booleans where the &amp;ldquo;zero value&amp;rdquo; is false). The most reliable way to know if a given map record exists is to check the second value returned by the map access operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if v := x[&amp;quot;two&amp;quot;]; v == &amp;quot;&amp;quot; { //incorrect
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := map[string]string{&amp;quot;one&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;three&amp;quot;:&amp;quot;c&amp;quot;}

    if _,ok := x[&amp;quot;two&amp;quot;]; !ok {
        fmt.Println(&amp;quot;no entry&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-16-a-strings-are-immutable&#34;&gt;&lt;a name=&#34;16&#34;&gt;&lt;/a&gt;Strings Are Immutable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trying to update an individual character in a string variable using the index operator will result in a failure. Strings are read-only byte slices (with a few extra properties). If you do need to update a string then use a byte slice instead converting it to a string type when necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    x[0] = &#39;T&#39;

    fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox305565531/main.go:7: cannot assign to x[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    xbytes := []byte(x)
    xbytes[0] = &#39;T&#39;

    fmt.Println(string(xbytes)) //prints Text
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn&amp;rsquo;t really the right way to update characters in a text string because a given character could be stored in multiple bytes. If you do need to make updates to a text string convert it to a rune sclice first. Even with rune slices a single character might span multiple runes, which can happen if you have characters with grave accent, for example. This complicated and ambiguous nature of &amp;ldquo;characters&amp;rdquo; is the reason why Go strings are represented as byte sequences.&lt;/p&gt;

&lt;h3 id=&#34;a-name-17-a-conversions-between-strings-and-byte-slices&#34;&gt;&lt;a name=&#34;17&#34;&gt;&lt;/a&gt;Conversions Between Strings and Byte Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you convert a string to a byte slice (and vice versa) you get a complete copy of the orginal data. It&amp;rsquo;s not like a cast operation in other languages and it&amp;rsquo;s not like reslicing where the new slice variable points to the same underlying array used by the original byte slice.&lt;/p&gt;

&lt;p&gt;Go does have a couple of optimizations for []byte to string and string to []byte conversions to avoid extra allocations (with more optimizations on the todo list).&lt;/p&gt;

&lt;p&gt;The first optimization avoids extra allocations when []byte keys are used to lookup entries in map[string] collections: m[string(key)].&lt;/p&gt;

&lt;p&gt;The second optimization avoids extra allocations in for range clauses where strings are converted to []byte: for i,v := range []byte(str) {&amp;hellip;}.&lt;/p&gt;

&lt;h3 id=&#34;a-name-18-a-strings-and-index-operator&#34;&gt;&lt;a name=&#34;18&#34;&gt;&lt;/a&gt;Strings and Index Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index operator on a string returns a byte value, not a character (like it&amp;rsquo;s done in other languages).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    x := &amp;quot;text&amp;quot;
    fmt.Println(x[0]) //print 116
    fmt.Printf(&amp;quot;%T&amp;quot;,x[0]) //prints uint8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to access specific string &amp;ldquo;characters&amp;rdquo; (unicode code points/runes) use the for range clause. The official &amp;ldquo;unicode/utf8&amp;rdquo; package and the experimental utf8string package (golang.org/x/exp/utf8string) are also useful. The utf8string package includes a convenient At() method. Converting the string to a slice of runes is an option too.&lt;/p&gt;

&lt;h3 id=&#34;a-name-19-a-strings-are-not-always-utf8-text&#34;&gt;&lt;a name=&#34;19&#34;&gt;&lt;/a&gt;Strings Are Not Always UTF8 Text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;String values are not required to be UTF8 text. They can contain arbitrary bytes. The only time strings are UTF8 is when string literals are used. Even then they can include other data using escape sequences.&lt;/p&gt;

&lt;p&gt;To know if you have a UTF8 text string use the ValidString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data1 := &amp;quot;ABC&amp;quot;
    fmt.Println(utf8.ValidString(data1)) //prints: true

    data2 := &amp;quot;A\xfeC&amp;quot;
    fmt.Println(utf8.ValidString(data2)) //prints: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-20-a-string-length&#34;&gt;&lt;a name=&#34;20&#34;&gt;&lt;/a&gt;String Length&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you are a python developer and you have the following piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data = u&#39;♥&#39;  
print(len(data)) #prints: 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you convert it to a similar Go code snippet you might be surprised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(len(data)) //prints: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in len() function returns the number of bytes instead of the number of characters like it&amp;rsquo;s done for unicode strings in Python.&lt;/p&gt;

&lt;p&gt;To get the same results in Go use the RuneCountInString() function from the &amp;ldquo;unicode/utf8&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;♥&amp;quot;
    fmt.Println(utf8.RuneCountInString(data)) //prints: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically the RuneCountInString() function doesn&amp;rsquo;t return the number of characters because a single character may span multiple runes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;unicode/utf8&amp;quot;
)

func main() {  
    data := &amp;quot;é&amp;quot;
    fmt.Println(len(data))                    //prints: 3
    fmt.Println(utf8.RuneCountInString(data)) //prints: 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-21-a-missing-comma-in-multi-line-slice-array-and-map-literals&#34;&gt;&lt;a name=&#34;21&#34;&gt;&lt;/a&gt;Missing Comma In Multi-Line Slice, Array, and Map Literals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2 //error
    }
    _ = x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox367520156/main.go:6: syntax error: need trailing comma before newline in composite literal /tmp/sandbox367520156/main.go:8: non-declaration statement outside function body /tmp/sandbox367520156/main.go:9: syntax error: unexpected }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {  
    x := []int{
    1,
    2,
    }
    x = x

    y := []int{3,4,} //no error
    y = y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You won&amp;rsquo;t get a compiler error if you leave the trailing comma when you collapse the declaration to be on a single line.&lt;/p&gt;

&lt;h3 id=&#34;a-name-22-a-log-fatal-and-log-panic-do-more-than-log&#34;&gt;&lt;a name=&#34;22&#34;&gt;&lt;/a&gt;log.Fatal and log.Panic Do More Than Log&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logging libraries often provide different log levels. Unlike those logging libraries, the log package in Go does more than log if you call its Fatal&lt;em&gt;() and Panic&lt;/em&gt;() functions. When your app calls those functions Go will also terminate your app :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;log&amp;quot;

func main() {  
    log.Fatalln(&amp;quot;Fatal Level: log entry&amp;quot;) //app exits here
    log.Println(&amp;quot;Normal Level: log entry&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-23-a-built-in-data-structure-operations-are-not-synchronized&#34;&gt;&lt;a name=&#34;23&#34;&gt;&lt;/a&gt;Built-in Data Structure Operations Are Not Synchronized&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though Go has a number of features to support concurrency natively, concurrency safe data collections are not one them :-) It&amp;rsquo;s your responsibility to ensure the data collection updates are atomic. Goroutines and channels are the recommended way to implement those atomic operations, but you can also leverage the &amp;ldquo;sync&amp;rdquo; package if it makes sense for your application.&lt;/p&gt;

&lt;h3 id=&#34;a-name-24-a-iteration-values-for-strings-in-range-clauses&#34;&gt;&lt;a name=&#34;24&#34;&gt;&lt;/a&gt;Iteration Values For Strings in &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The index value (the first value returned by the &amp;ldquo;range&amp;rdquo; operation) is the index of the first byte for the current &amp;ldquo;character&amp;rdquo; (unicode code point/rune) returned in the second value. It&amp;rsquo;s not the index for the current &amp;ldquo;character&amp;rdquo; like it&amp;rsquo;s done in other languages. Note that an actual character might be represented by multiple runes. Make sure to check out the &amp;ldquo;norm&amp;rdquo; package (golang.org/x/text/unicode/norm) if you need to work with characters.&lt;/p&gt;

&lt;p&gt;The for range clauses with string variables will try to interpret the data as UTF8 text. For any byte sequences it doesn&amp;rsquo;t understand it will return 0xfffd runes (aka unicode replacement characters) instead of the actual data. If you have arbitrary (non-UTF8 text) data stored in your string variables, make sure to convert them to byte slices to get all stored data as is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := &amp;quot;A\xfe\x02\xff\x04&amp;quot;
    for _,v := range data {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)

    fmt.Println()
    for _,v := range []byte(data) {
        fmt.Printf(&amp;quot;%#x &amp;quot;,v)
    }
    //prints: 0x41 0xfe 0x2 0xff 0x4 (good)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-25-a-iterating-through-a-map-using-a-for-range-clause&#34;&gt;&lt;a name=&#34;25&#34;&gt;&lt;/a&gt;Iterating Through a Map Using a &amp;ldquo;for range&amp;rdquo; Clause&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a gotcha if you expect the items to be in a certain order (e.g., ordered by the key value). Each map iteration will produce different results. The Go runtime tries to go an extra mile randomizing the iteration order, but it doesn&amp;rsquo;t always succeed so you may get several identical map iterations. Don&amp;rsquo;t be surprised to see 5 identical iterations in a row.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    m := map[string]int{&amp;quot;one&amp;quot;:1,&amp;quot;two&amp;quot;:2,&amp;quot;three&amp;quot;:3,&amp;quot;four&amp;quot;:4}
    for k,v := range m {
        fmt.Println(k,v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you use the Go Playground (&lt;a href=&#34;https://play.golang.org/&#34;&gt;https://play.golang.org/&lt;/a&gt;) you&amp;rsquo;ll always get the same results because it doesn&amp;rsquo;t recompile the code unless you make a change.&lt;/p&gt;

&lt;h3 id=&#34;a-name-26-a-fallthrough-behavior-in-switch-statements&#34;&gt;&lt;a name=&#34;26&#34;&gt;&lt;/a&gt;Fallthrough Behavior in &amp;ldquo;switch&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &amp;ldquo;case&amp;rdquo; blocks in &amp;ldquo;switch&amp;rdquo; statements break by default. This is different from other languages where the default behavior is to fall through to the next &amp;ldquo;case&amp;rdquo; block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;: //error
        case &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can force the &amp;ldquo;case&amp;rdquo; blocks to fall through by using the &amp;ldquo;fallthrough&amp;rdquo; statement at the end of each &amp;ldquo;case&amp;rdquo; block. You can also rewrite your switch statement to use expression lists in the &amp;ldquo;case&amp;rdquo; blocks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    isSpace := func(ch byte) bool {
        switch(ch) {
        case &#39; &#39;, &#39;\t&#39;:
            return true
        }
        return false
    }

    fmt.Println(isSpace(&#39;\t&#39;)) //prints true (ok)
    fmt.Println(isSpace(&#39; &#39;))  //prints true (ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-27-a-increments-and-decrements&#34;&gt;&lt;a name=&#34;27&#34;&gt;&lt;/a&gt;Increments and Decrements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages have increment and decrement operators. Unlike other languages, Go doesn&amp;rsquo;t support the prefix version of the operations. You also can&amp;rsquo;t use these two operators in expressions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    ++i //error
    fmt.Println(data[i++]) //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox101231828/main.go:8: syntax error: unexpected ++ /tmp/sandbox101231828/main.go:9: syntax error: unexpected ++, expecting :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    i := 0
    i++
    fmt.Println(data[i])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-28-a-bitwise-not-operator&#34;&gt;&lt;a name=&#34;28&#34;&gt;&lt;/a&gt;Bitwise NOT Operator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many languages use ~ as the unary NOT operator (aka bitwise complement), but Go reuses the XOR operator (^) for that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Println(~2) //error
}
Compile Error:

/tmp/sandbox965529189/main.go:6: the bitwise complement operator is ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var d uint8 = 2
    fmt.Printf(&amp;quot;%08b\n&amp;quot;,^d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go still uses ^ as the XOR operator, which may be confusing for some people.&lt;/p&gt;

&lt;p&gt;If you want you can represent a unary NOT operation (e.g, NOT 0x02) with a binary XOR operation (e.g., 0x02 XOR 0xff). This could explain why ^ is reused to represent unary NOT operations.&lt;/p&gt;

&lt;p&gt;Go also has a special &amp;lsquo;AND NOT&amp;rsquo; bitwise operator (&amp;amp;^), which adds to the NOT operator confusion. It looks like a special feature/hack to support A AND (NOT B) without requiring parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var a uint8 = 0x82
    var b uint8 = 0x02
    fmt.Printf(&amp;quot;%08b [A]\n&amp;quot;,a)
    fmt.Printf(&amp;quot;%08b [B]\n&amp;quot;,b)

    fmt.Printf(&amp;quot;%08b (NOT B)\n&amp;quot;,^b)
    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [B XOR 0xff]\n&amp;quot;,b,0xff,b ^ 0xff)

    fmt.Printf(&amp;quot;%08b ^ %08b = %08b [A XOR B]\n&amp;quot;,a,b,a ^ b)
    fmt.Printf(&amp;quot;%08b &amp;amp; %08b = %08b [A AND B]\n&amp;quot;,a,b,a &amp;amp; b)
    fmt.Printf(&amp;quot;%08b &amp;amp;^%08b = %08b [A &#39;AND NOT&#39; B]\n&amp;quot;,a,b,a &amp;amp;^ b)
    fmt.Printf(&amp;quot;%08b&amp;amp;(^%08b)= %08b [A AND (NOT B)]\n&amp;quot;,a,b,a &amp;amp; (^b))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-29-a-operator-precedence-differences&#34;&gt;&lt;a name=&#34;29&#34;&gt;&lt;/a&gt;Operator Precedence Differences&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from the &amp;ldquo;bit clear&amp;rdquo; operators (&amp;amp;^) Go has a set of standard operators shared by many other languages. The operator precedence is not always the same though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    fmt.Printf(&amp;quot;0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; %#x\n&amp;quot;,0x2 &amp;amp; 0x2 + 0x4)
    //prints: 0x2 &amp;amp; 0x2 + 0x4 -&amp;gt; 0x6
    //Go:    (0x2 &amp;amp; 0x2) + 0x4
    //C++:    0x2 &amp;amp; (0x2 + 0x4) -&amp;gt; 0x2

    fmt.Printf(&amp;quot;0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; %#x\n&amp;quot;,0x2 + 0x2 &amp;lt;&amp;lt; 0x1)
    //prints: 0x2 + 0x2 &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x6
    //Go:     0x2 + (0x2 &amp;lt;&amp;lt; 0x1)
    //C++:   (0x2 + 0x2) &amp;lt;&amp;lt; 0x1 -&amp;gt; 0x8

    fmt.Printf(&amp;quot;0xf | 0x2 ^ 0x2 -&amp;gt; %#x\n&amp;quot;,0xf | 0x2 ^ 0x2)
    //prints: 0xf | 0x2 ^ 0x2 -&amp;gt; 0xd
    //Go:    (0xf | 0x2) ^ 0x2
    //C++:    0xf | (0x2 ^ 0x2) -&amp;gt; 0xf
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-30-a-unexported-structure-fields-are-not-encoded&#34;&gt;&lt;a name=&#34;30&#34;&gt;&lt;/a&gt;Unexported Structure Fields Are Not Encoded&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The struct fields starting with lowercase letters will not be (json, xml, gob, etc.) encoded, so when you decode the structure you&amp;rsquo;ll end up with zero values in those unexported fields.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

type MyData struct {  
    One int
    two string
}

func main() {  
    in := MyData{1,&amp;quot;two&amp;quot;}
    fmt.Printf(&amp;quot;%#v\n&amp;quot;,in) //prints main.MyData{One:1, two:&amp;quot;two&amp;quot;}

    encoded,_ := json.Marshal(in)
    fmt.Println(string(encoded)) //prints {&amp;quot;One&amp;quot;:1}

    var out MyData
    json.Unmarshal(encoded,&amp;amp;out)

    fmt.Printf(&amp;quot;%#v\n&amp;quot;,out) //prints main.MyData{One:1, two:&amp;quot;&amp;quot;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-31-a-app-exits-with-active-goroutines&#34;&gt;&lt;a name=&#34;31&#34;&gt;&lt;/a&gt;App Exits With Active Goroutines&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app will not wait for all your goroutines to complete. This is a common mistake for beginners in general. Everybody starts somewhere, so there&amp;rsquo;s no shame in making rookie mistakes :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        go doit(i)
    }
    time.Sleep(1 * time.Second)
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    time.Sleep(3 * time.Second)
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[1] is running
all done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the most common solutions is to use a &amp;ldquo;WaitGroup&amp;rdquo; variable. It will allow the main goroutine to wait until all worker goroutines are done. If your app has long running workers with message processing loops you&amp;rsquo;ll also need a way to signal those goroutines that it&amp;rsquo;s time to exit. You can send a &amp;ldquo;kill&amp;rdquo; message to each worker. Another option is to close a channel all workers are receiving from. It&amp;rsquo;s a simple way to signal all goroutines at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,done,wg)
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int,done &amp;lt;-chan struct{},wg sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    &amp;lt;- done
    fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this app you&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0] is running
[0] is done
[1] is running
[1] is done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the workers are done before the main goroutine exists. Great! However, you&amp;rsquo;ll also see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fatal error: all goroutines are asleep - deadlock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not so great :-) What&amp;rsquo;s going on? Why is there a deadlock? The workers exited and they executed wg.Done(). The app should work.&lt;/p&gt;

&lt;p&gt;The deadlock happens because each worker gets a copy of the original &amp;ldquo;WaitGroup&amp;rdquo; variable. When workers execute wg.Done() it has no effect on the &amp;ldquo;WaitGroup&amp;rdquo; variable in the main goroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
)

func main() {  
    var wg sync.WaitGroup
    done := make(chan struct{})
    wq := make(chan interface{})
    workerCount := 2

    for i := 0; i &amp;lt; workerCount; i++ {
        wg.Add(1)
        go doit(i,wq,done,&amp;amp;wg)
    }

    for i := 0; i &amp;lt; workerCount; i++ {
        wq &amp;lt;- i
    }

    close(done)
    wg.Wait()
    fmt.Println(&amp;quot;all done!&amp;quot;)
}

func doit(workerId int, wq &amp;lt;-chan interface{},done &amp;lt;-chan struct{},wg * sync.WaitGroup) {  
    fmt.Printf(&amp;quot;[%v] is running\n&amp;quot;,workerId)
    defer wg.Done()
    for {
        select {
        case m := &amp;lt;- wq:
            fmt.Printf(&amp;quot;[%v] m =&amp;gt; %v\n&amp;quot;,workerId,m)
        case &amp;lt;- done:
            fmt.Printf(&amp;quot;[%v] is done\n&amp;quot;,workerId)
            return
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it works as expected :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-32-a-sending-to-an-unbuffered-channel-returns-as-soon-as-the-target-receiver-is-ready&#34;&gt;&lt;a name=&#34;32&#34;&gt;&lt;/a&gt;Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sender will not be blocked until your message is processed by the receiver. Depending on the machine where you are running the code, the receiver goroutine may or may not have enough time to process the message before the sender continues its execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    ch := make(chan string)

    go func() {
        for m := range ch {
            fmt.Println(&amp;quot;processed:&amp;quot;,m)
        }
    }()

    ch &amp;lt;- &amp;quot;cmd.1&amp;quot;
    ch &amp;lt;- &amp;quot;cmd.2&amp;quot; //won&#39;t be processed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-33-a-sending-to-an-closed-channel-causes-a-panic&#34;&gt;&lt;a name=&#34;33&#34;&gt;&lt;/a&gt;Sending to an Closed Channel Causes a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Receiving from a closed channel is safe. The ok return value in a receive statement will be set to false indicating that no data was received. If you are receiving from a buffered channel you&amp;rsquo;ll get the buffered data first and once it&amp;rsquo;s empty the ok return value will be false.&lt;/p&gt;

&lt;p&gt;Sending data to a closed channel causes a panic. It is a documented behavior, but it&amp;rsquo;s not very intuitive for new Go developers who might expect the send behavior to be similar to the receive behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get the first result
    fmt.Println(&amp;lt;-ch)
    close(ch) //not ok (you still have other senders)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on your application the fix will be different. It might be a minor code change or it might require a change in your application design. Either way, you&amp;rsquo;ll need to make sure your application doesn&amp;rsquo;t try to send data to a closed channel.&lt;/p&gt;

&lt;p&gt;The buggy example can be fixed by using a special cancellation channel to signal the remaining workers that their results are no longer neeeded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    ch := make(chan int)
    done := make(chan struct{})
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            select {
            case ch &amp;lt;- (idx + 1) * 2: fmt.Println(idx,&amp;quot;sent result&amp;quot;)
            case &amp;lt;- done: fmt.Println(idx,&amp;quot;exiting&amp;quot;)
            }
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    close(done)
    //do other work
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-34-a-using-nil-channels&#34;&gt;&lt;a name=&#34;34&#34;&gt;&lt;/a&gt;Using &amp;ldquo;nil&amp;rdquo; Channels&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send and receive operations on a nil channel block forver. It&amp;rsquo;s a well documented behavior, but it can be a surprise for new Go developers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    var ch chan int
    for i := 0; i &amp;lt; 3; i++ {
        go func(idx int) {
            ch &amp;lt;- (idx + 1) * 2
        }(i)
    }

    //get first result
    fmt.Println(&amp;quot;result:&amp;quot;,&amp;lt;-ch)
    //do other work
    time.Sleep(2 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the code you&amp;rsquo;ll see a runtime error like this: fatal error: all goroutines are asleep - deadlock!&lt;/p&gt;

&lt;p&gt;This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;  
import &amp;quot;time&amp;quot;

func main() {  
    inch := make(chan int)
    outch := make(chan int)

    go func() {
        var in &amp;lt;- chan int = inch
        var out chan &amp;lt;- int
        var val int
        for {
            select {
            case out &amp;lt;- val:
                out = nil
                in = inch
            case val = &amp;lt;- in:
                out = outch
                in = nil
            }
        }
    }()

    go func() {
        for r := range outch {
            fmt.Println(&amp;quot;result:&amp;quot;,r)
        }
    }()

    time.Sleep(0)
    inch &amp;lt;- 1
    inch &amp;lt;- 2
    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-35-a-methods-with-value-receivers-can-t-change-the-original-value&#34;&gt;&lt;a name=&#34;35&#34;&gt;&lt;/a&gt;Methods with Value Receivers Can&amp;rsquo;t Change the Original Value&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: beginner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Method receivers are like regular function arguments. If it&amp;rsquo;s declared to be a value then your function/method gets a copy of your receiver argument. This means making changes to the receiver will not affect the original value unless your receiver is a map or slice variable and you are updating the items in the collection or the fields you are updating in the receiver are pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    key *string
    items map[string]bool
}

func (this *data) pmethod() {  
    this.num = 7
}

func (this data) vmethod() {  
    this.num = 8
    *this.key = &amp;quot;v.key&amp;quot;
    this.items[&amp;quot;vmethod&amp;quot;] = true
}

func main() {  
    key := &amp;quot;key.1&amp;quot;
    d := data{1,&amp;amp;key,make(map[string]bool)}

    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=1 key=key.1 items=map[]

    d.pmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=key.1 items=map[]

    d.vmethod()
    fmt.Printf(&amp;quot;num=%v key=%v items=%v\n&amp;quot;,d.num,*d.key,d.items)
    //prints num=7 key=v.key items=map[vmethod:true]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-36-a-closing-http-response-body&#34;&gt;&lt;a name=&#34;36&#34;&gt;&lt;/a&gt;Closing HTTP Response Body&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you make requests using the standard http library you get a http response variable. If you don&amp;rsquo;t read the response body you still need to close it. Note that you must do it for empty responses too. It&amp;rsquo;s very easy to forget especially for new Go developers.&lt;/p&gt;

&lt;p&gt;Some new Go developers do try to close the response body, but they do it in the wrong place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    defer resp.Body.Close()//not ok
    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code works for successful requests, but if the http request fails the resp variable might be nil, which will cause a runtime panic.&lt;/p&gt;

&lt;p&gt;The most common why to close the response body is by using a defer call after the http response error check.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if err != nil {
        fmt.Println(err)
        return
    }

    defer resp.Body.Close()//ok, most of the time :-)
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time when your http request fails the resp variable will be nil and the err variable will be non-nil. However, when you get a redirection failure both variables will be non-nil. This means you can still end up with a leak.&lt;/p&gt;

&lt;p&gt;You can fix this leak by adding a call to close non-nil response bodies in the http response error handling block. Another option is to use one defer call to close response bodies for all failed and successful requests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    resp, err := http.Get(&amp;quot;https://api.ipify.org?format=json&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The orignal implementation for resp.Body.Close() also reads and discards the remaining response body data. This ensured that the http connection could be reused for another request if the keepalive http connection behavior is enabled. The latest http client behavior is different. Now it&amp;rsquo;s your responsibility to read and discard the remaining response data. If you don&amp;rsquo;t do it the http connection might be closed instead of being reused. This little gotcha is supposed to be documented in Go 1.5.&lt;/p&gt;

&lt;p&gt;If reusing the http connection is important for your application you might need to add something like this at the end of your response processing logic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_, err = io.Copy(ioutil.Discard, resp.Body)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will be necessary if you don&amp;rsquo;t read the entire response body right away, which might happen if you are processing json API responses with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;json.NewDecoder(resp.Body).Decode(&amp;amp;data)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-37-a-closing-http-connections&#34;&gt;&lt;a name=&#34;37&#34;&gt;&lt;/a&gt;Closing HTTP Connections&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some HTTP servers keep network connections open for a while (based on the HTTP 1.1 spec and the server &amp;ldquo;keep-alive&amp;rdquo; configurations). By default, the standard http library will close the network connections only when the target HTTP server asks for it. This means your app may run out of sockets/file descriptors under certain conditions.&lt;/p&gt;

&lt;p&gt;You can ask the http library to close the connection after your request is done by setting the Close field in the request variable to true.&lt;/p&gt;

&lt;p&gt;Another option is to add a Connection request header and set it to close. The target HTTP server should respond with a Connection: close header too. When the http library sees this response header it will also close the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    req, err := http.NewRequest(&amp;quot;GET&amp;quot;,&amp;quot;http://golang.org&amp;quot;,nil)
    if err != nil {
        fmt.Println(err)
        return
    }

    req.Close = true
    //or do this:
    //req.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)

    resp, err := http.DefaultClient.Do(req)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also disable http connection reuse globally. You&amp;rsquo;ll need to create a custom http transport configuration for it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
)

func main() {  
    tr := &amp;amp;http.Transport{DisableKeepAlives: true}
    client := &amp;amp;http.Client{Transport: tr}

    resp, err := client.Get(&amp;quot;http://golang.org&amp;quot;)
    if resp != nil {
        defer resp.Body.Close()
    }

    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(resp.StatusCode)

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(len(string(body)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you send a lot of requests to the same HTTP server it&amp;rsquo;s ok to keep the network connection open. However, if your app sends one or two requests to many different HTTP servers in a short period of time it&amp;rsquo;s a good idea to close the network connections right after your app receives the responses. Increasing the open file limit might be a good idea too. The correct solution depends on your application though.&lt;/p&gt;

&lt;h3 id=&#34;a-name-38-a-unmarshalling-json-numbers-into-interface-values&#34;&gt;&lt;a name=&#34;38&#34;&gt;&lt;/a&gt;Unmarshalling JSON Numbers into Interface Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Go treats numeric values in JSON as float64 numbers when you decode/unmarshal JSON data into an interface. This means the following code will fail with a panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = result[&amp;quot;status&amp;quot;].(int) //error
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Runtime Panic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic: interface conversion: interface is float64, not int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the JSON value you are trying to decode is an integer you have serveral options.&lt;/p&gt;

&lt;p&gt;Option one: use the float value as-is :-)&lt;/p&gt;

&lt;p&gt;Option two: convert the float value to the integer type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  if err := json.Unmarshal(data, &amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status = uint64(result[&amp;quot;status&amp;quot;].(float64)) //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option three: use a Decoder type to unmarshal JSON and tell it to represent JSON numbers using the Number interface type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status,_ = result[&amp;quot;status&amp;quot;].(json.Number).Int64() //ok
  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the string representation of your Number value to unmarshal it to a different numeric type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result map[string]interface{}
  var decoder = json.NewDecoder(bytes.NewReader(data))
  decoder.UseNumber()

  if err := decoder.Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  var status uint64
  if err := json.Unmarshal([]byte(result[&amp;quot;status&amp;quot;].(json.Number).String()), &amp;amp;status); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Println(&amp;quot;status value:&amp;quot;,status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option four: use a struct type that maps your numeric value to the numeric type you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  var data = []byte(`{&amp;quot;status&amp;quot;: 200}`)

  var result struct {
    Status uint64 `json:&amp;quot;status&amp;quot;`
  }

  if err := json.NewDecoder(bytes.NewReader(data)).Decode(&amp;amp;result); err != nil {
    fmt.Println(&amp;quot;error:&amp;quot;, err)
    return
  }

  fmt.Printf(&amp;quot;result =&amp;gt; %+v&amp;quot;,result)
  //prints: result =&amp;gt; {Status:200}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Option five: use a struct that maps your numeric value to the json.RawMessage type if you need to defer the value decoding.&lt;/p&gt;

&lt;p&gt;This option is useful if you have to perform conditional JSON field decoding where the field type or structure might change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;bytes&amp;quot;
  &amp;quot;fmt&amp;quot;
)

func main() {  
  records := [][]byte{
    []byte(`{&amp;quot;status&amp;quot;: 200, &amp;quot;tag&amp;quot;:&amp;quot;one&amp;quot;}`),
    []byte(`{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;two&amp;quot;}`),
  }

  for idx, record := range records {
    var result struct {
      StatusCode uint64
      StatusName string
      Status json.RawMessage `json:&amp;quot;status&amp;quot;`
      Tag string             `json:&amp;quot;tag&amp;quot;`
    }

    if err := json.NewDecoder(bytes.NewReader(record)).Decode(&amp;amp;result); err != nil {
      fmt.Println(&amp;quot;error:&amp;quot;, err)
      return
    }

    var sstatus string
    if err := json.Unmarshal(result.Status, &amp;amp;sstatus); err == nil {
      result.StatusName = sstatus
    }

    var nstatus uint64
    if err := json.Unmarshal(result.Status, &amp;amp;nstatus); err == nil {
      result.StatusCode = nstatus
    }

    fmt.Printf(&amp;quot;[%v] result =&amp;gt; %+v\n&amp;quot;,idx,result)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-39-a-comparing-structs-arrays-slices-and-maps&#34;&gt;&lt;a name=&#34;39&#34;&gt;&lt;/a&gt;Comparing Structs, Arrays, Slices, and Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the equality operator, ==, to compare struct variables if each structure field can be compared with the equality operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int
    fp float32
    complex complex64
    str string
    char rune
    yes bool
    events &amp;lt;-chan string
    handler interface{}
    ref *byte
    raw [10]byte
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2) //prints: v1 == v2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of the struct fields are not comparable then using the equality operator will result in compile time errors. Note that arrays are comparable only if their data items are comparable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,v1 == v2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go does provide a number of helper functions to compare variables that can&amp;rsquo;t be compared using the comparison operators.&lt;/p&gt;

&lt;p&gt;The most generic solution is to use the DeepEqual() function in the reflect package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

type data struct {  
    num int                //ok
    checks [10]func() bool //not comparable
    doit func() bool       //not comparable
    m map[string] string   //not comparable
    bytes []byte           //not comparable
}

func main() {  
    v1 := data{}
    v2 := data{}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true

    m1 := map[string]string{&amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;,&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;}
    m2 := map[string]string{&amp;quot;two&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;one&amp;quot;: &amp;quot;a&amp;quot;}
    fmt.Println(&amp;quot;m1 == m2:&amp;quot;,reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true

    s1 := []int{1, 2, 3}
    s2 := []int{1, 2, 3}
    fmt.Println(&amp;quot;s1 == s2:&amp;quot;,reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from being slow (which may or may not be a deal breaker for your application), DeepEqual() also has its own gotchas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,reflect.DeepEqual(b1, b2)) //prints: b1 == b2: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() doesn&amp;rsquo;t consider an empty slice to be equal to a &amp;ldquo;nil&amp;rdquo; slice. This behavior is different from the behavior you get using the bytes.Equal() function. bytes.Equal() considers &amp;ldquo;nil&amp;rdquo; and empty slices to be equal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    var b1 []byte = nil
    b2 := []byte{}
    fmt.Println(&amp;quot;b1 == b2:&amp;quot;,bytes.Equal(b1, b2)) //prints: b1 == b2: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DeepEqual() isn&amp;rsquo;t always perfect comparing slices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
    &amp;quot;encoding/json&amp;quot;
)

func main() {  
    var str string = &amp;quot;one&amp;quot;
    var in interface{} = &amp;quot;one&amp;quot;
    fmt.Println(&amp;quot;str == in:&amp;quot;,str == in,reflect.DeepEqual(str, in))
    //prints: str == in: true true

    v1 := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    v2 := []interface{}{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;}
    fmt.Println(&amp;quot;v1 == v2:&amp;quot;,reflect.DeepEqual(v1, v2))
    //prints: v1 == v2: false (not ok)

    data := map[string]interface{}{
        &amp;quot;code&amp;quot;: 200,
        &amp;quot;value&amp;quot;: []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;},
    }
    encoded, _ := json.Marshal(data)
    var decoded map[string]interface{}
    json.Unmarshal(encoded, &amp;amp;decoded)
    fmt.Println(&amp;quot;data == decoded:&amp;quot;,reflect.DeepEqual(data, decoded))
    //prints: data == decoded: false (not ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your byte slices (or strings) contain text data you might be tempted to use ToUpper() or ToLower() from the &amp;ldquo;bytes&amp;rdquo; and &amp;ldquo;strings&amp;rdquo; packages when you need to compare values in a case insensitive manner (before using ==,bytes.Equal(), or bytes.Compare()). It will work for English text, but it will not work for text in many other languages. strings.EqualFold() and bytes.EqualFold() should be used instead.&lt;/p&gt;

&lt;p&gt;If your byte slices contain secrets (e.g., cryptographic hashes, tokens, etc.) that need to be validated against user-provided data, don&amp;rsquo;t use reflect.DeepEqual(), bytes.Equal(), or bytes.Compare() because those functions will make your application vulnerable to timing attacks. To avoid leaking the timing information use the functions from the &amp;lsquo;crypto/subtle&amp;rsquo; package (e.g., subtle.ConstantTimeCompare()).&lt;/p&gt;

&lt;h3 id=&#34;a-name-40-a-recovering-from-a-panic&#34;&gt;&lt;a name=&#34;40&#34;&gt;&lt;/a&gt;Recovering From a Panic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recover() function can be used to catch/intercept a panic. Calling recover() will do the trick only when it&amp;rsquo;s done in a deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    recover() //doesn&#39;t do anything
    panic(&amp;quot;not good&amp;quot;)
    recover() //won&#39;t be executed :)
    fmt.Println(&amp;quot;ok&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    defer func() {
        fmt.Println(&amp;quot;recovered:&amp;quot;,recover())
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to recover() works only if it&amp;rsquo;s called directly in your deferred function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func doRecover() {  
    fmt.Println(&amp;quot;recovered =&amp;gt;&amp;quot;,recover()) //prints: recovered =&amp;gt; &amp;lt;nil&amp;gt;
}

func main() {  
    defer func() {
        doRecover() //panic is not recovered
    }()

    panic(&amp;quot;not good&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-41-a-updating-and-referencing-item-values-in-slice-array-and-map-range-clauses&#34;&gt;&lt;a name=&#34;41&#34;&gt;&lt;/a&gt;Updating and Referencing Item Values in Slice, Array, and Map &amp;ldquo;range&amp;rdquo; Clauses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data values generated in the &amp;ldquo;range&amp;rdquo; clause are copies of the actual collection elements. They are not references to the original items. This means that updating the values will not change the original data. It also means that taking the address of the values will not give you pointers to the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for _,v := range data {
        v *= 10 //original item is not changed
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [1 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to update the original collection record value use the index operator to access the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []int{1,2,3}
    for i,_ := range data {
        data[i] *= 10
    }

    fmt.Println(&amp;quot;data:&amp;quot;,data) //prints data: [10 20 30]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your collection holds pointer values then the rules are slightly different. You still need to use the index operator if you want the original record to point to another value, but you can update the data stored at the target location using the second value in the &amp;ldquo;for range&amp;rdquo; clause.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    data := []*struct{num int} {{1},{2},{3}}

    for _,v := range data {
        v.num *= 10
    }

    fmt.Println(data[0],data[1],data[2]) //prints &amp;amp;{10} &amp;amp;{20} &amp;amp;{30}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-42-a-hidden-data-in-slices&#34;&gt;&lt;a name=&#34;42&#34;&gt;&lt;/a&gt;&amp;ldquo;Hidden&amp;rdquo; Data in Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you reslice a slice, the new slice will reference the array of the original slice. If you forget about this behavior it can lead to unexpected memory usage if your application allocates large temporary slices creating new slices from them to refer to small sections of the original data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    return raw[:3]
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 10000 &amp;lt;byte_addr_x&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid this trap make sure to copy the data you need from the temporary slice (instead of reslicing it).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func get() []byte {  
    raw := make([]byte,10000)
    fmt.Println(len(raw),cap(raw),&amp;amp;raw[0]) //prints: 10000 10000 &amp;lt;byte_addr_x&amp;gt;
    res := make([]byte,3)
    copy(res,raw[:3])
    return res
}

func main() {  
    data := get()
    fmt.Println(len(data),cap(data),&amp;amp;data[0]) //prints: 3 3 &amp;lt;byte_addr_y&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-43-a-slice-data-corruption&#34;&gt;&lt;a name=&#34;43&#34;&gt;&lt;/a&gt;Slice Data &amp;ldquo;Corruption&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s say you need to rewrite a path (stored in a slice). You reslice the path to reference each directory modifying the first folder name and then you combine the names to create a new path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex]
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; uffixBBBB (not ok)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It didn&amp;rsquo;t work as you expected. Instead of &amp;ldquo;AAAAsuffix/BBBBBBBBB&amp;rdquo; you ended up with &amp;ldquo;AAAAsuffix/uffixBBBB&amp;rdquo;. It happened because both directory slices referenced the same underlying array data from the original path slice. This means that the original path is also modified. Depending on your application this might be a problem too.&lt;/p&gt;

&lt;p&gt;This problem can fixed by allocating new slices and copying the data you need. Another option is to use the full slice expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;bytes&amp;quot;
)

func main() {  
    path := []byte(&amp;quot;AAAA/BBBBBBBBB&amp;quot;)
    sepIndex := bytes.IndexByte(path,&#39;/&#39;)
    dir1 := path[:sepIndex:sepIndex] //full slice expression
    dir2 := path[sepIndex+1:]
    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAA
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB

    dir1 = append(dir1,&amp;quot;suffix&amp;quot;...)
    path = bytes.Join([][]byte{dir1,dir2},[]byte{&#39;/&#39;})

    fmt.Println(&amp;quot;dir1 =&amp;gt;&amp;quot;,string(dir1)) //prints: dir1 =&amp;gt; AAAAsuffix
    fmt.Println(&amp;quot;dir2 =&amp;gt;&amp;quot;,string(dir2)) //prints: dir2 =&amp;gt; BBBBBBBBB (ok now)

    fmt.Println(&amp;quot;new path =&amp;gt;&amp;quot;,string(path))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extra parameter in the full slice expression controls the capacity for the new slice. Now appending to that slice will trigger a new buffer allocation instead of overwriting the data in the second slice.&lt;/p&gt;

&lt;h3 id=&#34;a-name-44-a-stale-slices&#34;&gt;&lt;a name=&#34;44&#34;&gt;&lt;/a&gt;&amp;ldquo;Stale&amp;rdquo; Slices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multiple slices can reference the same data. This can happen when you create a new slice from an existing slice, for example. If your application relies on this behavior to function properly then you&amp;rsquo;ll need to worry about &amp;ldquo;stale&amp;rdquo; slices.&lt;/p&gt;

&lt;p&gt;At some point adding data to one of the slices will result in a new array allocation when the original array can&amp;rsquo;t hold any more new data. Now other slices will point to the old array (with old data).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;

func main() {  
    s1 := []int{1,2,3}
    fmt.Println(len(s1),cap(s1),s1) //prints 3 3 [1 2 3]

    s2 := s1[1:]
    fmt.Println(len(s2),cap(s2),s2) //prints 2 2 [2 3]

    for i := range s2 { s2[i] += 20 }

    //still referencing the same array
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [22 23]

    s2 = append(s2,4)

    for i := range s2 { s2[i] += 10 }

    //s1 is now &amp;quot;stale&amp;quot;
    fmt.Println(s1) //prints [1 22 23]
    fmt.Println(s2) //prints [32 33 14]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-45-type-declarations-and-methods&#34;&gt;&lt;a name=&#34;45&#34;&gt;&amp;lt;/&amp;gt;Type Declarations and Methods&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a type declaration by defining a new type from an existing (non-interface) type, you don&amp;rsquo;t inherit the methods defined for that existing type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myMutex sync.Mutex

func main() {  
    var mtx myMutex
    mtx.Lock() //error
    mtx.Unlock() //error  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox106401185/main.go:9: mtx.Lock undefined (type myMutex has no field or method Lock) /tmp/sandbox106401185/main.go:10: mtx.Unlock undefined (type myMutex has no field or method Unlock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do need the methods from the original type you can define a new struct type embedding the original type as an anonymous field.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker struct {  
    sync.Mutex
}

func main() {  
    var lock myLocker
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interface type declarations also retain their method sets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;sync&amp;quot;

type myLocker sync.Locker

func main() {  
    var lock myLocker = new(sync.Mutex)
    lock.Lock() //ok
    lock.Unlock() //ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-46-a-breaking-out-of-for-switch-and-for-select-code-blocks&#34;&gt;&lt;a name=&#34;46&#34;&gt;&lt;/a&gt;Breaking Out of &amp;ldquo;for switch&amp;rdquo; and &amp;ldquo;for select&amp;rdquo; Code Blocks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &amp;ldquo;break&amp;rdquo; statement without a label only gets you out of the inner switch/select block. If using a &amp;ldquo;return&amp;rdquo; statement is not an option then defining a label for the outer loop is the next best thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    loop:
        for {
            switch {
            case true:
                fmt.Println(&amp;quot;breaking out...&amp;quot;)
                break loop
            }
        }

    fmt.Println(&amp;quot;out!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &amp;ldquo;goto&amp;rdquo; statement will do the trick too&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;a-name-47-a-iteration-variables-and-closures-in-for-statements&#34;&gt;&lt;a name=&#34;47&#34;&gt;&lt;/a&gt;Iteration Variables and Closures in &amp;ldquo;for&amp;rdquo; Statements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most common gotcha in Go. The iteration variables in for statements are reused in each iteration. This means that each closure (aka function literal) created in your for loop will reference the same variable (and they&amp;rsquo;ll get that variable&amp;rsquo;s value at the time those goroutines start executing).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func() {
            fmt.Println(v)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest solution (that doesn&amp;rsquo;t require any changes to the goroutine) is to save the current iteration variable value in a local variable inside the for loop block.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        vcopy := v //
        go func() {
            fmt.Println(vcopy)
        }()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another solution is to pass the current iteration variable as a parameter to the anonymous goroutine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {  
    data := []string{&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;}

    for _,v := range data {
        go func(in string) {
            fmt.Println(in)
        }(v)
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a slightly more complicated version of the trap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: three, three, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        v := v
        go v.print()
    }

    time.Sleep(3 * time.Second)
    //goroutines print: one, two, three
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you think you&amp;rsquo;ll see when you run this code (and why)?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type field struct {  
    name string
}

func (p *field) print() {  
    fmt.Println(p.name)
}

func main() {  
    data := []*field{{&amp;quot;one&amp;quot;},{&amp;quot;two&amp;quot;},{&amp;quot;three&amp;quot;}}

    for _,v := range data {
        go v.print()
    }

    time.Sleep(3 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-48-a-deferred-function-call-argument-evaluation&#34;&gt;&lt;a name=&#34;48&#34;&gt;&lt;/a&gt;Deferred Function Call Argument Evaluation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arguments for a deferred function call are evaluated when the defer statement is evaluated (not when the function is actually executing).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var i int = 1

    defer fmt.Println(&amp;quot;result =&amp;gt;&amp;quot;,func() int { return i * 2 }())
    i++
    //prints: result =&amp;gt; 2 (not ok if you expected 4)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-49-a-deferred-function-call-execution&#34;&gt;&lt;a name=&#34;49&#34;&gt;&lt;/a&gt;Deferred Function Call Execution&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The deferred calls are executed at the end of the containing function and not at the end of the containing code block. It&amp;rsquo;s an easy mistake to make for new Go developers confusing the deferred code execution rules with the variable scoping rules. It can become a problem if you have a long running function with a for loop that tries to defer resource cleanup calls in each iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        f, err := os.Open(target)
        if err != nil {
            fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err) //prints error: too many open files
            break
        }
        defer f.Close() //will not be closed at the end of this code block
        //do something with the file...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to solve the problem is by wrapping the code block in a function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
)

func main() {  
    if len(os.Args) != 2 {
        os.Exit(-1)
    }

    start, err := os.Stat(os.Args[1])
    if err != nil || !start.IsDir(){
        os.Exit(-1)
    }

    var targets []string
    filepath.Walk(os.Args[1], func(fpath string, fi os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !fi.Mode().IsRegular() {
            return nil
        }

        targets = append(targets,fpath)
        return nil
    })

    for _,target := range targets {
        func() {
            f, err := os.Open(target)
            if err != nil {
                fmt.Println(&amp;quot;bad target:&amp;quot;,target,&amp;quot;error:&amp;quot;,err)
                return
            }
            defer f.Close() //ok
            //do something with the file...
        }()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another option is to get rid of the defer statement :-)&lt;/p&gt;

&lt;h3 id=&#34;a-name-50-a-failed-type-assertions&#34;&gt;&lt;a name=&#34;50&#34;&gt;&lt;/a&gt;Failed Type Assertions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failed type assertions return the &amp;ldquo;zero value&amp;rdquo; for the target type used in the assertion statement. This can lead to unexpected behavior when it&amp;rsquo;s mixed with variable shadowing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if data, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,data)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; 0 (not &amp;quot;great&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data interface{} = &amp;quot;great&amp;quot;

    if res, ok := data.(int); ok {
        fmt.Println(&amp;quot;[is an int] value =&amp;gt;&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;[not an int] value =&amp;gt;&amp;quot;,data)
        //prints: [not an int] value =&amp;gt; great (as expected)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-51-a-blocked-goroutines-and-resource-leaks&#34;&gt;&lt;a name=&#34;51&#34;&gt;&lt;/a&gt;Blocked Goroutines and Resource Leaks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: intermediate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rob Pike talked about a number of fundamental concurrency patterns in his &amp;ldquo;Go Concurrency Patterns&amp;rdquo; presentation at Google I/O in 2012. Fetching the first result from a number of targets is one of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function starts a goroutines for each search replica. Each goroutine sends its search result to the result channel. The first value from the result channel is returned.&lt;/p&gt;

&lt;p&gt;What about the results from the other goroutines? What about the goroutines themselves?&lt;/p&gt;

&lt;p&gt;The result channel in the First() function is unbuffered. This means that only the first goroutine returns. All other goroutines are stuck trying to send their results. This means if you have more than one replica each call will leak resources.&lt;/p&gt;

&lt;p&gt;To avoid the leaks you need to make sure all goroutines exit. One potential solution is to use a buffered result channel big enough to hold all results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,len(replicas))
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another potential solution is to use a select statement with a default case and a buffered result channel that can hold one value. The default case ensures that the goroutines don&amp;rsquo;t get stuck even when the result channel can&amp;rsquo;t receive messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result,1)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        default:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use a special cancellation channel to interrupt the workers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func First(query string, replicas ...Search) Result {  
    c := make(chan Result)
    done := make(chan struct{})
    defer close(done)
    searchReplica := func(i int) {
        select {
        case c &amp;lt;- replicas[i](query):
        case &amp;lt;- done:
        }
    }
    for i := range replicas {
        go searchReplica(i)
    }

    return &amp;lt;-c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why did the presentation contain these bugs? Rob Pike simply didn&amp;rsquo;t want to comlicate the slides. It makes sense, but it can be a problem for new Go developers who would use the code as is without thinking that it might have problems.&lt;/p&gt;

&lt;h3 id=&#34;a-name-52-a-using-pointer-receiver-methods-on-value-instances&#34;&gt;&lt;a name=&#34;52&#34;&gt;&lt;/a&gt;Using Pointer Receiver Methods On Value Instances&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s OK to call a pointer receiver method on a value as long as the value is addressable. In other words, you don&amp;rsquo;t need to have a value receiver version of the method in some cases.&lt;/p&gt;

&lt;p&gt;Not every variable is addressable though. Map elements are not addressable. Variables referenced through interfaces are also not addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func (p *data) print() {  
    fmt.Println(&amp;quot;name:&amp;quot;,p.name)
}

type printer interface {  
    print()
}

func main() {  
    d1 := data{&amp;quot;one&amp;quot;}
    d1.print() //ok

    var in printer = data{&amp;quot;two&amp;quot;} //error
    in.print()

    m := map[string]data {&amp;quot;x&amp;quot;:data{&amp;quot;three&amp;quot;}}
    m[&amp;quot;x&amp;quot;].print() //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Errors:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox017696142/main.go:21: cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver)
/tmp/sandbox017696142/main.go:25: cannot call pointer method on m[&amp;quot;x&amp;quot;] /tmp/sandbox017696142/main.go:25: cannot take the address of m[&amp;quot;x&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-53-a-updating-map-value-fields&#34;&gt;&lt;a name=&#34;53&#34;&gt;&lt;/a&gt;Updating Map Value Fields&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a map of struct values you can&amp;rsquo;t update individual struct fields.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fails:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Compile Error:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/tmp/sandbox380452744/main.go:9: cannot assign to m[&amp;quot;x&amp;quot;].name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work because map elements are not addressable.&lt;/p&gt;

&lt;p&gt;What can be extra confusing for new Go devs is the fact that slice elements are addressable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    s := []data {{&amp;quot;one&amp;quot;}}
    s[0].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(s)    //prints: [{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that a while ago it was possible to update map element fields in one of the Go compilers (gccgo), but that behavior was quickly fixed :-) It was also considered as a potential feature for Go 1.3. It wasn&amp;rsquo;t important enough to support at that point in time, so it&amp;rsquo;s still on the todo list.&lt;/p&gt;

&lt;p&gt;The first work around is to use a temporary variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    r := m[&amp;quot;x&amp;quot;]
    r.name = &amp;quot;two&amp;quot;
    m[&amp;quot;x&amp;quot;] = r
    fmt.Printf(&amp;quot;%v&amp;quot;,m) //prints: map[x:{two}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another workaround is to use a map of pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;x&amp;quot;].name = &amp;quot;two&amp;quot; //ok
    fmt.Println(m[&amp;quot;x&amp;quot;]) //prints: &amp;amp;{two}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, what happens when you run this code?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

type data struct {  
    name string
}

func main() {  
    m := map[string]*data {&amp;quot;x&amp;quot;:{&amp;quot;one&amp;quot;}}
    m[&amp;quot;z&amp;quot;].name = &amp;quot;what?&amp;quot; //???
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-54-a-nil-interfaces-and-nil-interfaces-values&#34;&gt;&lt;a name=&#34;54&#34;&gt;&lt;/a&gt;&amp;ldquo;nil&amp;rdquo; Interfaces and &amp;ldquo;nil&amp;rdquo; Interfaces Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the second most common gotcha in Go because interfaces are not pointers even though they may look like pointers. Interface variables will be &amp;ldquo;nil&amp;rdquo; only when their type and value fields are &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The interface type and value fields are populated based on the type and value of the variable used to create the corresponding interface variable. This can lead to unexpected behavior when you are trying to check if an interface variable equals to &amp;ldquo;nil&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    var data *byte
    var in interface{}

    fmt.Println(data,data == nil) //prints: &amp;lt;nil&amp;gt; true
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; true

    in = data
    fmt.Println(in,in == nil)     //prints: &amp;lt;nil&amp;gt; false
    //&#39;data&#39; is &#39;nil&#39;, but &#39;in&#39; is not &#39;nil&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch out for this trap when you have a function that returns interfaces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Incorrect:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res) //prints: good result: &amp;lt;nil&amp;gt;
        //&#39;res&#39; is not &#39;nil&#39;, but its value is &#39;nil&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Works:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    doit := func(arg int) interface{} {
        var result *struct{} = nil

        if(arg &amp;gt; 0) {
            result = &amp;amp;struct{}{}
        } else {
            return nil //return an explicit &#39;nil&#39;
        }

        return result
    }

    if res := doit(-1); res != nil {
        fmt.Println(&amp;quot;good result:&amp;quot;,res)
    } else {
        fmt.Println(&amp;quot;bad result (res is nil)&amp;quot;) //here as expected
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-55-a-stack-and-heap-variables&#34;&gt;&lt;a name=&#34;55&#34;&gt;&lt;/a&gt;Stack and Heap Variables&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don&amp;rsquo;t always know if your variable is allocated on the stack or heap. In C++ creating variables using the new operator always means that you have a heap variable. In Go the compiler decides where the variable will be allocated even if the new() or make() functions are used. The compiler picks the location to store the variable based on its size and the result of &amp;ldquo;escape analysis&amp;rdquo;. This also means that it&amp;rsquo;s ok to return references to local variables, which is not ok in other languages like C or C++.&lt;/p&gt;

&lt;p&gt;If you need to know where your variables are allocated pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go run -gcflags -m app.go).&lt;/p&gt;

&lt;h3 id=&#34;a-name-56-a-gomaxprocs-concurrency-and-parallelism&#34;&gt;&lt;a name=&#34;56&#34;&gt;&lt;/a&gt;GOMAXPROCS, Concurrency, and Parallelism&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 1.4 and below uses only one execution context / OS thread. This means that only one goroutine can execute at any given time. Starting with 1.5 Go sets the number of execution contexts to the number of logical CPU cores returned by runtime.NumCPU(). That number may or may not match the total number of logical CPU cores on your system depending on the CPU affinity settings of your process. You can adjust this number by changing the GOMAXPROCS environment variable or by calling the runtime.GOMAXPROCS() function.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a common misconception that GOMAXPROCS represents the number of CPUs Go will use to run goroutines. The runtime.GOMAXPROCS() function documentation adds more to the confusion. The GOMAXPROCS variable description (&lt;a href=&#34;https://golang.org/pkg/runtime/&#34;&gt;https://golang.org/pkg/runtime/&lt;/a&gt;) does a better job talking about OS threads.&lt;/p&gt;

&lt;p&gt;You can set GOMAXPROCS to more than the number of your CPUs. The max value for GOMAXPROCS is 256.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: X (1 on play.golang.org)
    fmt.Println(runtime.NumCPU())       //prints: X (1 on play.golang.org)
    runtime.GOMAXPROCS(20)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 20
    runtime.GOMAXPROCS(300)
    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 256
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-57-a-read-and-write-operation-reordering&#34;&gt;&lt;a name=&#34;57&#34;&gt;&lt;/a&gt;Read and Write Operation Reordering&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go may reorder some operations, but it ensures that the overall behavior in the goroutine where it happens doesn&amp;rsquo;t change. However, it doesn&amp;rsquo;t guarantee the order of execution across multiple goroutines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;runtime&amp;quot;
    &amp;quot;time&amp;quot;
)

var _ = runtime.GOMAXPROCS(3)

var a, b int

func u1() {  
    a = 1
    b = 2
}

func u2() {  
    a = 3
    b = 4
}

func p() {  
    println(a)
    println(b)
}

func main() {  
    go u1()
    go u2()
    go p()
    time.Sleep(1 * time.Second)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code a few times you might see these a and b variable combinations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
2

3
4

0
2

0
0

1
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting combination for a and b is &amp;ldquo;02&amp;rdquo;. It shows that b was updated before a.&lt;/p&gt;

&lt;p&gt;If you need to preserve the order of read and write operations across multiple goroutines you&amp;rsquo;ll need to use channels or the appropriate constructs from the &amp;ldquo;sync&amp;rdquo; package.&lt;/p&gt;

&lt;h3 id=&#34;a-name-58-a-preemptive-scheduling&#34;&gt;&lt;a name=&#34;58&#34;&gt;&lt;/a&gt;Preemptive Scheduling&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;level: advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s possible to have a rogue goroutine that prevents other goroutines from running. It can happen if you have a for loop that doesn&amp;rsquo;t allow the scheduler to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for loop doesn&amp;rsquo;t have to be empty. It&amp;rsquo;ll be a problem as long as it contains code that doesn&amp;rsquo;t trigger the scheduler execution.&lt;/p&gt;

&lt;p&gt;The scheduler will run after GC, &amp;ldquo;go&amp;rdquo; statements, blocking channel operations, blocking system calls, and lock operations. It may also run when a non-inlined function is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        fmt.Println(&amp;quot;not done!&amp;quot;) //not inlined
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out if the function you call in the for loop is inlined pass the &amp;ldquo;-m&amp;rdquo; gc flag to &amp;ldquo;go build&amp;rdquo; or &amp;ldquo;go run&amp;rdquo; (e.g., go build -gcflags -m).&lt;/p&gt;

&lt;p&gt;Another option is to invoke the scheduler explicitly. You can do it with the Gosched() function from the &amp;ldquo;runtime&amp;rdquo; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {  
    done := false

    go func(){
        done = true
    }()

    for !done {
        runtime.Gosched()
    }
    fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you made it here and you have comments or ideas feel free to add a note to this Reddit discussion.&lt;/p&gt;

&lt;p&gt;Thank you for your feedback and suggestions!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&#34; title=&#34;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to TOML</title>
      <link>http://alimy.me/post/dev_201603132045/</link>
      <pubDate>Sun, 13 Mar 2016 20:45:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132045/</guid>
      <description>&lt;h3 id=&#34;overview-of-date-and-calendar-classes&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;TOML stands for Tom’s Own Minimal Language. It is a configuration language vaguely similar to YAML or property lists, but far, far better. But before we get into it in detail, let’s look back at what came before.&lt;/p&gt;

&lt;h3 id=&#34;long-ago-in-a-galaxy-far-far-away&#34;&gt;Long Ago, In A Galaxy Far, Far Away&lt;/h3&gt;

&lt;p&gt;Since the beginning of computing, people have needed a way to configure their software. On Linux, this generally is done in text files. For simple configurations, good old foo = bar works pretty well. One setting per line, name on the left, value on the right, separated by an equals. Great. But when your configuration gets more complicated, this quickly breaks down. What if you need a value that is more than one line? How do you indicate a value should be parsed as a number instead of a string? How do you namespace related configuration values so you don’t need ridiculously long names to prevent collisions?&lt;/p&gt;

&lt;h3 id=&#34;the-dark-ages&#34;&gt;The Dark Ages&lt;/h3&gt;

&lt;p&gt;In the 90’s, we used XML. And it sucked. XML is verbose, it’s hard for humans to read and write, and it still doesn’t solve a lot of the problems above (like how to specify the type of a value). In addition, the XML spec is huge, processing is very complicated, and all the extra features invite abuse and overcomplication.
&lt;/p&gt;

&lt;h3 id=&#34;enlightenment&#34;&gt;Enlightenment&lt;/h3&gt;

&lt;p&gt;In the mid 2000’s, JSON came to popularity as a data exchange format, and it was so much better than XML. It had real types, it was easy for programs to process, and you didn’t have to write a spec on what values should get processed in what way (well, mostly). It was sigificantly less verbose than XML. But it is a format intended for computers to read and write, not humans. It is a pain to write by hand, and even pretty-printed, it can be hard to read and the compact data format turns into a nested mess of curly braces. Also, JSON is not without its problems… for example, there’s no date type, there’s no support for comments, and all numbers are floats.&lt;/p&gt;

&lt;h3 id=&#34;a-false-start&#34;&gt;A False Start&lt;/h3&gt;

&lt;p&gt;YAML came to popularity some time after JSON as a more human-readable format, and its key: value syntax and pretty indentation is definitely a lot easier on the eyes than JSON’s nested curly-braces. However, YAML trades ease of reading for difficulty in writing. Indentation as delimiters is fraught with error… figuring out how to get multiple lines of data into any random value is an exercise in googling and trial &amp;amp; error.&lt;/p&gt;

&lt;p&gt;The YAML spec is also ridiculously long. 100% compatible parsers are very difficult to write. Writing YAML by hand is a ridden with landmines of corner cases where your choice of names or values happens to hit a reserved word or special marker. It does support comments, though.&lt;/p&gt;

&lt;h3 id=&#34;the-savior&#34;&gt;The Savior&lt;/h3&gt;

&lt;p&gt;On February 23, 2013, Tom Preston-Werner (former CEO of GitHub) made his first commit to &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;https://github.com/toml-lang/toml&lt;/a&gt;. TOML stands for Tom’s Obvious, Minimal Language. It is a language designed for configuring software. Finally.&lt;/p&gt;

&lt;p&gt;TOML takes inspiration from all of the above (well, except XML) and even gets some of its syntax from Microsoft’s INI files. It is easy to write by hand and easy to read. The spec is short and understandable by mere humans, and it’s fairly easy for computers to parse. It supports comments, has first class dates, and supports both integers and floats. It is generally insensitive to whitespace, without requiring a ton of delimiters.&lt;/p&gt;

&lt;p&gt;Let’s dive in.&lt;/p&gt;

&lt;h3 id=&#34;the-basics&#34;&gt;The Basics&lt;/h3&gt;

&lt;p&gt;The basic form is key = value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Comments start with hash
foo = &amp;quot;strings are in quotes and are always UTF8 with escape codes: \n \u00E9&amp;quot;

bar = &amp;quot;&amp;quot;&amp;quot;multi-line strings
use three quotes&amp;quot;&amp;quot;&amp;quot;

baz = &#39;literal\strings\use\single\quotes&#39;

bat = &#39;&#39;&#39;multiline\literals\use
three\quotes&#39;&#39;&#39;

int = 5 # integers are just numbers
float = 5.0 # floats have a decimal point with numbers on both sides

date = 2006-05-27T07:32:00Z # dates are ISO 8601 full zulu form

bool = true # good old true and false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One cool point: If the first line of a multiline string (either literal or not) is a line return, it will be trimmed. So you can make your big blocks of text start on the line after the name of the value and not need to worry about the extraneous newline at the beginning of your text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;preabmle = &amp;quot;&amp;quot;&amp;quot;
We the people of the United States, in order to form a more perfect union,
establish justice, insure domestic tranquility, provide for the common defense,
promote the general welfare, and secure the blessings of liberty to ourselves
and our posterity, do ordain and establish this Constitution for the United
States of America.&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Lists (arrays) are signified with brackets and delimited with commas. Only primitives are allowed in this form, though you may have nested lists. The format is forgiving, ignoring whitespace and newlines, and yes, the last comma is optional (thank you!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo = [ &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;
        &amp;quot;bat&amp;quot;
]

nums = [ 1, 2, ]

nested = [[ &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;], [1, 2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love that the format is forgiving of whitespace and that last comma. I like that the arrays are all of a single type, but allowing mixed types of sub-arrays bugs the heck out of me.&lt;/p&gt;

&lt;h3 id=&#34;now-we-get-crazy&#34;&gt;Now we get crazy&lt;/h3&gt;

&lt;p&gt;What’s left? In JSON there are objects, in YAML there are associative arrays… in common parlance they are maps or dictionaries or hash tables. Named collections of key/value pairs.&lt;/p&gt;

&lt;p&gt;In TOML they are called tables and look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# some config above
[table_name]
foo = 1
bar = 2
Foo and bar are keys in the table called table_name. Tables have to be at the end of the config file. Why? because there’s no end delimiter. All keys under a table declaration are associated with that table, until a new table is declared or the end of the file. So declaring two tables looks like this:

# some config above
[table1]
foo = 1
bar = 2

[table2]
	foo = 1
	baz = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The declaration of table2 defines where table1 ends. Note that you can indent the values if you want, or not. TOML doesn’t care.&lt;/p&gt;

&lt;p&gt;If you want nested tables, you can do that, too. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table1]
	foo = &amp;quot;bar&amp;quot;

[table1.nested_table]
	baz = &amp;quot;bat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nested_table&lt;/code&gt; is defined as a value in &lt;code&gt;table1&lt;/code&gt; because its name starts with &lt;code&gt;table1..&lt;/code&gt; Again, the table goes until the next table definition, so &lt;code&gt;baz=&amp;quot;bat&amp;quot;&lt;/code&gt; is a value in &lt;code&gt;table1.nested_table&lt;/code&gt;. You can indent the nested table to make it more obvious, but again, all whitespace is optional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table1]
	foo = &amp;quot;bar&amp;quot;

	[table1.nested_table]
		baz = &amp;quot;bat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;table1&amp;quot; : {
		&amp;quot;foo&amp;quot; : &amp;quot;bar&amp;quot;,
		&amp;quot;nested_table&amp;quot; : {
			&amp;quot;baz&amp;quot; : &amp;quot;bat&amp;quot;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having to retype the parent table name for each sub-table is kind of annoying, but I do like that it is very explicit. It also means that ordering and indenting and delimiters don’t matter. You don’t have to declare parent tables if they’re empty, so you can do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[foo.bar.baz]
bat = &amp;quot;hi&amp;quot;
Which is the equivalent to this JSON:

{
	&amp;quot;foo&amp;quot; : {
		&amp;quot;bar&amp;quot; : {
			&amp;quot;baz&amp;quot; : {
				&amp;quot;bat&amp;quot; : &amp;quot;hi&amp;quot;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;last-but-not-least&#34;&gt;Last but not least&lt;/h3&gt;

&lt;p&gt;The last thing is arrays of tables, which are declared with double brackets thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[comments]]
author = &amp;quot;Nate&amp;quot;
text = &amp;quot;Great Article!&amp;quot;

[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;
This is equivalent to the JSON:

{
	&amp;quot;comments&amp;quot; : [
		{
			&amp;quot;author&amp;quot; : &amp;quot;Nate&amp;quot;,
			&amp;quot;text&amp;quot; : Great Article!&amp;quot;
		},
		{
			&amp;quot;author&amp;quot; : &amp;quot;Anonymous&amp;quot;,
			&amp;quot;text&amp;quot; : Love It!&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays of tables inside another table get combined in the way you’d expect, like [[table1.array]].&lt;/p&gt;

&lt;p&gt;TOML is very permissive here. Because all tables have very explicitly defined parentage, the order they’re defined in doesn’t matter. You can have tables (and entries in an array of tables) in whatever order you want. This is totally acceptable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;

[foo.bar.baz]
bat = &amp;quot;hi&amp;quot;

[foo.bar]
howdy = &amp;quot;neighbor&amp;quot;

[[comments]]
author = &amp;quot;Anonymous&amp;quot;
text = &amp;quot;Love it!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it generally makes sense to actually order things in a more organized fashion, but it’s nice that you can’t shoot yourself in the foot if you reorder things “incorrectly”.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s TOML. It’s pretty awesome.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&#34;https://github.com/toml-lang/toml#implementations&#34; title=&#34;list of parsers&#34;&gt;list of parsers&lt;/a&gt; on the TOML page on github for pretty much whatever language you want. I recommend &lt;a href=&#34;https://github.com/BurntSushi/toml &#39;BurntSushi&#34;&gt;BurntSushi’s for Go&lt;/a&gt;, since it works just like the built-in parsers.&lt;/p&gt;

&lt;p&gt;It is now my default configuration language for all the applications I write.&lt;/p&gt;

&lt;p&gt;The next time you write an application that needs some configuration, take a look at TOML. I think your users will thank you.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;https://npf.io/2014/08/intro-to-toml/&#34; title=&#34;Intro to TOML&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java: Date And Calendar</title>
      <link>http://alimy.me/post/dev_201603132030/</link>
      <pubDate>Sun, 13 Mar 2016 20:30:00 CST</pubDate>
      
      <guid>http://alimy.me/post/dev_201603132030/</guid>
      <description>&lt;h3 id=&#34;overview-of-date-and-calendar-classes&#34;&gt;Overview of Date and Calendar classes&lt;/h3&gt;

&lt;p&gt;In this tutorial we look at the classes in java that are helpful in manipulating dates. Manipulating dates in java can be challenging, especially if you are building applications that cater to multiple timezones. Parsing dates, printing a date in UTC, printing a date in a different timezone, comparing dates, adding time to date&amp;hellip; we will be looking at all of these in this tutorial. We first begin with the introduction to the classes and then follow up with examples. You may want to directly jump to the examples, however, we strongly recommend that you understand the classes first, since that will make the examples very easy to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java.util.Date - This class is used to represent a specific time with a precision of millisecond. If you create a new Date object, it obtains the current system time using System.currentTimeMillis(). This is the number of milliseconds since epoch time (midnight, January 1, 1970 UTC). Here&amp;rsquo;s the tricky part, date stores time as number of seconds since epoch, it is a UTC time. However, when you print the date, you get the string representation of the date in the local timezone. Also note that the Date class is not designed to manipulate hour, month, year etc or retrieve them. Use this class only to create data or compare two dates. For all other uses, see the Calendar or GregorianCalendar class.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.Calendar - Calendar class allows manipulating data using its various fields such as minute, hour, day etc. As in the java.util.Date object, time is represented as number of milliseconds since epoch time. To get an instance of the Calendar use the Calendar.getInstance() method which returns a locale sensitive Calendar instance. Various set and get methods can be used to set and get time values. The current time is represented in two ways - 1. as number of milliseconds since epoch and 2. as local fields such as YEAR, MONTH, DAY, HOUR, MINUTE etc. The conversion between the two types is achieved by using the timezone offset (getOffset()) and the daylight savings fields.&lt;br /&gt;
the MONTH fields starts from 0 (JANUARY).&lt;br /&gt;
The DAY_OF_MONTH starts from 1&lt;br /&gt;
the DAY_OF_WEEK starts from SUNDAY with a value of 1.&lt;br /&gt;
HOUR starts from 0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;java.util.GregorialCalendar - A GregorianCalendar is the default implementation of the Abstract Calendar class. Next let us look at examples
&lt;/p&gt;

&lt;h4 id=&#34;create-a-date-object-and-print-it&#34;&gt;Create a Date object and print it&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public void createDateAndPrintIt() {
// create and prints the current date. It prints the data in the local
// timezone
System.out.println(new java.util.Date());
// prints Sun Jul 28 20:09:36 IST 2013
// get the number of milli seconds since epock
System.out.println(new java.util.Date().getTime());
// prints 1375022617792
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-an-instance-of-calendar-object-and-print-it&#34;&gt;get an instance of Calendar object and print it&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public void createCalendarAndPrintIt() {
Calendar cal = Calendar.getInstance();
System.out.println(cal);
// java.util.GregorianCalendar[time=1375025205859,areFieldsSet=true,areAllFieldsSet=true,lenient=true,
// zone=sun.util.calendar.ZoneInfo[id=&amp;quot;Asia/Calcutta&amp;quot;,offset=19800000,dstSavings=0,useDaylight=false,transitions=6,lastRule=null],
// firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,
// DAY_OF_YEAR=209,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=56,SECOND=45,MILLISECOND=859,ZONE_OFFSET=19800000,DST_OFFSET=0]
System.out.println(cal.getTime());
// prints Sun Jul 28 20:56:45 IST 2013
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;manipulate-calendar&#34;&gt;Manipulate Calendar&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public void manipulateCalendar() {
Calendar cal = Calendar.getInstance();
System.out.println(cal.getTime());// Sun Jul 28 21:53:55 IST 2013
// add a day
cal.add(Calendar.DAY_OF_MONTH, 1);
System.out.println(cal.getTime());// Mon Jul 29 21:53:55 IST 2013
cal.add(Calendar.DAY_OF_WEEK, 1);
System.out.println(cal.getTime());// Tue Jul 30 21:53:55 IST 2013
cal.add(Calendar.HOUR, 1);
System.out.println(cal.getTime());// Tue Jul 30 22:53:55 IST 2013
cal.add(Calendar.HOUR_OF_DAY, 1);
System.out.println(cal.getTime());// Tue Jul 30 23:53:55 IST 2013
cal.add(Calendar.MINUTE, 100);
System.out.println(cal.getTime());// Wed Jul 31 01:33:55 IST 2013
// demonstrate leniency
cal.add(Calendar.DAY_OF_MONTH, 32);
System.out.println(cal.getTime());// Sun Sep 01 01:33:55 IST 2013
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;(Note: This article’s original links is &lt;a href=&#34;http://www.studytrails.com/java/date/java-date-and-calendar-classes.jsp&#34; title=&#34;Date And Calendar&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt; )&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
