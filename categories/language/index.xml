<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Language on Alimy </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alimy.me/categories/language/</link>
    
    
    <copyright>Copyright (c) 20015 - 2016, Alimy; all rights reserved.</copyright>
    <updated>Sun, 03 Jan 2016 00:00:00 UTC</updated>
    
    <item>
      <title>关于TOML</title>
      <link>http://alimy.me/post/dev_201601031221/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601031221/</guid>
      <description>

&lt;h2 id=&#34;toml的由来:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;TOML的由来&lt;/h2&gt;

&lt;p&gt;TOML的全称是　Tom&amp;rsquo;s Obvious, Minimal Language，因为它是GitHub　前CEO,联合创始人
Tom Preston-Werner 于2013年创建的语言。&lt;/p&gt;

&lt;p&gt;配置文件的使用由来已久，从.ini、XML、JSON、YAML再到TOML，语言的表达能力越来越强，同时书
写便捷性也在不断提升。&lt;/p&gt;

&lt;h2 id=&#34;toml-的目标:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;TOML 的目标&lt;/h2&gt;

&lt;p&gt;TOML的目标是成为一个小规模的易于使用的语义化配置文件格式。TOML被设计为可以无二义性的转换
为一个哈希表(Hash table)，从而被多种语言解析。&lt;/p&gt;

&lt;h3 id=&#34;例子:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;例子&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;title = &amp;quot;TOML 例子&amp;quot;

[owner]
name = &amp;quot;Tom Preston-Werner&amp;quot;
organization = &amp;quot;GitHub&amp;quot;
bio = &amp;quot;GitHub Cofounder &amp;amp; CEO\nLikes tater tots and beer.&amp;quot;
dob = 1979-05-27T07:32:00Z # 日期时间是一等公民。为什么不呢？

[database]
server = &amp;quot;192.168.1.1&amp;quot;
ports = [ 8001, 8001, 8002 ]
connection_max = 5000
enabled = true

[servers]

  # 你可以依照你的意愿缩进。使用空格或Tab。TOML不会在意。
  [servers.alpha]
  ip = &amp;quot;10.0.0.1&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

  [servers.beta]
  ip = &amp;quot;10.0.0.2&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

[clients]
data = [ [&amp;quot;gamma&amp;quot;, &amp;quot;delta&amp;quot;], [1, 2] ]

# 在数组里换行没有关系。
hosts = [
  &amp;quot;alpha&amp;quot;,
  &amp;quot;omega&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TOML是大小写敏感的。&lt;/p&gt;

&lt;h3 id=&#34;注释:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;注释&lt;/h3&gt;

&lt;p&gt;使用 # 表示注释：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# I am a comment. Hear me roar. Roar.
key = &amp;quot;value&amp;quot; # Yeah, you can do this.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字符串:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;字符串&lt;/h3&gt;

&lt;p&gt;字符串和 JSON 的定义一致，只有一点除外：　TOML 要求使用　UTF-8 编码。&lt;/p&gt;

&lt;p&gt;注释以引号包裹，里面的字符必须是　UTF-8 格式。引号、反斜杠和控制字符（U+0000 到 U+001F）
需要转义。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;I&#39;m a string. \&amp;quot;You can quote me\&amp;quot;. Name\tJos\u00E9\nLocation\tSF.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用的转义序列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\b     - backspace       (U+0008)
\t     - tab             (U+0009)
\n     - linefeed        (U+000A)
\f     - form feed       (U+000C)
\r     - carriage return (U+000D)
\&amp;quot;     - quote           (U+0022)
\/     - slash           (U+002F)
\\     - backslash       (U+005C)
\uXXXX - unicode         (U+XXXX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用保留的特殊字符，TOML　会抛出错误。例如，在　Windows 平台上，应该使用两个反斜杠来表示
路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrong = &amp;quot;C:\Users\nodejs\templates&amp;quot; # 注意：这不会生成合法的路径。
right = &amp;quot;C:\\Users\\nodejs\\templates&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二进制数据建议使用　Base64　或其他合适的编码。具体的处理取决于特定的应用。&lt;/p&gt;

&lt;h3 id=&#34;整数:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;整数&lt;/h3&gt;

&lt;p&gt;整数就是一些没有小数点的数字。想用负数？按直觉来就行。整数的尺寸最小为64位。&lt;/p&gt;

&lt;h3 id=&#34;浮点数:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;浮点数&lt;/h3&gt;

&lt;p&gt;浮点数带小数点。小数点两边都有数字。64位精度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3.1415
-0.01
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;布尔值:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;布尔值&lt;/h3&gt;

&lt;p&gt;布尔值永远是小写。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;日期时间:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;日期时间&lt;/h3&gt;

&lt;p&gt;使用　ISO 8601　完整格式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1979-05-27T07:32:00Z
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数组:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;数组&lt;/h3&gt;

&lt;p&gt;数组使用方括号包裹。空格会被忽略。元素使用逗号分隔。注意，不允许混用数据类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 1, 2, 3 ]
[ &amp;quot;red&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;green&amp;quot; ]
[ [ 1, 2 ], [3, 4, 5] ]
[ [ 1, 2 ], [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] ] # 这是可以的。
[ 1, 2.0 ] # 注意：这是不行的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数组可以多行。也就是说，除了空格之外，方括号间的换行也会被忽略。在关闭方括号前的最终项后的
逗号是允许的。&lt;/p&gt;

&lt;h3 id=&#34;表格:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;表格&lt;/h3&gt;

&lt;p&gt;表格（也叫哈希表或字典）是键值对的集合。它们在方括号内，自成一行。注意和数组相区分，数组只
有值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在此之下，直到下一个　table 或　EOF 之前，是这个表格的键值对。键在左，值在右，等号在中间。
键以非空字符开始，以等号前的非空字符为结尾。键值对是无序的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[table]
key = &amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以随意缩进，使用 Tab 或空格。为什么要缩进呢？因为你可以嵌套表格。&lt;/p&gt;

&lt;p&gt;嵌套表格的表格名称中使用.。你可以任意命名你的表格，只是不要用点，点是保留的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[dog.tater]
type = &amp;quot;pug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上等价于如下的 JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;dog&amp;quot;: { &amp;quot;tater&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;pug&amp;quot; } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不想的话，你不用声明所有的父表。TOML　知道该如何处理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# [x] 你
# [x.y] 不需要
# [x.y.z] 这些
[x.y.z.w] # 可以直接写
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;空表是允许的，其中没有键值对。&lt;/p&gt;

&lt;p&gt;只要父表没有被直接定义，而且没有定义一个特定的键，你可以继续写入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[a.b]
c = 1

[a]
d = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而你不能多次定义键和表格。这么做是不合法的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 别这么干！

[a]
b = 1

[a]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 也别这个干

[a]
b = 1

[a.b]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;表格数组:c808c7cfd184060a6bdad6a24f7f1e55&#34;&gt;表格数组&lt;/h3&gt;

&lt;p&gt;最后要介绍的类型是表格数组。表格数组可以通过包裹在双方括号内的表格名来表达。使用相同的双方
括号名称的表格是同一个数组的元素。表格按照书写的顺序插入。双方括号表格如果没有键值对，会被
当成空表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[products]]
name = &amp;quot;Hammer&amp;quot;
sku = 738594937

[[products]]

[[products]]
name = &amp;quot;Nail&amp;quot;
sku = 284758393
color = &amp;quot;gray&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于以下的　JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;products&amp;quot;: [
    { &amp;quot;name&amp;quot;: &amp;quot;Hammer&amp;quot;, &amp;quot;sku&amp;quot;: 738594937 },
    { },
    { &amp;quot;name&amp;quot;: &amp;quot;Nail&amp;quot;, &amp;quot;sku&amp;quot;: 284758393, &amp;quot;color&amp;quot;: &amp;quot;gray&amp;quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表格数组同样可以嵌套。只需在子表格上使用相同的双方括号语法。每一个双方括号子表格回从属于最
近定义的上层表格元素。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [fruit.physical]
    color = &amp;quot;red&amp;quot;
    shape = &amp;quot;round&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;granny smith&amp;quot;

[[fruit]]
  name = &amp;quot;banana&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;plantain&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于如下的　JSON 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;fruit&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;apple&amp;quot;,
      &amp;quot;physical&amp;quot;: {
        &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
        &amp;quot;shape&amp;quot;: &amp;quot;round&amp;quot;
      },
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;red delicious&amp;quot; },
        { &amp;quot;name&amp;quot;: &amp;quot;granny smith&amp;quot; }
      ]
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;banana&amp;quot;,
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;plantain&amp;quot; }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尝试定义一个普通的表格，使用已经定义的数组的名称，将抛出一个解析错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 不合法的　TOML

[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  # 和上面冲突了
  [fruit.variety]
    name = &amp;quot;granny smith&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TOML v0.4.0</title>
      <link>http://alimy.me/post/dev_201601021221/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 UTC</pubDate>
      
      <guid>http://alimy.me/post/dev_201601021221/</guid>
      <description>

&lt;p&gt;Tom&amp;rsquo;s Obvious, Minimal Language.&lt;/p&gt;

&lt;p&gt;By Tom Preston-Werner.&lt;/p&gt;

&lt;p&gt;Be warned, this spec is still changing a lot. Until it&amp;rsquo;s marked as 1.0, you
should assume that it is unstable and act accordingly.&lt;/p&gt;

&lt;h2 id=&#34;objectives:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Objectives&lt;/h2&gt;

&lt;p&gt;TOML aims to be a minimal configuration file format that&amp;rsquo;s easy to read due to
obvious semantics. TOML is designed to map unambiguously to a hash table. TOML
should be easy to parse into data structures in a wide variety of languages.&lt;/p&gt;

&lt;h2 id=&#34;example:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# This is a TOML document. Boom.

title = &amp;quot;TOML Example&amp;quot;

[owner]
name = &amp;quot;Lance Uppercut&amp;quot;
dob = 1979-05-27T07:32:00-08:00 # First class dates? Why not?

[database]
server = &amp;quot;192.168.1.1&amp;quot;
ports = [ 8001, 8001, 8002 ]
connection_max = 5000
enabled = true

[servers]

  # You can indent as you please. Tabs or spaces. TOML don&#39;t care.
  [servers.alpha]
  ip = &amp;quot;10.0.0.1&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

  [servers.beta]
  ip = &amp;quot;10.0.0.2&amp;quot;
  dc = &amp;quot;eqdc10&amp;quot;

[clients]
data = [ [&amp;quot;gamma&amp;quot;, &amp;quot;delta&amp;quot;], [1, 2] ]

# Line breaks are OK when inside arrays
hosts = [
  &amp;quot;alpha&amp;quot;,
  &amp;quot;omega&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;spec:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Spec&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TOML is case sensitive.&lt;/li&gt;
&lt;li&gt;A TOML file must contain only UTF-8 encoded Unicode characters.&lt;/li&gt;
&lt;li&gt;Whitespace means tab (0x09) or space (0x20).&lt;/li&gt;
&lt;li&gt;Newline means LF (0x0A) or CRLF (0x0D0A).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comment:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Comment&lt;/h2&gt;

&lt;p&gt;Speak your mind with the hash symbol. They go from the symbol to the end of the
line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# I am a comment. Hear me roar. Roar.
key = &amp;quot;value&amp;quot; # Yeah, you can do this.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;String&lt;/h2&gt;

&lt;p&gt;There are four ways to express strings: basic, multi-line basic, literal, and
multi-line literal. All strings must contain only valid UTF-8 characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic strings&lt;/strong&gt; are surrounded by quotation marks. Any Unicode character may
be used except those that must be escaped: quotation mark, backslash, and the
control characters (U+0000 to U+001F).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;&amp;quot;I&#39;m a string. \&amp;quot;You can quote me\&amp;quot;. Name\tJos\u00E9\nLocation\tSF.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For convenience, some popular characters have a compact escape sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\b         - backspace       (U+0008)
\t         - tab             (U+0009)
\n         - linefeed        (U+000A)
\f         - form feed       (U+000C)
\r         - carriage return (U+000D)
\&amp;quot;         - quote           (U+0022)
\\         - backslash       (U+005C)
\uXXXX     - unicode         (U+XXXX)
\UXXXXXXXX - unicode         (U+XXXXXXXX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any Unicode character may be escaped with the &lt;code&gt;\uXXXX&lt;/code&gt; or &lt;code&gt;\UXXXXXXXX&lt;/code&gt; forms.
The escape codes must be valid Unicode &lt;a href=&#34;http://unicode.org/glossary/#unicode_scalar_value&#34;&gt;scalar values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All other escape sequences not listed above are reserved and, if used, TOML
should produce an error.&lt;/p&gt;

&lt;p&gt;Sometimes you need to express passages of text (e.g. translation files) or would
like to break up a very long string into multiple lines. TOML makes this easy.
&lt;strong&gt;Multi-line basic strings&lt;/strong&gt; are surrounded by three quotation marks on each
side and allow newlines. A newline immediately following the opening delimiter
will be trimmed. All other whitespace and newline characters remain intact.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key1 = &amp;quot;&amp;quot;&amp;quot;
Roses are red
Violets are blue&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TOML parsers should feel free to normalize newline to whatever makes sense for
their platform.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# On a Unix system, the above multi-line string will most likely be the same as:
key2 = &amp;quot;Roses are red\nViolets are blue&amp;quot;

# On a Windows system, it will most likely be equivalent to:
key3 = &amp;quot;Roses are red\r\nViolets are blue&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For writing long strings without introducing extraneous whitespace, end a line
with a &lt;code&gt;\&lt;/code&gt;. The &lt;code&gt;\&lt;/code&gt; will be trimmed along with all whitespace (including
newlines) up to the next non-whitespace character or closing delimiter. If the
first characters after the opening delimiter are a backslash and a newline, then
they will both be trimmed along with all whitespace and newlines up to the next
non-whitespace character or closing delimiter. All of the escape sequences that
are valid for basic strings are also valid for multi-line basic strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# The following strings are byte-for-byte equivalent:
key1 = &amp;quot;The quick brown fox jumps over the lazy dog.&amp;quot;

key2 = &amp;quot;&amp;quot;&amp;quot;
The quick brown \


  fox jumps over \
    the lazy dog.&amp;quot;&amp;quot;&amp;quot;

key3 = &amp;quot;&amp;quot;&amp;quot;\
       The quick brown \
       fox jumps over \
       the lazy dog.\
       &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any Unicode character may be used except those that must be escaped: backslash
and the control characters (U+0000 to U+001F). Quotation marks need not be
escaped unless their presence would create a premature closing delimiter.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a frequent specifier of Windows paths or regular expressions, then
having to escape backslashes quickly becomes tedious and error prone. To help,
TOML supports literal strings where there is no escaping allowed at all.
&lt;strong&gt;Literal strings&lt;/strong&gt; are surrounded by single quotes. Like basic strings, they
must appear on a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# What you see is what you get.
winpath  = &#39;C:\Users\nodejs\templates&#39;
winpath2 = &#39;\\ServerX\admin$\system32\&#39;
quoted   = &#39;Tom &amp;quot;Dubs&amp;quot; Preston-Werner&#39;
regex    = &#39;&amp;lt;\i\c*\s*&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since there is no escaping, there is no way to write a single quote inside a
literal string enclosed by single quotes. Luckily, TOML supports a multi-line
version of literal strings that solves this problem. &lt;strong&gt;Multi-line literal
strings&lt;/strong&gt; are surrounded by three single quotes on each side and allow newlines.
Like literal strings, there is no escaping whatsoever. A newline immediately
following the opening delimiter will be trimmed. All other content between the
delimiters is interpreted as-is without modification.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;regex2 = &#39;&#39;&#39;I [dw]on&#39;t need \d{2} apples&#39;&#39;&#39;
lines  = &#39;&#39;&#39;
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For binary data it is recommended that you use Base64 or another suitable ASCII
or UTF-8 encoding. The handling of that encoding will be application specific.&lt;/p&gt;

&lt;h2 id=&#34;integer:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Integer&lt;/h2&gt;

&lt;p&gt;Integers are whole numbers. Positive numbers may be prefixed with a plus sign.
Negative numbers are prefixed with a minus sign.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;+99
42
0
-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For large numbers, you may use underscores to enhance readability. Each
underscore must be surrounded by at least one digit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1_000
5_349_221
1_2_3_4_5     # valid but inadvisable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leading zeros are not allowed. Hex, octal, and binary forms are not allowed.
Values such as &amp;ldquo;infinity&amp;rdquo; and &amp;ldquo;not a number&amp;rdquo; that cannot be expressed as a
series of digits are not allowed.&lt;/p&gt;

&lt;p&gt;64 bit (signed long) range expected (âˆ’9,223,372,036,854,775,808 to
9,223,372,036,854,775,807).&lt;/p&gt;

&lt;h2 id=&#34;float:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Float&lt;/h2&gt;

&lt;p&gt;A float consists of an integer part (which may be prefixed with a plus or minus
sign) followed by a fractional part and/or an exponent part. If both a
fractional part and exponent part are present, the fractional part must precede
the exponent part.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# fractional
+1.0
3.1415
-0.01

# exponent
5e+22
1e6
-2E-2

# both
6.626e-34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A fractional part is a decimal point followed by one or more digits.&lt;/p&gt;

&lt;p&gt;An exponent part is an E (upper or lower case) followed by an integer part
(which may be prefixed with a plus or minus sign).&lt;/p&gt;

&lt;p&gt;Similar to integers, you may use underscores to enhance readability. Each
underscore must be surrounded by at least one digit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;9_224_617.445_991_228_313
1e1_000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;64-bit (double) precision expected.&lt;/p&gt;

&lt;h2 id=&#34;boolean:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Boolean&lt;/h2&gt;

&lt;p&gt;Booleans are just the tokens you&amp;rsquo;re used to. Always lowercase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;datetime:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Datetime&lt;/h2&gt;

&lt;p&gt;Datetimes are &lt;a href=&#34;http://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1979-05-27T07:32:00Z
1979-05-27T00:32:00-07:00
1979-05-27T00:32:00.999999-07:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Array&lt;/h2&gt;

&lt;p&gt;Arrays are square brackets with other primitives inside. Whitespace is ignored.
Elements are separated by commas. Data types may not be mixed (though all string
types should be considered the same type).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[ 1, 2, 3 ]
[ &amp;quot;red&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;green&amp;quot; ]
[ [ 1, 2 ], [3, 4, 5] ]
[ &amp;quot;all&amp;quot;, &#39;strings&#39;, &amp;quot;&amp;quot;&amp;quot;are the same&amp;quot;&amp;quot;&amp;quot;, &#39;&#39;&#39;type&#39;&#39;&#39;] # this is ok
[ [ 1, 2 ], [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] ] # this is ok
[ 1, 2.0 ] # note: this is NOT ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays can also be multiline. So in addition to ignoring whitespace, arrays also
ignore newlines between the brackets. Terminating commas are ok before the
closing bracket.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;key = [
  1, 2, 3
]

key = [
  1,
  2, # this is ok
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;table:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Table&lt;/h2&gt;

&lt;p&gt;Tables (also known as hash tables or dictionaries) are collections of key/value
pairs. They appear in square brackets on a line by themselves. You can tell them
apart from arrays because arrays are only ever values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[table]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under that, and until the next table or EOF are the key/values of that table.
Keys are on the left of the equals sign and values are on the right. Whitespace
is ignored around key names and values. The key, equals sign, and value must
be on the same line (though some values can be broken over multiple lines).&lt;/p&gt;

&lt;p&gt;Keys may be either bare or quoted. &lt;strong&gt;Bare keys&lt;/strong&gt; may only contain letters,
numbers, underscores, and dashes (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;). &lt;strong&gt;Quoted keys&lt;/strong&gt; follow the
exact same rules as basic strings and allow you to use a much broader set of key
names. Best practice is to use bare keys except when absolutely necessary.&lt;/p&gt;

&lt;p&gt;Key/value pairs within tables are not guaranteed to be in any specific order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[table]
key = &amp;quot;value&amp;quot;
bare_key = &amp;quot;value&amp;quot;
bare-key = &amp;quot;value&amp;quot;

&amp;quot;127.0.0.1&amp;quot; = &amp;quot;value&amp;quot;
&amp;quot;character encoding&amp;quot; = &amp;quot;value&amp;quot;
&amp;quot;ÊŽÇÊž&amp;quot; = &amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dots are prohibited in bare keys because dots are used to signify nested tables!
Naming rules for each dot separated part are the same as for keys (see above).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dog.&amp;quot;tater.man&amp;quot;]
type = &amp;quot;pug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JSON land, that would give you the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;dog&amp;quot;: { &amp;quot;tater.man&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;pug&amp;quot; } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whitespace around dot-separated parts is ignored, however, best practice is to
not use any extraneous whitespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[a.b.c]          # this is best practice
[ d.e.f ]        # same as [d.e.f]
[ g .  h  . i ]  # same as [g.h.i]
[ j . &amp;quot;Êž&amp;quot; . l ]  # same as [j.&amp;quot;Êž&amp;quot;.l]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need to specify all the super-tables if you don&amp;rsquo;t want to. TOML knows
how to do it for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# [x] you
# [x.y] don&#39;t
# [x.y.z] need these
[x.y.z.w] # for this to work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empty tables are allowed and simply have no key/value pairs within them.&lt;/p&gt;

&lt;p&gt;As long as a super-table hasn&amp;rsquo;t been directly defined and hasn&amp;rsquo;t defined a
specific key, you may still write to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[a.b]
c = 1

[a]
d = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You cannot define any key or table more than once. Doing so is invalid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# DO NOT DO THIS

[a]
b = 1

[a]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# DO NOT DO THIS EITHER

[a]
b = 1

[a.b]
c = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All table names and keys must be non-empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# NOT VALID TOML
[]
[a.]
[a..b]
[.b]
[.]
 = &amp;quot;no key name&amp;quot; # not allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inline-table:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Inline Table&lt;/h2&gt;

&lt;p&gt;Inline tables provide a more compact syntax for expressing tables. They are
especially useful for grouped data that can otherwise quickly become verbose.
Inline tables are enclosed in curly braces &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. Within the braces, zero
or more comma separated key/value pairs may appear. Key/value pairs take the
same form as key/value pairs in standard tables. All value types are allowed,
including inline tables.&lt;/p&gt;

&lt;p&gt;Inline tables are intended to appear on a single line. No newlines are allowed
between the curly braces unless they are valid within a value. Even so, it is
strongly discouraged to break an inline table onto multiples lines. If you find
yourself gripped with this desire, it means you should be using standard tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;name = { first = &amp;quot;Tom&amp;quot;, last = &amp;quot;Preston-Werner&amp;quot; }
point = { x = 1, y = 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The inline tables above are identical to the following standard table
definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[name]
first = &amp;quot;Tom&amp;quot;
last = &amp;quot;Preston-Werner&amp;quot;

[point]
x = 1
y = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array-of-tables:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Array of Tables&lt;/h2&gt;

&lt;p&gt;The last type that has not yet been expressed is an array of tables. These can
be expressed by using a table name in double brackets. Each table with the same
double bracketed name will be an element in the array. The tables are inserted
in the order encountered. A double bracketed table without any key/value pairs
will be considered an empty table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[products]]
name = &amp;quot;Hammer&amp;quot;
sku = 738594937

[[products]]

[[products]]
name = &amp;quot;Nail&amp;quot;
sku = 284758393
color = &amp;quot;gray&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JSON land, that would give you the following structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;products&amp;quot;: [
    { &amp;quot;name&amp;quot;: &amp;quot;Hammer&amp;quot;, &amp;quot;sku&amp;quot;: 738594937 },
    { },
    { &amp;quot;name&amp;quot;: &amp;quot;Nail&amp;quot;, &amp;quot;sku&amp;quot;: 284758393, &amp;quot;color&amp;quot;: &amp;quot;gray&amp;quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create nested arrays of tables as well. Just use the same double bracket
syntax on sub-tables. Each double-bracketed sub-table will belong to the most
recently defined table element above it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [fruit.physical]
    color = &amp;quot;red&amp;quot;
    shape = &amp;quot;round&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;granny smith&amp;quot;

[[fruit]]
  name = &amp;quot;banana&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;plantain&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above TOML maps to the following JSON.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;fruit&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;apple&amp;quot;,
      &amp;quot;physical&amp;quot;: {
        &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
        &amp;quot;shape&amp;quot;: &amp;quot;round&amp;quot;
      },
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;red delicious&amp;quot; },
        { &amp;quot;name&amp;quot;: &amp;quot;granny smith&amp;quot; }
      ]
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;banana&amp;quot;,
      &amp;quot;variety&amp;quot;: [
        { &amp;quot;name&amp;quot;: &amp;quot;plantain&amp;quot; }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attempting to define a normal table with the same name as an already established
array must produce an error at parse time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# INVALID TOML DOC
[[fruit]]
  name = &amp;quot;apple&amp;quot;

  [[fruit.variety]]
    name = &amp;quot;red delicious&amp;quot;

  # This table conflicts with the previous table
  [fruit.variety]
    name = &amp;quot;granny smith&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also use inline tables where appropriate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;points = [ { x = 1, y = 2, z = 3 },
           { x = 7, y = 8, z = 9 },
           { x = 2, y = 4, z = 8 } ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;seriously:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Seriously?&lt;/h2&gt;

&lt;p&gt;Yep.&lt;/p&gt;

&lt;h2 id=&#34;but-why:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;But why?&lt;/h2&gt;

&lt;p&gt;Because we need a decent human-readable format that unambiguously maps to a hash
table and the YAML spec is like 80 pages long and gives me rage. No, JSON
doesn&amp;rsquo;t count. You know why.&lt;/p&gt;

&lt;h2 id=&#34;oh-god-you-re-right:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Oh god, you&amp;rsquo;re right&lt;/h2&gt;

&lt;p&gt;Yuuuup. Wanna help? Send a pull request. Or write a parser. BE BRAVE.&lt;/p&gt;

&lt;h2 id=&#34;projects-using-toml:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Projects using TOML&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.crates.io/&#34;&gt;Cargo&lt;/a&gt; - The Rust language&amp;rsquo;s package manager.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt; - Distributed time series database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hekad.readthedocs.org&#34;&gt;Heka&lt;/a&gt; - Stream processing system by Mozilla.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; - Static site generator in Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implementations:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;If you have an implementation, send a pull request adding to this list. Please
note the commit SHA1 or version tag that your parser supports in your Readme.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/LBreedlove/Toml.net&#34;&gt;https://github.com/LBreedlove/Toml.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/rossipedia/toml-net&#34;&gt;https://github.com/rossipedia/toml-net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/RichardVasquez/TomlDotNet&#34;&gt;https://github.com/RichardVasquez/TomlDotNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C#/.NET - &lt;a href=&#34;https://github.com/azyobuzin/HyperTomlProcessor&#34;&gt;https://github.com/azyobuzin/HyperTomlProcessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C (@ajwans) - &lt;a href=&#34;https://github.com/ajwans/libtoml&#34;&gt;https://github.com/ajwans/libtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C (@mzgoddard) - &lt;a href=&#34;https://github.com/mzgoddard/tomlc&#34;&gt;https://github.com/mzgoddard/tomlc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@evilncrazy) - &lt;a href=&#34;https://github.com/evilncrazy/ctoml&#34;&gt;https://github.com/evilncrazy/ctoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@skystrife) - &lt;a href=&#34;https://github.com/skystrife/cpptoml&#34;&gt;https://github.com/skystrife/cpptoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ (@mayah) - &lt;a href=&#34;https://github.com/mayah/tinytoml&#34;&gt;https://github.com/mayah/tinytoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure (@lantiga) - &lt;a href=&#34;https://github.com/lantiga/clj-toml&#34;&gt;https://github.com/lantiga/clj-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure (@manicolosi) - &lt;a href=&#34;https://github.com/manicolosi/clojoml&#34;&gt;https://github.com/manicolosi/clojoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CoffeeScript (@biilmann) - &lt;a href=&#34;https://github.com/biilmann/coffee-toml&#34;&gt;https://github.com/biilmann/coffee-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Common Lisp (@pnathan) - &lt;a href=&#34;https://github.com/pnathan/pp-toml&#34;&gt;https://github.com/pnathan/pp-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;D - &lt;a href=&#34;https://github.com/iccodegr/toml.d&#34;&gt;https://github.com/iccodegr/toml.d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart (@just95) - &lt;a href=&#34;https://github.com/just95/toml.dart&#34;&gt;https://github.com/just95/toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang - &lt;a href=&#34;https://github.com/kalta/etoml.git&#34;&gt;https://github.com/kalta/etoml.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erlang - &lt;a href=&#34;https://github.com/kaos/tomle&#34;&gt;https://github.com/kaos/tomle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs Lisp (@gongoZ) - &lt;a href=&#34;https://github.com/gongo/emacs-toml&#34;&gt;https://github.com/gongo/emacs-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@thompelletier) - &lt;a href=&#34;https://github.com/pelletier/go-toml&#34;&gt;https://github.com/pelletier/go-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@laurent22) - &lt;a href=&#34;https://github.com/laurent22/toml-go&#34;&gt;https://github.com/laurent22/toml-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go w/ Reflection (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@achun) - &lt;a href=&#34;https://github.com/achun/tom-toml&#34;&gt;https://github.com/achun/tom-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go (@naoina) - &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;https://github.com/naoina/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell (@seliopou) - &lt;a href=&#34;https://github.com/seliopou/toml&#34;&gt;https://github.com/seliopou/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haxe (@raincole) - &lt;a href=&#34;https://github.com/raincole/haxetoml&#34;&gt;https://github.com/raincole/haxetoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@agrison) - &lt;a href=&#34;https://github.com/agrison/jtoml&#34;&gt;https://github.com/agrison/jtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@johnlcox) - &lt;a href=&#34;https://github.com/johnlcox/toml4j&#34;&gt;https://github.com/johnlcox/toml4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java (@mwanji) - &lt;a href=&#34;https://github.com/mwanji/toml4j&#34;&gt;https://github.com/mwanji/toml4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java - &lt;a href=&#34;https://github.com/asafh/jtoml&#34;&gt;https://github.com/asafh/jtoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java w/ ANTLR (@MatthiasSchuetz) - &lt;a href=&#34;https://github.com/mschuetz/toml&#34;&gt;https://github.com/mschuetz/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Julia (@pygy) - &lt;a href=&#34;https://github.com/pygy/TOML.jl&#34;&gt;https://github.com/pygy/TOML.jl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Literate CoffeeScript (@JonathanAbrams) - &lt;a href=&#34;https://github.com/JonAbrams/tomljs&#34;&gt;https://github.com/JonAbrams/tomljs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nim (@ziotom78) - &lt;a href=&#34;https://github.com/ziotom78/parsetoml&#34;&gt;https://github.com/ziotom78/parsetoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;node.js/browser - &lt;a href=&#34;https://github.com/ricardobeat/toml.js&#34;&gt;https://github.com/ricardobeat/toml.js&lt;/a&gt; (npm install tomljs)&lt;/li&gt;
&lt;li&gt;node.js - &lt;a href=&#34;https://github.com/BinaryMuse/toml-node&#34;&gt;https://github.com/BinaryMuse/toml-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;node.js/browser (@redhotvengeance) - &lt;a href=&#34;https://github.com/redhotvengeance/topl&#34;&gt;https://github.com/redhotvengeance/topl&lt;/a&gt; (topl npm package)&lt;/li&gt;
&lt;li&gt;node.js/browser (@alexanderbeletsky) - &lt;a href=&#34;https://github.com/alexanderbeletsky/toml-js&#34;&gt;https://github.com/alexanderbeletsky/toml-js&lt;/a&gt; (npm browser amd)&lt;/li&gt;
&lt;li&gt;Objective C (@mneorr) - &lt;a href=&#34;https://github.com/mneorr/toml-objc.git&#34;&gt;https://github.com/mneorr/toml-objc.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Objective-C (@SteveStreza) - &lt;a href=&#34;https://github.com/amazingsyco/TOML&#34;&gt;https://github.com/amazingsyco/TOML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OCaml (@mackwic) &lt;a href=&#34;https://github.com/mackwic/to.ml&#34;&gt;https://github.com/mackwic/to.ml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl (@alexkalderimis) - &lt;a href=&#34;https://github.com/alexkalderimis/config-toml.pl&#34;&gt;https://github.com/alexkalderimis/config-toml.pl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl - &lt;a href=&#34;https://github.com/dlc/toml&#34;&gt;https://github.com/dlc/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@leonelquinteros) - &lt;a href=&#34;https://github.com/leonelquinteros/php-toml.git&#34;&gt;https://github.com/leonelquinteros/php-toml.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@jimbomoss) - &lt;a href=&#34;https://github.com/jamesmoss/toml&#34;&gt;https://github.com/jamesmoss/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@coop182) - &lt;a href=&#34;https://github.com/coop182/toml-php&#34;&gt;https://github.com/coop182/toml-php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@checkdomain) - &lt;a href=&#34;https://github.com/checkdomain/toml&#34;&gt;https://github.com/checkdomain/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@zidizei) - &lt;a href=&#34;https://github.com/zidizei/toml-php&#34;&gt;https://github.com/zidizei/toml-php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@yosymfony) - &lt;a href=&#34;https://github.com/yosymfony/toml&#34;&gt;https://github.com/yosymfony/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@f03lipe) - &lt;a href=&#34;https://github.com/f03lipe/toml-python&#34;&gt;https://github.com/f03lipe/toml-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@uiri) - &lt;a href=&#34;https://github.com/uiri/toml&#34;&gt;https://github.com/uiri/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python - &lt;a href=&#34;https://github.com/bryant/pytoml&#34;&gt;https://github.com/bryant/pytoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@elssar) - &lt;a href=&#34;https://github.com/elssar/tomlgun&#34;&gt;https://github.com/elssar/tomlgun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@marksteve) - &lt;a href=&#34;https://github.com/marksteve/toml-ply&#34;&gt;https://github.com/marksteve/toml-ply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python (@hit9) - &lt;a href=&#34;https://github.com/hit9/toml.py&#34;&gt;https://github.com/hit9/toml.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Racket (@greghendershott) - &lt;a href=&#34;https://github.com/greghendershott/toml&#34;&gt;https://github.com/greghendershott/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby (@jm) - &lt;a href=&#34;https://github.com/jm/toml&#34;&gt;https://github.com/jm/toml&lt;/a&gt; (toml gem)&lt;/li&gt;
&lt;li&gt;Ruby (@eMancu) - &lt;a href=&#34;https://github.com/eMancu/toml-rb&#34;&gt;https://github.com/eMancu/toml-rb&lt;/a&gt; (toml-rb gem)&lt;/li&gt;
&lt;li&gt;Ruby (@charliesome) - &lt;a href=&#34;https://github.com/charliesome/toml2&#34;&gt;https://github.com/charliesome/toml2&lt;/a&gt; (toml2 gem)&lt;/li&gt;
&lt;li&gt;Ruby (@sandeepravi) - &lt;a href=&#34;https://github.com/sandeepravi/tomlp&#34;&gt;https://github.com/sandeepravi/tomlp&lt;/a&gt; (tomlp gem)&lt;/li&gt;
&lt;li&gt;Rust (@mneumann) - &lt;a href=&#34;https://github.com/mneumann/rust-toml&#34;&gt;https://github.com/mneumann/rust-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust (@alexcrichton) - &lt;a href=&#34;https://github.com/alexcrichton/toml-rs&#34;&gt;https://github.com/alexcrichton/toml-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scala - &lt;a href=&#34;https://github.com/axelarge/tomelette&#34;&gt;https://github.com/axelarge/tomelette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;validators:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Validators&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml/tree/master/cmd/tomlv&#34;&gt;https://github.com/BurntSushi/toml/tree/master/cmd/tomlv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-agnostic-test-suite-for-toml-decoders-and-encoders:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Language agnostic test suite for TOML decoders and encoders&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;toml-test (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml-test&#34;&gt;https://github.com/BurntSushi/toml-test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;editor-support:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Editor support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atom - &lt;a href=&#34;https://github.com/atom/language-toml&#34;&gt;https://github.com/atom/language-toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs (@dryman) - &lt;a href=&#34;https://github.com/dryman/toml-mode.el&#34;&gt;https://github.com/dryman/toml-mode.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Notepad++ (@fireforge) - &lt;a href=&#34;https://github.com/fireforge/toml-notepadplusplus&#34;&gt;https://github.com/fireforge/toml-notepadplusplus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sublime Text 2 &amp;amp; 3 (@Gakai) - &lt;a href=&#34;https://github.com/Gakai/sublime_toml_highlighting&#34;&gt;https://github.com/Gakai/sublime_toml_highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Synwrite - &lt;a href=&#34;http://uvviewsoft.com/synwrite/download.html&#34;&gt;http://uvviewsoft.com/synwrite/download.html&lt;/a&gt; ; call Options/ Addons manager/ Install&lt;/li&gt;
&lt;li&gt;TextMate (@infininight) - &lt;a href=&#34;https://github.com/textmate/toml.tmbundle&#34;&gt;https://github.com/textmate/toml.tmbundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim (@cespare) - &lt;a href=&#34;https://github.com/cespare/vim-toml&#34;&gt;https://github.com/cespare/vim-toml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;encoder:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Encoder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dart (@just95) - &lt;a href=&#34;https://github.com/just95/toml.dart&#34;&gt;https://github.com/just95/toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go w/ Reflection (@BurntSushi) - &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP (@ayushchd) - &lt;a href=&#34;https://github.com/ayushchd/php-toml-encoder&#34;&gt;https://github.com/ayushchd/php-toml-encoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;converters:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Converters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;remarshal (@dbohdan) - &lt;a href=&#34;https://github.com/dbohdan/remarshal&#34;&gt;https://github.com/dbohdan/remarshal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yaml2toml (@jtyr) - &lt;a href=&#34;https://github.com/jtyr/yaml2toml-converter&#34;&gt;https://github.com/jtyr/yaml2toml-converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yaml2toml.dart (@just95) - &lt;a href=&#34;https://github.com/just95/yaml2toml.dart&#34;&gt;https://github.com/just95/yaml2toml.dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;organization:5ff9e6c178c0a97810ff2a2c2ec622b5&#34;&gt;Organization&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;toml-lang (@BurntSushi) - &lt;a href=&#34;https://github.com/toml-lang&#34;&gt;https://github.com/toml-lang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
