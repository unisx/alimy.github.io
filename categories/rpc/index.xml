<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rpc on 北 野</title>
    <link>http://alimy.me/categories/rpc/</link>
    <description>Recent content in Rpc on 北 野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Sat, 21 Sep 2019 11:59:00 +0800</lastBuildDate>
    
	<atom:link href="http://alimy.me/categories/rpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cap&#39;n Proto Schema Language</title>
      <link>http://alimy.me/post/dev_201909211159/</link>
      <pubDate>Sat, 21 Sep 2019 11:59:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_201909211159/</guid>
      <description>Schema Language Like Protocol Buffers and Thrift (but unlike JSON or MessagePack), Cap’n Proto messages are strongly-typed and not self-describing. You must define your message structure in a special language, then invoke the Cap’n Proto compiler (capnp compile) to generate source code to manipulate that message type in your desired language.
For example: @0xdbb9ad1f14bf0b36; # unique file ID, generated by `capnp id` struct Person { name @0 :Text; birthdate @3 :Date; email @1 :Text; phones @2 :List(PhoneNumber); struct PhoneNumber { number @0 :Text; type @1 :Type; enum Type { mobile @0; home @1; work @2; } } } struct Date { year @0 :Int16; month @1 :UInt8; day @2 :UInt8; }  Some notes:</description>
    </item>
    
  </channel>
</rss>